import org.aspectjml.ajmlrac.runtime.*;
public privileged aspect AspectJMLRac$JMLRacPost4Project {

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final stringbuilderexample.StringBuilderMultiThreadDemo object$rac): (execution( * stringbuilderexample.StringBuilderMultiThreadDemo..*+.*(..))
          || execution(stringbuilderexample.StringBuilderMultiThreadDemo..*+.new(..))
          || execution( * stringbuilderexample.StringBuilderMultiThreadDemo+.*(..))
          || execution(stringbuilderexample.StringBuilderMultiThreadDemo+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * stringbuilderexample.StringBuilderMultiThreadDemo..*+.*(..))
          || execution(stringbuilderexample.StringBuilderMultiThreadDemo..*+.new(..))
          || execution( * stringbuilderexample.StringBuilderMultiThreadDemo+.*(..))
          || execution(stringbuilderexample.StringBuilderMultiThreadDemo+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final stringbuilderexample.StringBuilderSingleThreadDemo object$rac): (execution( * stringbuilderexample.StringBuilderSingleThreadDemo..*+.*(..))
          || execution(stringbuilderexample.StringBuilderSingleThreadDemo..*+.new(..))
          || execution( * stringbuilderexample.StringBuilderSingleThreadDemo+.*(..))
          || execution(stringbuilderexample.StringBuilderSingleThreadDemo+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * stringbuilderexample.StringBuilderSingleThreadDemo..*+.*(..))
          || execution(stringbuilderexample.StringBuilderSingleThreadDemo..*+.new(..))
          || execution( * stringbuilderexample.StringBuilderSingleThreadDemo+.*(..))
          || execution(stringbuilderexample.StringBuilderSingleThreadDemo+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final stringbuilderexample.StringBuilderThreadSafeHandler object$rac): (execution( * stringbuilderexample.StringBuilderThreadSafeHandler..*+.*(..))
          || execution(stringbuilderexample.StringBuilderThreadSafeHandler..*+.new(..))
          || execution( * stringbuilderexample.StringBuilderThreadSafeHandler+.*(..))
          || execution(stringbuilderexample.StringBuilderThreadSafeHandler+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * stringbuilderexample.StringBuilderThreadSafeHandler..*+.*(..))
          || execution(stringbuilderexample.StringBuilderThreadSafeHandler..*+.new(..))
          || execution( * stringbuilderexample.StringBuilderThreadSafeHandler+.*(..))
          || execution(stringbuilderexample.StringBuilderThreadSafeHandler+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

}