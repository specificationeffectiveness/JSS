import mop.*;
import org.aspectjml.ajmlrac.runtime.*;
import org.aspectjml.lang.annotation.*;
import org.aspectjml.lang.annotation.siesta.Before;
import org.aspectjml.lang.annotation.siesta.Before.*;
import java.util.Map;
import java.util.Map.*;
import java.util.Map;
import java.util.Map.Entry;


privileged aspect AspectJMLRac_mop_Map_ItselfAsValueHandler$f99ff710_602b_42c6_9cb2_e942c77aab1b {

 declare precedence: AspectJMLRac$JMLRacPost4Project, AspectJMLRac_* , *;


  /** Generated by AspectJML to check the exceptional public postcondition of
   * method vioMap_ItselfAsValuePut. */
   after (final java.util.Map map, final java.lang.Object key, final java.lang.Object value) throwing (Throwable rac$e) :
     call(static void mop.Map_ItselfAsValueHandler.vioMap_ItselfAsValuePut(java.util.Map, java.lang.Object, java.lang.Object)) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && args(map, key, value) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "mop.Map_ItselfAsValueHandler.vioMap_ItselfAsValuePut(java.util.Map, java.lang.Object, java.lang.Object)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"mop.Map_ItselfAsValueHandler.java\" by method mop.Map_ItselfAsValueHandler.vioMap_ItselfAsValuePut\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method mop.Map_ItselfAsValueHandler.vioMap_ItselfAsValuePut regarding code at \nFile \"mop.Map_ItselfAsValueHandler.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, 1, "mop.Map_ItselfAsValueHandler.vioMap_ItselfAsValuePut(java.util.Map, java.lang.Object, java.lang.Object)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional public postcondition of
   * method vioMap_ItselfAsValuePutAll. */
   after (final java.util.Map map, final java.util.Map src) throwing (Throwable rac$e) :
     call(static void mop.Map_ItselfAsValueHandler.vioMap_ItselfAsValuePutAll(java.util.Map, java.util.Map)) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && args(map, src) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "mop.Map_ItselfAsValueHandler.vioMap_ItselfAsValuePutAll(java.util.Map, java.util.Map)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"mop.Map_ItselfAsValueHandler.java\" by method mop.Map_ItselfAsValueHandler.vioMap_ItselfAsValuePutAll\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method mop.Map_ItselfAsValueHandler.vioMap_ItselfAsValuePutAll regarding code at \nFile \"mop.Map_ItselfAsValueHandler.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, 1, "mop.Map_ItselfAsValueHandler.vioMap_ItselfAsValuePutAll(java.util.Map, java.util.Map)", rac$e);
  		 }
  		   }
  	 }





  /** Generated by AspectJML to activate the SIESTA handler concer nchecking */
  @org.aspectj.lang.annotation.Aspect
  public static class AspectJMLInnerCC_mop_Map_ItselfAsValueHandler{

  /** Generated by AspectJML/Siesta to check properties for
   * the Java members intercepted by @Before handler vioMap_ItselfAsValuePut. */
  @org.aspectj.lang.annotation.Before("((call(* java.util.Map+.put(Object, Object)) && args(key, value)) && target(java.util.Map))")
  public void vioMap_ItselfAsValuePut_Before(org.aspectj.lang.JoinPoint thisJP, java.lang.Object key, java.lang.Object value) {//#public static void mop.Map_ItselfAsValueHandler.vioMap_ItselfAsValuePut(java.util.Map, java.lang.Object, java.lang.Object)#'mop.Map_ItselfAsValueHandler' (Map_ItselfAsValueHandler.java:20)
  mop.Map_ItselfAsValueHandler.vioMap_ItselfAsValuePut((java.util.Map)thisJP.getTarget(), key, value);
  }

  /** Generated by AspectJML/Siesta to check properties for
   * the Java members intercepted by @Before handler vioMap_ItselfAsValuePutAll. */
  @org.aspectj.lang.annotation.Before("((call(* java.util.Map+.putAll(java.util.Map)) && args(src)) && target(java.util.Map))")
  public void vioMap_ItselfAsValuePutAll_Before(org.aspectj.lang.JoinPoint thisJP, java.util.Map src) {//#public static void mop.Map_ItselfAsValueHandler.vioMap_ItselfAsValuePutAll(java.util.Map, java.util.Map)#'mop.Map_ItselfAsValueHandler' (Map_ItselfAsValueHandler.java:25)
  mop.Map_ItselfAsValueHandler.vioMap_ItselfAsValuePutAll((java.util.Map)thisJP.getTarget(), src);
  }

  }
}
