import mop.*;
import org.aspectjml.ajmlrac.runtime.*;
import org.aspectjml.lang.annotation.*;
import java.util.TreeSet;
import java.util.TreeSet.*;
import org.aspectjml.lang.annotation.siesta.Before;
import org.aspectjml.lang.annotation.siesta.Before.*;
import java.util.Map;
import java.util.Map.Entry;


privileged aspect AspectJMLRac_mop_TreeSet_ComparableHandler$5b7c5d6f_8cb8_4fe2_9cf3_70c6f2109d15 {

 declare precedence: AspectJMLRac$JMLRacPost4Project, AspectJMLRac_* , *;


  /** Generated by AspectJML to check the exceptional public postcondition of
   * method vioTreeSet_ComparableAddAll. */
   after (final java.util.TreeSet collection) throwing (Throwable rac$e) :
     call(static void mop.TreeSet_ComparableHandler.vioTreeSet_ComparableAddAll(java.util.TreeSet)) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && args(collection) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "mop.TreeSet_ComparableHandler.vioTreeSet_ComparableAddAll(java.util.TreeSet)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"mop.TreeSet_ComparableHandler.java\" by method mop.TreeSet_ComparableHandler.vioTreeSet_ComparableAddAll\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method mop.TreeSet_ComparableHandler.vioTreeSet_ComparableAddAll regarding code at \nFile \"mop.TreeSet_ComparableHandler.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, 1, "mop.TreeSet_ComparableHandler.vioTreeSet_ComparableAddAll(java.util.TreeSet)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional public postcondition of
   * method vioTreeSet_ComparableAdd. */
   after (final java.util.TreeSet treeSet) throwing (Throwable rac$e) :
     call(static void mop.TreeSet_ComparableHandler.vioTreeSet_ComparableAdd(java.util.TreeSet)) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && args(treeSet) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "mop.TreeSet_ComparableHandler.vioTreeSet_ComparableAdd(java.util.TreeSet)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"mop.TreeSet_ComparableHandler.java\" by method mop.TreeSet_ComparableHandler.vioTreeSet_ComparableAdd\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method mop.TreeSet_ComparableHandler.vioTreeSet_ComparableAdd regarding code at \nFile \"mop.TreeSet_ComparableHandler.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, 1, "mop.TreeSet_ComparableHandler.vioTreeSet_ComparableAdd(java.util.TreeSet)", rac$e);
  		 }
  		   }
  	 }





  /** Generated by AspectJML to activate the SIESTA handler concer nchecking */
  @org.aspectj.lang.annotation.Aspect
  public static class AspectJMLInnerCC_mop_TreeSet_ComparableHandler{

  /** Generated by AspectJML/Siesta to check properties for
   * the Java members intercepted by @Before handler vioTreeSet_ComparableAddAll. */
  @org.aspectj.lang.annotation.Before("(call(* java.util.Collection+.addAll(java.util.Collection)) && target(java.util.TreeSet))")
  public void vioTreeSet_ComparableAddAll_Before(org.aspectj.lang.JoinPoint thisJP) {//#public static void mop.TreeSet_ComparableHandler.vioTreeSet_ComparableAddAll(java.util.TreeSet)#'mop.TreeSet_ComparableHandler' (TreeSet_ComparableHandler.java:13)
  mop.TreeSet_ComparableHandler.vioTreeSet_ComparableAddAll((java.util.TreeSet)thisJP.getTarget());
  }

  /** Generated by AspectJML/Siesta to check properties for
   * the Java members intercepted by @Before handler vioTreeSet_ComparableAdd. */
  @org.aspectj.lang.annotation.Before("(call(* java.util.Collection+.add(java.lang.Object)) && target(java.util.TreeSet))")
  public void vioTreeSet_ComparableAdd_Before(org.aspectj.lang.JoinPoint thisJP) {//#public static void mop.TreeSet_ComparableHandler.vioTreeSet_ComparableAdd(java.util.TreeSet)#'mop.TreeSet_ComparableHandler' (TreeSet_ComparableHandler.java:20)
  mop.TreeSet_ComparableHandler.vioTreeSet_ComparableAdd((java.util.TreeSet)thisJP.getTarget());
  }

  }
}
