import mop.*;
import org.aspectjml.ajmlrac.runtime.*;
import org.aspectjml.lang.annotation.*;
import org.aspectjml.lang.annotation.siesta.Before;
import org.aspectjml.lang.annotation.siesta.Before.*;
import java.util.Collection;
import java.util.Collection.*;
import java.util.List;
import java.util.List.*;
import java.util.Map;
import java.util.Map.Entry;


privileged aspect AspectJMLRac_mop_Collections_ImplementComparableHandler$f336e842_edae_4d41_a3b9_a94157b92b91 {

 declare precedence: AspectJMLRac$JMLRacPost4Project, AspectJMLRac_* , *;


  /** Generated by AspectJML to check the exceptional public postcondition of
   * method vioCollections_ImplementComparable_invalid_minmax. */
   after (final java.util.Collection collection) throwing (Throwable rac$e) :
     call(static void mop.Collections_ImplementComparableHandler.vioCollections_ImplementComparable_invalid_minmax(java.util.Collection)) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && args(collection) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "mop.Collections_ImplementComparableHandler.vioCollections_ImplementComparable_invalid_minmax(java.util.Collection)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"mop.Collections_ImplementComparableHandler.java\" by method mop.Collections_ImplementComparableHandler.vioCollections_ImplementComparable_invalid_minmax\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method mop.Collections_ImplementComparableHandler.vioCollections_ImplementComparable_invalid_minmax regarding code at \nFile \"mop.Collections_ImplementComparableHandler.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, 1, "mop.Collections_ImplementComparableHandler.vioCollections_ImplementComparable_invalid_minmax(java.util.Collection)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional public postcondition of
   * method vioCollections_ImplementComparable_invalid_sort. */
   after (final java.util.List list) throwing (Throwable rac$e) :
     call(static void mop.Collections_ImplementComparableHandler.vioCollections_ImplementComparable_invalid_sort(java.util.List)) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && args(list) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "mop.Collections_ImplementComparableHandler.vioCollections_ImplementComparable_invalid_sort(java.util.List)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"mop.Collections_ImplementComparableHandler.java\" by method mop.Collections_ImplementComparableHandler.vioCollections_ImplementComparable_invalid_sort\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method mop.Collections_ImplementComparableHandler.vioCollections_ImplementComparable_invalid_sort regarding code at \nFile \"mop.Collections_ImplementComparableHandler.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, 1, "mop.Collections_ImplementComparableHandler.vioCollections_ImplementComparable_invalid_sort(java.util.List)", rac$e);
  		 }
  		   }
  	 }





//  /** Generated by AspectJML to activate the SIESTA handler concer nchecking */
//  @org.aspectj.lang.annotation.Aspect
//  public static class AspectJMLInnerCC_mop_Collections_ImplementComparableHandler{
//
//  /** Generated by AspectJML/Siesta to check properties for
//   * the Java members intercepted by @Before handler vioCollections_ImplementComparable_invalid_minmax. */
//  @org.aspectj.lang.annotation.Before("((call(* java.util.Collections.min(java.util.Collection)) || call(* java.util.Collections.max(java.util.Collection))) && target(java.util.Collection))")
//  public void vioCollections_ImplementComparable_invalid_minmax_Before(org.aspectj.lang.JoinPoint thisJP) {//#public static void mop.Collections_ImplementComparableHandler.vioCollections_ImplementComparable_invalid_minmax(java.util.Collection)#'mop.Collections_ImplementComparableHandler' (Collections_ImplementComparableHandler.java:12)
//  mop.Collections_ImplementComparableHandler.vioCollections_ImplementComparable_invalid_minmax((java.util.Collection)thisJP.getTarget());
//  }
//
//  /** Generated by AspectJML/Siesta to check properties for
//   * the Java members intercepted by @Before handler vioCollections_ImplementComparable_invalid_sort. */
//  @org.aspectj.lang.annotation.Before("(call(void java.util.Collections.sort(java.util.List)) && target(java.util.List))")
//  public void vioCollections_ImplementComparable_invalid_sort_Before(org.aspectj.lang.JoinPoint thisJP) {//#public static void mop.Collections_ImplementComparableHandler.vioCollections_ImplementComparable_invalid_sort(java.util.List)#'mop.Collections_ImplementComparableHandler' (Collections_ImplementComparableHandler.java:18)
//  mop.Collections_ImplementComparableHandler.vioCollections_ImplementComparable_invalid_sort((java.util.List)thisJP.getTarget());
//  }
//
//  }
}
