import mop.*;
import org.aspectjml.ajmlrac.runtime.*;
import org.aspectjml.lang.annotation.*;
import org.aspectjml.lang.annotation.siesta.Before;
import org.aspectjml.lang.annotation.siesta.Before.*;

import java.io.IOException;
import java.util.Iterator;
import java.util.Iterator.*;
import java.util.Map;
import java.util.Map.Entry;


privileged aspect AspectJMLRac_mop_Iterator_RemoveOnceHandler$3c96de90_cb82_4ef4_9e78_6e1dc94fd10e {

 declare precedence: AspectJMLRac$JMLRacPost4Project, AspectJMLRac_* , *;

  /** Generated by AspectJML to check the exceptional public postcondition of
   * method vioIterator_RemoveOnce. */
   after (final java.util.Iterator i) throwing (Throwable rac$e) :
     call(static void mop.Iterator_RemoveOnceHandler.vioIterator_RemoveOnce(java.util.Iterator)) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && args(i) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "mop.Iterator_RemoveOnceHandler.vioIterator_RemoveOnce(java.util.Iterator)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"mop.Iterator_RemoveOnceHandler.java\" by method mop.Iterator_RemoveOnceHandler.vioIterator_RemoveOnce\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method mop.Iterator_RemoveOnceHandler.vioIterator_RemoveOnce regarding code at \nFile \"mop.Iterator_RemoveOnceHandler.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, 1, "mop.Iterator_RemoveOnceHandler.vioIterator_RemoveOnce(java.util.Iterator)", rac$e);
  		 }
  		   }
  	 }





  /** Generated by AspectJML to activate the SIESTA handler concer nchecking */
  @org.aspectj.lang.annotation.Aspect
  public static class AspectJMLInnerCC_mop_Iterator_RemoveOnceHandler{
	  private String[] list= null;
  /** Generated by AspectJML/Siesta to check properties for
   * the Java members intercepted by @Before handler vioIterator_RemoveOnce. */
  @org.aspectj.lang.annotation.Before("(call(void java.util.Iterator+.remove()) && target(java.util.Iterator))")
  public void vioIterator_RemoveOnce_Before(org.aspectj.lang.JoinPoint thisJP) {//#public static void mop.Iterator_RemoveOnceHandler.vioIterator_RemoveOnce(java.util.Iterator)#'mop.Iterator_RemoveOnceHandler' (Iterator_RemoveOnceHandler.java:20)
  mop.Iterator_RemoveOnceHandler.vioIterator_RemoveOnce((java.util.Iterator)thisJP.getTarget(), semantic_mop_Closeable_MultipleCloseHandler(thisJP));
  }
  private String[] semantic_mop_Closeable_MultipleCloseHandler(org.aspectj.lang.JoinPoint thisJP) {
		try {
			list =  SemanticParser.historyOf(thisJP.getStaticPart().getSourceLocation());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	 return list; 
  }
  }
}
