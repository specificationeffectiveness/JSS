import mop.*;
import org.aspectjml.ajmlrac.runtime.*;
import org.aspectjml.lang.annotation.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ByteArrayInputStream.*;
import java.io.InputStream;
import java.io.InputStream.*;
import java.io.StringBufferInputStream;
import java.io.StringBufferInputStream.*;
import org.aspectjml.lang.annotation.siesta.Before;
import org.aspectjml.lang.annotation.siesta.Before.*;
import java.util.Map;
import java.util.Map.Entry;


privileged aspect AspectJMLRac_mop_InputStream_ManipulateAfterCloseHandler$b58b607f_fa3d_4eeb_b2ba_ef53bb929907 {

 declare precedence: AspectJMLRac$JMLRacPost4Project, AspectJMLRac_* , *;

  /** Generated by AspectJML to check the exceptional public postcondition of
   * method vioInputStream_ManipulateAfterClose. */
   after (final java.io.InputStream inputStream) throwing (Throwable rac$e) :
     call(static void mop.InputStream_ManipulateAfterCloseHandler.vioInputStream_ManipulateAfterClose(java.io.InputStream)) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && args(inputStream) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "mop.InputStream_ManipulateAfterCloseHandler.vioInputStream_ManipulateAfterClose(java.io.InputStream)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"mop.InputStream_ManipulateAfterCloseHandler.java\" by method mop.InputStream_ManipulateAfterCloseHandler.vioInputStream_ManipulateAfterClose\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method mop.InputStream_ManipulateAfterCloseHandler.vioInputStream_ManipulateAfterClose regarding code at \nFile \"mop.InputStream_ManipulateAfterCloseHandler.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, 1, "mop.InputStream_ManipulateAfterCloseHandler.vioInputStream_ManipulateAfterClose(java.io.InputStream)", rac$e);
  		 }
  		   }
  	 }





  /** Generated by AspectJML to activate the SIESTA handler concer nchecking */
  @org.aspectj.lang.annotation.Aspect
  public static class AspectJMLInnerCC_mop_InputStream_ManipulateAfterCloseHandler{
	  private String[] list= null;
  /** Generated by AspectJML/Siesta to check properties for
   * the Java members intercepted by @Before handler vioInputStream_ManipulateAfterClose. */
  @org.aspectj.lang.annotation.Before("(call(* java.io.InputStream+.close()) && target(java.io.InputStream))")
  public void vioInputStream_ManipulateAfterClose_Before(org.aspectj.lang.JoinPoint thisJP) {//#public static void mop.InputStream_ManipulateAfterCloseHandler.vioInputStream_ManipulateAfterClose(java.io.InputStream)#'mop.InputStream_ManipulateAfterCloseHandler' (InputStream_ManipulateAfterCloseHandler.java:12)
  mop.InputStream_ManipulateAfterCloseHandler.vioInputStream_ManipulateAfterClose((java.io.InputStream)thisJP.getTarget(), semantic_mop_ByteArrayOutputStream_FlushBeforeRetrieve(thisJP));
  }

  private String[] semantic_mop_ByteArrayOutputStream_FlushBeforeRetrieve(org.aspectj.lang.JoinPoint thisJP) {
		try {
			list =  SemanticParser.historyOf(thisJP.getStaticPart().getSourceLocation());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	 return list; 
  }
  }
}
