package org.jsoup.parser;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        parseErrorList8.clear();
        boolean boolean12 = parseErrorList8.isEmpty();
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        boolean boolean16 = parseErrorList14.canAddError();
        org.jsoup.parser.ParseError parseError19 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str20 = parseError19.getErrorMessage();
        boolean boolean21 = parseErrorList14.add(parseError19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        org.jsoup.parser.Token.Tag tag31 = tokeniser28.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype32 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype33 = doctype32.asDoctype();
        java.lang.String str34 = doctype32.tokenType();
        tokeniser28.emit((org.jsoup.parser.Token) doctype32);
        org.jsoup.parser.ITokeniserState iTokeniserState36 = tokeniser28.getState();
        org.jsoup.parser.Token.Comment comment37 = new org.jsoup.parser.Token.Comment();
        java.lang.String str38 = comment37.toString();
        java.lang.StringBuilder stringBuilder39 = comment37.data;
        boolean boolean40 = comment37.isEndTag();
        boolean boolean41 = comment37.isComment();
        tokeniser28.commentPending = comment37;
        int int43 = parseErrorList14.lastIndexOf((java.lang.Object) comment37);
        boolean boolean44 = parseErrorList8.contains((java.lang.Object) comment37);
        org.jsoup.parser.TokenQueue tokenQueue46 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str48 = tokenQueue46.chompTo("Doctype");
        boolean boolean49 = parseErrorList8.contains((java.lang.Object) str48);
        java.lang.String str50 = parseErrorList8.toString();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream51 = parseErrorList8.parallelStream();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertNotNull(doctype33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Doctype" + "'", str34, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<!---->" + "'", str38, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder39);
        org.junit.Assert.assertEquals(stringBuilder39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "EndTag" + "'", str48, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertNotNull(parseErrorStream51);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        org.jsoup.parser.Token.StartTag startTag19 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes20 = startTag19.getAttributes();
        org.jsoup.parser.Token.StartTag startTag21 = new org.jsoup.parser.Token.StartTag("<!---->", attributes20);
        org.jsoup.nodes.Element element22 = htmlTreeBuilder0.insert(startTag21);
        boolean boolean24 = htmlTreeBuilder0.inScope("[]");
        org.jsoup.parser.Tokeniser tokeniser25 = htmlTreeBuilder0.tokeniser;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState26 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag27 = new org.jsoup.parser.Token.EndTag();
        endTag27.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder29 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int34 = parseErrorList33.getMaxSize();
        org.jsoup.nodes.Document document35 = htmlTreeBuilder29.parse("0: Doctype", "hi!", parseErrorList33);
        boolean boolean36 = htmlTreeBuilderState26.process((org.jsoup.parser.Token) endTag27, htmlTreeBuilder29);
        htmlTreeBuilder29.clearStackToTableContext();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder38 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList42 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int43 = parseErrorList42.getMaxSize();
        org.jsoup.nodes.Document document44 = htmlTreeBuilder38.parse("0: Doctype", "hi!", parseErrorList42);
        boolean boolean45 = htmlTreeBuilder38.framesetOk();
        org.jsoup.nodes.Document document48 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder38.setHeadElement((org.jsoup.nodes.Element) document48);
        org.jsoup.nodes.Document document52 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder38.setHeadElement((org.jsoup.nodes.Element) document52);
        htmlTreeBuilder38.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder56 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList60 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int61 = parseErrorList60.getMaxSize();
        org.jsoup.nodes.Document document62 = htmlTreeBuilder56.parse("0: Doctype", "hi!", parseErrorList60);
        boolean boolean63 = htmlTreeBuilder56.framesetOk();
        org.jsoup.nodes.Document document66 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder56.setHeadElement((org.jsoup.nodes.Element) document66);
        org.jsoup.nodes.Document document70 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder56.setHeadElement((org.jsoup.nodes.Element) document70);
        htmlTreeBuilder38.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document70);
        htmlTreeBuilder29.push((org.jsoup.nodes.Element) document70);
        org.jsoup.parser.Token.Comment comment74 = new org.jsoup.parser.Token.Comment();
        java.lang.String str75 = comment74.toString();
        java.lang.StringBuilder stringBuilder76 = comment74.data;
        boolean boolean77 = comment74.isEndTag();
        boolean boolean78 = comment74.isEOF();
        htmlTreeBuilder29.insert(comment74);
        tokeniser25.emit((org.jsoup.parser.Token) comment74);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(attributes20);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(tokeniser25);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState26);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(parseErrorList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertNotNull(parseErrorList60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(document62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(document66);
        org.junit.Assert.assertNotNull(document70);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "<!---->" + "'", str75, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder76);
        org.junit.Assert.assertEquals(stringBuilder76.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList1.iterator();
        int int5 = parseErrorList1.getMaxSize();
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isData();
        boolean boolean3 = tag1.formatAsBlock();
        boolean boolean4 = tag1.isBlock();
        boolean boolean5 = tag1.isSelfClosing();
        java.lang.String str6 = tag1.getName();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean4 = characterReader1.matchesDigit();
        java.lang.String str5 = characterReader1.toString();
        boolean boolean7 = characterReader1.matches(' ');
        boolean boolean9 = characterReader1.matchConsumeIgnoreCase("S");
        char char10 = characterReader1.current();
        java.lang.String str11 = characterReader1.consumeAsString();
        boolean boolean12 = characterReader1.isEmpty();
        java.lang.String str13 = characterReader1.consumeLetterThenDigitSequence();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder14 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int19 = parseErrorList18.getMaxSize();
        org.jsoup.nodes.Document document20 = htmlTreeBuilder14.parse("0: Doctype", "hi!", parseErrorList18);
        boolean boolean21 = htmlTreeBuilder14.framesetOk();
        org.jsoup.parser.Parser parser22 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser24 = parser22.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document27 = parser22.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document30 = parser22.parseInput("<hi!>", "[]");
        htmlTreeBuilder14.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document30);
        boolean boolean32 = htmlTreeBuilder14.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder33 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList38 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream41 = parseErrorList40.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList40.iterator();
        boolean boolean43 = parseErrorList38.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40);
        xmlTreeBuilder33.initialiseParse("<!---->", "hi!", parseErrorList38);
        org.jsoup.parser.ParseErrorList parseErrorList48 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document49 = xmlTreeBuilder33.parse("", "[]", parseErrorList48);
        boolean boolean50 = htmlTreeBuilder14.isInActiveFormattingElements((org.jsoup.nodes.Element) document49);
        org.jsoup.nodes.Element element52 = htmlTreeBuilder14.insert("<!---->");
        org.jsoup.parser.Token.StartTag startTag54 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag54.appendTagName("hi!");
        startTag54.appendAttributeName('4');
        boolean boolean59 = htmlTreeBuilder14.process((org.jsoup.parser.Token) startTag54);
        org.jsoup.parser.Token.EndTag endTag60 = new org.jsoup.parser.Token.EndTag();
        char[] charArray63 = new char[] { '#', '#' };
        endTag60.appendAttributeValue(charArray63);
        endTag60.appendAttributeValue(' ');
        char[] charArray68 = new char[] { '4' };
        endTag60.appendAttributeValue(charArray68);
        startTag54.appendAttributeValue(charArray68);
        boolean boolean71 = characterReader1.matchesAny(charArray68);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + 't' + "'", char10 == 't');
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "t" + "'", str11, "t");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "artTag" + "'", str13, "artTag");
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(parser24);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertNotNull(parseErrorStream41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(parseErrorList48);
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(element52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[#, #]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[4]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.resetInsertionMode();
        org.jsoup.nodes.Element element8 = htmlTreeBuilder0.currentElement();
        boolean boolean10 = htmlTreeBuilder0.inButtonScope("-1: []");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState11 = htmlTreeBuilder0.state();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState20 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder12.error(htmlTreeBuilderState20);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState22 = null;
        htmlTreeBuilder12.transition(htmlTreeBuilderState22);
        htmlTreeBuilder12.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement26 = htmlTreeBuilder12.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder27 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        org.jsoup.nodes.Document document33 = htmlTreeBuilder27.parse("0: Doctype", "hi!", parseErrorList31);
        org.jsoup.parser.ParseErrorList parseErrorList37 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream38 = parseErrorList37.stream();
        boolean boolean39 = parseErrorList37.canAddError();
        org.jsoup.nodes.Document document40 = htmlTreeBuilder27.parse("EndTag", "hi!#", parseErrorList37);
        java.lang.String[] strArray48 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean49 = htmlTreeBuilder27.inScope("hi!#", strArray48);
        org.jsoup.parser.ParseErrorList parseErrorList54 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document55 = htmlTreeBuilder27.parse("0: Doctype", "", parseErrorList54);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder56 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document57 = xmlTreeBuilder56.doc;
        org.jsoup.parser.ParseErrorList parseErrorList61 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int62 = parseErrorList61.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray63 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList64 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList64, parseErrorArray63);
        org.jsoup.parser.ParseError[] parseErrorArray66 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList67 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList67, parseErrorArray66);
        boolean boolean69 = parseErrorList64.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList67);
        org.jsoup.parser.ParseError[] parseErrorArray70 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList71 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList71, parseErrorArray70);
        boolean boolean73 = parseErrorList67.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList71);
        parseErrorList71.clear();
        boolean boolean75 = parseErrorList61.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList71);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor76 = parseErrorList61.iterator();
        org.jsoup.nodes.Document document77 = xmlTreeBuilder56.parse("<hi!>", "0: []", parseErrorList61);
        htmlTreeBuilder27.push((org.jsoup.nodes.Element) document77);
        htmlTreeBuilder12.setHeadElement((org.jsoup.nodes.Element) document77);
        boolean boolean80 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document77);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState11);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState20);
        org.junit.Assert.assertNull(formElement26);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(parseErrorList37);
        org.junit.Assert.assertNotNull(parseErrorStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNull(document57);
        org.junit.Assert.assertNotNull(parseErrorList61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(parseErrorArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(parseErrorArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(parseErrorItor76);
        org.junit.Assert.assertNotNull(document77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.parser.TokenQueue tokenQueue38 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean39 = tokenQueue38.isEmpty();
        boolean boolean40 = tokenQueue38.consumeWhitespace();
        java.lang.String str41 = tokenQueue38.consumeWord();
        boolean boolean42 = tokenQueue38.matchesWhitespace();
        java.lang.String[] strArray47 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str48 = tokenQueue38.consumeToAny(strArray47);
        boolean boolean49 = htmlTreeBuilder0.inScope(strArray47);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList50 = htmlTreeBuilder0.getStack();
        org.jsoup.parser.ParseErrorList parseErrorList52 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream53 = parseErrorList52.stream();
        boolean boolean54 = parseErrorList52.canAddError();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState55 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag56 = new org.jsoup.parser.Token.EndTag();
        endTag56.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder58 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList62 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int63 = parseErrorList62.getMaxSize();
        org.jsoup.nodes.Document document64 = htmlTreeBuilder58.parse("0: Doctype", "hi!", parseErrorList62);
        boolean boolean65 = htmlTreeBuilderState55.process((org.jsoup.parser.Token) endTag56, htmlTreeBuilder58);
        htmlTreeBuilder58.baseUri = "</hi![]>";
        boolean boolean68 = parseErrorList52.equals((java.lang.Object) htmlTreeBuilder58);
        org.jsoup.nodes.Document document69 = htmlTreeBuilder58.getDocument();
        boolean boolean70 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document69);
        org.jsoup.nodes.Element element71 = htmlTreeBuilder0.pop();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "EndTag" + "'", str41, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(elementList50);
        org.junit.Assert.assertNotNull(parseErrorList52);
        org.junit.Assert.assertNotNull(parseErrorStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState55);
        org.junit.Assert.assertNotNull(parseErrorList62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(document64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(document69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(element71);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder13.error(htmlTreeBuilderState21);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState23 = null;
        htmlTreeBuilder13.transition(htmlTreeBuilderState23);
        htmlTreeBuilder13.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList27 = htmlTreeBuilder13.getPendingTableCharacters();
        htmlTreeBuilder0.setPendingTableCharacters(characterList27);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder29 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int34 = parseErrorList33.getMaxSize();
        org.jsoup.nodes.Document document35 = htmlTreeBuilder29.parse("0: Doctype", "hi!", parseErrorList33);
        htmlTreeBuilder29.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray38 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList39 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList39, characterArray38);
        htmlTreeBuilder29.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList39);
        boolean boolean42 = htmlTreeBuilder29.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag44 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement46 = htmlTreeBuilder29.insertForm(startTag44, true);
        htmlTreeBuilder29.baseUri = "[]";
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState49 = org.jsoup.parser.HtmlTreeBuilderState.InTableText;
        htmlTreeBuilder29.error(htmlTreeBuilderState49);
        htmlTreeBuilder0.error(htmlTreeBuilderState49);
        org.jsoup.parser.ParseErrorList parseErrorList52 = htmlTreeBuilder0.errors;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder53 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList57 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int58 = parseErrorList57.getMaxSize();
        org.jsoup.nodes.Document document59 = htmlTreeBuilder53.parse("0: Doctype", "hi!", parseErrorList57);
        htmlTreeBuilder53.generateImpliedEndTags("hi!#");
        htmlTreeBuilder53.generateImpliedEndTags();
        org.jsoup.parser.Token token63 = htmlTreeBuilder53.currentToken;
        org.jsoup.parser.ParseErrorList parseErrorList67 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream68 = parseErrorList67.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor69 = parseErrorList67.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor70 = parseErrorList67.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList72 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int73 = parseErrorList72.getMaxSize();
        boolean boolean74 = parseErrorList67.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList72);
        org.jsoup.nodes.Document document75 = htmlTreeBuilder53.parse("[]", "hi!", parseErrorList72);
        org.jsoup.nodes.Element element76 = htmlTreeBuilder53.pop();
        htmlTreeBuilder0.push(element76);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState21);
        org.junit.Assert.assertNotNull(characterList27);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNotNull(characterArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(formElement46);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState49);
        org.junit.Assert.assertNotNull(parseErrorList52);
        org.junit.Assert.assertNotNull(parseErrorList57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertNotNull(token63);
        org.junit.Assert.assertNotNull(parseErrorList67);
        org.junit.Assert.assertNotNull(parseErrorStream68);
        org.junit.Assert.assertNotNull(parseErrorItor69);
        org.junit.Assert.assertNotNull(parseErrorItor70);
        org.junit.Assert.assertNotNull(parseErrorList72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(document75);
        org.junit.Assert.assertNotNull(element76);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.parser.TokenQueue tokenQueue38 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean39 = tokenQueue38.isEmpty();
        boolean boolean40 = tokenQueue38.consumeWhitespace();
        java.lang.String str41 = tokenQueue38.consumeWord();
        boolean boolean42 = tokenQueue38.matchesWhitespace();
        java.lang.String[] strArray47 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str48 = tokenQueue38.consumeToAny(strArray47);
        boolean boolean49 = htmlTreeBuilder0.inScope(strArray47);
        org.jsoup.parser.CharacterReader characterReader50 = null;
        org.jsoup.parser.ParseErrorList parseErrorList52 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream53 = parseErrorList52.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor54 = parseErrorList52.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList52.iterator();
        org.jsoup.parser.Tokeniser tokeniser56 = new org.jsoup.parser.Tokeniser(characterReader50, parseErrorList52);
        org.jsoup.parser.Token.Tag tag57 = tokeniser56.tagPending;
        tokeniser56.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag61 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType62 = startTag61.type;
        startTag61.appendTagName('#');
        tokeniser56.tagPending = startTag61;
        org.jsoup.parser.TokeniserState tokeniserState66 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser56.transition((org.jsoup.parser.ITokeniserState) tokeniserState66);
        org.jsoup.parser.Token.Doctype doctype68 = new org.jsoup.parser.Token.Doctype();
        boolean boolean69 = doctype68.isCharacter();
        tokeniser56.doctypePending = doctype68;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState71 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype72 = new org.jsoup.parser.Token.Doctype();
        boolean boolean73 = doctype72.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder74 = null;
        boolean boolean75 = htmlTreeBuilderState71.process((org.jsoup.parser.Token) doctype72, htmlTreeBuilder74);
        java.lang.StringBuilder stringBuilder76 = doctype72.name;
        tokeniser56.dataBuffer = stringBuilder76;
        org.jsoup.parser.Token.EndTag endTag78 = new org.jsoup.parser.Token.EndTag();
        char[] charArray81 = new char[] { '#', '#' };
        endTag78.appendAttributeValue(charArray81);
        endTag78.appendAttributeValue(' ');
        char[] charArray86 = new char[] { '4' };
        endTag78.appendAttributeValue(charArray86);
        tokeniser56.emit(charArray86);
        htmlTreeBuilder0.tokeniser = tokeniser56;
        htmlTreeBuilder0.clearStackToTableContext();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "EndTag" + "'", str41, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(parseErrorList52);
        org.junit.Assert.assertNotNull(parseErrorStream53);
        org.junit.Assert.assertNotNull(parseErrorItor54);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertNull(tag57);
        org.junit.Assert.assertTrue("'" + tokenType62 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType62.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(stringBuilder76);
        org.junit.Assert.assertEquals(stringBuilder76.toString(), "");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[#, #]");
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[4]");
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        boolean boolean16 = htmlTreeBuilder9.framesetOk();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder9.setHeadElement((org.jsoup.nodes.Element) document19);
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder9.setHeadElement((org.jsoup.nodes.Element) document23);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder26 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int31 = parseErrorList30.getMaxSize();
        org.jsoup.nodes.Document document32 = htmlTreeBuilder26.parse("0: Doctype", "hi!", parseErrorList30);
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream37 = parseErrorList36.stream();
        boolean boolean38 = parseErrorList36.canAddError();
        org.jsoup.nodes.Document document39 = htmlTreeBuilder26.parse("EndTag", "hi!#", parseErrorList36);
        java.lang.String[] strArray47 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean48 = htmlTreeBuilder26.inScope("hi!#", strArray47);
        boolean boolean49 = htmlTreeBuilder9.inScope("hi!#", strArray47);
        htmlTreeBuilder0.popStackToClose(strArray47);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState51 = htmlTreeBuilder0.originalState();
        htmlTreeBuilder0.markInsertionMode();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertNotNull(parseErrorStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(htmlTreeBuilderState51);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype12 = tokeniser6.doctypePending;
        org.jsoup.parser.Token.Comment comment13 = new org.jsoup.parser.Token.Comment();
        java.lang.String str14 = comment13.toString();
        java.lang.StringBuilder stringBuilder15 = comment13.data;
        boolean boolean16 = comment13.isEndTag();
        java.lang.String str17 = comment13.toString();
        tokeniser6.commentPending = comment13;
        org.jsoup.parser.ITokeniserState iTokeniserState19 = tokeniser6.getState();
        org.jsoup.parser.Token.Tag tag21 = tokeniser6.createTagPending(true);
        boolean boolean22 = tokeniser6.isAppropriateEndTagToken();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNull(doctype12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "<!---->" + "'", str14, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<!---->" + "'", str17, "<!---->");
        org.junit.Assert.assertNotNull(iTokeniserState19);
        org.junit.Assert.assertNotNull(tag21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        tokeniser6.acknowledgeSelfClosingFlag();
        tokeniser6.emit('#');
        org.jsoup.parser.Token.Tag tag19 = tokeniser6.tagPending;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tag19);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        boolean boolean9 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList7);
        org.jsoup.parser.Token.Tag tag12 = tokeniser10.createTagPending(true);
        tokeniser10.emit('a');
        org.jsoup.parser.Token.Comment comment15 = tokeniser10.commentPending;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.ScriptDataEscapedDash;
        tokeniser10.eofError((org.jsoup.parser.ITokeniserState) tokeniserState16);
        org.jsoup.parser.Token.Tag tag18 = tokeniser10.tagPending;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertNull(comment15);
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertNotNull(tag18);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        char char6 = tokenQueue1.peek();
        boolean boolean8 = tokenQueue1.matchChomp("<hi!#>");
        boolean boolean9 = tokenQueue1.consumeWhitespace();
        boolean boolean10 = tokenQueue1.consumeWhitespace();
        // The following exception was thrown during execution in test generation
        try {
            tokenQueue1.consume("0: []");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Queue did not match expected sequence");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\000' + "'", char6 == '\000');
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        java.lang.String str2 = characterReader1.consumeToEnd();
        int int4 = characterReader1.nextIndexOf('a');
        java.lang.String str5 = characterReader1.consumeDigitSequence();
        boolean boolean7 = characterReader1.matchesIgnoreCase("0: []");
        characterReader1.mark();
        int int9 = characterReader1.pos();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder10 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader11 = null;
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList13.iterator();
        org.jsoup.parser.Tokeniser tokeniser17 = new org.jsoup.parser.Tokeniser(characterReader11, parseErrorList13);
        xmlTreeBuilder10.tokeniser = tokeniser17;
        org.jsoup.parser.Tokeniser tokeniser19 = xmlTreeBuilder10.tokeniser;
        org.jsoup.parser.ITokeniserState iTokeniserState20 = tokeniser19.getState();
        tokeniser19.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype22 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str23 = doctype22.getSystemIdentifier();
        boolean boolean24 = doctype22.forceQuirks;
        java.lang.String str25 = doctype22.getPublicIdentifier();
        java.lang.StringBuilder stringBuilder26 = doctype22.publicIdentifier;
        tokeniser19.dataBuffer = stringBuilder26;
        // The following exception was thrown during execution in test generation
        try {
            int int28 = characterReader1.nextIndexOf((java.lang.CharSequence) stringBuilder26);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "StartTag" + "'", str2, "StartTag");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(tokeniser19);
        org.junit.Assert.assertNotNull(iTokeniserState20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(stringBuilder26);
        org.junit.Assert.assertEquals(stringBuilder26.toString(), "");
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.Token.StartTag startTag19 = new org.jsoup.parser.Token.StartTag();
        startTag19.appendAttributeValue("hi!");
        startTag19.appendAttributeValue("");
        org.jsoup.nodes.Attributes attributes24 = null;
        startTag19.attributes = attributes24;
        startTag19.appendAttributeValue("StartTag");
        htmlTreeBuilder0.currentToken = startTag19;
        boolean boolean29 = startTag19.isSelfClosing();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder13.setHeadElement((org.jsoup.nodes.Element) document23);
        org.jsoup.nodes.Element element25 = htmlTreeBuilder13.pop();
        htmlTreeBuilder0.push(element25);
        htmlTreeBuilder0.resetInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState35 = null;
        htmlTreeBuilder28.transition(htmlTreeBuilderState35);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder39 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int44 = parseErrorList43.getMaxSize();
        org.jsoup.nodes.Document document45 = htmlTreeBuilder39.parse("0: Doctype", "hi!", parseErrorList43);
        htmlTreeBuilder39.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray48 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList49 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList49, characterArray48);
        htmlTreeBuilder39.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList49);
        boolean boolean52 = htmlTreeBuilder39.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag54 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement56 = htmlTreeBuilder39.insertForm(startTag54, true);
        htmlTreeBuilder39.baseUri = "[]";
        org.jsoup.parser.CharacterReader characterReader61 = null;
        org.jsoup.parser.ParseErrorList parseErrorList63 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream64 = parseErrorList63.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor65 = parseErrorList63.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor66 = parseErrorList63.iterator();
        org.jsoup.parser.Tokeniser tokeniser67 = new org.jsoup.parser.Tokeniser(characterReader61, parseErrorList63);
        htmlTreeBuilder39.initialiseParse("St", "<Doctype>", parseErrorList63);
        org.jsoup.nodes.Document document69 = htmlTreeBuilder28.parse("\uffff", "<hi!#>", parseErrorList63);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder70 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList74 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int75 = parseErrorList74.getMaxSize();
        org.jsoup.nodes.Document document76 = htmlTreeBuilder70.parse("0: Doctype", "hi!", parseErrorList74);
        boolean boolean77 = htmlTreeBuilder70.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState78 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder70.error(htmlTreeBuilderState78);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState80 = null;
        htmlTreeBuilder70.transition(htmlTreeBuilderState80);
        htmlTreeBuilder70.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList84 = htmlTreeBuilder70.getPendingTableCharacters();
        htmlTreeBuilder28.setPendingTableCharacters(characterList84);
        htmlTreeBuilder0.setPendingTableCharacters(characterList84);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertNotNull(characterArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(formElement56);
        org.junit.Assert.assertNotNull(parseErrorList63);
        org.junit.Assert.assertNotNull(parseErrorStream64);
        org.junit.Assert.assertNotNull(parseErrorItor65);
        org.junit.Assert.assertNotNull(parseErrorItor66);
        org.junit.Assert.assertNotNull(document69);
        org.junit.Assert.assertNotNull(parseErrorList74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(document76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState78);
        org.junit.Assert.assertNotNull(characterList84);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.Token.StartTag startTag17 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType18 = startTag17.type;
        java.lang.String str19 = startTag17.toString();
        tokeniser6.emit((org.jsoup.parser.Token) startTag17);
        java.lang.String str21 = startTag17.name();
        java.lang.String str22 = startTag17.toString();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + tokenType18 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType18.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<hi!>" + "'", str19, "<hi!>");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<hi!>" + "'", str22, "<hi!>");
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder2 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int7 = parseErrorList6.getMaxSize();
        org.jsoup.nodes.Document document8 = htmlTreeBuilder2.parse("0: Doctype", "hi!", parseErrorList6);
        boolean boolean9 = htmlTreeBuilder2.framesetOk();
        org.jsoup.parser.Parser parser10 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser12 = parser10.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document15 = parser10.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document18 = parser10.parseInput("<hi!>", "[]");
        htmlTreeBuilder2.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document18);
        java.lang.String[] strArray20 = new java.lang.String[] {};
        boolean boolean21 = htmlTreeBuilder2.inScope(strArray20);
        java.lang.String str22 = htmlTreeBuilder2.toString();
        org.jsoup.parser.Tokeniser tokeniser23 = htmlTreeBuilder2.tokeniser;
        java.util.List<org.jsoup.parser.Token.Character> characterList24 = htmlTreeBuilder2.getPendingTableCharacters();
        htmlTreeBuilder0.setPendingTableCharacters(characterList24);
        htmlTreeBuilder0.framesetOk(true);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(parser12);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(tokeniser23);
        org.junit.Assert.assertNotNull(characterList24);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean7 = tokenQueue1.matchesCS("<hi!#>");
        java.lang.String str8 = tokenQueue1.consumeElementSelector();
        java.lang.String str9 = tokenQueue1.consumeCssIdentifier();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        java.lang.String str14 = doctype10.getPublicIdentifier();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.StartTag startTag15 = doctype10.asStartTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$StartTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        endTag0.newAttribute();
        endTag0.finaliseTag();
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.isEmpty();
        org.jsoup.parser.Tag tag6 = tag1.setSelfClosing();
        boolean boolean7 = tag1.isBlock();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(tag6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList8.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        java.lang.Object[] objArray14 = parseErrorList8.toArray();
        parseErrorList8.clear();
        org.jsoup.parser.ParseError[] parseErrorArray16 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList17 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17, parseErrorArray16);
        org.jsoup.parser.ParseError[] parseErrorArray19 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList20 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20, parseErrorArray19);
        boolean boolean22 = parseErrorList17.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20);
        java.lang.Object[] objArray23 = parseErrorList17.toArray();
        parseErrorList17.clear();
        org.jsoup.parser.ParseError[] parseErrorArray25 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList26 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26, parseErrorArray25);
        boolean boolean28 = parseErrorList17.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        boolean boolean29 = parseErrorList8.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        java.lang.Object[] objArray30 = parseErrorList26.toArray();
        boolean boolean31 = parseErrorList4.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        org.jsoup.parser.ParseError[] parseErrorArray32 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList33 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33, parseErrorArray32);
        org.jsoup.parser.ParseError[] parseErrorArray35 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList36 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36, parseErrorArray35);
        boolean boolean38 = parseErrorList33.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor39 = parseErrorList36.listIterator();
        int int41 = parseErrorList36.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag45 = new org.jsoup.parser.Token.EndTag();
        char[] charArray48 = new char[] { '#', '#' };
        endTag45.appendAttributeValue(charArray48);
        endTag45.finaliseTag();
        boolean boolean51 = endTag45.isSelfClosing();
        org.jsoup.parser.Tag tag53 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean54 = tag53.isFormListed();
        org.jsoup.parser.Tag tag55 = tag53.setSelfClosing();
        boolean boolean56 = tag53.isKnownTag();
        java.lang.Object[] objArray58 = new java.lang.Object[] { boolean51, tag53, "Doctype" };
        org.jsoup.parser.ParseError parseError59 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray58);
        parseErrorList36.add(0, parseError59);
        boolean boolean61 = parseErrorList4.add(parseError59);
        int int62 = parseErrorList4.getMaxSize();
        org.jsoup.parser.CharacterReader characterReader64 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean66 = characterReader64.matches('\000');
        characterReader64.mark();
        boolean boolean69 = characterReader64.containsIgnoreCase("a");
        java.lang.String str70 = characterReader64.toString();
        java.lang.String str71 = characterReader64.consumeToEnd();
        boolean boolean72 = characterReader64.matchesLetter();
        int int73 = parseErrorList4.lastIndexOf((java.lang.Object) boolean72);
        org.jsoup.parser.ParseErrorList parseErrorList75 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream76 = parseErrorList75.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor77 = parseErrorList75.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor78 = parseErrorList75.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList80 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int81 = parseErrorList80.getMaxSize();
        boolean boolean82 = parseErrorList75.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList80);
        org.jsoup.parser.Token.Doctype doctype83 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str84 = doctype83.getSystemIdentifier();
        boolean boolean85 = doctype83.forceQuirks;
        int int86 = parseErrorList80.lastIndexOf((java.lang.Object) boolean85);
        java.util.ArrayList[] arrayListArray88 = new java.util.ArrayList[1];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<org.jsoup.parser.ParseError>[] parseErrorListArray89 = (java.util.ArrayList<org.jsoup.parser.ParseError>[]) arrayListArray88;
        parseErrorListArray89[0] = parseErrorList80;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<org.jsoup.parser.ParseError>[] parseErrorListArray92 = parseErrorList4.toArray(parseErrorListArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(parseErrorArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(parseErrorArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parseErrorItor39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(tag53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(tag55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "StartTag" + "'", str70, "StartTag");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "StartTag" + "'", str71, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(parseErrorList75);
        org.junit.Assert.assertNotNull(parseErrorStream76);
        org.junit.Assert.assertNotNull(parseErrorItor77);
        org.junit.Assert.assertNotNull(parseErrorItor78);
        org.junit.Assert.assertNotNull(parseErrorList80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(arrayListArray88);
        org.junit.Assert.assertNotNull(parseErrorListArray89);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        tokeniser6.acknowledgeSelfClosingFlag();
        tokeniser6.emit('#');
        org.jsoup.parser.Token.Character character20 = new org.jsoup.parser.Token.Character(" EndTag");
        java.lang.String str21 = character20.getData();
        tokeniser6.emit((org.jsoup.parser.Token) character20);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + " EndTag" + "'", str21, " EndTag");
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        java.lang.StringBuilder stringBuilder9 = null;
        tokeniser7.dataBuffer = stringBuilder9;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        tokeniser7.emit(charArray14);
        org.jsoup.parser.Token.Comment comment17 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean20 = characterReader19.matchesLetter();
        miniSoupTokeniserState0.read(tokeniser7, characterReader19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        org.jsoup.parser.Token.Tag tag31 = tokeniser28.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype32 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype33 = doctype32.asDoctype();
        java.lang.String str34 = doctype32.tokenType();
        tokeniser28.emit((org.jsoup.parser.Token) doctype32);
        org.jsoup.parser.ITokeniserState iTokeniserState36 = tokeniser28.getState();
        org.jsoup.parser.Token.Comment comment37 = new org.jsoup.parser.Token.Comment();
        java.lang.String str38 = comment37.toString();
        java.lang.StringBuilder stringBuilder39 = comment37.data;
        boolean boolean40 = comment37.isEndTag();
        boolean boolean41 = comment37.isComment();
        tokeniser28.commentPending = comment37;
        org.jsoup.parser.CharacterReader characterReader44 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean46 = characterReader44.matches('\000');
        characterReader44.mark();
        boolean boolean48 = characterReader44.isEmpty();
        java.lang.String str49 = characterReader44.consumeToEnd();
        miniSoupTokeniserState0.read(tokeniser28, characterReader44);
        org.jsoup.parser.CharacterReader characterReader51 = null;
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream54 = parseErrorList53.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList53.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor56 = parseErrorList53.iterator();
        org.jsoup.parser.Tokeniser tokeniser57 = new org.jsoup.parser.Tokeniser(characterReader51, parseErrorList53);
        org.jsoup.parser.Token.Tag tag58 = tokeniser57.tagPending;
        tokeniser57.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag62 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType63 = startTag62.type;
        startTag62.appendTagName('#');
        tokeniser57.tagPending = startTag62;
        tokeniser57.acknowledgeSelfClosingFlag();
        org.jsoup.parser.CharacterReader characterReader69 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean71 = characterReader69.matches('\uffff');
        miniSoupTokeniserState0.read(tokeniser57, characterReader69);
        java.lang.String str73 = characterReader69.consumeDigitSequence();
        boolean boolean75 = characterReader69.matches("EndTag");
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertNotNull(doctype33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Doctype" + "'", str34, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<!---->" + "'", str38, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder39);
        org.junit.Assert.assertEquals(stringBuilder39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "StartTag" + "'", str49, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertNotNull(parseErrorStream54);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertNotNull(parseErrorItor56);
        org.junit.Assert.assertNull(tag58);
        org.junit.Assert.assertTrue("'" + tokenType63 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType63.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        boolean boolean7 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder8 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int13 = parseErrorList12.getMaxSize();
        org.jsoup.nodes.Document document14 = htmlTreeBuilder8.parse("0: Doctype", "hi!", parseErrorList12);
        boolean boolean15 = htmlTreeBuilder8.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState16 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder8.error(htmlTreeBuilderState16);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState18 = null;
        htmlTreeBuilder8.transition(htmlTreeBuilderState18);
        htmlTreeBuilder8.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader24 = null;
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor29 = parseErrorList26.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        boolean boolean33 = parseErrorList26.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        org.jsoup.parser.Tokeniser tokeniser34 = new org.jsoup.parser.Tokeniser(characterReader24, parseErrorList31);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList31.iterator();
        org.jsoup.nodes.Document document36 = htmlTreeBuilder8.parse("[]", "Doctype", parseErrorList31);
        org.jsoup.parser.CharacterReader characterReader39 = null;
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream42 = parseErrorList41.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList41.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor44 = parseErrorList41.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int47 = parseErrorList46.getMaxSize();
        boolean boolean48 = parseErrorList41.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList46);
        org.jsoup.parser.Tokeniser tokeniser49 = new org.jsoup.parser.Tokeniser(characterReader39, parseErrorList46);
        org.jsoup.parser.ParseErrorList parseErrorList51 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream52 = parseErrorList51.stream();
        boolean boolean53 = parseErrorList51.canAddError();
        boolean boolean54 = parseErrorList46.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList51);
        org.jsoup.nodes.Document document55 = htmlTreeBuilder8.parse("hi!", "<!---->", parseErrorList51);
        org.jsoup.parser.Tokeniser tokeniser56 = htmlTreeBuilder8.tokeniser;
        int int57 = parseErrorList2.lastIndexOf((java.lang.Object) htmlTreeBuilder8);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor58 = parseErrorList2.iterator();
        java.lang.Object obj59 = parseErrorList2.clone();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState16);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertNotNull(parseErrorItor29);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertNotNull(parseErrorStream42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNotNull(parseErrorItor44);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(parseErrorList51);
        org.junit.Assert.assertNotNull(parseErrorStream52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNotNull(tokeniser56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(parseErrorItor58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "[]");
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement14 = htmlTreeBuilder0.getFormElement();
        org.jsoup.parser.ParseErrorList parseErrorList19 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        htmlTreeBuilder0.initialiseParse("StartTaga", "a", parseErrorList19);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder21 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int26 = parseErrorList25.getMaxSize();
        org.jsoup.nodes.Document document27 = htmlTreeBuilder21.parse("0: Doctype", "hi!", parseErrorList25);
        boolean boolean28 = htmlTreeBuilder21.framesetOk();
        org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder21.setHeadElement((org.jsoup.nodes.Element) document31);
        org.jsoup.nodes.Document document35 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder21.setHeadElement((org.jsoup.nodes.Element) document35);
        htmlTreeBuilder21.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder39 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int44 = parseErrorList43.getMaxSize();
        org.jsoup.nodes.Document document45 = htmlTreeBuilder39.parse("0: Doctype", "hi!", parseErrorList43);
        boolean boolean46 = htmlTreeBuilder39.framesetOk();
        org.jsoup.nodes.Document document49 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder39.setHeadElement((org.jsoup.nodes.Element) document49);
        org.jsoup.nodes.Document document53 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder39.setHeadElement((org.jsoup.nodes.Element) document53);
        htmlTreeBuilder21.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document53);
        org.jsoup.parser.CharacterReader characterReader56 = htmlTreeBuilder21.reader;
        java.lang.String str58 = characterReader56.consumeTo('\ufffd');
        boolean boolean60 = characterReader56.matchesIgnoreCase("0: []");
        htmlTreeBuilder0.reader = characterReader56;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState62 = org.jsoup.parser.HtmlTreeBuilderState.InSelect;
        htmlTreeBuilder0.error(htmlTreeBuilderState62);
        org.jsoup.parser.Token.EndTag endTag64 = new org.jsoup.parser.Token.EndTag();
        char[] charArray67 = new char[] { '#', '#' };
        endTag64.appendAttributeValue(charArray67);
        endTag64.appendAttributeValue(' ');
        char[] charArray72 = new char[] { '4' };
        endTag64.appendAttributeValue(charArray72);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder74 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList78 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int79 = parseErrorList78.getMaxSize();
        org.jsoup.nodes.Document document80 = htmlTreeBuilder74.parse("0: Doctype", "hi!", parseErrorList78);
        boolean boolean81 = htmlTreeBuilder74.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState82 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder74.error(htmlTreeBuilderState82);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState84 = null;
        htmlTreeBuilder74.transition(htmlTreeBuilderState84);
        java.lang.String[] strArray87 = null;
        boolean boolean88 = htmlTreeBuilder74.inScope("EndTag", strArray87);
        org.jsoup.parser.Parser parser89 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder74);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = htmlTreeBuilderState62.process((org.jsoup.parser.Token) endTag64, htmlTreeBuilder74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(formElement14);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertNotNull(characterReader56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState62);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[#, #]");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[4]");
        org.junit.Assert.assertNotNull(parseErrorList78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(document80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState82);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWhitespace();
        boolean boolean8 = tokenQueue1.matchChomp("-1: []");
        java.lang.String str9 = tokenQueue1.remainder();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder13.error(htmlTreeBuilderState21);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState23 = null;
        htmlTreeBuilder13.transition(htmlTreeBuilderState23);
        htmlTreeBuilder13.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList27 = htmlTreeBuilder13.getPendingTableCharacters();
        htmlTreeBuilder0.setPendingTableCharacters(characterList27);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder29 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int34 = parseErrorList33.getMaxSize();
        org.jsoup.nodes.Document document35 = htmlTreeBuilder29.parse("0: Doctype", "hi!", parseErrorList33);
        htmlTreeBuilder29.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray38 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList39 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList39, characterArray38);
        htmlTreeBuilder29.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList39);
        boolean boolean42 = htmlTreeBuilder29.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag44 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement46 = htmlTreeBuilder29.insertForm(startTag44, true);
        htmlTreeBuilder29.baseUri = "[]";
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState49 = org.jsoup.parser.HtmlTreeBuilderState.InTableText;
        htmlTreeBuilder29.error(htmlTreeBuilderState49);
        htmlTreeBuilder0.error(htmlTreeBuilderState49);
        org.jsoup.parser.ParseErrorList parseErrorList52 = htmlTreeBuilder0.errors;
        java.lang.Object obj53 = null;
        int int54 = parseErrorList52.lastIndexOf(obj53);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState21);
        org.junit.Assert.assertNotNull(characterList27);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNotNull(characterArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(formElement46);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState49);
        org.junit.Assert.assertNotNull(parseErrorList52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream7 = parseErrorList1.stream();
        parseErrorList1.trimToSize();
        int int9 = parseErrorList1.size();
        parseErrorList1.clear();
        java.util.Spliterator<org.jsoup.parser.ParseError> parseErrorSpliterator11 = parseErrorList1.spliterator();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorStream7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(parseErrorSpliterator11);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches("[100: ]");
        char char4 = characterReader1.current();
        java.lang.String str5 = characterReader1.consumeAsString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'S' + "'", char4 == 'S');
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "S" + "'", str5, "S");
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        boolean boolean11 = endTag1.selfClosing;
        org.jsoup.parser.Token.TokenType tokenType12 = endTag1.type;
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.EndTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.EndTag));
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.Token.Tag tag10 = tokeniser7.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype11 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype12 = doctype11.asDoctype();
        java.lang.String str13 = doctype11.tokenType();
        tokeniser7.emit((org.jsoup.parser.Token) doctype11);
        org.jsoup.parser.Token.Tag tag16 = tokeniser7.createTagPending(true);
        xmlTreeBuilder0.currentToken = tag16;
        org.jsoup.parser.Token.Tag tag19 = tag16.name("");
        org.jsoup.parser.Token.Tag tag21 = tag19.name("t");
        boolean boolean22 = tag21.isComment();
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(tag10);
        org.junit.Assert.assertNotNull(doctype12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Doctype" + "'", str13, "Doctype");
        org.junit.Assert.assertNotNull(tag16);
        org.junit.Assert.assertNotNull(tag19);
        org.junit.Assert.assertNotNull(tag21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean4 = characterReader1.matchesDigit();
        java.lang.String str5 = characterReader1.toString();
        boolean boolean7 = characterReader1.matches(' ');
        boolean boolean9 = characterReader1.matchConsumeIgnoreCase("S");
        char char10 = characterReader1.current();
        java.lang.String str11 = characterReader1.toString();
        characterReader1.rewindToMark();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + 't' + "'", char10 == 't');
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tartTag" + "'", str11, "tartTag");
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag3.formatAsBlock();
        boolean boolean5 = tag3.isFormSubmittable();
        boolean boolean6 = tag3.isBlock();
        boolean boolean7 = tag3.isInline();
        org.jsoup.parser.Tag tag8 = tag3.setSelfClosing();
        boolean boolean9 = tag3.preserveWhitespace();
        org.jsoup.parser.TokeniserState tokeniserState10 = org.jsoup.parser.TokeniserState.ScriptDataEscapeStartDash;
        boolean boolean11 = tag3.equals((java.lang.Object) tokeniserState10);
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(tag8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(tokeniserState10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.Token.StartTag startTag19 = new org.jsoup.parser.Token.StartTag();
        startTag19.appendAttributeValue("hi!");
        startTag19.appendAttributeValue("");
        org.jsoup.nodes.Attributes attributes24 = null;
        startTag19.attributes = attributes24;
        startTag19.appendAttributeValue("StartTag");
        htmlTreeBuilder0.currentToken = startTag19;
        org.jsoup.parser.Tokeniser tokeniser29 = htmlTreeBuilder0.tokeniser;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(tokeniser29);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean4 = characterReader1.matchesDigit();
        java.lang.String str6 = characterReader1.consumeTo('\000');
        java.lang.String str8 = characterReader1.consumeTo(' ');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "StartTag" + "'", str6, "StartTag");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        htmlTreeBuilder3.clearStackToTableContext();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder12.setHeadElement((org.jsoup.nodes.Element) document22);
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder12.setHeadElement((org.jsoup.nodes.Element) document26);
        htmlTreeBuilder12.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder30 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int35 = parseErrorList34.getMaxSize();
        org.jsoup.nodes.Document document36 = htmlTreeBuilder30.parse("0: Doctype", "hi!", parseErrorList34);
        boolean boolean37 = htmlTreeBuilder30.framesetOk();
        org.jsoup.nodes.Document document40 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder30.setHeadElement((org.jsoup.nodes.Element) document40);
        org.jsoup.nodes.Document document44 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder30.setHeadElement((org.jsoup.nodes.Element) document44);
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document44);
        htmlTreeBuilder3.push((org.jsoup.nodes.Element) document44);
        htmlTreeBuilder3.generateImpliedEndTags();
        htmlTreeBuilder3.clearStackToTableRowContext();
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertNotNull(document44);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        endTag0.tagName = "hi!";
        endTag0.selfClosing = false;
        boolean boolean5 = endTag0.isEOF();
        org.jsoup.parser.Token.EndTag endTag6 = endTag0.asEndTag();
        boolean boolean7 = endTag0.selfClosing;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(endTag6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        boolean boolean9 = htmlTreeBuilder0.framesetOk();
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        htmlTreeBuilder0.popStackToClose("");
        org.jsoup.parser.ParseErrorList parseErrorList17 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream20 = parseErrorList19.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList19.iterator();
        boolean boolean22 = parseErrorList17.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        parseErrorList19.ensureCapacity((int) (short) 1);
        org.jsoup.nodes.Document document25 = htmlTreeBuilder0.parse("EOF", "<hi!#>", parseErrorList19);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder26 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int31 = parseErrorList30.getMaxSize();
        org.jsoup.nodes.Document document32 = htmlTreeBuilder26.parse("0: Doctype", "hi!", parseErrorList30);
        htmlTreeBuilder26.resetInsertionMode();
        htmlTreeBuilder26.popStackToBefore("EndTag");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState36 = htmlTreeBuilder26.state();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder37 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int42 = parseErrorList41.getMaxSize();
        org.jsoup.nodes.Document document43 = htmlTreeBuilder37.parse("0: Doctype", "hi!", parseErrorList41);
        boolean boolean44 = htmlTreeBuilder37.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState45 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder37.error(htmlTreeBuilderState45);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState47 = null;
        htmlTreeBuilder37.transition(htmlTreeBuilderState47);
        org.jsoup.parser.Parser parser49 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.nodes.Document document52 = parser49.parseInput("", "hi!");
        org.jsoup.nodes.Document document55 = parser49.parseInput("hi!", "hi!");
        org.jsoup.nodes.Document document58 = org.jsoup.parser.Parser.parse("hi!", "<!---->");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder59 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList63 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int64 = parseErrorList63.getMaxSize();
        org.jsoup.nodes.Document document65 = htmlTreeBuilder59.parse("0: Doctype", "hi!", parseErrorList63);
        boolean boolean66 = htmlTreeBuilder59.framesetOk();
        org.jsoup.parser.Parser parser67 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser69 = parser67.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document72 = parser67.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document75 = parser67.parseInput("<hi!>", "[]");
        htmlTreeBuilder59.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document75);
        org.jsoup.nodes.Document document79 = org.jsoup.parser.Parser.parse("", "Doctype");
        org.jsoup.nodes.Element[] elementArray80 = new org.jsoup.nodes.Element[] { document55, document58, document75, document79 };
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList81 = new org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<org.jsoup.nodes.Element>) elementList81, elementArray80);
        htmlTreeBuilder37.stack = elementList81;
        htmlTreeBuilder26.stack = elementList81;
        htmlTreeBuilder0.stack = elementList81;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertNotNull(parseErrorStream20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState36);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState45);
        org.junit.Assert.assertNotNull(parser49);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNotNull(document58);
        org.junit.Assert.assertNotNull(parseErrorList63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(parser67);
        org.junit.Assert.assertNotNull(parser69);
        org.junit.Assert.assertNotNull(document72);
        org.junit.Assert.assertNotNull(document75);
        org.junit.Assert.assertNotNull(document79);
        org.junit.Assert.assertNotNull(elementArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("10: ");
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking((int) (short) -1);
        org.junit.Assert.assertNotNull(parseErrorList1);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean4 = characterReader1.matchesDigit();
        java.lang.String str5 = characterReader1.toString();
        boolean boolean7 = characterReader1.matches(' ');
        boolean boolean9 = characterReader1.matchConsumeIgnoreCase("S");
        char char10 = characterReader1.current();
        java.lang.String str11 = characterReader1.consumeAsString();
        boolean boolean12 = characterReader1.isEmpty();
        java.lang.String str13 = characterReader1.consumeLetterThenDigitSequence();
        java.lang.String str14 = characterReader1.consumeToEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + 't' + "'", char10 == 't');
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "t" + "'", str11, "t");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "artTag" + "'", str13, "artTag");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        boolean boolean25 = parseErrorList18.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23);
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList23);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList23.iterator();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("[]", "Doctype", parseErrorList23);
        org.jsoup.parser.CharacterReader characterReader31 = null;
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream34 = parseErrorList33.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList33.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor36 = parseErrorList33.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int39 = parseErrorList38.getMaxSize();
        boolean boolean40 = parseErrorList33.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        org.jsoup.parser.Tokeniser tokeniser41 = new org.jsoup.parser.Tokeniser(characterReader31, parseErrorList38);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        boolean boolean45 = parseErrorList43.canAddError();
        boolean boolean46 = parseErrorList38.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        org.jsoup.nodes.Document document47 = htmlTreeBuilder0.parse("hi!", "<!---->", parseErrorList43);
        org.jsoup.parser.Tokeniser tokeniser48 = htmlTreeBuilder0.tokeniser;
        java.lang.StringBuilder stringBuilder49 = tokeniser48.dataBuffer;
        org.jsoup.parser.Token.Doctype doctype50 = tokeniser48.doctypePending;
        tokeniser48.emit('\uffff');
        org.jsoup.parser.Tag tag54 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean55 = tag54.isFormListed();
        org.jsoup.parser.CharacterReader characterReader56 = null;
        org.jsoup.parser.ParseErrorList parseErrorList58 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream59 = parseErrorList58.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor60 = parseErrorList58.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor61 = parseErrorList58.iterator();
        org.jsoup.parser.Tokeniser tokeniser62 = new org.jsoup.parser.Tokeniser(characterReader56, parseErrorList58);
        org.jsoup.parser.Token.Tag tag63 = tokeniser62.tagPending;
        org.jsoup.parser.Token.Tag tag65 = tokeniser62.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype66 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype67 = doctype66.asDoctype();
        java.lang.String str68 = doctype66.tokenType();
        tokeniser62.emit((org.jsoup.parser.Token) doctype66);
        boolean boolean70 = tag54.equals((java.lang.Object) doctype66);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder71 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader72 = null;
        org.jsoup.parser.ParseErrorList parseErrorList74 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream75 = parseErrorList74.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor76 = parseErrorList74.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor77 = parseErrorList74.iterator();
        org.jsoup.parser.Tokeniser tokeniser78 = new org.jsoup.parser.Tokeniser(characterReader72, parseErrorList74);
        org.jsoup.parser.Token.Tag tag79 = tokeniser78.tagPending;
        org.jsoup.parser.Token.Tag tag81 = tokeniser78.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype82 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype83 = doctype82.asDoctype();
        java.lang.String str84 = doctype82.tokenType();
        tokeniser78.emit((org.jsoup.parser.Token) doctype82);
        org.jsoup.parser.Token.Tag tag87 = tokeniser78.createTagPending(true);
        xmlTreeBuilder71.currentToken = tag87;
        boolean boolean89 = tag54.equals((java.lang.Object) tag87);
        tag87.finaliseTag();
        org.jsoup.nodes.Attributes attributes91 = tag87.attributes;
        tokeniser48.emit((org.jsoup.parser.Token) tag87);
        boolean boolean93 = tag87.isStartTag();
        boolean boolean94 = tag87.isEndTag();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertNotNull(parseErrorStream34);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNotNull(parseErrorItor36);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(tokeniser48);
        org.junit.Assert.assertNull(stringBuilder49);
        org.junit.Assert.assertNull(doctype50);
        org.junit.Assert.assertNotNull(tag54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(parseErrorList58);
        org.junit.Assert.assertNotNull(parseErrorStream59);
        org.junit.Assert.assertNotNull(parseErrorItor60);
        org.junit.Assert.assertNotNull(parseErrorItor61);
        org.junit.Assert.assertNull(tag63);
        org.junit.Assert.assertNotNull(tag65);
        org.junit.Assert.assertNotNull(doctype67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Doctype" + "'", str68, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(parseErrorList74);
        org.junit.Assert.assertNotNull(parseErrorStream75);
        org.junit.Assert.assertNotNull(parseErrorItor76);
        org.junit.Assert.assertNotNull(parseErrorItor77);
        org.junit.Assert.assertNull(tag79);
        org.junit.Assert.assertNotNull(tag81);
        org.junit.Assert.assertNotNull(doctype83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Doctype" + "'", str84, "Doctype");
        org.junit.Assert.assertNotNull(tag87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(attributes91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.formatAsBlock();
        boolean boolean6 = tag1.isFormListed();
        boolean boolean7 = tag1.isSelfClosing();
        java.lang.String str8 = tag1.getName();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        startTag0.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag4 = startTag0.name("hi!#");
        boolean boolean5 = startTag0.isStartTag();
        startTag0.appendTagName("<hi!#>");
        boolean boolean8 = startTag0.isEOF();
        org.junit.Assert.assertNotNull(tag4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        org.jsoup.parser.ParseErrorList parseErrorList18 = htmlTreeBuilder0.errors;
        org.jsoup.nodes.Document document21 = htmlTreeBuilder0.parse("", "artTag");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder22 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int27 = parseErrorList26.getMaxSize();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder22.parse("0: Doctype", "hi!", parseErrorList26);
        boolean boolean29 = htmlTreeBuilder22.framesetOk();
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder22.setHeadElement((org.jsoup.nodes.Element) document32);
        htmlTreeBuilder22.generateImpliedEndTags();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder35 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int40 = parseErrorList39.getMaxSize();
        org.jsoup.nodes.Document document41 = htmlTreeBuilder35.parse("0: Doctype", "hi!", parseErrorList39);
        boolean boolean42 = htmlTreeBuilder35.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState43 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder35.error(htmlTreeBuilderState43);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState45 = null;
        htmlTreeBuilder35.transition(htmlTreeBuilderState45);
        htmlTreeBuilder35.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList49 = htmlTreeBuilder35.getPendingTableCharacters();
        htmlTreeBuilder22.setPendingTableCharacters(characterList49);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder51 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList55 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int56 = parseErrorList55.getMaxSize();
        org.jsoup.nodes.Document document57 = htmlTreeBuilder51.parse("0: Doctype", "hi!", parseErrorList55);
        htmlTreeBuilder51.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray60 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList61 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList61, characterArray60);
        htmlTreeBuilder51.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList61);
        boolean boolean64 = htmlTreeBuilder51.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag66 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement68 = htmlTreeBuilder51.insertForm(startTag66, true);
        htmlTreeBuilder51.baseUri = "[]";
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState71 = org.jsoup.parser.HtmlTreeBuilderState.InTableText;
        htmlTreeBuilder51.error(htmlTreeBuilderState71);
        htmlTreeBuilder22.error(htmlTreeBuilderState71);
        htmlTreeBuilder0.error(htmlTreeBuilderState71);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState43);
        org.junit.Assert.assertNotNull(characterList49);
        org.junit.Assert.assertNotNull(parseErrorList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(document57);
        org.junit.Assert.assertNotNull(characterArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(formElement68);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState71);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!#", "t");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag3.formatAsBlock();
        boolean boolean5 = tag3.isFormSubmittable();
        boolean boolean6 = tag3.isBlock();
        boolean boolean7 = tag3.isSelfClosing();
        boolean boolean8 = tag3.isFormSubmittable();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder17 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        org.jsoup.nodes.Document document23 = htmlTreeBuilder17.parse("0: Doctype", "hi!", parseErrorList21);
        org.jsoup.parser.ParseErrorList parseErrorList27 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream28 = parseErrorList27.stream();
        boolean boolean29 = parseErrorList27.canAddError();
        org.jsoup.nodes.Document document30 = htmlTreeBuilder17.parse("EndTag", "hi!#", parseErrorList27);
        java.lang.String[] strArray38 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean39 = htmlTreeBuilder17.inScope("hi!#", strArray38);
        boolean boolean40 = htmlTreeBuilder0.inScope("hi!#", strArray38);
        org.jsoup.nodes.FormElement formElement41 = htmlTreeBuilder0.getFormElement();
        org.jsoup.nodes.Element element43 = htmlTreeBuilder0.insert("StartTag");
        htmlTreeBuilder0.clearStackToTableRowContext();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(parseErrorList27);
        org.junit.Assert.assertNotNull(parseErrorStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(formElement41);
        org.junit.Assert.assertNotNull(element43);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.nodes.Document document9 = org.jsoup.parser.Parser.parseBodyFragment("Doctype", "<hi!>");
        htmlTreeBuilder0.maybeSetBaseUri((org.jsoup.nodes.Element) document9);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState11 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag12 = new org.jsoup.parser.Token.EndTag();
        endTag12.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder14 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int19 = parseErrorList18.getMaxSize();
        org.jsoup.nodes.Document document20 = htmlTreeBuilder14.parse("0: Doctype", "hi!", parseErrorList18);
        boolean boolean21 = htmlTreeBuilderState11.process((org.jsoup.parser.Token) endTag12, htmlTreeBuilder14);
        htmlTreeBuilder0.error(htmlTreeBuilderState11);
        org.jsoup.parser.CharacterReader characterReader23 = null;
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream26 = parseErrorList25.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList25.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList25.iterator();
        org.jsoup.parser.Tokeniser tokeniser29 = new org.jsoup.parser.Tokeniser(characterReader23, parseErrorList25);
        org.jsoup.parser.Token.Tag tag30 = tokeniser29.tagPending;
        tokeniser29.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag34 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType35 = startTag34.type;
        startTag34.appendTagName('#');
        tokeniser29.tagPending = startTag34;
        org.jsoup.parser.TokeniserState tokeniserState39 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser29.transition((org.jsoup.parser.ITokeniserState) tokeniserState39);
        org.jsoup.parser.Token.Doctype doctype41 = new org.jsoup.parser.Token.Doctype();
        boolean boolean42 = doctype41.isCharacter();
        tokeniser29.doctypePending = doctype41;
        boolean boolean44 = doctype41.isEndTag();
        java.lang.StringBuilder stringBuilder45 = doctype41.publicIdentifier;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder46 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int51 = parseErrorList50.getMaxSize();
        org.jsoup.nodes.Document document52 = htmlTreeBuilder46.parse("0: Doctype", "hi!", parseErrorList50);
        htmlTreeBuilder46.newPendingTableCharacters();
        boolean boolean55 = htmlTreeBuilder46.inTableScope("");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState56 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag57 = new org.jsoup.parser.Token.EndTag();
        endTag57.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder59 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList63 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int64 = parseErrorList63.getMaxSize();
        org.jsoup.nodes.Document document65 = htmlTreeBuilder59.parse("0: Doctype", "hi!", parseErrorList63);
        boolean boolean66 = htmlTreeBuilderState56.process((org.jsoup.parser.Token) endTag57, htmlTreeBuilder59);
        htmlTreeBuilder59.clearStackToTableContext();
        htmlTreeBuilder59.generateImpliedEndTags("hi!#");
        java.util.List<org.jsoup.parser.Token.Character> characterList70 = htmlTreeBuilder59.getPendingTableCharacters();
        htmlTreeBuilder46.setPendingTableCharacters(characterList70);
        boolean boolean72 = htmlTreeBuilderState11.process((org.jsoup.parser.Token) doctype41, htmlTreeBuilder46);
        org.jsoup.parser.Token token73 = htmlTreeBuilder46.currentToken;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState11);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertNotNull(parseErrorStream26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertNull(tag30);
        org.junit.Assert.assertTrue("'" + tokenType35 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType35.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(stringBuilder45);
        org.junit.Assert.assertEquals(stringBuilder45.toString(), "");
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState56);
        org.junit.Assert.assertNotNull(parseErrorList63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(characterList70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(token73);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        boolean boolean19 = doctype18.isCharacter();
        tokeniser6.doctypePending = doctype18;
        org.jsoup.parser.Token.Comment comment21 = new org.jsoup.parser.Token.Comment();
        java.lang.String str22 = comment21.toString();
        java.lang.StringBuilder stringBuilder23 = comment21.data;
        tokeniser6.commentPending = comment21;
        org.jsoup.parser.TokeniserState tokeniserState25 = org.jsoup.parser.TokeniserState.Rawtext;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder26 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document27 = xmlTreeBuilder26.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder28 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList33 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList35 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream36 = parseErrorList35.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor37 = parseErrorList35.iterator();
        boolean boolean38 = parseErrorList33.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList35);
        xmlTreeBuilder28.initialiseParse("<!---->", "hi!", parseErrorList33);
        xmlTreeBuilder26.errors = parseErrorList33;
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        xmlTreeBuilder26.initialiseParse("a", "[]", parseErrorList44);
        org.jsoup.parser.CharacterReader characterReader47 = null;
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream50 = parseErrorList49.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor51 = parseErrorList49.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor52 = parseErrorList49.iterator();
        org.jsoup.parser.Tokeniser tokeniser53 = new org.jsoup.parser.Tokeniser(characterReader47, parseErrorList49);
        org.jsoup.parser.Token.Tag tag54 = tokeniser53.tagPending;
        tokeniser53.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype57 = tokeniser53.doctypePending;
        tokeniser53.createCommentPending();
        org.jsoup.parser.Token.Comment comment59 = tokeniser53.commentPending;
        boolean boolean60 = parseErrorList44.remove((java.lang.Object) tokeniser53);
        org.jsoup.parser.CharacterReader characterReader62 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean64 = characterReader62.matches('\uffff');
        boolean boolean66 = characterReader62.containsIgnoreCase("0: []");
        tokeniserState25.read(tokeniser53, characterReader62);
        tokeniser6.eofError((org.jsoup.parser.ITokeniserState) tokeniserState25);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<!---->" + "'", str22, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder23);
        org.junit.Assert.assertEquals(stringBuilder23.toString(), "");
        org.junit.Assert.assertNotNull(tokeniserState25);
        org.junit.Assert.assertNull(document27);
        org.junit.Assert.assertNotNull(parseErrorList35);
        org.junit.Assert.assertNotNull(parseErrorStream36);
        org.junit.Assert.assertNotNull(parseErrorItor37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertNotNull(parseErrorStream50);
        org.junit.Assert.assertNotNull(parseErrorItor51);
        org.junit.Assert.assertNotNull(parseErrorItor52);
        org.junit.Assert.assertNull(tag54);
        org.junit.Assert.assertNull(doctype57);
        org.junit.Assert.assertNotNull(comment59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token token1 = xmlTreeBuilder0.currentToken;
        org.jsoup.parser.CharacterReader characterReader2 = null;
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.iterator();
        org.jsoup.parser.Tokeniser tokeniser8 = new org.jsoup.parser.Tokeniser(characterReader2, parseErrorList4);
        org.jsoup.parser.Token.Tag tag9 = tokeniser8.tagPending;
        org.jsoup.parser.Token.Tag tag11 = tokeniser8.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype12 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype13 = doctype12.asDoctype();
        java.lang.String str14 = doctype12.tokenType();
        tokeniser8.emit((org.jsoup.parser.Token) doctype12);
        org.jsoup.parser.Token.Tag tag17 = tokeniser8.createTagPending(true);
        xmlTreeBuilder0.tokeniser = tokeniser8;
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        java.lang.StringBuilder stringBuilder27 = null;
        tokeniser25.dataBuffer = stringBuilder27;
        org.jsoup.parser.Token.Tag tag30 = tokeniser25.createTagPending(false);
        org.jsoup.parser.Token.Tag tag32 = tag30.name("hi!#");
        tokeniser8.tagPending = tag30;
        org.jsoup.parser.Token.Comment comment34 = null;
        tokeniser8.commentPending = comment34;
        // The following exception was thrown during execution in test generation
        try {
            tokeniser8.emitDoctypePending();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: There is an unread token pending!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(token1);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNull(tag9);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(doctype13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Doctype" + "'", str14, "Doctype");
        org.junit.Assert.assertNotNull(tag17);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag30);
        org.junit.Assert.assertNotNull(tag32);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("<hi!#>");
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        boolean boolean9 = htmlTreeBuilder0.framesetOk();
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        htmlTreeBuilder0.popStackToClose("");
        org.jsoup.parser.ParseErrorList parseErrorList17 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream20 = parseErrorList19.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList19.iterator();
        boolean boolean22 = parseErrorList17.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        parseErrorList19.ensureCapacity((int) (short) 1);
        org.jsoup.nodes.Document document25 = htmlTreeBuilder0.parse("EOF", "<hi!#>", parseErrorList19);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList19.listIterator((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertNotNull(parseErrorStream20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(document25);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.parser.Token token10 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        boolean boolean21 = parseErrorList14.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        org.jsoup.nodes.Document document22 = htmlTreeBuilder0.parse("[]", "hi!", parseErrorList19);
        org.jsoup.nodes.Element element23 = htmlTreeBuilder0.pop();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList28 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int29 = parseErrorList28.getMaxSize();
        org.jsoup.nodes.Document document30 = htmlTreeBuilder24.parse("0: Doctype", "hi!", parseErrorList28);
        boolean boolean31 = htmlTreeBuilder24.framesetOk();
        org.jsoup.parser.Parser parser32 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser34 = parser32.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document37 = parser32.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document40 = parser32.parseInput("<hi!>", "[]");
        htmlTreeBuilder24.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        boolean boolean43 = htmlTreeBuilder24.inScope(strArray42);
        htmlTreeBuilder24.framesetOk(false);
        htmlTreeBuilder24.insertMarkerToFormattingElements();
        boolean boolean47 = htmlTreeBuilder24.isFosterInserts();
        org.jsoup.parser.ParseErrorList parseErrorList52 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList54 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream55 = parseErrorList54.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor56 = parseErrorList54.iterator();
        boolean boolean57 = parseErrorList52.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54);
        parseErrorList54.ensureCapacity((int) (short) 1);
        org.jsoup.nodes.Document document60 = htmlTreeBuilder24.parse("StartTaga", "</hi![]>", parseErrorList54);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder61 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList65 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int66 = parseErrorList65.getMaxSize();
        org.jsoup.nodes.Document document67 = htmlTreeBuilder61.parse("0: Doctype", "hi!", parseErrorList65);
        boolean boolean68 = htmlTreeBuilder61.framesetOk();
        org.jsoup.parser.Parser parser69 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser71 = parser69.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document74 = parser69.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document77 = parser69.parseInput("<hi!>", "[]");
        htmlTreeBuilder61.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document77);
        java.lang.String[] strArray79 = new java.lang.String[] {};
        boolean boolean80 = htmlTreeBuilder61.inScope(strArray79);
        htmlTreeBuilder61.markInsertionMode();
        boolean boolean83 = htmlTreeBuilder61.inScope("StartTag");
        htmlTreeBuilder61.markInsertionMode();
        org.jsoup.nodes.Document document87 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder61.setHeadElement((org.jsoup.nodes.Element) document87);
        org.jsoup.nodes.Document document89 = htmlTreeBuilder61.getDocument();
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.replaceOnStack((org.jsoup.nodes.Element) document60, (org.jsoup.nodes.Element) document89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(token10);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(parseErrorList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(parser32);
        org.junit.Assert.assertNotNull(parser34);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(parseErrorList54);
        org.junit.Assert.assertNotNull(parseErrorStream55);
        org.junit.Assert.assertNotNull(parseErrorItor56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(document60);
        org.junit.Assert.assertNotNull(parseErrorList65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(document67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(parser69);
        org.junit.Assert.assertNotNull(parser71);
        org.junit.Assert.assertNotNull(document74);
        org.junit.Assert.assertNotNull(document77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(document87);
        org.junit.Assert.assertNotNull(document89);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        int int8 = parseErrorList4.size();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        htmlTreeBuilder9.newPendingTableCharacters();
        boolean boolean17 = parseErrorList4.equals((java.lang.Object) htmlTreeBuilder9);
        java.lang.String str18 = parseErrorList4.toString();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader20 = null;
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream23 = parseErrorList22.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList22.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList22.iterator();
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader20, parseErrorList22);
        org.jsoup.parser.Token.Tag tag27 = tokeniser26.tagPending;
        org.jsoup.parser.Token.Tag tag29 = tokeniser26.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype30 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype31 = doctype30.asDoctype();
        java.lang.String str32 = doctype30.tokenType();
        tokeniser26.emit((org.jsoup.parser.Token) doctype30);
        org.jsoup.parser.Token.Tag tag35 = tokeniser26.createTagPending(true);
        xmlTreeBuilder19.currentToken = tag35;
        org.jsoup.parser.Token.Tag tag38 = tag35.name("");
        boolean boolean39 = parseErrorList4.contains((java.lang.Object) tag35);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Character character40 = tag35.asCharacter();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Character");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertNotNull(parseErrorStream23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNull(tag27);
        org.junit.Assert.assertNotNull(tag29);
        org.junit.Assert.assertNotNull(doctype31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Doctype" + "'", str32, "Doctype");
        org.junit.Assert.assertNotNull(tag35);
        org.junit.Assert.assertNotNull(tag38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.parser.TokenQueue tokenQueue38 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean39 = tokenQueue38.isEmpty();
        boolean boolean40 = tokenQueue38.consumeWhitespace();
        java.lang.String str41 = tokenQueue38.consumeWord();
        boolean boolean42 = tokenQueue38.matchesWhitespace();
        java.lang.String[] strArray47 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str48 = tokenQueue38.consumeToAny(strArray47);
        boolean boolean49 = htmlTreeBuilder0.inScope(strArray47);
        boolean boolean50 = htmlTreeBuilder0.framesetOk();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "EndTag" + "'", str41, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.preserveWhitespace();
        boolean boolean3 = tag1.isKnownTag();
        boolean boolean4 = tag1.isBlock();
        org.jsoup.parser.Tag tag6 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean7 = tag6.isFormListed();
        org.jsoup.parser.Tag tag8 = tag6.setSelfClosing();
        boolean boolean9 = tag6.isKnownTag();
        boolean boolean10 = tag6.isKnownTag();
        boolean boolean11 = tag1.equals((java.lang.Object) boolean10);
        java.lang.String str12 = tag1.toString();
        org.jsoup.parser.Tag tag13 = tag1.setSelfClosing();
        boolean boolean14 = tag1.isInline();
        boolean boolean15 = tag1.formatAsBlock();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(tag6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(tag8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(tag13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        boolean boolean7 = tokeniser6.isAppropriateEndTagToken();
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream12 = parseErrorList11.stream();
        boolean boolean13 = parseErrorList11.canAddError();
        org.jsoup.parser.ParseError parseError16 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str17 = parseError16.getErrorMessage();
        boolean boolean18 = parseErrorList11.add(parseError16);
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        org.jsoup.parser.Token.Tag tag28 = tokeniser25.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype29 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype30 = doctype29.asDoctype();
        java.lang.String str31 = doctype29.tokenType();
        tokeniser25.emit((org.jsoup.parser.Token) doctype29);
        org.jsoup.parser.ITokeniserState iTokeniserState33 = tokeniser25.getState();
        org.jsoup.parser.Token.Comment comment34 = new org.jsoup.parser.Token.Comment();
        java.lang.String str35 = comment34.toString();
        java.lang.StringBuilder stringBuilder36 = comment34.data;
        boolean boolean37 = comment34.isEndTag();
        boolean boolean38 = comment34.isComment();
        tokeniser25.commentPending = comment34;
        int int40 = parseErrorList11.lastIndexOf((java.lang.Object) comment34);
        tokeniser6.commentPending = comment34;
        comment34.bogus = true;
        org.jsoup.parser.Token.TokenType tokenType44 = comment34.type;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertNotNull(parseErrorStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(doctype30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Doctype" + "'", str31, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<!---->" + "'", str35, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder36);
        org.junit.Assert.assertEquals(stringBuilder36.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + tokenType44 + "' != '" + org.jsoup.parser.Token.TokenType.Comment + "'", tokenType44.equals(org.jsoup.parser.Token.TokenType.Comment));
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList(0, (int) (byte) 0);
        htmlTreeBuilder0.initialiseParse("<hi!>", "hi!#", parseErrorList5);
        htmlTreeBuilder0.resetInsertionMode();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder10 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList15 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream18 = parseErrorList17.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList17.iterator();
        boolean boolean20 = parseErrorList15.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17);
        xmlTreeBuilder10.initialiseParse("<!---->", "hi!", parseErrorList15);
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document26 = xmlTreeBuilder10.parse("", "[]", parseErrorList25);
        org.jsoup.parser.Token.StartTag startTag28 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType29 = startTag28.type;
        java.lang.String str30 = startTag28.toString();
        boolean boolean31 = xmlTreeBuilder10.process((org.jsoup.parser.Token) startTag28);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder34 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int39 = parseErrorList38.getMaxSize();
        org.jsoup.nodes.Document document40 = htmlTreeBuilder34.parse("0: Doctype", "hi!", parseErrorList38);
        boolean boolean41 = htmlTreeBuilder34.framesetOk();
        org.jsoup.nodes.Document document44 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder34.setHeadElement((org.jsoup.nodes.Element) document44);
        org.jsoup.parser.CharacterReader characterReader48 = null;
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream51 = parseErrorList50.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor52 = parseErrorList50.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor53 = parseErrorList50.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList55 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int56 = parseErrorList55.getMaxSize();
        boolean boolean57 = parseErrorList50.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList55);
        org.jsoup.parser.Tokeniser tokeniser58 = new org.jsoup.parser.Tokeniser(characterReader48, parseErrorList55);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor59 = parseErrorList55.iterator();
        htmlTreeBuilder34.initialiseParse("hi!", "hi!#", parseErrorList55);
        java.util.List<org.jsoup.nodes.Node> nodeList61 = xmlTreeBuilder10.parseFragment("S", "<Doctype>", parseErrorList55);
        org.jsoup.nodes.Document document62 = htmlTreeBuilder0.parse("StartTag", "[100: ]", parseErrorList55);
        org.jsoup.nodes.Element element64 = htmlTreeBuilder0.getActiveFormattingElement("[100: ]");
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertNotNull(parseErrorStream18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertTrue("'" + tokenType29 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType29.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "<hi!>" + "'", str30, "<hi!>");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertNotNull(parseErrorStream51);
        org.junit.Assert.assertNotNull(parseErrorItor52);
        org.junit.Assert.assertNotNull(parseErrorItor53);
        org.junit.Assert.assertNotNull(parseErrorList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(parseErrorItor59);
        org.junit.Assert.assertNotNull(nodeList61);
        org.junit.Assert.assertNotNull(document62);
        org.junit.Assert.assertNull(element64);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("<!---->");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder10 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader11 = null;
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList13.iterator();
        org.jsoup.parser.Tokeniser tokeniser17 = new org.jsoup.parser.Tokeniser(characterReader11, parseErrorList13);
        org.jsoup.parser.Token.Tag tag18 = tokeniser17.tagPending;
        org.jsoup.parser.Token.Tag tag20 = tokeniser17.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype21 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype22 = doctype21.asDoctype();
        java.lang.String str23 = doctype21.tokenType();
        tokeniser17.emit((org.jsoup.parser.Token) doctype21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser17.createTagPending(true);
        xmlTreeBuilder10.currentToken = tag26;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        boolean boolean35 = htmlTreeBuilder28.framesetOk();
        org.jsoup.nodes.Document document38 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder28.setHeadElement((org.jsoup.nodes.Element) document38);
        xmlTreeBuilder10.doc = document38;
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList44.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList44.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int50 = parseErrorList49.getMaxSize();
        boolean boolean51 = parseErrorList44.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList49);
        xmlTreeBuilder10.initialiseParse("hi!#", "0: []", parseErrorList49);
        org.jsoup.parser.Token.Comment comment53 = new org.jsoup.parser.Token.Comment();
        java.lang.String str54 = comment53.getData();
        xmlTreeBuilder10.insert(comment53);
        java.lang.StringBuilder stringBuilder56 = comment53.data;
        tokeniser6.commentPending = comment53;
        tokeniser6.emitCommentPending();
        tokeniser6.emit(' ');
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitDoctypePending();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: There is an unread token pending!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNull(tag18);
        org.junit.Assert.assertNotNull(tag20);
        org.junit.Assert.assertNotNull(doctype22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Doctype" + "'", str23, "Doctype");
        org.junit.Assert.assertNotNull(tag26);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(stringBuilder56);
        org.junit.Assert.assertEquals(stringBuilder56.toString(), "");
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.nodes.Element element38 = htmlTreeBuilder0.insert("<!---->");
        org.jsoup.parser.Token.StartTag startTag40 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag40.appendTagName("hi!");
        startTag40.appendAttributeName('4');
        boolean boolean45 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag40);
        startTag40.appendTagName('a');
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(element38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("a");
        char char2 = tokenQueue1.consume();
        tokenQueue1.addFirst("\uffff");
        org.junit.Assert.assertTrue("'" + char2 + "' != '" + 'a' + "'", char2 == 'a');
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        htmlTreeBuilder0.markInsertionMode();
        htmlTreeBuilder0.framesetOk(true);
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState4 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader5 = null;
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor10 = parseErrorList7.iterator();
        org.jsoup.parser.Tokeniser tokeniser11 = new org.jsoup.parser.Tokeniser(characterReader5, parseErrorList7);
        org.jsoup.parser.Token.Tag tag12 = tokeniser11.tagPending;
        java.lang.StringBuilder stringBuilder13 = null;
        tokeniser11.dataBuffer = stringBuilder13;
        org.jsoup.parser.Token.EndTag endTag15 = new org.jsoup.parser.Token.EndTag();
        char[] charArray18 = new char[] { '#', '#' };
        endTag15.appendAttributeValue(charArray18);
        tokeniser11.emit(charArray18);
        org.jsoup.parser.Token.Comment comment21 = tokeniser11.commentPending;
        org.jsoup.parser.CharacterReader characterReader23 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean24 = characterReader23.matchesLetter();
        miniSoupTokeniserState4.read(tokeniser11, characterReader23);
        htmlTreeBuilder0.tokeniser = tokeniser11;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder27 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader28 = null;
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream31 = parseErrorList30.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList30.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor33 = parseErrorList30.iterator();
        org.jsoup.parser.Tokeniser tokeniser34 = new org.jsoup.parser.Tokeniser(characterReader28, parseErrorList30);
        org.jsoup.parser.Token.Tag tag35 = tokeniser34.tagPending;
        org.jsoup.parser.Token.Tag tag37 = tokeniser34.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype38 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype39 = doctype38.asDoctype();
        java.lang.String str40 = doctype38.tokenType();
        tokeniser34.emit((org.jsoup.parser.Token) doctype38);
        org.jsoup.parser.Token.Tag tag43 = tokeniser34.createTagPending(true);
        xmlTreeBuilder27.currentToken = tag43;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder45 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int50 = parseErrorList49.getMaxSize();
        org.jsoup.nodes.Document document51 = htmlTreeBuilder45.parse("0: Doctype", "hi!", parseErrorList49);
        boolean boolean52 = htmlTreeBuilder45.framesetOk();
        org.jsoup.nodes.Document document55 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder45.setHeadElement((org.jsoup.nodes.Element) document55);
        xmlTreeBuilder27.doc = document55;
        org.jsoup.parser.ParseErrorList parseErrorList61 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream62 = parseErrorList61.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor63 = parseErrorList61.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor64 = parseErrorList61.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList66 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int67 = parseErrorList66.getMaxSize();
        boolean boolean68 = parseErrorList61.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList66);
        xmlTreeBuilder27.initialiseParse("hi!#", "0: []", parseErrorList66);
        org.jsoup.parser.Token.Comment comment70 = new org.jsoup.parser.Token.Comment();
        java.lang.String str71 = comment70.getData();
        xmlTreeBuilder27.insert(comment70);
        java.lang.StringBuilder stringBuilder73 = comment70.data;
        tokeniser11.emit((org.jsoup.parser.Token) comment70);
        org.jsoup.parser.Token.Tag tag76 = tokeniser11.createTagPending(true);
        org.junit.Assert.assertNotNull(miniSoupTokeniserState4);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertNotNull(parseErrorItor10);
        org.junit.Assert.assertNull(tag12);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#, #]");
        org.junit.Assert.assertNull(comment21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorStream31);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertNotNull(parseErrorItor33);
        org.junit.Assert.assertNull(tag35);
        org.junit.Assert.assertNotNull(tag37);
        org.junit.Assert.assertNotNull(doctype39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Doctype" + "'", str40, "Doctype");
        org.junit.Assert.assertNotNull(tag43);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(document51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNotNull(parseErrorList61);
        org.junit.Assert.assertNotNull(parseErrorStream62);
        org.junit.Assert.assertNotNull(parseErrorItor63);
        org.junit.Assert.assertNotNull(parseErrorItor64);
        org.junit.Assert.assertNotNull(parseErrorList66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(stringBuilder73);
        org.junit.Assert.assertEquals(stringBuilder73.toString(), "");
        org.junit.Assert.assertNotNull(tag76);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.Tag tag11 = tokeniser6.createTagPending(false);
        org.jsoup.parser.Token.Tag tag13 = tag11.name("hi!#");
        org.jsoup.nodes.Attributes attributes14 = tag11.getAttributes();
        tag11.appendAttributeValue(' ');
        boolean boolean17 = tag11.isEndTag();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(tag13);
        org.junit.Assert.assertNull(attributes14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        org.jsoup.parser.ParseErrorList parseErrorList18 = htmlTreeBuilder0.errors;
        parseErrorList18.ensureCapacity((int) (short) 10);
        parseErrorList18.ensureCapacity(8);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(parseErrorList18);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        java.lang.String[] strArray21 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean22 = htmlTreeBuilder0.inScope("hi!#", strArray21);
        org.jsoup.parser.ParseErrorList parseErrorList27 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("0: Doctype", "", parseErrorList27);
        java.lang.String str29 = htmlTreeBuilder0.getBaseUri();
        org.jsoup.nodes.Element element30 = htmlTreeBuilder0.pop();
        boolean boolean32 = htmlTreeBuilder0.inTableScope("100: ");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        java.lang.String str1 = org.jsoup.parser.TokenQueue.unescape("0: []");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "0: []" + "'", str1, "0: []");
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWhitespace();
        java.lang.String str7 = tokenQueue1.consumeWord();
        tokenQueue1.addFirst((java.lang.Character) ' ');
        java.lang.String str10 = tokenQueue1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " ");
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches("[100: ]");
        characterReader1.advance();
        char char5 = characterReader1.consume();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + 't' + "'", char5 == 't');
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int2 = parseErrorList1.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        org.jsoup.parser.ParseError[] parseErrorArray6 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList7 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7, parseErrorArray6);
        boolean boolean9 = parseErrorList4.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList7.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        parseErrorList11.clear();
        boolean boolean15 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList1.iterator();
        org.jsoup.parser.CharacterReader characterReader17 = null;
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream20 = parseErrorList19.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList19.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor22 = parseErrorList19.iterator();
        org.jsoup.parser.Tokeniser tokeniser23 = new org.jsoup.parser.Tokeniser(characterReader17, parseErrorList19);
        tokeniser23.createTempBuffer();
        boolean boolean25 = parseErrorList1.contains((java.lang.Object) tokeniser23);
        org.jsoup.parser.Token.Comment comment26 = tokeniser23.commentPending;
        org.jsoup.parser.CharacterReader characterReader27 = null;
        org.jsoup.parser.ParseErrorList parseErrorList29 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream30 = parseErrorList29.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor31 = parseErrorList29.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList29.iterator();
        org.jsoup.parser.Tokeniser tokeniser33 = new org.jsoup.parser.Tokeniser(characterReader27, parseErrorList29);
        org.jsoup.parser.Token.Tag tag34 = tokeniser33.tagPending;
        org.jsoup.parser.Token.Tag tag36 = tokeniser33.createTagPending(true);
        tokeniser33.createTempBuffer();
        tokeniser33.emitTagPending();
        tokeniser33.createDoctypePending();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState40 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype41 = new org.jsoup.parser.Token.Doctype();
        boolean boolean42 = doctype41.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder43 = null;
        boolean boolean44 = htmlTreeBuilderState40.process((org.jsoup.parser.Token) doctype41, htmlTreeBuilder43);
        java.lang.StringBuilder stringBuilder45 = doctype41.name;
        java.lang.StringBuilder stringBuilder46 = doctype41.name;
        tokeniser33.dataBuffer = stringBuilder46;
        tokeniser23.dataBuffer = stringBuilder46;
        org.jsoup.parser.Token.Comment comment49 = tokeniser23.commentPending;
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(parseErrorArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertNotNull(parseErrorStream20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorItor22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(comment26);
        org.junit.Assert.assertNotNull(parseErrorList29);
        org.junit.Assert.assertNotNull(parseErrorStream30);
        org.junit.Assert.assertNotNull(parseErrorItor31);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertNull(tag34);
        org.junit.Assert.assertNotNull(tag36);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(stringBuilder45);
        org.junit.Assert.assertEquals(stringBuilder45.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder46);
        org.junit.Assert.assertEquals(stringBuilder46.toString(), "");
        org.junit.Assert.assertNull(comment49);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        java.lang.String str14 = doctype10.getPublicIdentifier();
        boolean boolean15 = doctype10.forceQuirks;
        java.lang.StringBuilder stringBuilder16 = doctype10.name;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(stringBuilder16);
        org.junit.Assert.assertEquals(stringBuilder16.toString(), "");
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        boolean boolean10 = parseErrorList5.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        xmlTreeBuilder0.initialiseParse("<!---->", "hi!", parseErrorList5);
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document16 = xmlTreeBuilder0.parse("", "[]", parseErrorList15);
        org.jsoup.parser.Token.StartTag startTag18 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType19 = startTag18.type;
        java.lang.String str20 = startTag18.toString();
        boolean boolean21 = xmlTreeBuilder0.process((org.jsoup.parser.Token) startTag18);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList28 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int29 = parseErrorList28.getMaxSize();
        org.jsoup.nodes.Document document30 = htmlTreeBuilder24.parse("0: Doctype", "hi!", parseErrorList28);
        boolean boolean31 = htmlTreeBuilder24.framesetOk();
        org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder24.setHeadElement((org.jsoup.nodes.Element) document34);
        org.jsoup.parser.CharacterReader characterReader38 = null;
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream41 = parseErrorList40.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList40.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList40.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList45 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int46 = parseErrorList45.getMaxSize();
        boolean boolean47 = parseErrorList40.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList45);
        org.jsoup.parser.Tokeniser tokeniser48 = new org.jsoup.parser.Tokeniser(characterReader38, parseErrorList45);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList45.iterator();
        htmlTreeBuilder24.initialiseParse("hi!", "hi!#", parseErrorList45);
        java.util.List<org.jsoup.nodes.Node> nodeList51 = xmlTreeBuilder0.parseFragment("S", "<Doctype>", parseErrorList45);
        org.jsoup.parser.ParseErrorList parseErrorList55 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int56 = parseErrorList55.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray57 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList58 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList58, parseErrorArray57);
        org.jsoup.parser.ParseError[] parseErrorArray60 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList61 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList61, parseErrorArray60);
        boolean boolean63 = parseErrorList58.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList61);
        org.jsoup.parser.ParseError[] parseErrorArray64 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList65 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList65, parseErrorArray64);
        boolean boolean67 = parseErrorList61.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList65);
        parseErrorList65.clear();
        boolean boolean69 = parseErrorList55.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList65);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor70 = parseErrorList55.iterator();
        xmlTreeBuilder0.initialiseParse("[100: ]", "<hi!>", parseErrorList55);
        org.jsoup.parser.Token.Character character73 = new org.jsoup.parser.Token.Character("100: ");
        java.lang.String str74 = character73.toString();
        xmlTreeBuilder0.insert(character73);
        java.lang.String str76 = character73.getData();
        org.jsoup.parser.Token.TokenType tokenType77 = character73.type;
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + tokenType19 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType19.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<hi!>" + "'", str20, "<hi!>");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(parseErrorList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertNotNull(parseErrorStream41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNotNull(parseErrorList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertNotNull(parseErrorList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(parseErrorArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(parseErrorArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(parseErrorItor70);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "100: " + "'", str74, "100: ");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "100: " + "'", str76, "100: ");
        org.junit.Assert.assertTrue("'" + tokenType77 + "' != '" + org.jsoup.parser.Token.TokenType.Character + "'", tokenType77.equals(org.jsoup.parser.Token.TokenType.Character));
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = tokeniser6.unescapeEntities(false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        boolean boolean10 = tag9.isCharacter();
        tag9.appendTagName('t');
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag1.appendTagName("hi!");
        boolean boolean4 = startTag1.isDoctype();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        boolean boolean13 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.nodes.Element element16 = htmlTreeBuilder0.getFromStack("-1: []");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState17 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag18 = new org.jsoup.parser.Token.EndTag();
        endTag18.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder20 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int25 = parseErrorList24.getMaxSize();
        org.jsoup.nodes.Document document26 = htmlTreeBuilder20.parse("0: Doctype", "hi!", parseErrorList24);
        boolean boolean27 = htmlTreeBuilderState17.process((org.jsoup.parser.Token) endTag18, htmlTreeBuilder20);
        org.jsoup.nodes.FormElement formElement28 = htmlTreeBuilder20.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder29 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int34 = parseErrorList33.getMaxSize();
        org.jsoup.nodes.Document document35 = htmlTreeBuilder29.parse("0: Doctype", "hi!", parseErrorList33);
        boolean boolean36 = htmlTreeBuilder29.framesetOk();
        org.jsoup.parser.Parser parser37 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser39 = parser37.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document42 = parser37.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document45 = parser37.parseInput("<hi!>", "[]");
        htmlTreeBuilder29.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document45);
        boolean boolean47 = htmlTreeBuilder29.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder48 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList53 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList55 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream56 = parseErrorList55.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor57 = parseErrorList55.iterator();
        boolean boolean58 = parseErrorList53.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList55);
        xmlTreeBuilder48.initialiseParse("<!---->", "hi!", parseErrorList53);
        org.jsoup.parser.ParseErrorList parseErrorList63 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document64 = xmlTreeBuilder48.parse("", "[]", parseErrorList63);
        boolean boolean65 = htmlTreeBuilder29.isInActiveFormattingElements((org.jsoup.nodes.Element) document64);
        boolean boolean66 = htmlTreeBuilder20.isInActiveFormattingElements((org.jsoup.nodes.Element) document64);
        java.util.List<org.jsoup.parser.Token.Character> characterList67 = htmlTreeBuilder20.getPendingTableCharacters();
        org.jsoup.nodes.Element element68 = htmlTreeBuilder20.getHeadElement();
        htmlTreeBuilder0.insertInFosterParent((org.jsoup.nodes.Node) element68);
        boolean boolean71 = htmlTreeBuilder0.inSelectScope("tartTag");
        org.jsoup.nodes.Element element73 = htmlTreeBuilder0.getActiveFormattingElement("StartTaga");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(element16);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState17);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(formElement28);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parser37);
        org.junit.Assert.assertNotNull(parser39);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(parseErrorList55);
        org.junit.Assert.assertNotNull(parseErrorStream56);
        org.junit.Assert.assertNotNull(parseErrorItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(parseErrorList63);
        org.junit.Assert.assertNotNull(document64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(characterList67);
        org.junit.Assert.assertNotNull(element68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(element73);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        htmlTreeBuilder0.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document32);
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        htmlTreeBuilder0.markInsertionMode();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(document32);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        char[] charArray3 = new char[] { '#', '#' };
        endTag0.appendAttributeValue(charArray3);
        endTag0.finaliseTag();
        endTag0.newAttribute();
        java.lang.String str7 = endTag0.tagName;
        org.jsoup.parser.Token.Tag tag9 = endTag0.name("EndTag");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#, #]");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(tag9);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        boolean boolean7 = tokeniser6.isAppropriateEndTagToken();
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        tag9.appendTagName("S");
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(tag9);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.StartTag startTag13 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType14 = startTag13.type;
        startTag13.appendTagName('#');
        boolean boolean17 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag13);
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader19.advance();
        boolean boolean22 = characterReader19.matchConsume("<hi!>");
        htmlTreeBuilder0.reader = characterReader19;
        boolean boolean25 = characterReader19.matchConsume("[100: ]");
        characterReader19.unconsume();
        java.lang.String str27 = characterReader19.consumeLetterThenDigitSequence();
        org.jsoup.parser.TokenQueue tokenQueue29 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str31 = tokenQueue29.chompTo("Doctype");
        java.lang.String str32 = tokenQueue29.consumeWord();
        boolean boolean33 = tokenQueue29.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag34 = new org.jsoup.parser.Token.EndTag();
        char[] charArray37 = new char[] { '#', '#' };
        endTag34.appendAttributeValue(charArray37);
        boolean boolean39 = tokenQueue29.matchesAny(charArray37);
        boolean boolean40 = characterReader19.matchesAny(charArray37);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertTrue("'" + tokenType14 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType14.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "StartTag" + "'", str27, "StartTag");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "EndTag" + "'", str31, "EndTag");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        org.jsoup.parser.Token.StartTag startTag5 = new org.jsoup.parser.Token.StartTag("Doctype");
        boolean boolean6 = startTag5.isDoctype();
        org.jsoup.parser.CharacterReader characterReader7 = null;
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor12 = parseErrorList9.iterator();
        org.jsoup.parser.Tokeniser tokeniser13 = new org.jsoup.parser.Tokeniser(characterReader7, parseErrorList9);
        org.jsoup.parser.Token.Tag tag14 = tokeniser13.tagPending;
        tokeniser13.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag18 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType19 = startTag18.type;
        startTag18.appendTagName('#');
        tokeniser13.tagPending = startTag18;
        org.jsoup.parser.TokeniserState tokeniserState23 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser13.transition((org.jsoup.parser.ITokeniserState) tokeniserState23);
        org.jsoup.parser.Token.Doctype doctype25 = new org.jsoup.parser.Token.Doctype();
        boolean boolean26 = doctype25.isCharacter();
        tokeniser13.doctypePending = doctype25;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState28 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype29 = new org.jsoup.parser.Token.Doctype();
        boolean boolean30 = doctype29.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder31 = null;
        boolean boolean32 = htmlTreeBuilderState28.process((org.jsoup.parser.Token) doctype29, htmlTreeBuilder31);
        java.lang.StringBuilder stringBuilder33 = doctype29.name;
        tokeniser13.dataBuffer = stringBuilder33;
        org.jsoup.parser.Token.EndTag endTag35 = new org.jsoup.parser.Token.EndTag();
        char[] charArray38 = new char[] { '#', '#' };
        endTag35.appendAttributeValue(charArray38);
        endTag35.appendAttributeValue(' ');
        char[] charArray43 = new char[] { '4' };
        endTag35.appendAttributeValue(charArray43);
        tokeniser13.emit(charArray43);
        startTag5.appendAttributeValue(charArray43);
        java.lang.String str47 = characterReader1.consumeToAny(charArray43);
        java.lang.String str48 = characterReader1.consumeLetterSequence();
        boolean boolean50 = characterReader1.matchConsume("1: Doctype");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertNotNull(parseErrorItor12);
        org.junit.Assert.assertNull(tag14);
        org.junit.Assert.assertTrue("'" + tokenType19 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType19.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(stringBuilder33);
        org.junit.Assert.assertEquals(stringBuilder33.toString(), "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#, #]");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "StartTag" + "'", str47, "StartTag");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Element element12 = htmlTreeBuilder0.pop();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.parser.Parser parser21 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser23 = parser21.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document26 = parser21.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document29 = parser21.parseInput("<hi!>", "[]");
        htmlTreeBuilder13.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document29);
        java.lang.String[] strArray31 = new java.lang.String[] {};
        boolean boolean32 = htmlTreeBuilder13.inScope(strArray31);
        htmlTreeBuilder13.markInsertionMode();
        boolean boolean35 = htmlTreeBuilder13.inScope("StartTag");
        org.jsoup.parser.Token.StartTag startTag36 = new org.jsoup.parser.Token.StartTag();
        startTag36.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag40 = startTag36.name("hi!#");
        boolean boolean41 = startTag36.isStartTag();
        startTag36.appendTagName('a');
        org.jsoup.nodes.Element element44 = htmlTreeBuilder13.insertEmpty(startTag36);
        java.lang.String str45 = htmlTreeBuilder13.getBaseUri();
        org.jsoup.nodes.Document document48 = htmlTreeBuilder13.parse("\uffff", "<!---->");
        org.jsoup.nodes.Document document52 = org.jsoup.parser.Parser.parse("hi!", "<!---->");
        java.util.List<org.jsoup.nodes.Node> nodeList54 = org.jsoup.parser.Parser.parseFragment("<Doctype>", (org.jsoup.nodes.Element) document52, "0: []");
        htmlTreeBuilder13.insert((org.jsoup.nodes.Element) document52);
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document52);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(parser21);
        org.junit.Assert.assertNotNull(parser23);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(tag40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(element44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertNotNull(nodeList54);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.ScriptDataEscapedDash;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        tokeniser7.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype11 = tokeniser7.doctypePending;
        tokeniser7.createCommentPending();
        org.jsoup.parser.Token.Comment comment13 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader14 = null;
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList16.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList16.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList16.iterator();
        org.jsoup.parser.Tokeniser tokeniser20 = new org.jsoup.parser.Tokeniser(characterReader14, parseErrorList16);
        org.jsoup.parser.Token.Tag tag21 = tokeniser20.tagPending;
        tokeniser20.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype24 = tokeniser20.doctypePending;
        tokeniser20.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype26 = tokeniser20.doctypePending;
        org.jsoup.parser.Token.Comment comment27 = new org.jsoup.parser.Token.Comment();
        java.lang.String str28 = comment27.toString();
        java.lang.StringBuilder stringBuilder29 = comment27.data;
        boolean boolean30 = comment27.isEndTag();
        java.lang.String str31 = comment27.toString();
        tokeniser20.commentPending = comment27;
        java.lang.StringBuilder stringBuilder33 = comment27.data;
        tokeniser7.commentPending = comment27;
        org.jsoup.parser.CharacterReader characterReader36 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean38 = characterReader36.matches("[100: ]");
        java.lang.String str39 = characterReader36.toString();
        tokeniserState0.read(tokeniser7, characterReader36);
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNull(doctype11);
        org.junit.Assert.assertNotNull(comment13);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertNull(tag21);
        org.junit.Assert.assertNull(doctype24);
        org.junit.Assert.assertNull(doctype26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<!---->" + "'", str28, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder29);
        org.junit.Assert.assertEquals(stringBuilder29.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<!---->" + "'", str31, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder33);
        org.junit.Assert.assertEquals(stringBuilder33.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "StartTag" + "'", str39, "StartTag");
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        tokenQueue1.advance();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder8 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int13 = parseErrorList12.getMaxSize();
        org.jsoup.nodes.Document document14 = htmlTreeBuilder8.parse("0: Doctype", "hi!", parseErrorList12);
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        boolean boolean20 = parseErrorList18.canAddError();
        org.jsoup.nodes.Document document21 = htmlTreeBuilder8.parse("EndTag", "hi!#", parseErrorList18);
        java.lang.String[] strArray29 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean30 = htmlTreeBuilder8.inScope("hi!#", strArray29);
        java.lang.String str31 = tokenQueue1.consumeToAny(strArray29);
        java.lang.String str32 = tokenQueue1.consumeCssIdentifier();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder33 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList37 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int38 = parseErrorList37.getMaxSize();
        org.jsoup.nodes.Document document39 = htmlTreeBuilder33.parse("0: Doctype", "hi!", parseErrorList37);
        htmlTreeBuilder33.resetInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder41 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList45 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int46 = parseErrorList45.getMaxSize();
        org.jsoup.nodes.Document document47 = htmlTreeBuilder41.parse("0: Doctype", "hi!", parseErrorList45);
        boolean boolean48 = htmlTreeBuilder41.framesetOk();
        org.jsoup.nodes.Document document51 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder41.setHeadElement((org.jsoup.nodes.Element) document51);
        org.jsoup.nodes.Document document55 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder41.setHeadElement((org.jsoup.nodes.Element) document55);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder58 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList62 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int63 = parseErrorList62.getMaxSize();
        org.jsoup.nodes.Document document64 = htmlTreeBuilder58.parse("0: Doctype", "hi!", parseErrorList62);
        org.jsoup.parser.ParseErrorList parseErrorList68 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream69 = parseErrorList68.stream();
        boolean boolean70 = parseErrorList68.canAddError();
        org.jsoup.nodes.Document document71 = htmlTreeBuilder58.parse("EndTag", "hi!#", parseErrorList68);
        java.lang.String[] strArray79 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean80 = htmlTreeBuilder58.inScope("hi!#", strArray79);
        boolean boolean81 = htmlTreeBuilder41.inScope("hi!#", strArray79);
        htmlTreeBuilder33.popStackToClose(strArray79);
        java.lang.String str83 = tokenQueue1.consumeToAny(strArray79);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(parseErrorList37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(parseErrorList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(document51);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNotNull(parseErrorList62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(document64);
        org.junit.Assert.assertNotNull(parseErrorList68);
        org.junit.Assert.assertNotNull(parseErrorStream69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(document71);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.resetInsertionMode();
        htmlTreeBuilder0.popStackToBefore("EndTag");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = htmlTreeBuilder0.state();
        htmlTreeBuilder0.runParser();
        org.jsoup.parser.Tokeniser tokeniser12 = htmlTreeBuilder0.tokeniser;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder14 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int19 = parseErrorList18.getMaxSize();
        org.jsoup.nodes.Document document20 = htmlTreeBuilder14.parse("0: Doctype", "hi!", parseErrorList18);
        boolean boolean21 = htmlTreeBuilder14.framesetOk();
        org.jsoup.nodes.Document document24 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder14.setHeadElement((org.jsoup.nodes.Element) document24);
        htmlTreeBuilder14.newPendingTableCharacters();
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor31 = parseErrorList30.listIterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList30.iterator();
        org.jsoup.nodes.Document document33 = htmlTreeBuilder14.parse("StartTag", "[100: ]", parseErrorList30);
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        boolean boolean38 = parseErrorList36.contains((java.lang.Object) "0: []");
        java.util.List<org.jsoup.nodes.Node> nodeList39 = htmlTreeBuilder0.parseFragment("35: hi!#", (org.jsoup.nodes.Element) document33, "S", parseErrorList36);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList36.listIterator();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState10);
        org.junit.Assert.assertNotNull(tokeniser12);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorItor31);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeList39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList4.listIterator(0);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError10 = parseErrorList4.remove((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor8);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.iterator();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.Tokeniser tokeniser9 = xmlTreeBuilder0.tokeniser;
        org.jsoup.parser.ITokeniserState iTokeniserState10 = tokeniser9.getState();
        org.jsoup.parser.Token.Comment comment11 = new org.jsoup.parser.Token.Comment();
        java.lang.String str12 = comment11.toString();
        boolean boolean13 = comment11.isCharacter();
        boolean boolean14 = comment11.bogus;
        tokeniser9.commentPending = comment11;
        tokeniser9.emit("Comment");
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(tokeniser9);
        org.junit.Assert.assertNotNull(iTokeniserState10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<!---->" + "'", str12, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.formatAsBlock();
        org.jsoup.parser.Tag tag6 = tag1.setSelfClosing();
        boolean boolean7 = tag1.isFormSubmittable();
        boolean boolean8 = tag1.isFormSubmittable();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(tag6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        htmlTreeBuilder0.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState18 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype19 = new org.jsoup.parser.Token.Doctype();
        boolean boolean20 = doctype19.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder21 = null;
        boolean boolean22 = htmlTreeBuilderState18.process((org.jsoup.parser.Token) doctype19, htmlTreeBuilder21);
        htmlTreeBuilder0.error(htmlTreeBuilderState18);
        htmlTreeBuilder0.newPendingTableCharacters();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        boolean boolean10 = parseErrorList5.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        xmlTreeBuilder0.initialiseParse("<!---->", "hi!", parseErrorList5);
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document16 = xmlTreeBuilder0.parse("", "[]", parseErrorList15);
        org.jsoup.nodes.Document document17 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder18 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token token19 = xmlTreeBuilder18.currentToken;
        org.jsoup.parser.Parser parser21 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser23 = parser21.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document26 = parser21.parseInput("Doctype", "[]");
        java.util.List<org.jsoup.nodes.Node> nodeList28 = org.jsoup.parser.Parser.parseFragment("", (org.jsoup.nodes.Element) document26, "<hi!>");
        org.jsoup.nodes.Element[] elementArray29 = new org.jsoup.nodes.Element[] { document26 };
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList30 = new org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.nodes.Element>) elementList30, elementArray29);
        xmlTreeBuilder18.stack = elementList30;
        org.jsoup.parser.Token.Character character34 = new org.jsoup.parser.Token.Character("-1: []");
        xmlTreeBuilder18.insert(character34);
        xmlTreeBuilder0.insert(character34);
        org.jsoup.parser.Token.Comment comment37 = new org.jsoup.parser.Token.Comment();
        xmlTreeBuilder0.insert(comment37);
        org.jsoup.parser.CharacterReader characterReader39 = null;
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream42 = parseErrorList41.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList41.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor44 = parseErrorList41.iterator();
        org.jsoup.parser.Tokeniser tokeniser45 = new org.jsoup.parser.Tokeniser(characterReader39, parseErrorList41);
        org.jsoup.parser.Token.Tag tag46 = tokeniser45.tagPending;
        tokeniser45.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag50 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType51 = startTag50.type;
        startTag50.appendTagName('#');
        tokeniser45.tagPending = startTag50;
        org.jsoup.parser.TokeniserState tokeniserState55 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser45.transition((org.jsoup.parser.ITokeniserState) tokeniserState55);
        org.jsoup.parser.Token.Doctype doctype57 = new org.jsoup.parser.Token.Doctype();
        boolean boolean58 = doctype57.isCharacter();
        tokeniser45.doctypePending = doctype57;
        boolean boolean60 = doctype57.isEndTag();
        java.lang.StringBuilder stringBuilder61 = doctype57.publicIdentifier;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = xmlTreeBuilder0.process((org.jsoup.parser.Token) doctype57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNull(token19);
        org.junit.Assert.assertNotNull(parser21);
        org.junit.Assert.assertNotNull(parser23);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertNotNull(elementArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertNotNull(parseErrorStream42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNotNull(parseErrorItor44);
        org.junit.Assert.assertNull(tag46);
        org.junit.Assert.assertTrue("'" + tokenType51 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType51.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(stringBuilder61);
        org.junit.Assert.assertEquals(stringBuilder61.toString(), "");
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.jsoup.parser.Token.StartTag startTag2 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes3 = startTag2.getAttributes();
        org.jsoup.parser.Token.StartTag startTag4 = new org.jsoup.parser.Token.StartTag("<!---->", attributes3);
        org.jsoup.parser.Token.StartTag startTag5 = new org.jsoup.parser.Token.StartTag("100: ", attributes3);
        org.jsoup.nodes.Attributes attributes6 = startTag5.getAttributes();
        org.jsoup.nodes.Attributes attributes7 = startTag5.getAttributes();
        startTag5.tagName = "-1: []";
        org.junit.Assert.assertNotNull(attributes3);
        org.junit.Assert.assertNotNull(attributes6);
        org.junit.Assert.assertNotNull(attributes7);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        boolean boolean7 = tokeniser6.isAppropriateEndTagToken();
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream12 = parseErrorList11.stream();
        boolean boolean13 = parseErrorList11.canAddError();
        org.jsoup.parser.ParseError parseError16 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str17 = parseError16.getErrorMessage();
        boolean boolean18 = parseErrorList11.add(parseError16);
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        org.jsoup.parser.Token.Tag tag28 = tokeniser25.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype29 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype30 = doctype29.asDoctype();
        java.lang.String str31 = doctype29.tokenType();
        tokeniser25.emit((org.jsoup.parser.Token) doctype29);
        org.jsoup.parser.ITokeniserState iTokeniserState33 = tokeniser25.getState();
        org.jsoup.parser.Token.Comment comment34 = new org.jsoup.parser.Token.Comment();
        java.lang.String str35 = comment34.toString();
        java.lang.StringBuilder stringBuilder36 = comment34.data;
        boolean boolean37 = comment34.isEndTag();
        boolean boolean38 = comment34.isComment();
        tokeniser25.commentPending = comment34;
        int int40 = parseErrorList11.lastIndexOf((java.lang.Object) comment34);
        tokeniser6.commentPending = comment34;
        comment34.bogus = true;
        comment34.bogus = false;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertNotNull(parseErrorStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(doctype30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Doctype" + "'", str31, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<!---->" + "'", str35, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder36);
        org.junit.Assert.assertEquals(stringBuilder36.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.jsoup.parser.ParseError parseError2 = new org.jsoup.parser.ParseError((int) '\ufffd', "<hi!#>");
        java.lang.String str3 = parseError2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "65533: <hi!#>" + "'", str3, "65533: <hi!#>");
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder21 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int26 = parseErrorList25.getMaxSize();
        org.jsoup.nodes.Document document27 = htmlTreeBuilder21.parse("0: Doctype", "hi!", parseErrorList25);
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document27);
        org.jsoup.parser.CharacterReader characterReader29 = null;
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream32 = parseErrorList31.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor33 = parseErrorList31.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor34 = parseErrorList31.iterator();
        org.jsoup.parser.Tokeniser tokeniser35 = new org.jsoup.parser.Tokeniser(characterReader29, parseErrorList31);
        org.jsoup.parser.Token.Tag tag36 = tokeniser35.tagPending;
        org.jsoup.parser.Token.Tag tag38 = tokeniser35.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype39 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype40 = doctype39.asDoctype();
        java.lang.String str41 = doctype39.tokenType();
        tokeniser35.emit((org.jsoup.parser.Token) doctype39);
        org.jsoup.parser.ITokeniserState iTokeniserState43 = tokeniser35.getState();
        org.jsoup.parser.Token.Comment comment44 = new org.jsoup.parser.Token.Comment();
        java.lang.String str45 = comment44.toString();
        java.lang.StringBuilder stringBuilder46 = comment44.data;
        boolean boolean47 = comment44.isEndTag();
        boolean boolean48 = comment44.isComment();
        tokeniser35.commentPending = comment44;
        htmlTreeBuilder0.insert(comment44);
        org.jsoup.nodes.Document document51 = htmlTreeBuilder0.doc;
        org.jsoup.parser.Token.Comment comment52 = new org.jsoup.parser.Token.Comment();
        java.lang.String str53 = comment52.toString();
        comment52.bogus = true;
        java.lang.String str56 = comment52.getData();
        htmlTreeBuilder0.insert(comment52);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertNotNull(parseErrorStream32);
        org.junit.Assert.assertNotNull(parseErrorItor33);
        org.junit.Assert.assertNotNull(parseErrorItor34);
        org.junit.Assert.assertNull(tag36);
        org.junit.Assert.assertNotNull(tag38);
        org.junit.Assert.assertNotNull(doctype40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Doctype" + "'", str41, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "<!---->" + "'", str45, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder46);
        org.junit.Assert.assertEquals(stringBuilder46.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(document51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "<!---->" + "'", str53, "<!---->");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        java.lang.String str2 = characterReader1.consumeToEnd();
        int int4 = characterReader1.nextIndexOf('a');
        java.lang.String str5 = characterReader1.consumeDigitSequence();
        char char6 = characterReader1.current();
        boolean boolean8 = characterReader1.matches("</hi![]>");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "StartTag" + "'", str2, "StartTag");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\uffff' + "'", char6 == '\uffff');
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        xmlTreeBuilder0.initialiseParse("a", "[]", parseErrorList18);
        org.jsoup.parser.CharacterReader characterReader21 = null;
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream24 = parseErrorList23.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList23.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList23.iterator();
        org.jsoup.parser.Tokeniser tokeniser27 = new org.jsoup.parser.Tokeniser(characterReader21, parseErrorList23);
        org.jsoup.parser.Token.Tag tag28 = tokeniser27.tagPending;
        tokeniser27.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype31 = tokeniser27.doctypePending;
        tokeniser27.createCommentPending();
        org.jsoup.parser.Token.Comment comment33 = tokeniser27.commentPending;
        boolean boolean34 = parseErrorList18.remove((java.lang.Object) tokeniser27);
        org.jsoup.parser.TokeniserState tokeniserState35 = org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedDash;
        tokeniser27.transition((org.jsoup.parser.ITokeniserState) tokeniserState35);
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertNotNull(parseErrorStream24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNull(tag28);
        org.junit.Assert.assertNull(doctype31);
        org.junit.Assert.assertNotNull(comment33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(tokeniserState35);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.AfterBody;
        org.jsoup.parser.Token.EndTag endTag2 = new org.jsoup.parser.Token.EndTag("\uffff");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder10 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int15 = parseErrorList14.getMaxSize();
        org.jsoup.nodes.Document document16 = htmlTreeBuilder10.parse("0: Doctype", "hi!", parseErrorList14);
        boolean boolean17 = htmlTreeBuilder10.framesetOk();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder10.setHeadElement((org.jsoup.nodes.Element) document20);
        org.jsoup.nodes.Element element22 = htmlTreeBuilder10.pop();
        htmlTreeBuilder3.pushActiveFormattingElements(element22);
        org.jsoup.nodes.Element element25 = htmlTreeBuilder3.insert("[100: ]");
        htmlTreeBuilder3.generateImpliedEndTags("[100: ]");
        org.jsoup.parser.Token token28 = htmlTreeBuilder3.currentToken;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState29 = htmlTreeBuilder3.originalState();
        boolean boolean30 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag2, htmlTreeBuilder3);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(token28);
        org.junit.Assert.assertNull(htmlTreeBuilderState29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.jsoup.parser.Token.EndTag endTag4 = new org.jsoup.parser.Token.EndTag();
        char[] charArray7 = new char[] { '#', '#' };
        endTag4.appendAttributeValue(charArray7);
        endTag4.finaliseTag();
        boolean boolean10 = endTag4.isSelfClosing();
        org.jsoup.parser.Tag tag12 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean13 = tag12.isFormListed();
        org.jsoup.parser.Tag tag14 = tag12.setSelfClosing();
        boolean boolean15 = tag12.isKnownTag();
        java.lang.Object[] objArray17 = new java.lang.Object[] { boolean10, tag12, "Doctype" };
        org.jsoup.parser.ParseError parseError18 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray17);
        org.jsoup.parser.ParseError parseError19 = new org.jsoup.parser.ParseError((int) (byte) 0, "Doctype", objArray17);
        java.lang.String str20 = parseError19.toString();
        java.lang.String str21 = parseError19.toString();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(tag14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0: Doctype" + "'", str20, "0: Doctype");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0: Doctype" + "'", str21, "0: Doctype");
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.newPendingTableCharacters();
        boolean boolean9 = htmlTreeBuilder0.inTableScope("");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        endTag11.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilderState10.process((org.jsoup.parser.Token) endTag11, htmlTreeBuilder13);
        htmlTreeBuilder13.clearStackToTableContext();
        htmlTreeBuilder13.generateImpliedEndTags("hi!#");
        java.util.List<org.jsoup.parser.Token.Character> characterList24 = htmlTreeBuilder13.getPendingTableCharacters();
        htmlTreeBuilder0.setPendingTableCharacters(characterList24);
        org.jsoup.parser.ParseErrorList parseErrorList26 = null;
        htmlTreeBuilder0.errors = parseErrorList26;
        org.jsoup.parser.CharacterReader characterReader28 = null;
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream31 = parseErrorList30.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList30.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor33 = parseErrorList30.iterator();
        org.jsoup.parser.Tokeniser tokeniser34 = new org.jsoup.parser.Tokeniser(characterReader28, parseErrorList30);
        org.jsoup.parser.Token.Tag tag35 = tokeniser34.tagPending;
        org.jsoup.parser.Token.Tag tag37 = tokeniser34.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype38 = new org.jsoup.parser.Token.Doctype();
        boolean boolean39 = doctype38.isCharacter();
        boolean boolean40 = doctype38.isEndTag();
        boolean boolean41 = doctype38.isCharacter();
        tokeniser34.emit((org.jsoup.parser.Token) doctype38);
        java.lang.String str43 = doctype38.getSystemIdentifier();
        htmlTreeBuilder0.currentToken = doctype38;
        java.lang.String str45 = doctype38.getPublicIdentifier();
        org.jsoup.parser.Token.TokenType tokenType46 = doctype38.type;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState10);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(characterList24);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorStream31);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertNotNull(parseErrorItor33);
        org.junit.Assert.assertNull(tag35);
        org.junit.Assert.assertNotNull(tag37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + tokenType46 + "' != '" + org.jsoup.parser.Token.TokenType.Doctype + "'", tokenType46.equals(org.jsoup.parser.Token.TokenType.Doctype));
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
        org.jsoup.parser.TreeBuilder treeBuilder2 = null;
        org.jsoup.parser.Parser parser3 = parser1.setTreeBuilder(treeBuilder2);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder4 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document5 = xmlTreeBuilder4.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder6 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        boolean boolean16 = parseErrorList11.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        xmlTreeBuilder6.initialiseParse("<!---->", "hi!", parseErrorList11);
        xmlTreeBuilder4.errors = parseErrorList11;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList19 = xmlTreeBuilder4.stack;
        org.jsoup.parser.CharacterReader characterReader20 = null;
        xmlTreeBuilder4.reader = characterReader20;
        org.jsoup.parser.Parser parser22 = parser1.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder4);
        org.jsoup.parser.Parser parser24 = parser1.setTrackErrors((int) '#');
        boolean boolean25 = parser1.isTrackErrors();
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNull(document5);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(elementList19);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(parser24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFosterInserts();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking((int) (byte) 0);
        org.jsoup.parser.Token.EndTag endTag8 = new org.jsoup.parser.Token.EndTag();
        char[] charArray11 = new char[] { '#', '#' };
        endTag8.appendAttributeValue(charArray11);
        endTag8.finaliseTag();
        boolean boolean14 = endTag8.isSelfClosing();
        org.jsoup.parser.Tag tag16 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean17 = tag16.isFormListed();
        org.jsoup.parser.Tag tag18 = tag16.setSelfClosing();
        boolean boolean19 = tag16.isKnownTag();
        java.lang.Object[] objArray21 = new java.lang.Object[] { boolean14, tag16, "Doctype" };
        org.jsoup.parser.ParseError parseError22 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray21);
        org.jsoup.parser.ParseError parseError23 = new org.jsoup.parser.ParseError((int) (short) -1, "[]", objArray21);
        org.jsoup.parser.ParseError parseError24 = new org.jsoup.parser.ParseError((int) (byte) 10, "", objArray21);
        boolean boolean25 = parseErrorList1.add(parseError24);
        boolean boolean26 = parseErrorList1.canAddError();
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(tag16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(tag18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        boolean boolean13 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder0.getDocument();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(document15);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean4 = characterReader1.matchesDigit();
        java.lang.String str5 = characterReader1.toString();
        boolean boolean7 = characterReader1.matches(' ');
        boolean boolean9 = characterReader1.matchConsumeIgnoreCase("S");
        char char10 = characterReader1.current();
        java.lang.String str11 = characterReader1.toString();
        java.lang.String str13 = characterReader1.consumeTo('\uffff');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + 't' + "'", char10 == 't');
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tartTag" + "'", str11, "tartTag");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tartTag" + "'", str13, "tartTag");
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        boolean boolean12 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        java.lang.String str13 = parseErrorList1.toString();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList1.stream();
        java.lang.Object[] objArray15 = parseErrorList1.toArray();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder16 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.nodes.Document document22 = htmlTreeBuilder16.parse("0: Doctype", "hi!", parseErrorList20);
        boolean boolean23 = htmlTreeBuilder16.framesetOk();
        org.jsoup.parser.Parser parser24 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser26 = parser24.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document29 = parser24.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document32 = parser24.parseInput("<hi!>", "[]");
        htmlTreeBuilder16.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        boolean boolean34 = htmlTreeBuilder16.isFragmentParsing();
        htmlTreeBuilder16.clearStackToTableContext();
        int int36 = parseErrorList1.indexOf((java.lang.Object) htmlTreeBuilder16);
        htmlTreeBuilder16.markInsertionMode();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parser24);
        org.junit.Assert.assertNotNull(parser26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Token token8 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState9 = null;
        htmlTreeBuilder0.error(htmlTreeBuilderState9);
        htmlTreeBuilder0.generateImpliedEndTags("EndTag");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(token8);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        java.lang.String str16 = startTag11.tagName;
        java.lang.String str17 = startTag11.tagName;
        startTag11.appendTagName("");
        java.lang.String str20 = startTag11.tokenType();
        boolean boolean21 = startTag11.selfClosing;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!#" + "'", str16, "hi!#");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!#" + "'", str17, "hi!#");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "StartTag" + "'", str20, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList15 = xmlTreeBuilder0.stack;
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList18);
        org.jsoup.parser.Token.Tag tag23 = tokeniser22.tagPending;
        org.jsoup.parser.Token.Tag tag25 = tokeniser22.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype26 = tokeniser22.doctypePending;
        xmlTreeBuilder0.tokeniser = tokeniser22;
        org.jsoup.parser.CharacterReader characterReader28 = null;
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream31 = parseErrorList30.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList30.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor33 = parseErrorList30.iterator();
        org.jsoup.parser.Tokeniser tokeniser34 = new org.jsoup.parser.Tokeniser(characterReader28, parseErrorList30);
        tokeniser34.createTempBuffer();
        xmlTreeBuilder0.tokeniser = tokeniser34;
        org.jsoup.parser.TokenQueue tokenQueue38 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean39 = tokenQueue38.matchesStartTag();
        char[] charArray46 = new char[] { ' ', '4', '\000', ' ', '\uffff', 'a' };
        boolean boolean47 = tokenQueue38.matchesAny(charArray46);
        tokeniser34.emit(charArray46);
        tokeniser34.createTempBuffer();
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(elementList15);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNull(tag23);
        org.junit.Assert.assertNotNull(tag25);
        org.junit.Assert.assertNull(doctype26);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorStream31);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertNotNull(parseErrorItor33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charArray46);
// flaky:         org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), " 4\000\uffffa");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), " 4\000\uffffa");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[ , 4, \000\uffff, a]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        tokenQueue1.addFirst((java.lang.Character) '\uffff');
        boolean boolean8 = tokenQueue1.matchesWhitespace();
        boolean boolean9 = tokenQueue1.matchesWord();
        java.lang.String str10 = tokenQueue1.consumeElementSelector();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Element element13 = htmlTreeBuilder0.getActiveFormattingElement("");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder16 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList21 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream24 = parseErrorList23.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList23.iterator();
        boolean boolean26 = parseErrorList21.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23);
        xmlTreeBuilder16.initialiseParse("<!---->", "hi!", parseErrorList21);
        int int29 = parseErrorList21.indexOf((java.lang.Object) '#');
        boolean boolean31 = parseErrorList21.equals((java.lang.Object) (short) 0);
        org.jsoup.nodes.Document document32 = htmlTreeBuilder0.parse("tartTag", " EndTag", parseErrorList21);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState33 = org.jsoup.parser.HtmlTreeBuilderState.AfterBody;
        htmlTreeBuilder0.transition(htmlTreeBuilderState33);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(element13);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertNotNull(parseErrorStream24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState33);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        boolean boolean10 = parseErrorList5.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        xmlTreeBuilder0.initialiseParse("<!---->", "hi!", parseErrorList5);
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document16 = xmlTreeBuilder0.parse("", "[]", parseErrorList15);
        org.jsoup.nodes.Document document17 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder18 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token token19 = xmlTreeBuilder18.currentToken;
        org.jsoup.parser.Parser parser21 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser23 = parser21.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document26 = parser21.parseInput("Doctype", "[]");
        java.util.List<org.jsoup.nodes.Node> nodeList28 = org.jsoup.parser.Parser.parseFragment("", (org.jsoup.nodes.Element) document26, "<hi!>");
        org.jsoup.nodes.Element[] elementArray29 = new org.jsoup.nodes.Element[] { document26 };
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList30 = new org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.nodes.Element>) elementList30, elementArray29);
        xmlTreeBuilder18.stack = elementList30;
        org.jsoup.parser.Token.Character character34 = new org.jsoup.parser.Token.Character("-1: []");
        xmlTreeBuilder18.insert(character34);
        xmlTreeBuilder0.insert(character34);
        org.jsoup.parser.Token.Comment comment37 = new org.jsoup.parser.Token.Comment();
        xmlTreeBuilder0.insert(comment37);
        java.lang.String str39 = comment37.toString();
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNull(token19);
        org.junit.Assert.assertNotNull(parser21);
        org.junit.Assert.assertNotNull(parser23);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertNotNull(elementArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "<!---->" + "'", str39, "<!---->");
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        boolean boolean13 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag15 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement17 = htmlTreeBuilder0.insertForm(startTag15, true);
        java.lang.String str18 = startTag15.toString();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(formElement17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<[100: ]>" + "'", str18, "<[100: ]>");
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean4 = characterReader1.matchesDigit();
        boolean boolean5 = characterReader1.matchesLetter();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        java.lang.StringBuilder stringBuilder9 = null;
        tokeniser7.dataBuffer = stringBuilder9;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        tokeniser7.emit(charArray14);
        org.jsoup.parser.Token.Comment comment17 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean20 = characterReader19.matchesLetter();
        miniSoupTokeniserState0.read(tokeniser7, characterReader19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        org.jsoup.parser.Token.Tag tag31 = tokeniser28.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype32 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype33 = doctype32.asDoctype();
        java.lang.String str34 = doctype32.tokenType();
        tokeniser28.emit((org.jsoup.parser.Token) doctype32);
        org.jsoup.parser.ITokeniserState iTokeniserState36 = tokeniser28.getState();
        org.jsoup.parser.Token.Comment comment37 = new org.jsoup.parser.Token.Comment();
        java.lang.String str38 = comment37.toString();
        java.lang.StringBuilder stringBuilder39 = comment37.data;
        boolean boolean40 = comment37.isEndTag();
        boolean boolean41 = comment37.isComment();
        tokeniser28.commentPending = comment37;
        org.jsoup.parser.CharacterReader characterReader44 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean46 = characterReader44.matches('\000');
        characterReader44.mark();
        boolean boolean48 = characterReader44.isEmpty();
        java.lang.String str49 = characterReader44.consumeToEnd();
        miniSoupTokeniserState0.read(tokeniser28, characterReader44);
        org.jsoup.parser.CharacterReader characterReader51 = null;
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream54 = parseErrorList53.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList53.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor56 = parseErrorList53.iterator();
        org.jsoup.parser.Tokeniser tokeniser57 = new org.jsoup.parser.Tokeniser(characterReader51, parseErrorList53);
        org.jsoup.parser.Token.Tag tag58 = tokeniser57.tagPending;
        tokeniser57.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag62 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType63 = startTag62.type;
        startTag62.appendTagName('#');
        tokeniser57.tagPending = startTag62;
        tokeniser57.acknowledgeSelfClosingFlag();
        org.jsoup.parser.CharacterReader characterReader69 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean71 = characterReader69.matches('\uffff');
        miniSoupTokeniserState0.read(tokeniser57, characterReader69);
        java.lang.String str73 = characterReader69.consumeDigitSequence();
        java.lang.String str74 = characterReader69.consumeDigitSequence();
        java.lang.String str75 = characterReader69.toString();
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertNotNull(doctype33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Doctype" + "'", str34, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<!---->" + "'", str38, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder39);
        org.junit.Assert.assertEquals(stringBuilder39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "StartTag" + "'", str49, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertNotNull(parseErrorStream54);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertNotNull(parseErrorItor56);
        org.junit.Assert.assertNull(tag58);
        org.junit.Assert.assertTrue("'" + tokenType63 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType63.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "StartTag" + "'", str75, "StartTag");
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        java.lang.String str2 = characterReader1.consumeToEnd();
        int int4 = characterReader1.nextIndexOf('a');
        java.lang.String str5 = characterReader1.consumeDigitSequence();
        boolean boolean7 = characterReader1.matchesIgnoreCase("0: []");
        characterReader1.mark();
        int int9 = characterReader1.pos();
        char char10 = characterReader1.current();
        int int11 = characterReader1.pos();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "StartTag" + "'", str2, "StartTag");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + '\uffff' + "'", char10 == '\uffff');
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        boolean boolean8 = tokenQueue1.matchesCS("StartTag");
        org.jsoup.parser.TokenQueue tokenQueue10 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str12 = tokenQueue10.chompTo("Doctype");
        java.lang.String str13 = tokenQueue10.consumeWord();
        boolean boolean14 = tokenQueue10.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag15 = new org.jsoup.parser.Token.EndTag();
        char[] charArray18 = new char[] { '#', '#' };
        endTag15.appendAttributeValue(charArray18);
        boolean boolean20 = tokenQueue10.matchesAny(charArray18);
        boolean boolean21 = tokenQueue1.matchesAny(charArray18);
        boolean boolean23 = tokenQueue1.matchChomp("1: Doctype");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "EndTag" + "'", str12, "EndTag");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        java.lang.String str16 = startTag11.tagName;
        java.lang.String str17 = startTag11.tagName;
        boolean boolean18 = startTag11.isCharacter();
        java.lang.String str19 = startTag11.tokenType();
        org.jsoup.parser.Token.TokenType tokenType20 = startTag11.type;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!#" + "'", str16, "hi!#");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!#" + "'", str17, "hi!#");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "StartTag" + "'", str19, "StartTag");
        org.junit.Assert.assertTrue("'" + tokenType20 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType20.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        java.util.List<org.jsoup.nodes.Node> nodeList2 = org.jsoup.parser.Parser.parseXmlFragment("t", " EndTag");
        org.junit.Assert.assertNotNull(nodeList2);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        boolean boolean3 = parseErrorList1.canAddError();
        org.jsoup.parser.ParseError parseError6 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str7 = parseError6.getErrorMessage();
        boolean boolean8 = parseErrorList1.add(parseError6);
        int int9 = parseError6.getPosition();
        java.lang.String str10 = parseError6.getErrorMessage();
        java.lang.String str11 = parseError6.getErrorMessage();
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWhitespace();
        java.lang.String str7 = tokenQueue1.consumeWord();
        boolean boolean8 = tokenQueue1.matchesStartTag();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        java.lang.String str2 = characterReader1.consumeToEnd();
        int int4 = characterReader1.nextIndexOf('a');
        java.lang.String str5 = characterReader1.consumeDigitSequence();
        boolean boolean7 = characterReader1.matchesIgnoreCase("0: []");
        characterReader1.mark();
        int int9 = characterReader1.pos();
        java.lang.Class<?> wildcardClass10 = characterReader1.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "StartTag" + "'", str2, "StartTag");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        java.lang.StringBuilder stringBuilder9 = null;
        tokeniser7.dataBuffer = stringBuilder9;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        tokeniser7.emit(charArray14);
        org.jsoup.parser.Token.Comment comment17 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean20 = characterReader19.matchesLetter();
        miniSoupTokeniserState0.read(tokeniser7, characterReader19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        org.jsoup.parser.Token.Tag tag31 = tokeniser28.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype32 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype33 = doctype32.asDoctype();
        java.lang.String str34 = doctype32.tokenType();
        tokeniser28.emit((org.jsoup.parser.Token) doctype32);
        org.jsoup.parser.ITokeniserState iTokeniserState36 = tokeniser28.getState();
        org.jsoup.parser.Token.Comment comment37 = new org.jsoup.parser.Token.Comment();
        java.lang.String str38 = comment37.toString();
        java.lang.StringBuilder stringBuilder39 = comment37.data;
        boolean boolean40 = comment37.isEndTag();
        boolean boolean41 = comment37.isComment();
        tokeniser28.commentPending = comment37;
        org.jsoup.parser.CharacterReader characterReader44 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean46 = characterReader44.matches('\000');
        characterReader44.mark();
        boolean boolean48 = characterReader44.isEmpty();
        java.lang.String str49 = characterReader44.consumeToEnd();
        miniSoupTokeniserState0.read(tokeniser28, characterReader44);
        org.jsoup.parser.CharacterReader characterReader51 = null;
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream54 = parseErrorList53.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList53.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor56 = parseErrorList53.iterator();
        org.jsoup.parser.Tokeniser tokeniser57 = new org.jsoup.parser.Tokeniser(characterReader51, parseErrorList53);
        org.jsoup.parser.Token.Tag tag58 = tokeniser57.tagPending;
        tokeniser57.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag62 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType63 = startTag62.type;
        startTag62.appendTagName('#');
        tokeniser57.tagPending = startTag62;
        tokeniser57.acknowledgeSelfClosingFlag();
        org.jsoup.parser.CharacterReader characterReader69 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean71 = characterReader69.matches('\uffff');
        miniSoupTokeniserState0.read(tokeniser57, characterReader69);
        characterReader69.unconsume();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = characterReader69.consumeLetterSequence();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertNotNull(doctype33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Doctype" + "'", str34, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<!---->" + "'", str38, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder39);
        org.junit.Assert.assertEquals(stringBuilder39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "StartTag" + "'", str49, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertNotNull(parseErrorStream54);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertNotNull(parseErrorItor56);
        org.junit.Assert.assertNull(tag58);
        org.junit.Assert.assertTrue("'" + tokenType63 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType63.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.markInsertionMode();
        boolean boolean22 = htmlTreeBuilder0.inScope("StartTag");
        org.jsoup.parser.Token.StartTag startTag23 = new org.jsoup.parser.Token.StartTag();
        startTag23.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag27 = startTag23.name("hi!#");
        boolean boolean28 = startTag23.isStartTag();
        startTag23.appendTagName('a');
        org.jsoup.nodes.Element element31 = htmlTreeBuilder0.insertEmpty(startTag23);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState32 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag33 = new org.jsoup.parser.Token.EndTag();
        endTag33.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder35 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int40 = parseErrorList39.getMaxSize();
        org.jsoup.nodes.Document document41 = htmlTreeBuilder35.parse("0: Doctype", "hi!", parseErrorList39);
        boolean boolean42 = htmlTreeBuilderState32.process((org.jsoup.parser.Token) endTag33, htmlTreeBuilder35);
        htmlTreeBuilder35.clearStackToTableContext();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder44 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList48 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int49 = parseErrorList48.getMaxSize();
        org.jsoup.nodes.Document document50 = htmlTreeBuilder44.parse("0: Doctype", "hi!", parseErrorList48);
        boolean boolean51 = htmlTreeBuilder44.framesetOk();
        org.jsoup.nodes.Document document54 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder44.setHeadElement((org.jsoup.nodes.Element) document54);
        org.jsoup.nodes.Document document58 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder44.setHeadElement((org.jsoup.nodes.Element) document58);
        htmlTreeBuilder44.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder62 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList66 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int67 = parseErrorList66.getMaxSize();
        org.jsoup.nodes.Document document68 = htmlTreeBuilder62.parse("0: Doctype", "hi!", parseErrorList66);
        boolean boolean69 = htmlTreeBuilder62.framesetOk();
        org.jsoup.nodes.Document document72 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder62.setHeadElement((org.jsoup.nodes.Element) document72);
        org.jsoup.nodes.Document document76 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder62.setHeadElement((org.jsoup.nodes.Element) document76);
        htmlTreeBuilder44.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document76);
        htmlTreeBuilder35.push((org.jsoup.nodes.Element) document76);
        org.jsoup.parser.Token.Comment comment80 = new org.jsoup.parser.Token.Comment();
        java.lang.String str81 = comment80.toString();
        java.lang.StringBuilder stringBuilder82 = comment80.data;
        boolean boolean83 = comment80.isEndTag();
        boolean boolean84 = comment80.isEOF();
        htmlTreeBuilder35.insert(comment80);
        org.jsoup.parser.ParseError[] parseErrorArray86 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList87 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList87, parseErrorArray86);
        org.jsoup.parser.ParseError[] parseErrorArray89 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList90 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList90, parseErrorArray89);
        boolean boolean92 = parseErrorList87.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList90);
        int int94 = parseErrorList90.lastIndexOf((java.lang.Object) (byte) -1);
        org.jsoup.parser.ParseErrorList parseErrorList95 = org.jsoup.parser.ParseErrorList.noTracking();
        boolean boolean96 = parseErrorList90.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList95);
        htmlTreeBuilder35.errors = parseErrorList95;
        org.jsoup.nodes.Element element98 = htmlTreeBuilder35.pop();
        htmlTreeBuilder0.insert(element98);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(tag27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState32);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(parseErrorList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(document54);
        org.junit.Assert.assertNotNull(document58);
        org.junit.Assert.assertNotNull(parseErrorList66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(document68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(document72);
        org.junit.Assert.assertNotNull(document76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "<!---->" + "'", str81, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder82);
        org.junit.Assert.assertEquals(stringBuilder82.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(parseErrorArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(parseErrorArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(parseErrorList95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(element98);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        tokenQueue1.advance();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder8 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int13 = parseErrorList12.getMaxSize();
        org.jsoup.nodes.Document document14 = htmlTreeBuilder8.parse("0: Doctype", "hi!", parseErrorList12);
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        boolean boolean20 = parseErrorList18.canAddError();
        org.jsoup.nodes.Document document21 = htmlTreeBuilder8.parse("EndTag", "hi!#", parseErrorList18);
        java.lang.String[] strArray29 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean30 = htmlTreeBuilder8.inScope("hi!#", strArray29);
        java.lang.String str31 = tokenQueue1.consumeToAny(strArray29);
        boolean boolean32 = tokenQueue1.matchesWord();
        boolean boolean33 = tokenQueue1.matchesStartTag();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = null;
        htmlTreeBuilder0.errors = parseErrorList12;
        org.jsoup.nodes.Element element14 = null;
        boolean boolean15 = htmlTreeBuilder0.onStack(element14);
        java.lang.Class<?> wildcardClass16 = htmlTreeBuilder0.getClass();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder1 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int6 = parseErrorList5.getMaxSize();
        org.jsoup.nodes.Document document7 = htmlTreeBuilder1.parse("0: Doctype", "hi!", parseErrorList5);
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream12 = parseErrorList11.stream();
        boolean boolean13 = parseErrorList11.canAddError();
        org.jsoup.nodes.Document document14 = htmlTreeBuilder1.parse("EndTag", "hi!#", parseErrorList11);
        java.lang.String[] strArray22 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean23 = htmlTreeBuilder1.inScope("hi!#", strArray22);
        org.jsoup.parser.ParseErrorList parseErrorList28 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document29 = htmlTreeBuilder1.parse("0: Doctype", "", parseErrorList28);
        java.lang.String str30 = htmlTreeBuilder1.getBaseUri();
        org.jsoup.nodes.Element element31 = htmlTreeBuilder1.pop();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder32 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int37 = parseErrorList36.getMaxSize();
        org.jsoup.nodes.Document document38 = htmlTreeBuilder32.parse("0: Doctype", "hi!", parseErrorList36);
        boolean boolean39 = htmlTreeBuilder32.framesetOk();
        org.jsoup.nodes.Document document42 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder32.setHeadElement((org.jsoup.nodes.Element) document42);
        org.jsoup.parser.Token.StartTag startTag45 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType46 = startTag45.type;
        startTag45.appendTagName('#');
        boolean boolean49 = htmlTreeBuilder32.process((org.jsoup.parser.Token) startTag45);
        org.jsoup.nodes.Element element50 = htmlTreeBuilder1.insert(startTag45);
        org.jsoup.parser.Token.StartTag startTag51 = new org.jsoup.parser.Token.StartTag();
        startTag51.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag54 = startTag51.asStartTag();
        org.jsoup.parser.Token.Tag tag56 = startTag54.name("");
        org.jsoup.parser.Token.StartTag startTag57 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes58 = startTag57.getAttributes();
        tag56.attributes = attributes58;
        startTag45.attributes = attributes58;
        org.jsoup.parser.Token.StartTag startTag61 = new org.jsoup.parser.Token.StartTag("35: hi!#", attributes58);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertNotNull(parseErrorStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertTrue("'" + tokenType46 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType46.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(element50);
        org.junit.Assert.assertNotNull(startTag54);
        org.junit.Assert.assertNotNull(tag56);
        org.junit.Assert.assertNotNull(attributes58);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        java.lang.String[] strArray10 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str11 = tokenQueue1.consumeToAny(strArray10);
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.Tokeniser tokeniser18 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList14);
        org.jsoup.parser.Token.Tag tag19 = tokeniser18.tagPending;
        java.lang.StringBuilder stringBuilder20 = null;
        tokeniser18.dataBuffer = stringBuilder20;
        org.jsoup.parser.Token.EndTag endTag22 = new org.jsoup.parser.Token.EndTag();
        char[] charArray25 = new char[] { '#', '#' };
        endTag22.appendAttributeValue(charArray25);
        tokeniser18.emit(charArray25);
        boolean boolean28 = tokenQueue1.matchesAny(charArray25);
        java.lang.String str29 = tokenQueue1.consumeCssIdentifier();
        java.lang.String str31 = tokenQueue1.chompTo("a");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder32 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int37 = parseErrorList36.getMaxSize();
        org.jsoup.nodes.Document document38 = htmlTreeBuilder32.parse("0: Doctype", "hi!", parseErrorList36);
        boolean boolean39 = htmlTreeBuilder32.framesetOk();
        org.jsoup.parser.Parser parser40 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser42 = parser40.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document45 = parser40.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document48 = parser40.parseInput("<hi!>", "[]");
        htmlTreeBuilder32.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document48);
        boolean boolean50 = htmlTreeBuilder32.isFragmentParsing();
        org.jsoup.parser.TokenQueue tokenQueue52 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean53 = tokenQueue52.isEmpty();
        boolean boolean54 = tokenQueue52.consumeWhitespace();
        java.lang.String str55 = tokenQueue52.consumeWord();
        boolean boolean56 = tokenQueue52.matchesWhitespace();
        java.lang.String[] strArray61 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str62 = tokenQueue52.consumeToAny(strArray61);
        boolean boolean63 = htmlTreeBuilder32.inScope(strArray61);
        java.lang.String str64 = tokenQueue1.consumeToAny(strArray61);
        java.lang.String str66 = tokenQueue1.consumeTo("Doctype");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNull(tag19);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(parser40);
        org.junit.Assert.assertNotNull(parser42);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "EndTag" + "'", str55, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder10 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int15 = parseErrorList14.getMaxSize();
        org.jsoup.nodes.Document document16 = htmlTreeBuilder10.parse("0: Doctype", "hi!", parseErrorList14);
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream21 = parseErrorList20.stream();
        boolean boolean22 = parseErrorList20.canAddError();
        org.jsoup.nodes.Document document23 = htmlTreeBuilder10.parse("EndTag", "hi!#", parseErrorList20);
        java.lang.String[] strArray31 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean32 = htmlTreeBuilder10.inScope("hi!#", strArray31);
        boolean boolean33 = htmlTreeBuilder0.inScope(strArray31);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder36 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader37 = null;
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream40 = parseErrorList39.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor41 = parseErrorList39.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList39.iterator();
        org.jsoup.parser.Tokeniser tokeniser43 = new org.jsoup.parser.Tokeniser(characterReader37, parseErrorList39);
        xmlTreeBuilder36.tokeniser = tokeniser43;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList45 = xmlTreeBuilder36.stack;
        org.jsoup.parser.CharacterReader characterReader48 = null;
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream51 = parseErrorList50.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor52 = parseErrorList50.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor53 = parseErrorList50.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList55 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int56 = parseErrorList55.getMaxSize();
        boolean boolean57 = parseErrorList50.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList55);
        org.jsoup.parser.Tokeniser tokeniser58 = new org.jsoup.parser.Tokeniser(characterReader48, parseErrorList55);
        org.jsoup.parser.ParseErrorList parseErrorList60 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream61 = parseErrorList60.stream();
        boolean boolean62 = parseErrorList60.canAddError();
        boolean boolean63 = parseErrorList55.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList60);
        java.util.List<org.jsoup.nodes.Node> nodeList64 = xmlTreeBuilder36.parseFragment("StartTag", "<!---->", parseErrorList60);
        org.jsoup.parser.ParseError[] parseErrorArray65 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList66 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList66, parseErrorArray65);
        org.jsoup.parser.ParseError[] parseErrorArray68 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList69 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList69, parseErrorArray68);
        boolean boolean71 = parseErrorList66.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList69);
        boolean boolean72 = parseErrorList60.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList66);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream73 = parseErrorList60.parallelStream();
        org.jsoup.nodes.Document document74 = htmlTreeBuilder0.parse("[100: ]", "\uffff>", parseErrorList60);
        org.jsoup.nodes.Document document77 = org.jsoup.parser.Parser.parse("hi!#", "tartTag");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document77);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertNotNull(parseErrorStream21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertNotNull(parseErrorStream40);
        org.junit.Assert.assertNotNull(parseErrorItor41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNull(elementList45);
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertNotNull(parseErrorStream51);
        org.junit.Assert.assertNotNull(parseErrorItor52);
        org.junit.Assert.assertNotNull(parseErrorItor53);
        org.junit.Assert.assertNotNull(parseErrorList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(parseErrorList60);
        org.junit.Assert.assertNotNull(parseErrorStream61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeList64);
        org.junit.Assert.assertNotNull(parseErrorArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(parseErrorArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(parseErrorStream73);
        org.junit.Assert.assertNotNull(document74);
        org.junit.Assert.assertNotNull(document77);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        boolean boolean19 = doctype18.isCharacter();
        tokeniser6.doctypePending = doctype18;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype22 = new org.jsoup.parser.Token.Doctype();
        boolean boolean23 = doctype22.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = null;
        boolean boolean25 = htmlTreeBuilderState21.process((org.jsoup.parser.Token) doctype22, htmlTreeBuilder24);
        java.lang.StringBuilder stringBuilder26 = doctype22.name;
        tokeniser6.dataBuffer = stringBuilder26;
        org.jsoup.parser.Token.Comment comment28 = new org.jsoup.parser.Token.Comment();
        java.lang.String str29 = comment28.toString();
        boolean boolean30 = comment28.isCharacter();
        boolean boolean31 = comment28.bogus;
        tokeniser6.commentPending = comment28;
        tokeniser6.emitTagPending();
        org.jsoup.parser.Token.Comment comment34 = tokeniser6.commentPending;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(stringBuilder26);
        org.junit.Assert.assertEquals(stringBuilder26.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<!---->" + "'", str29, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(comment34);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean4 = characterReader1.matchesDigit();
        java.lang.String str5 = characterReader1.toString();
        boolean boolean6 = characterReader1.matchesLetter();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        java.lang.Object obj8 = parseErrorList4.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError10 = parseErrorList4.get((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "[]");
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.jsoup.parser.Token.Comment comment0 = new org.jsoup.parser.Token.Comment();
        java.lang.StringBuilder stringBuilder1 = comment0.data;
        org.junit.Assert.assertNotNull(stringBuilder1);
        org.junit.Assert.assertEquals(stringBuilder1.toString(), "");
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        htmlTreeBuilder0.newPendingTableCharacters();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        boolean boolean15 = htmlTreeBuilder0.inButtonScope("StartTag");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder16 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.nodes.Document document22 = htmlTreeBuilder16.parse("0: Doctype", "hi!", parseErrorList20);
        boolean boolean23 = htmlTreeBuilder16.framesetOk();
        org.jsoup.parser.Parser parser24 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser26 = parser24.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document29 = parser24.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document32 = parser24.parseInput("<hi!>", "[]");
        htmlTreeBuilder16.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        boolean boolean34 = htmlTreeBuilder16.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder35 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList40 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList42 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream43 = parseErrorList42.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor44 = parseErrorList42.iterator();
        boolean boolean45 = parseErrorList40.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList42);
        xmlTreeBuilder35.initialiseParse("<!---->", "hi!", parseErrorList40);
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document51 = xmlTreeBuilder35.parse("", "[]", parseErrorList50);
        boolean boolean52 = htmlTreeBuilder16.isInActiveFormattingElements((org.jsoup.nodes.Element) document51);
        org.jsoup.parser.TokenQueue tokenQueue54 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean55 = tokenQueue54.isEmpty();
        boolean boolean56 = tokenQueue54.consumeWhitespace();
        java.lang.String str57 = tokenQueue54.consumeWord();
        boolean boolean58 = tokenQueue54.matchesWhitespace();
        java.lang.String[] strArray63 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str64 = tokenQueue54.consumeToAny(strArray63);
        boolean boolean65 = htmlTreeBuilder16.inScope(strArray63);
        boolean boolean66 = htmlTreeBuilder0.inScope(strArray63);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parser24);
        org.junit.Assert.assertNotNull(parser26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(parseErrorList42);
        org.junit.Assert.assertNotNull(parseErrorStream43);
        org.junit.Assert.assertNotNull(parseErrorItor44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertNotNull(document51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "EndTag" + "'", str57, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        boolean boolean12 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList10.parallelStream();
        java.lang.Object[] objArray14 = parseErrorList10.toArray();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList10.parallelStream();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(parseErrorStream15);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isSelfClosing();
        java.lang.String str5 = tag1.toString();
        boolean boolean6 = tag1.isKnownTag();
        boolean boolean7 = tag1.formatAsBlock();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean4 = characterReader1.matchesDigit();
        java.lang.String str5 = characterReader1.toString();
        boolean boolean7 = characterReader1.matches(' ');
        boolean boolean9 = characterReader1.matchConsumeIgnoreCase("S");
        char char10 = characterReader1.current();
        java.lang.String str11 = characterReader1.consumeAsString();
        boolean boolean13 = characterReader1.matchesIgnoreCase("Comment");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + 't' + "'", char10 == 't');
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "t" + "'", str11, "t");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.Parser parser19 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.parser.Token.StartTag startTag20 = new org.jsoup.parser.Token.StartTag();
        startTag20.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag24 = startTag20.name("hi!#");
        boolean boolean25 = startTag20.selfClosing;
        java.lang.String str26 = startTag20.toString();
        org.jsoup.nodes.Element element27 = htmlTreeBuilder0.insertEmpty(startTag20);
        boolean boolean28 = startTag20.isEndTag();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(tag24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<hi!#>" + "'", str26, "<hi!#>");
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.Parser parser19 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.parser.Token.StartTag startTag20 = new org.jsoup.parser.Token.StartTag();
        startTag20.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag24 = startTag20.name("hi!#");
        boolean boolean25 = startTag20.selfClosing;
        java.lang.String str26 = startTag20.toString();
        org.jsoup.nodes.Element element27 = htmlTreeBuilder0.insertEmpty(startTag20);
        org.jsoup.parser.Token.Doctype doctype28 = new org.jsoup.parser.Token.Doctype();
        boolean boolean29 = doctype28.isCharacter();
        java.lang.StringBuilder stringBuilder30 = doctype28.systemIdentifier;
        org.jsoup.parser.Token.StartTag startTag32 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType33 = startTag32.type;
        doctype28.type = tokenType33;
        startTag20.type = tokenType33;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(tag24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<hi!#>" + "'", str26, "<hi!#>");
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(stringBuilder30);
        org.junit.Assert.assertEquals(stringBuilder30.toString(), "");
        org.junit.Assert.assertTrue("'" + tokenType33 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType33.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        boolean boolean12 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        java.lang.String str13 = parseErrorList1.toString();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList1.stream();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList1.listIterator();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isData();
        boolean boolean3 = tag1.isFormListed();
        boolean boolean4 = tag1.isSelfClosing();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList4.stream();
        org.jsoup.parser.ParseError parseError15 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        parseErrorList4.add((int) (byte) 0, parseError15);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList4.listIterator((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorStream11);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder7 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int12 = parseErrorList11.getMaxSize();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder7.parse("0: Doctype", "hi!", parseErrorList11);
        boolean boolean14 = htmlTreeBuilder7.framesetOk();
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder7.setHeadElement((org.jsoup.nodes.Element) document17);
        org.jsoup.nodes.Element element19 = htmlTreeBuilder7.pop();
        htmlTreeBuilder0.pushActiveFormattingElements(element19);
        org.jsoup.nodes.Element element22 = htmlTreeBuilder0.insert("[100: ]");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder25 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader26 = null;
        org.jsoup.parser.ParseErrorList parseErrorList28 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream29 = parseErrorList28.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor30 = parseErrorList28.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor31 = parseErrorList28.iterator();
        org.jsoup.parser.Tokeniser tokeniser32 = new org.jsoup.parser.Tokeniser(characterReader26, parseErrorList28);
        org.jsoup.parser.Token.Tag tag33 = tokeniser32.tagPending;
        org.jsoup.parser.Token.Tag tag35 = tokeniser32.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype36 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype37 = doctype36.asDoctype();
        java.lang.String str38 = doctype36.tokenType();
        tokeniser32.emit((org.jsoup.parser.Token) doctype36);
        org.jsoup.parser.Token.Tag tag41 = tokeniser32.createTagPending(true);
        xmlTreeBuilder25.currentToken = tag41;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder43 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList47 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int48 = parseErrorList47.getMaxSize();
        org.jsoup.nodes.Document document49 = htmlTreeBuilder43.parse("0: Doctype", "hi!", parseErrorList47);
        boolean boolean50 = htmlTreeBuilder43.framesetOk();
        org.jsoup.nodes.Document document53 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder43.setHeadElement((org.jsoup.nodes.Element) document53);
        xmlTreeBuilder25.doc = document53;
        org.jsoup.parser.ParseErrorList parseErrorList59 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream60 = parseErrorList59.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor61 = parseErrorList59.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor62 = parseErrorList59.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList64 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int65 = parseErrorList64.getMaxSize();
        boolean boolean66 = parseErrorList59.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList64);
        xmlTreeBuilder25.initialiseParse("hi!#", "0: []", parseErrorList64);
        org.jsoup.parser.ParseErrorList parseErrorList68 = xmlTreeBuilder25.errors;
        htmlTreeBuilder0.initialiseParse("EndTag", "Comment", parseErrorList68);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNotNull(parseErrorList28);
        org.junit.Assert.assertNotNull(parseErrorStream29);
        org.junit.Assert.assertNotNull(parseErrorItor30);
        org.junit.Assert.assertNotNull(parseErrorItor31);
        org.junit.Assert.assertNull(tag33);
        org.junit.Assert.assertNotNull(tag35);
        org.junit.Assert.assertNotNull(doctype37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Doctype" + "'", str38, "Doctype");
        org.junit.Assert.assertNotNull(tag41);
        org.junit.Assert.assertNotNull(parseErrorList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertNotNull(parseErrorList59);
        org.junit.Assert.assertNotNull(parseErrorStream60);
        org.junit.Assert.assertNotNull(parseErrorItor61);
        org.junit.Assert.assertNotNull(parseErrorItor62);
        org.junit.Assert.assertNotNull(parseErrorList64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(parseErrorList68);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        htmlTreeBuilder3.clearStackToTableContext();
        htmlTreeBuilder3.generateImpliedEndTags("hi!#");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder3.getPendingTableCharacters();
        boolean boolean16 = htmlTreeBuilder3.inSelectScope("hi!#");
        org.jsoup.parser.CharacterReader characterReader17 = null;
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream20 = parseErrorList19.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList19.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor22 = parseErrorList19.iterator();
        org.jsoup.parser.Tokeniser tokeniser23 = new org.jsoup.parser.Tokeniser(characterReader17, parseErrorList19);
        org.jsoup.parser.Token.Tag tag24 = tokeniser23.tagPending;
        tokeniser23.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag28 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType29 = startTag28.type;
        startTag28.appendTagName('#');
        tokeniser23.tagPending = startTag28;
        java.lang.String str33 = startTag28.tagName;
        java.lang.String str34 = startTag28.tagName;
        org.jsoup.nodes.Element element35 = htmlTreeBuilder3.insert(startTag28);
        boolean boolean36 = htmlTreeBuilder3.isFragmentParsing();
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertNotNull(parseErrorStream20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorItor22);
        org.junit.Assert.assertNull(tag24);
        org.junit.Assert.assertTrue("'" + tokenType29 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType29.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!#" + "'", str33, "hi!#");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!#" + "'", str34, "hi!#");
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.Tokeniser tokeniser9 = xmlTreeBuilder0.tokeniser;
        org.jsoup.parser.ITokeniserState iTokeniserState10 = tokeniser9.getState();
        tokeniser9.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype12 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str13 = doctype12.getSystemIdentifier();
        boolean boolean14 = doctype12.forceQuirks;
        java.lang.String str15 = doctype12.getPublicIdentifier();
        java.lang.StringBuilder stringBuilder16 = doctype12.publicIdentifier;
        tokeniser9.dataBuffer = stringBuilder16;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        org.jsoup.nodes.Element element31 = htmlTreeBuilder18.getActiveFormattingElement("0: Doctype");
        htmlTreeBuilder18.runParser();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder35 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader36 = null;
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList38.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor41 = parseErrorList38.iterator();
        org.jsoup.parser.Tokeniser tokeniser42 = new org.jsoup.parser.Tokeniser(characterReader36, parseErrorList38);
        org.jsoup.parser.Token.Tag tag43 = tokeniser42.tagPending;
        org.jsoup.parser.Token.Tag tag45 = tokeniser42.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype46 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype47 = doctype46.asDoctype();
        java.lang.String str48 = doctype46.tokenType();
        tokeniser42.emit((org.jsoup.parser.Token) doctype46);
        org.jsoup.parser.Token.Tag tag51 = tokeniser42.createTagPending(true);
        xmlTreeBuilder35.currentToken = tag51;
        org.jsoup.nodes.Attributes attributes53 = tag51.attributes;
        org.jsoup.parser.Token.StartTag startTag54 = new org.jsoup.parser.Token.StartTag("", attributes53);
        org.jsoup.parser.Token.StartTag startTag55 = new org.jsoup.parser.Token.StartTag("0: Doctype", attributes53);
        startTag55.appendAttributeName('\uffff');
        org.jsoup.nodes.FormElement formElement59 = htmlTreeBuilder18.insertForm(startTag55, true);
        java.lang.String str60 = startTag55.toString();
        tokeniser9.tagPending = startTag55;
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(tokeniser9);
        org.junit.Assert.assertNotNull(iTokeniserState10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(stringBuilder16);
        org.junit.Assert.assertEquals(stringBuilder16.toString(), "");
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNull(element31);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
        org.junit.Assert.assertNotNull(parseErrorItor41);
        org.junit.Assert.assertNull(tag43);
        org.junit.Assert.assertNotNull(tag45);
        org.junit.Assert.assertNotNull(doctype47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Doctype" + "'", str48, "Doctype");
        org.junit.Assert.assertNotNull(tag51);
        org.junit.Assert.assertNotNull(attributes53);
        org.junit.Assert.assertNotNull(formElement59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "<0: Doctype>" + "'", str60, "<0: Doctype>");
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        boolean boolean2 = startTag1.isCharacter();
        org.jsoup.parser.Token.Doctype doctype3 = new org.jsoup.parser.Token.Doctype();
        java.lang.StringBuilder stringBuilder4 = doctype3.systemIdentifier;
        org.jsoup.parser.Token.TokenType tokenType5 = doctype3.type;
        startTag1.type = tokenType5;
        boolean boolean7 = startTag1.isComment();
        boolean boolean8 = startTag1.selfClosing;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(stringBuilder4);
        org.junit.Assert.assertEquals(stringBuilder4.toString(), "");
        org.junit.Assert.assertTrue("'" + tokenType5 + "' != '" + org.jsoup.parser.Token.TokenType.Doctype + "'", tokenType5.equals(org.jsoup.parser.Token.TokenType.Doctype));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("<!---->");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder10 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader11 = null;
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList13.iterator();
        org.jsoup.parser.Tokeniser tokeniser17 = new org.jsoup.parser.Tokeniser(characterReader11, parseErrorList13);
        org.jsoup.parser.Token.Tag tag18 = tokeniser17.tagPending;
        org.jsoup.parser.Token.Tag tag20 = tokeniser17.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype21 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype22 = doctype21.asDoctype();
        java.lang.String str23 = doctype21.tokenType();
        tokeniser17.emit((org.jsoup.parser.Token) doctype21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser17.createTagPending(true);
        xmlTreeBuilder10.currentToken = tag26;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        boolean boolean35 = htmlTreeBuilder28.framesetOk();
        org.jsoup.nodes.Document document38 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder28.setHeadElement((org.jsoup.nodes.Element) document38);
        xmlTreeBuilder10.doc = document38;
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList44.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList44.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int50 = parseErrorList49.getMaxSize();
        boolean boolean51 = parseErrorList44.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList49);
        xmlTreeBuilder10.initialiseParse("hi!#", "0: []", parseErrorList49);
        org.jsoup.parser.Token.Comment comment53 = new org.jsoup.parser.Token.Comment();
        java.lang.String str54 = comment53.getData();
        xmlTreeBuilder10.insert(comment53);
        java.lang.StringBuilder stringBuilder56 = comment53.data;
        tokeniser6.commentPending = comment53;
        org.jsoup.parser.Token.StartTag startTag58 = new org.jsoup.parser.Token.StartTag();
        java.lang.String str59 = startTag58.tagName;
        tokeniser6.tagPending = startTag58;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNull(tag18);
        org.junit.Assert.assertNotNull(tag20);
        org.junit.Assert.assertNotNull(doctype22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Doctype" + "'", str23, "Doctype");
        org.junit.Assert.assertNotNull(tag26);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(stringBuilder56);
        org.junit.Assert.assertEquals(stringBuilder56.toString(), "");
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        boolean boolean9 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList7);
        org.jsoup.parser.Token.Doctype doctype11 = new org.jsoup.parser.Token.Doctype();
        boolean boolean12 = doctype11.isCharacter();
        java.lang.String str13 = doctype11.getSystemIdentifier();
        tokeniser10.doctypePending = doctype11;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = tokeniser10.appropriateEndTagName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState7 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState7);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder12 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader13 = null;
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream16 = parseErrorList15.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList15.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList15.iterator();
        org.jsoup.parser.Tokeniser tokeniser19 = new org.jsoup.parser.Tokeniser(characterReader13, parseErrorList15);
        org.jsoup.parser.Token.Tag tag20 = tokeniser19.tagPending;
        org.jsoup.parser.Token.Tag tag22 = tokeniser19.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype23 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype24 = doctype23.asDoctype();
        java.lang.String str25 = doctype23.tokenType();
        tokeniser19.emit((org.jsoup.parser.Token) doctype23);
        org.jsoup.parser.Token.Tag tag28 = tokeniser19.createTagPending(true);
        xmlTreeBuilder12.currentToken = tag28;
        org.jsoup.nodes.Attributes attributes30 = tag28.attributes;
        org.jsoup.parser.Token.StartTag startTag31 = new org.jsoup.parser.Token.StartTag("", attributes30);
        org.jsoup.parser.Token.StartTag startTag32 = new org.jsoup.parser.Token.StartTag("0: Doctype", attributes30);
        org.jsoup.parser.Token.StartTag startTag33 = new org.jsoup.parser.Token.StartTag("", attributes30);
        htmlTreeBuilder0.currentToken = startTag33;
        htmlTreeBuilder0.clearStackToTableContext();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(parseErrorStream16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNull(tag20);
        org.junit.Assert.assertNotNull(tag22);
        org.junit.Assert.assertNotNull(doctype24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Doctype" + "'", str25, "Doctype");
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(attributes30);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        boolean boolean8 = tokenQueue1.matchesCS("hi!#");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        boolean boolean2 = startTag1.isCharacter();
        org.jsoup.parser.Token.Doctype doctype3 = new org.jsoup.parser.Token.Doctype();
        java.lang.StringBuilder stringBuilder4 = doctype3.systemIdentifier;
        org.jsoup.parser.Token.TokenType tokenType5 = doctype3.type;
        startTag1.type = tokenType5;
        startTag1.tagName = "\uffff>";
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(stringBuilder4);
        org.junit.Assert.assertEquals(stringBuilder4.toString(), "");
        org.junit.Assert.assertTrue("'" + tokenType5 + "' != '" + org.jsoup.parser.Token.TokenType.Doctype + "'", tokenType5.equals(org.jsoup.parser.Token.TokenType.Doctype));
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.jsoup.parser.Token.Character character1 = new org.jsoup.parser.Token.Character("-1: []");
        boolean boolean2 = character1.isStartTag();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList(0, (int) (byte) 0);
        htmlTreeBuilder0.initialiseParse("<hi!>", "hi!#", parseErrorList5);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder7 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int12 = parseErrorList11.getMaxSize();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder7.parse("0: Doctype", "hi!", parseErrorList11);
        htmlTreeBuilder7.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray16 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList17 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList17, characterArray16);
        htmlTreeBuilder7.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList17);
        boolean boolean20 = htmlTreeBuilder7.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag22 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement24 = htmlTreeBuilder7.insertForm(startTag22, true);
        htmlTreeBuilder0.setFormElement(formElement24);
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(characterArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(formElement24);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Element element13 = htmlTreeBuilder0.getActiveFormattingElement("");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder16 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList21 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream24 = parseErrorList23.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList23.iterator();
        boolean boolean26 = parseErrorList21.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23);
        xmlTreeBuilder16.initialiseParse("<!---->", "hi!", parseErrorList21);
        int int29 = parseErrorList21.indexOf((java.lang.Object) '#');
        boolean boolean31 = parseErrorList21.equals((java.lang.Object) (short) 0);
        org.jsoup.nodes.Document document32 = htmlTreeBuilder0.parse("tartTag", " EndTag", parseErrorList21);
        htmlTreeBuilder0.setFosterInserts(false);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(element13);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertNotNull(parseErrorStream24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(document32);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        htmlTreeBuilder0.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document32);
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        org.jsoup.parser.CharacterReader characterReader35 = htmlTreeBuilder0.reader;
        htmlTreeBuilder0.generateImpliedEndTags();
        htmlTreeBuilder0.newPendingTableCharacters();
        org.jsoup.parser.Parser parser38 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser40 = parser38.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document43 = parser38.parseInput("a", "hi!#");
        htmlTreeBuilder0.maybeSetBaseUri((org.jsoup.nodes.Element) document43);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(characterReader35);
        org.junit.Assert.assertNotNull(parser38);
        org.junit.Assert.assertNotNull(parser40);
        org.junit.Assert.assertNotNull(document43);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        boolean boolean9 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList7);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        boolean boolean14 = parseErrorList12.canAddError();
        boolean boolean15 = parseErrorList7.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        boolean boolean16 = parseErrorList7.canAddError();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder17 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = new org.jsoup.parser.ParseErrorList(0, (int) (byte) 0);
        htmlTreeBuilder17.initialiseParse("<hi!>", "hi!#", parseErrorList22);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList22.listIterator();
        boolean boolean25 = parseErrorList7.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList22);
        boolean boolean26 = parseErrorList22.canAddError();
        int int27 = parseErrorList22.size();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag6 = new org.jsoup.parser.Token.EndTag();
        char[] charArray9 = new char[] { '#', '#' };
        endTag6.appendAttributeValue(charArray9);
        boolean boolean11 = tokenQueue1.matchesAny(charArray9);
        org.jsoup.parser.TokenQueue tokenQueue13 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean14 = tokenQueue13.isEmpty();
        java.lang.String str16 = tokenQueue13.consumeToIgnoreCase("<hi!>");
        java.lang.String str17 = tokenQueue13.consumeTagName();
        boolean boolean18 = tokenQueue13.matchesWord();
        tokenQueue13.advance();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder20 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int25 = parseErrorList24.getMaxSize();
        org.jsoup.nodes.Document document26 = htmlTreeBuilder20.parse("0: Doctype", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream31 = parseErrorList30.stream();
        boolean boolean32 = parseErrorList30.canAddError();
        org.jsoup.nodes.Document document33 = htmlTreeBuilder20.parse("EndTag", "hi!#", parseErrorList30);
        java.lang.String[] strArray41 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean42 = htmlTreeBuilder20.inScope("hi!#", strArray41);
        java.lang.String str43 = tokenQueue13.consumeToAny(strArray41);
        boolean boolean44 = tokenQueue1.matchesAny(strArray41);
        char char45 = tokenQueue1.peek();
        java.lang.String str46 = tokenQueue1.remainder();
        boolean boolean47 = tokenQueue1.matchesWord();
        boolean boolean48 = tokenQueue1.matchesWord();
        java.lang.String str49 = tokenQueue1.consumeElementSelector();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "EndTag" + "'", str16, "EndTag");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorStream31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList4.stream();
        org.jsoup.parser.ParseError parseError15 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        parseErrorList4.add((int) (byte) 0, parseError15);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList4.stream();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder18 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList23 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream26 = parseErrorList25.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList25.iterator();
        boolean boolean28 = parseErrorList23.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList25);
        xmlTreeBuilder18.initialiseParse("<!---->", "hi!", parseErrorList23);
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document34 = xmlTreeBuilder18.parse("", "[]", parseErrorList33);
        org.jsoup.parser.Token.StartTag startTag36 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType37 = startTag36.type;
        java.lang.String str38 = startTag36.toString();
        boolean boolean39 = xmlTreeBuilder18.process((org.jsoup.parser.Token) startTag36);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder42 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int47 = parseErrorList46.getMaxSize();
        org.jsoup.nodes.Document document48 = htmlTreeBuilder42.parse("0: Doctype", "hi!", parseErrorList46);
        boolean boolean49 = htmlTreeBuilder42.framesetOk();
        org.jsoup.nodes.Document document52 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder42.setHeadElement((org.jsoup.nodes.Element) document52);
        org.jsoup.parser.CharacterReader characterReader56 = null;
        org.jsoup.parser.ParseErrorList parseErrorList58 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream59 = parseErrorList58.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor60 = parseErrorList58.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor61 = parseErrorList58.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList63 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int64 = parseErrorList63.getMaxSize();
        boolean boolean65 = parseErrorList58.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList63);
        org.jsoup.parser.Tokeniser tokeniser66 = new org.jsoup.parser.Tokeniser(characterReader56, parseErrorList63);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor67 = parseErrorList63.iterator();
        htmlTreeBuilder42.initialiseParse("hi!", "hi!#", parseErrorList63);
        java.util.List<org.jsoup.nodes.Node> nodeList69 = xmlTreeBuilder18.parseFragment("S", "<Doctype>", parseErrorList63);
        org.jsoup.parser.ParseErrorList parseErrorList73 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int74 = parseErrorList73.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray75 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList76 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList76, parseErrorArray75);
        org.jsoup.parser.ParseError[] parseErrorArray78 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList79 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList79, parseErrorArray78);
        boolean boolean81 = parseErrorList76.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList79);
        org.jsoup.parser.ParseError[] parseErrorArray82 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList83 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList83, parseErrorArray82);
        boolean boolean85 = parseErrorList79.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList83);
        parseErrorList83.clear();
        boolean boolean87 = parseErrorList73.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList83);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor88 = parseErrorList73.iterator();
        xmlTreeBuilder18.initialiseParse("[100: ]", "<hi!>", parseErrorList73);
        org.jsoup.parser.Token.Character character91 = new org.jsoup.parser.Token.Character("100: ");
        java.lang.String str92 = character91.toString();
        xmlTreeBuilder18.insert(character91);
        boolean boolean94 = parseErrorList4.equals((java.lang.Object) character91);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertNotNull(parseErrorStream26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertTrue("'" + tokenType37 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType37.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<hi!>" + "'", str38, "<hi!>");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertNotNull(parseErrorList58);
        org.junit.Assert.assertNotNull(parseErrorStream59);
        org.junit.Assert.assertNotNull(parseErrorItor60);
        org.junit.Assert.assertNotNull(parseErrorItor61);
        org.junit.Assert.assertNotNull(parseErrorList63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(parseErrorItor67);
        org.junit.Assert.assertNotNull(nodeList69);
        org.junit.Assert.assertNotNull(parseErrorList73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(parseErrorArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(parseErrorArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(parseErrorItor88);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "100: " + "'", str92, "100: ");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.jsoup.nodes.Attributes attributes1 = null;
        org.jsoup.parser.Token.StartTag startTag2 = new org.jsoup.parser.Token.StartTag("[]", attributes1);
        startTag2.appendTagName("-1: []");
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.Token.Tag tag17 = tokeniser6.createTagPending(true);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tag17);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder17 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        org.jsoup.nodes.Document document23 = htmlTreeBuilder17.parse("0: Doctype", "hi!", parseErrorList21);
        org.jsoup.parser.ParseErrorList parseErrorList27 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream28 = parseErrorList27.stream();
        boolean boolean29 = parseErrorList27.canAddError();
        org.jsoup.nodes.Document document30 = htmlTreeBuilder17.parse("EndTag", "hi!#", parseErrorList27);
        java.lang.String[] strArray38 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean39 = htmlTreeBuilder17.inScope("hi!#", strArray38);
        boolean boolean40 = htmlTreeBuilder0.inScope("hi!#", strArray38);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder41 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList45 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int46 = parseErrorList45.getMaxSize();
        org.jsoup.nodes.Document document47 = htmlTreeBuilder41.parse("0: Doctype", "hi!", parseErrorList45);
        boolean boolean48 = htmlTreeBuilder41.framesetOk();
        org.jsoup.nodes.Document document51 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder41.setHeadElement((org.jsoup.nodes.Element) document51);
        org.jsoup.nodes.Element element54 = htmlTreeBuilder41.getActiveFormattingElement("0: Doctype");
        htmlTreeBuilder41.runParser();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder58 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader59 = null;
        org.jsoup.parser.ParseErrorList parseErrorList61 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream62 = parseErrorList61.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor63 = parseErrorList61.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor64 = parseErrorList61.iterator();
        org.jsoup.parser.Tokeniser tokeniser65 = new org.jsoup.parser.Tokeniser(characterReader59, parseErrorList61);
        org.jsoup.parser.Token.Tag tag66 = tokeniser65.tagPending;
        org.jsoup.parser.Token.Tag tag68 = tokeniser65.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype69 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype70 = doctype69.asDoctype();
        java.lang.String str71 = doctype69.tokenType();
        tokeniser65.emit((org.jsoup.parser.Token) doctype69);
        org.jsoup.parser.Token.Tag tag74 = tokeniser65.createTagPending(true);
        xmlTreeBuilder58.currentToken = tag74;
        org.jsoup.nodes.Attributes attributes76 = tag74.attributes;
        org.jsoup.parser.Token.StartTag startTag77 = new org.jsoup.parser.Token.StartTag("", attributes76);
        org.jsoup.parser.Token.StartTag startTag78 = new org.jsoup.parser.Token.StartTag("0: Doctype", attributes76);
        startTag78.appendAttributeName('\uffff');
        org.jsoup.nodes.FormElement formElement82 = htmlTreeBuilder41.insertForm(startTag78, true);
        htmlTreeBuilder0.maybeSetBaseUri((org.jsoup.nodes.Element) formElement82);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(parseErrorList27);
        org.junit.Assert.assertNotNull(parseErrorStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(document51);
        org.junit.Assert.assertNull(element54);
        org.junit.Assert.assertNotNull(parseErrorList61);
        org.junit.Assert.assertNotNull(parseErrorStream62);
        org.junit.Assert.assertNotNull(parseErrorItor63);
        org.junit.Assert.assertNotNull(parseErrorItor64);
        org.junit.Assert.assertNull(tag66);
        org.junit.Assert.assertNotNull(tag68);
        org.junit.Assert.assertNotNull(doctype70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Doctype" + "'", str71, "Doctype");
        org.junit.Assert.assertNotNull(tag74);
        org.junit.Assert.assertNotNull(attributes76);
        org.junit.Assert.assertNotNull(formElement82);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.Tokeniser tokeniser9 = xmlTreeBuilder0.tokeniser;
        org.jsoup.parser.ITokeniserState iTokeniserState10 = tokeniser9.getState();
        org.jsoup.parser.Token.Comment comment11 = new org.jsoup.parser.Token.Comment();
        java.lang.String str12 = comment11.toString();
        boolean boolean13 = comment11.isCharacter();
        boolean boolean14 = comment11.bogus;
        tokeniser9.commentPending = comment11;
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList18);
        org.jsoup.parser.Token.Tag tag23 = tokeniser22.tagPending;
        tokeniser22.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag27 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType28 = startTag27.type;
        startTag27.appendTagName('#');
        tokeniser22.tagPending = startTag27;
        org.jsoup.parser.TokeniserState tokeniserState32 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser22.transition((org.jsoup.parser.ITokeniserState) tokeniserState32);
        org.jsoup.parser.Token.Doctype doctype34 = new org.jsoup.parser.Token.Doctype();
        boolean boolean35 = doctype34.isCharacter();
        tokeniser22.doctypePending = doctype34;
        boolean boolean37 = doctype34.isEndTag();
        java.lang.StringBuilder stringBuilder38 = doctype34.publicIdentifier;
        tokeniser9.dataBuffer = stringBuilder38;
        tokeniser9.emitCommentPending();
        // The following exception was thrown during execution in test generation
        try {
            tokeniser9.emitCommentPending();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: There is an unread token pending!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(tokeniser9);
        org.junit.Assert.assertNotNull(iTokeniserState10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<!---->" + "'", str12, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNull(tag23);
        org.junit.Assert.assertTrue("'" + tokenType28 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType28.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(stringBuilder38);
        org.junit.Assert.assertEquals(stringBuilder38.toString(), "");
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean5 = characterReader1.matchesIgnoreCase("<!---->");
        characterReader1.unconsume();
        int int7 = characterReader1.pos();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        boolean boolean12 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.Parser parser13 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser15 = parser13.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder16 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document17 = xmlTreeBuilder16.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder18 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList23 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream26 = parseErrorList25.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList25.iterator();
        boolean boolean28 = parseErrorList23.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList25);
        xmlTreeBuilder18.initialiseParse("<!---->", "hi!", parseErrorList23);
        xmlTreeBuilder16.errors = parseErrorList23;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList31 = xmlTreeBuilder16.stack;
        org.jsoup.parser.Parser parser32 = parser15.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder16);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder16.errors = parseErrorList34;
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream40 = parseErrorList39.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor41 = parseErrorList39.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList39.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int45 = parseErrorList44.getMaxSize();
        boolean boolean46 = parseErrorList39.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        xmlTreeBuilder16.initialiseParse("<!---->", "", parseErrorList39);
        htmlTreeBuilder0.errors = parseErrorList39;
        htmlTreeBuilder0.generateImpliedEndTags("</hi![]>");
        boolean boolean52 = htmlTreeBuilder0.inButtonScope("-1: []");
        org.jsoup.parser.Token.StartTag startTag54 = new org.jsoup.parser.Token.StartTag("Doctype");
        org.jsoup.parser.Token.Tag tag56 = startTag54.name("hi!#");
        org.jsoup.nodes.FormElement formElement58 = htmlTreeBuilder0.insertForm(startTag54, false);
        boolean boolean59 = startTag54.isStartTag();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parser13);
        org.junit.Assert.assertNotNull(parser15);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertNotNull(parseErrorStream26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(elementList31);
        org.junit.Assert.assertNotNull(parser32);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertNotNull(parseErrorStream40);
        org.junit.Assert.assertNotNull(parseErrorItor41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(tag56);
        org.junit.Assert.assertNotNull(formElement58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("hi!#", "a");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag3.formatAsBlock();
        boolean boolean5 = tag3.isFormSubmittable();
        boolean boolean6 = tag3.isBlock();
        boolean boolean7 = tag3.isInline();
        org.jsoup.parser.Tag tag8 = tag3.setSelfClosing();
        boolean boolean9 = tag3.preserveWhitespace();
        boolean boolean10 = tag3.isFormSubmittable();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(tag8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.parser.ParseErrorList parseErrorList2 = htmlTreeBuilder0.errors;
        java.util.List<org.jsoup.parser.Token.Character> characterList3 = htmlTreeBuilder0.getPendingTableCharacters();
        org.junit.Assert.assertNull(parseErrorList2);
        org.junit.Assert.assertNotNull(characterList3);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        boolean boolean16 = htmlTreeBuilder9.framesetOk();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder9.setHeadElement((org.jsoup.nodes.Element) document19);
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder9.setHeadElement((org.jsoup.nodes.Element) document23);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder26 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int31 = parseErrorList30.getMaxSize();
        org.jsoup.nodes.Document document32 = htmlTreeBuilder26.parse("0: Doctype", "hi!", parseErrorList30);
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream37 = parseErrorList36.stream();
        boolean boolean38 = parseErrorList36.canAddError();
        org.jsoup.nodes.Document document39 = htmlTreeBuilder26.parse("EndTag", "hi!#", parseErrorList36);
        java.lang.String[] strArray47 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean48 = htmlTreeBuilder26.inScope("hi!#", strArray47);
        boolean boolean49 = htmlTreeBuilder9.inScope("hi!#", strArray47);
        htmlTreeBuilder0.popStackToClose(strArray47);
        org.jsoup.nodes.Document document51 = htmlTreeBuilder0.doc;
        org.jsoup.nodes.Element element52 = null;
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.maybeSetBaseUri(element52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertNotNull(parseErrorStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(document51);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        char char5 = tokenQueue1.peek();
        org.jsoup.parser.CharacterReader characterReader6 = null;
        org.jsoup.parser.ParseErrorList parseErrorList8 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream9 = parseErrorList8.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor10 = parseErrorList8.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList8.iterator();
        org.jsoup.parser.Tokeniser tokeniser12 = new org.jsoup.parser.Tokeniser(characterReader6, parseErrorList8);
        org.jsoup.parser.Token.Tag tag13 = tokeniser12.tagPending;
        org.jsoup.parser.Token.Tag tag15 = tokeniser12.createTagPending(true);
        java.lang.StringBuilder stringBuilder16 = tokeniser12.dataBuffer;
        org.jsoup.parser.Token.EndTag endTag17 = new org.jsoup.parser.Token.EndTag();
        char[] charArray20 = new char[] { '#', '#' };
        endTag17.appendAttributeValue(charArray20);
        tokeniser12.emit(charArray20);
        boolean boolean23 = tokenQueue1.matchesAny(charArray20);
        java.lang.String str24 = tokenQueue1.consumeElementSelector();
        java.lang.String str26 = tokenQueue1.consumeToIgnoreCase("hi!");
        java.lang.String str27 = tokenQueue1.consumeWord();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\000' + "'", char5 == '\000');
        org.junit.Assert.assertNotNull(parseErrorList8);
        org.junit.Assert.assertNotNull(parseErrorStream9);
        org.junit.Assert.assertNotNull(parseErrorItor10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertNull(tag13);
        org.junit.Assert.assertNotNull(tag15);
        org.junit.Assert.assertNull(stringBuilder16);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag();
        startTag1.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag4 = startTag1.asStartTag();
        org.jsoup.parser.Token.Tag tag6 = startTag4.name("");
        org.jsoup.parser.Token.StartTag startTag7 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes8 = startTag7.getAttributes();
        tag6.attributes = attributes8;
        org.jsoup.parser.Token.StartTag startTag10 = new org.jsoup.parser.Token.StartTag("-1: []", attributes8);
        startTag10.appendTagName('a');
        org.junit.Assert.assertNotNull(startTag4);
        org.junit.Assert.assertNotNull(tag6);
        org.junit.Assert.assertNotNull(attributes8);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.Tag tag11 = tokeniser6.createTagPending(false);
        tokeniser6.emit('#');
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag11);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.framesetOk(false);
        htmlTreeBuilder0.reconstructFormattingElements();
        java.util.List<org.jsoup.parser.Token.Character> characterList23 = htmlTreeBuilder0.getPendingTableCharacters();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(characterList23);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        tokenQueue1.addFirst((java.lang.Character) 'a');
        tokenQueue1.addFirst("StartTag");
        java.lang.String str11 = tokenQueue1.chompToIgnoreCase("hi!#<hi!#>");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "StartTaga" + "'", str11, "StartTaga");
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean8 = htmlTreeBuilder0.inListItemScope("100: ");
        boolean boolean9 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        endTag11.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilderState10.process((org.jsoup.parser.Token) endTag11, htmlTreeBuilder13);
        org.jsoup.nodes.FormElement formElement21 = htmlTreeBuilder13.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder22 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int27 = parseErrorList26.getMaxSize();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder22.parse("0: Doctype", "hi!", parseErrorList26);
        boolean boolean29 = htmlTreeBuilder22.framesetOk();
        org.jsoup.parser.Parser parser30 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser32 = parser30.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document35 = parser30.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document38 = parser30.parseInput("<hi!>", "[]");
        htmlTreeBuilder22.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document38);
        boolean boolean40 = htmlTreeBuilder22.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder41 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList46 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList48 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream49 = parseErrorList48.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor50 = parseErrorList48.iterator();
        boolean boolean51 = parseErrorList46.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList48);
        xmlTreeBuilder41.initialiseParse("<!---->", "hi!", parseErrorList46);
        org.jsoup.parser.ParseErrorList parseErrorList56 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document57 = xmlTreeBuilder41.parse("", "[]", parseErrorList56);
        boolean boolean58 = htmlTreeBuilder22.isInActiveFormattingElements((org.jsoup.nodes.Element) document57);
        boolean boolean59 = htmlTreeBuilder13.isInActiveFormattingElements((org.jsoup.nodes.Element) document57);
        java.util.List<org.jsoup.parser.Token.Character> characterList60 = htmlTreeBuilder13.getPendingTableCharacters();
        org.jsoup.nodes.Element element61 = htmlTreeBuilder13.getHeadElement();
        htmlTreeBuilder0.insert(element61);
        org.jsoup.nodes.Element element63 = htmlTreeBuilder0.pop();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState10);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(formElement21);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parser30);
        org.junit.Assert.assertNotNull(parser32);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList48);
        org.junit.Assert.assertNotNull(parseErrorStream49);
        org.junit.Assert.assertNotNull(parseErrorItor50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(parseErrorList56);
        org.junit.Assert.assertNotNull(document57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(characterList60);
        org.junit.Assert.assertNotNull(element61);
        org.junit.Assert.assertNotNull(element63);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.Tokeniser tokeniser9 = xmlTreeBuilder0.tokeniser;
        org.jsoup.parser.ITokeniserState iTokeniserState10 = tokeniser9.getState();
        org.jsoup.parser.Token.Comment comment11 = new org.jsoup.parser.Token.Comment();
        java.lang.String str12 = comment11.toString();
        boolean boolean13 = comment11.isCharacter();
        boolean boolean14 = comment11.bogus;
        tokeniser9.commentPending = comment11;
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList18);
        org.jsoup.parser.Token.Tag tag23 = tokeniser22.tagPending;
        java.lang.StringBuilder stringBuilder24 = null;
        tokeniser22.dataBuffer = stringBuilder24;
        org.jsoup.parser.Token.Tag tag27 = tokeniser22.createTagPending(false);
        org.jsoup.parser.Token.Comment comment28 = new org.jsoup.parser.Token.Comment();
        java.lang.String str29 = comment28.toString();
        java.lang.StringBuilder stringBuilder30 = comment28.data;
        boolean boolean31 = comment28.isEndTag();
        java.lang.String str32 = comment28.toString();
        java.lang.StringBuilder stringBuilder33 = comment28.data;
        tokeniser22.commentPending = comment28;
        tokeniser9.commentPending = comment28;
        boolean boolean36 = tokeniser9.isAppropriateEndTagToken();
        org.jsoup.parser.CharacterReader characterReader37 = null;
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream40 = parseErrorList39.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor41 = parseErrorList39.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList39.iterator();
        org.jsoup.parser.Tokeniser tokeniser43 = new org.jsoup.parser.Tokeniser(characterReader37, parseErrorList39);
        org.jsoup.parser.Token.Tag tag44 = tokeniser43.tagPending;
        org.jsoup.parser.Token.Tag tag46 = tokeniser43.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype47 = new org.jsoup.parser.Token.Doctype();
        boolean boolean48 = doctype47.isCharacter();
        boolean boolean49 = doctype47.isEndTag();
        boolean boolean50 = doctype47.isCharacter();
        tokeniser43.emit((org.jsoup.parser.Token) doctype47);
        org.jsoup.parser.TokeniserState tokeniserState52 = org.jsoup.parser.TokeniserState.ScriptData;
        tokeniser43.eofError((org.jsoup.parser.ITokeniserState) tokeniserState52);
        tokeniser9.eofError((org.jsoup.parser.ITokeniserState) tokeniserState52);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(tokeniser9);
        org.junit.Assert.assertNotNull(iTokeniserState10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<!---->" + "'", str12, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNull(tag23);
        org.junit.Assert.assertNotNull(tag27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<!---->" + "'", str29, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder30);
        org.junit.Assert.assertEquals(stringBuilder30.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<!---->" + "'", str32, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder33);
        org.junit.Assert.assertEquals(stringBuilder33.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertNotNull(parseErrorStream40);
        org.junit.Assert.assertNotNull(parseErrorItor41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNull(tag44);
        org.junit.Assert.assertNotNull(tag46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(tokeniserState52);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.isEmpty();
        boolean boolean6 = tag1.isEmpty();
        boolean boolean7 = tag1.canContainBlock();
        boolean boolean8 = tag1.isBlock();
        boolean boolean9 = tag1.canContainBlock();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        boolean boolean9 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList7);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        boolean boolean14 = parseErrorList12.canAddError();
        boolean boolean15 = parseErrorList7.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream16 = parseErrorList7.parallelStream();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorStream16);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag("hi!#");
        java.lang.String str2 = endTag1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "</hi!#>" + "'", str2, "</hi!#>");
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.parser.TokenQueue tokenQueue38 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean39 = tokenQueue38.isEmpty();
        boolean boolean40 = tokenQueue38.consumeWhitespace();
        java.lang.String str41 = tokenQueue38.consumeWord();
        boolean boolean42 = tokenQueue38.matchesWhitespace();
        java.lang.String[] strArray47 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str48 = tokenQueue38.consumeToAny(strArray47);
        boolean boolean49 = htmlTreeBuilder0.inScope(strArray47);
        org.jsoup.nodes.Document document52 = org.jsoup.parser.Parser.parse("", "<hi!>");
        htmlTreeBuilder0.pushActiveFormattingElements((org.jsoup.nodes.Element) document52);
        org.jsoup.nodes.Element element54 = htmlTreeBuilder0.pop();
        htmlTreeBuilder0.clearStackToTableBodyContext();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder56 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList60 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int61 = parseErrorList60.getMaxSize();
        org.jsoup.nodes.Document document62 = htmlTreeBuilder56.parse("0: Doctype", "hi!", parseErrorList60);
        boolean boolean63 = htmlTreeBuilder56.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState64 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder56.error(htmlTreeBuilderState64);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder66 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList70 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int71 = parseErrorList70.getMaxSize();
        org.jsoup.nodes.Document document72 = htmlTreeBuilder66.parse("0: Doctype", "hi!", parseErrorList70);
        org.jsoup.parser.ParseErrorList parseErrorList76 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream77 = parseErrorList76.stream();
        boolean boolean78 = parseErrorList76.canAddError();
        org.jsoup.nodes.Document document79 = htmlTreeBuilder66.parse("EndTag", "hi!#", parseErrorList76);
        java.lang.String[] strArray87 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean88 = htmlTreeBuilder66.inScope("hi!#", strArray87);
        boolean boolean89 = htmlTreeBuilder56.inScope(strArray87);
        htmlTreeBuilder0.popStackToClose(strArray87);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "EndTag" + "'", str41, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertNotNull(element54);
        org.junit.Assert.assertNotNull(parseErrorList60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(document62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState64);
        org.junit.Assert.assertNotNull(parseErrorList70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(document72);
        org.junit.Assert.assertNotNull(parseErrorList76);
        org.junit.Assert.assertNotNull(parseErrorStream77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(document79);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        tokeniser6.createTempBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = tokeniser6.appropriateEndTagName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList(10, (int) '#');
        parseErrorList2.ensureCapacity(100);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.jsoup.parser.Token.Character character1 = new org.jsoup.parser.Token.Character("<0: Doctype>");
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.Tag tag11 = tokeniser6.createTagPending(false);
        org.jsoup.parser.Token.Comment comment12 = new org.jsoup.parser.Token.Comment();
        java.lang.String str13 = comment12.toString();
        java.lang.StringBuilder stringBuilder14 = comment12.data;
        boolean boolean15 = comment12.isEndTag();
        java.lang.String str16 = comment12.toString();
        java.lang.StringBuilder stringBuilder17 = comment12.data;
        tokeniser6.commentPending = comment12;
        org.jsoup.parser.TokeniserState tokeniserState19 = org.jsoup.parser.TokeniserState.CdataSection;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState19);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<!---->" + "'", str13, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder14);
        org.junit.Assert.assertEquals(stringBuilder14.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<!---->" + "'", str16, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder17);
        org.junit.Assert.assertEquals(stringBuilder17.toString(), "");
        org.junit.Assert.assertNotNull(tokeniserState19);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        boolean boolean14 = htmlTreeBuilder0.framesetOk();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isKnownTag();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.parser.ParseErrorList parseErrorList2 = htmlTreeBuilder0.errors;
        htmlTreeBuilder0.newPendingTableCharacters();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder4 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList8 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int9 = parseErrorList8.getMaxSize();
        org.jsoup.nodes.Document document10 = htmlTreeBuilder4.parse("0: Doctype", "hi!", parseErrorList8);
        boolean boolean11 = htmlTreeBuilder4.framesetOk();
        org.jsoup.parser.Parser parser12 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser14 = parser12.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document17 = parser12.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document20 = parser12.parseInput("<hi!>", "[]");
        htmlTreeBuilder4.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document20);
        boolean boolean22 = htmlTreeBuilder4.isFragmentParsing();
        org.jsoup.parser.Parser parser23 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder4);
        org.jsoup.parser.CharacterReader characterReader24 = null;
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor29 = parseErrorList26.iterator();
        org.jsoup.parser.Tokeniser tokeniser30 = new org.jsoup.parser.Tokeniser(characterReader24, parseErrorList26);
        org.jsoup.parser.Token.Tag tag31 = tokeniser30.tagPending;
        tokeniser30.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag35 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType36 = startTag35.type;
        startTag35.appendTagName('#');
        tokeniser30.tagPending = startTag35;
        org.jsoup.parser.Token.StartTag startTag41 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType42 = startTag41.type;
        java.lang.String str43 = startTag41.toString();
        tokeniser30.emit((org.jsoup.parser.Token) startTag41);
        org.jsoup.nodes.FormElement formElement46 = htmlTreeBuilder4.insertForm(startTag41, true);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element47 = htmlTreeBuilder0.insert(startTag41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parser12);
        org.junit.Assert.assertNotNull(parser14);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertNotNull(parseErrorItor29);
        org.junit.Assert.assertNull(tag31);
        org.junit.Assert.assertTrue("'" + tokenType36 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType36.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + tokenType42 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType42.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "<hi!>" + "'", str43, "<hi!>");
        org.junit.Assert.assertNotNull(formElement46);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        htmlTreeBuilder0.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document32);
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        org.jsoup.parser.CharacterReader characterReader35 = htmlTreeBuilder0.reader;
        htmlTreeBuilder0.generateImpliedEndTags();
        java.lang.String str37 = htmlTreeBuilder0.getBaseUri();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(characterReader35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder1 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader2 = null;
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.iterator();
        org.jsoup.parser.Tokeniser tokeniser8 = new org.jsoup.parser.Tokeniser(characterReader2, parseErrorList4);
        org.jsoup.parser.Token.Tag tag9 = tokeniser8.tagPending;
        org.jsoup.parser.Token.Tag tag11 = tokeniser8.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype12 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype13 = doctype12.asDoctype();
        java.lang.String str14 = doctype12.tokenType();
        tokeniser8.emit((org.jsoup.parser.Token) doctype12);
        org.jsoup.parser.Token.Tag tag17 = tokeniser8.createTagPending(true);
        xmlTreeBuilder1.currentToken = tag17;
        org.jsoup.nodes.Attributes attributes19 = tag17.attributes;
        org.jsoup.parser.Token.StartTag startTag20 = new org.jsoup.parser.Token.StartTag("", attributes19);
        org.jsoup.parser.Token.StartTag startTag21 = startTag20.asStartTag();
        java.lang.String str22 = startTag21.tagName;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNull(tag9);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(doctype13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Doctype" + "'", str14, "Doctype");
        org.junit.Assert.assertNotNull(tag17);
        org.junit.Assert.assertNotNull(attributes19);
        org.junit.Assert.assertNotNull(startTag21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.framesetOk(false);
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        htmlTreeBuilder0.reconstructFormattingElements();
        org.jsoup.parser.CharacterReader characterReader24 = null;
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor29 = parseErrorList26.iterator();
        org.jsoup.parser.Tokeniser tokeniser30 = new org.jsoup.parser.Tokeniser(characterReader24, parseErrorList26);
        org.jsoup.parser.Token.Tag tag31 = tokeniser30.tagPending;
        tokeniser30.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype34 = tokeniser30.doctypePending;
        tokeniser30.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype36 = tokeniser30.doctypePending;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState37 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype38 = new org.jsoup.parser.Token.Doctype();
        boolean boolean39 = doctype38.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder40 = null;
        boolean boolean41 = htmlTreeBuilderState37.process((org.jsoup.parser.Token) doctype38, htmlTreeBuilder40);
        tokeniser30.doctypePending = doctype38;
        boolean boolean43 = htmlTreeBuilder0.process((org.jsoup.parser.Token) doctype38);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertNotNull(parseErrorItor29);
        org.junit.Assert.assertNull(tag31);
        org.junit.Assert.assertNull(doctype34);
        org.junit.Assert.assertNull(doctype36);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        org.jsoup.nodes.Element element13 = htmlTreeBuilder0.getActiveFormattingElement("hi!#");
        htmlTreeBuilder0.resetInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder15 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        org.jsoup.nodes.Document document21 = htmlTreeBuilder15.parse("0: Doctype", "hi!", parseErrorList19);
        org.jsoup.nodes.Document document24 = org.jsoup.parser.Parser.parseBodyFragment("Doctype", "<hi!>");
        htmlTreeBuilder15.maybeSetBaseUri((org.jsoup.nodes.Element) document24);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState26 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag27 = new org.jsoup.parser.Token.EndTag();
        endTag27.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder29 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int34 = parseErrorList33.getMaxSize();
        org.jsoup.nodes.Document document35 = htmlTreeBuilder29.parse("0: Doctype", "hi!", parseErrorList33);
        boolean boolean36 = htmlTreeBuilderState26.process((org.jsoup.parser.Token) endTag27, htmlTreeBuilder29);
        htmlTreeBuilder15.error(htmlTreeBuilderState26);
        htmlTreeBuilder0.error(htmlTreeBuilderState26);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(element13);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState26);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag6 = new org.jsoup.parser.Token.EndTag();
        char[] charArray9 = new char[] { '#', '#' };
        endTag6.appendAttributeValue(charArray9);
        boolean boolean11 = tokenQueue1.matchesAny(charArray9);
        org.jsoup.parser.TokenQueue tokenQueue13 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean14 = tokenQueue13.isEmpty();
        java.lang.String str16 = tokenQueue13.consumeToIgnoreCase("<hi!>");
        java.lang.String str17 = tokenQueue13.consumeTagName();
        boolean boolean18 = tokenQueue13.matchesWord();
        tokenQueue13.advance();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder20 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int25 = parseErrorList24.getMaxSize();
        org.jsoup.nodes.Document document26 = htmlTreeBuilder20.parse("0: Doctype", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream31 = parseErrorList30.stream();
        boolean boolean32 = parseErrorList30.canAddError();
        org.jsoup.nodes.Document document33 = htmlTreeBuilder20.parse("EndTag", "hi!#", parseErrorList30);
        java.lang.String[] strArray41 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean42 = htmlTreeBuilder20.inScope("hi!#", strArray41);
        java.lang.String str43 = tokenQueue13.consumeToAny(strArray41);
        boolean boolean44 = tokenQueue1.matchesAny(strArray41);
        char char45 = tokenQueue1.peek();
        java.lang.String str46 = tokenQueue1.remainder();
        java.lang.String str48 = tokenQueue1.consumeTo(" EndTag");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "EndTag" + "'", str16, "EndTag");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorStream31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList8.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        java.lang.Object[] objArray14 = parseErrorList8.toArray();
        parseErrorList8.clear();
        org.jsoup.parser.ParseError[] parseErrorArray16 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList17 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17, parseErrorArray16);
        org.jsoup.parser.ParseError[] parseErrorArray19 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList20 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20, parseErrorArray19);
        boolean boolean22 = parseErrorList17.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20);
        java.lang.Object[] objArray23 = parseErrorList17.toArray();
        parseErrorList17.clear();
        org.jsoup.parser.ParseError[] parseErrorArray25 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList26 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26, parseErrorArray25);
        boolean boolean28 = parseErrorList17.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        boolean boolean29 = parseErrorList8.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        java.lang.Object[] objArray30 = parseErrorList26.toArray();
        boolean boolean31 = parseErrorList4.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        java.lang.String str32 = parseErrorList26.toString();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        java.util.List<org.jsoup.parser.Token.Character> characterList20 = htmlTreeBuilder0.getPendingTableCharacters();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(characterList20);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.nodes.Document document22 = parser19.parseInput("hi!", "[]");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder23 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList27 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int28 = parseErrorList27.getMaxSize();
        org.jsoup.nodes.Document document29 = htmlTreeBuilder23.parse("0: Doctype", "hi!", parseErrorList27);
        htmlTreeBuilder23.resetInsertionMode();
        htmlTreeBuilder23.popStackToBefore("EndTag");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState33 = htmlTreeBuilder23.state();
        htmlTreeBuilder23.runParser();
        org.jsoup.parser.Parser parser35 = parser19.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder23);
        org.jsoup.parser.TreeBuilder treeBuilder36 = parser35.getTreeBuilder();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(parseErrorList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState33);
        org.junit.Assert.assertNotNull(parser35);
        org.junit.Assert.assertNotNull(treeBuilder36);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader1.advance();
        characterReader1.advance();
        org.jsoup.parser.CharacterReader characterReader4 = null;
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream7 = parseErrorList6.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList6.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList6.iterator();
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader4, parseErrorList6);
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        endTag11.appendAttributeValue(' ');
        char[] charArray19 = new char[] { '4' };
        endTag11.appendAttributeValue(charArray19);
        tokeniser10.emit(charArray19);
        boolean boolean22 = characterReader1.matchesAny(charArray19);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertNotNull(parseErrorStream7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
        org.jsoup.parser.TreeBuilder treeBuilder2 = null;
        org.jsoup.parser.Parser parser3 = parser1.setTreeBuilder(treeBuilder2);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder4 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document5 = xmlTreeBuilder4.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder6 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        boolean boolean16 = parseErrorList11.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        xmlTreeBuilder6.initialiseParse("<!---->", "hi!", parseErrorList11);
        xmlTreeBuilder4.errors = parseErrorList11;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList19 = xmlTreeBuilder4.stack;
        org.jsoup.parser.CharacterReader characterReader20 = null;
        xmlTreeBuilder4.reader = characterReader20;
        org.jsoup.parser.Parser parser22 = parser1.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder4);
        org.jsoup.parser.CharacterReader characterReader23 = xmlTreeBuilder4.reader;
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNull(document5);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(elementList19);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNull(characterReader23);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        boolean boolean8 = tokenQueue1.matchesCS("StartTag");
        char char9 = tokenQueue1.peek();
        java.lang.String str11 = tokenQueue1.chompTo("");
        java.lang.String str13 = tokenQueue1.consumeTo("</hi![]>");
        java.lang.String str14 = tokenQueue1.consumeWord();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + '\000' + "'", char9 == '\000');
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList1.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int7 = parseErrorList6.getMaxSize();
        boolean boolean8 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList6);
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        boolean boolean16 = parseErrorList1.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        org.jsoup.parser.ParseError[] parseErrorArray17 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList18 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList18, parseErrorArray17);
        org.jsoup.parser.ParseError[] parseErrorArray20 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList21 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21, parseErrorArray20);
        boolean boolean23 = parseErrorList18.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.listIterator();
        parseErrorList21.trimToSize();
        boolean boolean26 = parseErrorList1.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        boolean boolean27 = parseErrorList21.isEmpty();
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(parseErrorArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        boolean boolean7 = tokeniser6.isAppropriateEndTagToken();
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream12 = parseErrorList11.stream();
        boolean boolean13 = parseErrorList11.canAddError();
        org.jsoup.parser.ParseError parseError16 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str17 = parseError16.getErrorMessage();
        boolean boolean18 = parseErrorList11.add(parseError16);
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        org.jsoup.parser.Token.Tag tag28 = tokeniser25.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype29 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype30 = doctype29.asDoctype();
        java.lang.String str31 = doctype29.tokenType();
        tokeniser25.emit((org.jsoup.parser.Token) doctype29);
        org.jsoup.parser.ITokeniserState iTokeniserState33 = tokeniser25.getState();
        org.jsoup.parser.Token.Comment comment34 = new org.jsoup.parser.Token.Comment();
        java.lang.String str35 = comment34.toString();
        java.lang.StringBuilder stringBuilder36 = comment34.data;
        boolean boolean37 = comment34.isEndTag();
        boolean boolean38 = comment34.isComment();
        tokeniser25.commentPending = comment34;
        int int40 = parseErrorList11.lastIndexOf((java.lang.Object) comment34);
        tokeniser6.commentPending = comment34;
        tokeniser6.emit("EndTag");
        tokeniser6.emit("0: Doctype");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = tokeniser6.appropriateEndTagName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertNotNull(parseErrorStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(doctype30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Doctype" + "'", str31, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<!---->" + "'", str35, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder36);
        org.junit.Assert.assertEquals(stringBuilder36.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.newPendingTableCharacters();
        boolean boolean9 = htmlTreeBuilder0.inTableScope("");
        org.jsoup.parser.Token token10 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList12.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        boolean boolean19 = parseErrorList12.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17);
        org.jsoup.parser.ParseError[] parseErrorArray20 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList21 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21, parseErrorArray20);
        org.jsoup.parser.ParseError[] parseErrorArray23 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList24 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24, parseErrorArray23);
        boolean boolean26 = parseErrorList21.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
        boolean boolean27 = parseErrorList12.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        org.jsoup.parser.ParseError[] parseErrorArray28 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList29 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList29, parseErrorArray28);
        org.jsoup.parser.ParseError[] parseErrorArray31 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList32 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32, parseErrorArray31);
        boolean boolean34 = parseErrorList29.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList32.listIterator();
        parseErrorList32.trimToSize();
        boolean boolean37 = parseErrorList12.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder38 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList42 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int43 = parseErrorList42.getMaxSize();
        org.jsoup.nodes.Document document44 = htmlTreeBuilder38.parse("0: Doctype", "hi!", parseErrorList42);
        htmlTreeBuilder38.resetInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder46 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int51 = parseErrorList50.getMaxSize();
        org.jsoup.nodes.Document document52 = htmlTreeBuilder46.parse("0: Doctype", "hi!", parseErrorList50);
        boolean boolean53 = htmlTreeBuilder46.framesetOk();
        org.jsoup.nodes.Document document56 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder46.setHeadElement((org.jsoup.nodes.Element) document56);
        org.jsoup.nodes.Document document60 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder46.setHeadElement((org.jsoup.nodes.Element) document60);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder63 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList67 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int68 = parseErrorList67.getMaxSize();
        org.jsoup.nodes.Document document69 = htmlTreeBuilder63.parse("0: Doctype", "hi!", parseErrorList67);
        org.jsoup.parser.ParseErrorList parseErrorList73 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream74 = parseErrorList73.stream();
        boolean boolean75 = parseErrorList73.canAddError();
        org.jsoup.nodes.Document document76 = htmlTreeBuilder63.parse("EndTag", "hi!#", parseErrorList73);
        java.lang.String[] strArray84 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean85 = htmlTreeBuilder63.inScope("hi!#", strArray84);
        boolean boolean86 = htmlTreeBuilder46.inScope("hi!#", strArray84);
        htmlTreeBuilder38.popStackToClose(strArray84);
        int int88 = parseErrorList32.indexOf((java.lang.Object) htmlTreeBuilder38);
        org.jsoup.nodes.Element element90 = htmlTreeBuilder38.insert("hi!");
        htmlTreeBuilder0.setHeadElement(element90);
        org.jsoup.nodes.Element element92 = htmlTreeBuilder0.getHeadElement();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(token10);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(parseErrorArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(parseErrorArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parseErrorArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(parseErrorList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(document56);
        org.junit.Assert.assertNotNull(document60);
        org.junit.Assert.assertNotNull(parseErrorList67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(document69);
        org.junit.Assert.assertNotNull(parseErrorList73);
        org.junit.Assert.assertNotNull(parseErrorStream74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(document76);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(element90);
        org.junit.Assert.assertNotNull(element92);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        java.util.List<org.jsoup.nodes.Node> nodeList2 = org.jsoup.parser.Parser.parseXmlFragment("", "0: []");
        org.junit.Assert.assertNotNull(nodeList2);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList9 = xmlTreeBuilder0.stack;
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        boolean boolean21 = parseErrorList14.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList19);
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        boolean boolean26 = parseErrorList24.canAddError();
        boolean boolean27 = parseErrorList19.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
        java.util.List<org.jsoup.nodes.Node> nodeList28 = xmlTreeBuilder0.parseFragment("StartTag", "<!---->", parseErrorList24);
        parseErrorList24.ensureCapacity(100);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor31 = parseErrorList24.listIterator();
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(elementList9);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertNotNull(parseErrorItor31);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.jsoup.parser.Token.StartTag startTag2 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes3 = startTag2.getAttributes();
        org.jsoup.parser.Token.StartTag startTag4 = new org.jsoup.parser.Token.StartTag("<!---->", attributes3);
        org.jsoup.parser.Token.StartTag startTag5 = new org.jsoup.parser.Token.StartTag("100: ", attributes3);
        org.jsoup.nodes.Attributes attributes6 = startTag5.getAttributes();
        java.lang.String str7 = startTag5.tagName;
        org.junit.Assert.assertNotNull(attributes3);
        org.junit.Assert.assertNotNull(attributes6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100: " + "'", str7, "100: ");
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        boolean boolean5 = tokenQueue1.matchChomp("<!---->");
        char char6 = tokenQueue1.peek();
        tokenQueue1.addFirst("EndTag");
        boolean boolean9 = tokenQueue1.consumeWhitespace();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + 'E' + "'", char6 == 'E');
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.listIterator();
        parseErrorList1.clear();
        parseErrorList1.ensureCapacity(1);
        int int7 = parseErrorList1.getMaxSize();
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        java.lang.String str1 = startTag0.tagName;
        startTag0.appendAttributeName("</hi![]>");
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        boolean boolean7 = tokeniser6.isAppropriateEndTagToken();
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream12 = parseErrorList11.stream();
        boolean boolean13 = parseErrorList11.canAddError();
        org.jsoup.parser.ParseError parseError16 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str17 = parseError16.getErrorMessage();
        boolean boolean18 = parseErrorList11.add(parseError16);
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        org.jsoup.parser.Token.Tag tag28 = tokeniser25.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype29 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype30 = doctype29.asDoctype();
        java.lang.String str31 = doctype29.tokenType();
        tokeniser25.emit((org.jsoup.parser.Token) doctype29);
        org.jsoup.parser.ITokeniserState iTokeniserState33 = tokeniser25.getState();
        org.jsoup.parser.Token.Comment comment34 = new org.jsoup.parser.Token.Comment();
        java.lang.String str35 = comment34.toString();
        java.lang.StringBuilder stringBuilder36 = comment34.data;
        boolean boolean37 = comment34.isEndTag();
        boolean boolean38 = comment34.isComment();
        tokeniser25.commentPending = comment34;
        int int40 = parseErrorList11.lastIndexOf((java.lang.Object) comment34);
        tokeniser6.commentPending = comment34;
        boolean boolean42 = comment34.bogus;
        comment34.bogus = false;
        boolean boolean45 = comment34.isComment();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertNotNull(parseErrorStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(doctype30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Doctype" + "'", str31, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<!---->" + "'", str35, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder36);
        org.junit.Assert.assertEquals(stringBuilder36.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.framesetOk(false);
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        boolean boolean23 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.ParseErrorList parseErrorList28 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream31 = parseErrorList30.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList30.iterator();
        boolean boolean33 = parseErrorList28.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        parseErrorList30.ensureCapacity((int) (short) 1);
        org.jsoup.nodes.Document document36 = htmlTreeBuilder0.parse("StartTaga", "</hi![]>", parseErrorList30);
        java.lang.String str37 = htmlTreeBuilder0.getBaseUri();
        org.jsoup.nodes.Element element38 = htmlTreeBuilder0.pop();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorStream31);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "</hi![]>" + "'", str37, "</hi![]>");
        org.junit.Assert.assertNotNull(element38);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\uffff');
        java.lang.String str5 = characterReader1.consumeTo("<Doctype>");
        characterReader1.rewindToMark();
        java.lang.String str8 = characterReader1.consumeTo('E');
        characterReader1.mark();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "StartTag" + "'", str8, "StartTag");
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder1 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document2 = xmlTreeBuilder1.doc;
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int7 = parseErrorList6.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray8 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList9 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9, parseErrorArray8);
        org.jsoup.parser.ParseError[] parseErrorArray11 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList12 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12, parseErrorArray11);
        boolean boolean14 = parseErrorList9.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        org.jsoup.parser.ParseError[] parseErrorArray15 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList16 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16, parseErrorArray15);
        boolean boolean18 = parseErrorList12.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16);
        parseErrorList16.clear();
        boolean boolean20 = parseErrorList6.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList6.iterator();
        org.jsoup.nodes.Document document22 = xmlTreeBuilder1.parse("<hi!>", "0: []", parseErrorList6);
        java.util.List<org.jsoup.nodes.Node> nodeList24 = org.jsoup.parser.Parser.parseFragment("<Doctype>", (org.jsoup.nodes.Element) document22, "<[100: ]>");
        org.junit.Assert.assertNull(document2);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(nodeList24);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.Tag tag11 = tokeniser6.createTagPending(false);
        org.jsoup.parser.Token.Tag tag13 = tag11.name("hi!#");
        org.jsoup.parser.Token.TokenType tokenType14 = tag11.type;
        char[] charArray21 = new char[] { 'a', 'S', 't', 't', '\000', 't' };
        tag11.appendAttributeValue(charArray21);
        java.lang.String str23 = tag11.tokenType();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(tag13);
        org.junit.Assert.assertTrue("'" + tokenType14 + "' != '" + org.jsoup.parser.Token.TokenType.EndTag + "'", tokenType14.equals(org.jsoup.parser.Token.TokenType.EndTag));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "aStt\000t");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "aStt\000t");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, S, t, t, \000, t]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "EndTag" + "'", str23, "EndTag");
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.Token.Tag tag10 = tokeniser7.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype11 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype12 = doctype11.asDoctype();
        java.lang.String str13 = doctype11.tokenType();
        tokeniser7.emit((org.jsoup.parser.Token) doctype11);
        org.jsoup.parser.Token.Tag tag16 = tokeniser7.createTagPending(true);
        xmlTreeBuilder0.currentToken = tag16;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        xmlTreeBuilder0.doc = document28;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder33 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document34 = xmlTreeBuilder33.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder35 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList40 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList42 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream43 = parseErrorList42.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor44 = parseErrorList42.iterator();
        boolean boolean45 = parseErrorList40.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList42);
        xmlTreeBuilder35.initialiseParse("<!---->", "hi!", parseErrorList40);
        xmlTreeBuilder33.errors = parseErrorList40;
        org.jsoup.parser.ParseErrorList parseErrorList51 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream52 = parseErrorList51.stream();
        xmlTreeBuilder33.initialiseParse("a", "[]", parseErrorList51);
        org.jsoup.parser.CharacterReader characterReader54 = null;
        org.jsoup.parser.ParseErrorList parseErrorList56 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream57 = parseErrorList56.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor58 = parseErrorList56.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor59 = parseErrorList56.iterator();
        org.jsoup.parser.Tokeniser tokeniser60 = new org.jsoup.parser.Tokeniser(characterReader54, parseErrorList56);
        org.jsoup.parser.Token.Tag tag61 = tokeniser60.tagPending;
        tokeniser60.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype64 = tokeniser60.doctypePending;
        tokeniser60.createCommentPending();
        org.jsoup.parser.Token.Comment comment66 = tokeniser60.commentPending;
        boolean boolean67 = parseErrorList51.remove((java.lang.Object) tokeniser60);
        org.jsoup.nodes.Document document68 = xmlTreeBuilder0.parse("<!---->", "[]", parseErrorList51);
        org.jsoup.parser.Token.StartTag startTag70 = new org.jsoup.parser.Token.StartTag("<!---->");
        startTag70.tagName = "Doctype";
        startTag70.finaliseTag();
        org.jsoup.nodes.Element element74 = xmlTreeBuilder0.insert(startTag70);
        startTag70.appendTagName('n');
        org.jsoup.parser.Token.StartTag startTag77 = startTag70.asStartTag();
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(tag10);
        org.junit.Assert.assertNotNull(doctype12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Doctype" + "'", str13, "Doctype");
        org.junit.Assert.assertNotNull(tag16);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNull(document34);
        org.junit.Assert.assertNotNull(parseErrorList42);
        org.junit.Assert.assertNotNull(parseErrorStream43);
        org.junit.Assert.assertNotNull(parseErrorItor44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(parseErrorList51);
        org.junit.Assert.assertNotNull(parseErrorStream52);
        org.junit.Assert.assertNotNull(parseErrorList56);
        org.junit.Assert.assertNotNull(parseErrorStream57);
        org.junit.Assert.assertNotNull(parseErrorItor58);
        org.junit.Assert.assertNotNull(parseErrorItor59);
        org.junit.Assert.assertNull(tag61);
        org.junit.Assert.assertNull(doctype64);
        org.junit.Assert.assertNotNull(comment66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(document68);
        org.junit.Assert.assertNotNull(element74);
        org.junit.Assert.assertNotNull(startTag77);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        tokeniser6.createTempBuffer();
        tokeniser6.emitTagPending();
        org.jsoup.parser.Token.Tag tag12 = tokeniser6.tagPending;
        org.jsoup.parser.TokeniserState tokeniserState13 = org.jsoup.parser.TokeniserState.RCDATAEndTagOpen;
        tokeniser6.error((org.jsoup.parser.ITokeniserState) tokeniserState13);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder15 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        org.jsoup.nodes.Document document21 = htmlTreeBuilder15.parse("0: Doctype", "hi!", parseErrorList19);
        boolean boolean22 = htmlTreeBuilder15.framesetOk();
        org.jsoup.nodes.Document document25 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder15.setHeadElement((org.jsoup.nodes.Element) document25);
        org.jsoup.nodes.Document document29 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder15.setHeadElement((org.jsoup.nodes.Element) document29);
        htmlTreeBuilder15.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder33 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList37 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int38 = parseErrorList37.getMaxSize();
        org.jsoup.nodes.Document document39 = htmlTreeBuilder33.parse("0: Doctype", "hi!", parseErrorList37);
        boolean boolean40 = htmlTreeBuilder33.framesetOk();
        org.jsoup.nodes.Document document43 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder33.setHeadElement((org.jsoup.nodes.Element) document43);
        org.jsoup.nodes.Document document47 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder33.setHeadElement((org.jsoup.nodes.Element) document47);
        htmlTreeBuilder15.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document47);
        org.jsoup.parser.CharacterReader characterReader50 = htmlTreeBuilder15.reader;
        org.jsoup.parser.TokenQueue tokenQueue52 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean53 = tokenQueue52.isEmpty();
        boolean boolean54 = tokenQueue52.consumeWhitespace();
        java.lang.String str55 = tokenQueue52.consumeWord();
        char char56 = tokenQueue52.peek();
        org.jsoup.parser.CharacterReader characterReader57 = null;
        org.jsoup.parser.ParseErrorList parseErrorList59 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream60 = parseErrorList59.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor61 = parseErrorList59.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor62 = parseErrorList59.iterator();
        org.jsoup.parser.Tokeniser tokeniser63 = new org.jsoup.parser.Tokeniser(characterReader57, parseErrorList59);
        org.jsoup.parser.Token.Tag tag64 = tokeniser63.tagPending;
        org.jsoup.parser.Token.Tag tag66 = tokeniser63.createTagPending(true);
        java.lang.StringBuilder stringBuilder67 = tokeniser63.dataBuffer;
        org.jsoup.parser.Token.EndTag endTag68 = new org.jsoup.parser.Token.EndTag();
        char[] charArray71 = new char[] { '#', '#' };
        endTag68.appendAttributeValue(charArray71);
        tokeniser63.emit(charArray71);
        boolean boolean74 = tokenQueue52.matchesAny(charArray71);
        java.lang.String str75 = characterReader50.consumeToAny(charArray71);
        tokeniser6.emit(charArray71);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertNotNull(tokeniserState13);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(parseErrorList37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(characterReader50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "EndTag" + "'", str55, "EndTag");
        org.junit.Assert.assertTrue("'" + char56 + "' != '" + '\000' + "'", char56 == '\000');
        org.junit.Assert.assertNotNull(parseErrorList59);
        org.junit.Assert.assertNotNull(parseErrorStream60);
        org.junit.Assert.assertNotNull(parseErrorItor61);
        org.junit.Assert.assertNotNull(parseErrorItor62);
        org.junit.Assert.assertNull(tag64);
        org.junit.Assert.assertNotNull(tag66);
        org.junit.Assert.assertNull(stringBuilder67);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor29 = parseErrorList26.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        boolean boolean33 = parseErrorList26.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        xmlTreeBuilder3.initialiseParse("<!---->", "", parseErrorList26);
        java.lang.Object obj35 = parseErrorList26.clone();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertNotNull(parseErrorItor29);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "[]");
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean4 = characterReader1.matchesDigit();
        java.lang.String str5 = characterReader1.toString();
        boolean boolean7 = characterReader1.matches(' ');
        boolean boolean9 = characterReader1.matchConsumeIgnoreCase("S");
        char char10 = characterReader1.current();
        java.lang.String str11 = characterReader1.consumeToEnd();
        char char12 = characterReader1.consume();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + 't' + "'", char10 == 't');
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tartTag" + "'", str11, "tartTag");
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '\uffff' + "'", char12 == '\uffff');
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches("[100: ]");
        java.lang.String str5 = characterReader1.consumeTo('4');
        boolean boolean7 = characterReader1.matchConsume("35: hi!#");
        int int9 = characterReader1.nextIndexOf('S');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.nodes.Element element38 = htmlTreeBuilder0.insert("<!---->");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder39 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int44 = parseErrorList43.getMaxSize();
        org.jsoup.nodes.Document document45 = htmlTreeBuilder39.parse("0: Doctype", "hi!", parseErrorList43);
        boolean boolean46 = htmlTreeBuilder39.framesetOk();
        org.jsoup.parser.Parser parser47 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser49 = parser47.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document52 = parser47.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document55 = parser47.parseInput("<hi!>", "[]");
        htmlTreeBuilder39.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document55);
        java.lang.String[] strArray57 = new java.lang.String[] {};
        boolean boolean58 = htmlTreeBuilder39.inScope(strArray57);
        htmlTreeBuilder39.markInsertionMode();
        boolean boolean61 = htmlTreeBuilder39.inScope("StartTag");
        org.jsoup.parser.Parser parser62 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder39);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList63 = htmlTreeBuilder39.stack;
        htmlTreeBuilder0.stack = elementList63;
        boolean boolean66 = htmlTreeBuilder0.inSelectScope("0: []");
        htmlTreeBuilder0.framesetOk(false);
        htmlTreeBuilder0.newPendingTableCharacters();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(element38);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(parser47);
        org.junit.Assert.assertNotNull(parser49);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(elementList63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("100: ");
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        boolean boolean7 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder8 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int13 = parseErrorList12.getMaxSize();
        org.jsoup.nodes.Document document14 = htmlTreeBuilder8.parse("0: Doctype", "hi!", parseErrorList12);
        boolean boolean15 = htmlTreeBuilder8.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState16 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder8.error(htmlTreeBuilderState16);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState18 = null;
        htmlTreeBuilder8.transition(htmlTreeBuilderState18);
        htmlTreeBuilder8.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader24 = null;
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor29 = parseErrorList26.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        boolean boolean33 = parseErrorList26.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        org.jsoup.parser.Tokeniser tokeniser34 = new org.jsoup.parser.Tokeniser(characterReader24, parseErrorList31);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList31.iterator();
        org.jsoup.nodes.Document document36 = htmlTreeBuilder8.parse("[]", "Doctype", parseErrorList31);
        org.jsoup.parser.CharacterReader characterReader39 = null;
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream42 = parseErrorList41.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList41.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor44 = parseErrorList41.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int47 = parseErrorList46.getMaxSize();
        boolean boolean48 = parseErrorList41.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList46);
        org.jsoup.parser.Tokeniser tokeniser49 = new org.jsoup.parser.Tokeniser(characterReader39, parseErrorList46);
        org.jsoup.parser.ParseErrorList parseErrorList51 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream52 = parseErrorList51.stream();
        boolean boolean53 = parseErrorList51.canAddError();
        boolean boolean54 = parseErrorList46.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList51);
        org.jsoup.nodes.Document document55 = htmlTreeBuilder8.parse("hi!", "<!---->", parseErrorList51);
        org.jsoup.parser.Tokeniser tokeniser56 = htmlTreeBuilder8.tokeniser;
        int int57 = parseErrorList2.lastIndexOf((java.lang.Object) htmlTreeBuilder8);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor58 = parseErrorList2.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList60 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int61 = parseErrorList60.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray62 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList63 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList63, parseErrorArray62);
        org.jsoup.parser.ParseError[] parseErrorArray65 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList66 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList66, parseErrorArray65);
        boolean boolean68 = parseErrorList63.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList66);
        org.jsoup.parser.ParseError[] parseErrorArray69 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList70 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList70, parseErrorArray69);
        boolean boolean72 = parseErrorList66.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList70);
        parseErrorList70.clear();
        boolean boolean74 = parseErrorList60.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList70);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor75 = parseErrorList60.iterator();
        int int76 = parseErrorList60.size();
        boolean boolean77 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList60);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError79 = parseErrorList2.remove((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState16);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertNotNull(parseErrorItor29);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertNotNull(parseErrorStream42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNotNull(parseErrorItor44);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(parseErrorList51);
        org.junit.Assert.assertNotNull(parseErrorStream52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNotNull(tokeniser56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(parseErrorItor58);
        org.junit.Assert.assertNotNull(parseErrorList60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(parseErrorArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(parseErrorArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(parseErrorItor75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.AfterAttributeName;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.Token.Tag tag10 = tokeniser7.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype11 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype12 = doctype11.asDoctype();
        java.lang.String str13 = doctype11.tokenType();
        tokeniser7.emit((org.jsoup.parser.Token) doctype11);
        org.jsoup.parser.Token.Tag tag16 = tokeniser7.createTagPending(true);
        org.jsoup.parser.Token.EndTag endTag17 = new org.jsoup.parser.Token.EndTag();
        endTag17.newAttribute();
        tokeniser7.tagPending = endTag17;
        org.jsoup.parser.Token.Doctype doctype20 = tokeniser7.doctypePending;
        java.lang.StringBuilder stringBuilder21 = tokeniser7.dataBuffer;
        tokeniser7.createDoctypePending();
        org.jsoup.parser.CharacterReader characterReader23 = null;
        // The following exception was thrown during execution in test generation
        try {
            tokeniserState0.read(tokeniser7, characterReader23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(tag10);
        org.junit.Assert.assertNotNull(doctype12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Doctype" + "'", str13, "Doctype");
        org.junit.Assert.assertNotNull(tag16);
        org.junit.Assert.assertNull(doctype20);
        org.junit.Assert.assertNull(stringBuilder21);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.formatAsBlock();
        boolean boolean6 = tag1.isBlock();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        int int9 = parseErrorList4.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag13 = new org.jsoup.parser.Token.EndTag();
        char[] charArray16 = new char[] { '#', '#' };
        endTag13.appendAttributeValue(charArray16);
        endTag13.finaliseTag();
        boolean boolean19 = endTag13.isSelfClosing();
        org.jsoup.parser.Tag tag21 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean22 = tag21.isFormListed();
        org.jsoup.parser.Tag tag23 = tag21.setSelfClosing();
        boolean boolean24 = tag21.isKnownTag();
        java.lang.Object[] objArray26 = new java.lang.Object[] { boolean19, tag21, "Doctype" };
        org.jsoup.parser.ParseError parseError27 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray26);
        parseErrorList4.add(0, parseError27);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream29 = parseErrorList4.stream();
        java.lang.String str30 = parseErrorList4.toString();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(tag21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(tag23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[false, hi!, Doctype]");
        org.junit.Assert.assertNotNull(parseErrorStream29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0: []]" + "'", str30, "[0: []]");
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder13.error(htmlTreeBuilderState21);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState23 = null;
        htmlTreeBuilder13.transition(htmlTreeBuilderState23);
        htmlTreeBuilder13.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList27 = htmlTreeBuilder13.getPendingTableCharacters();
        htmlTreeBuilder0.setPendingTableCharacters(characterList27);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder29 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int34 = parseErrorList33.getMaxSize();
        org.jsoup.nodes.Document document35 = htmlTreeBuilder29.parse("0: Doctype", "hi!", parseErrorList33);
        htmlTreeBuilder29.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray38 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList39 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList39, characterArray38);
        htmlTreeBuilder29.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList39);
        boolean boolean42 = htmlTreeBuilder29.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag44 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement46 = htmlTreeBuilder29.insertForm(startTag44, true);
        htmlTreeBuilder29.baseUri = "[]";
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState49 = org.jsoup.parser.HtmlTreeBuilderState.InTableText;
        htmlTreeBuilder29.error(htmlTreeBuilderState49);
        htmlTreeBuilder0.error(htmlTreeBuilderState49);
        org.jsoup.parser.Token.StartTag startTag53 = new org.jsoup.parser.Token.StartTag("<hi!>");
        startTag53.finaliseTag();
        startTag53.appendTagName('\uffff');
        org.jsoup.nodes.Element element57 = htmlTreeBuilder0.insert(startTag53);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState21);
        org.junit.Assert.assertNotNull(characterList27);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNotNull(characterArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(formElement46);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState49);
        org.junit.Assert.assertNotNull(element57);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        char char6 = tokenQueue1.peek();
        boolean boolean8 = tokenQueue1.matchChomp("<hi!#>");
        boolean boolean9 = tokenQueue1.consumeWhitespace();
        boolean boolean10 = tokenQueue1.consumeWhitespace();
        boolean boolean11 = tokenQueue1.matchesWhitespace();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\000' + "'", char6 == '\000');
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        htmlTreeBuilder0.newPendingTableCharacters();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        htmlTreeBuilder0.reconstructFormattingElements();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder7 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int12 = parseErrorList11.getMaxSize();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder7.parse("0: Doctype", "hi!", parseErrorList11);
        boolean boolean14 = htmlTreeBuilder7.framesetOk();
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder7.setHeadElement((org.jsoup.nodes.Element) document17);
        org.jsoup.nodes.Document document21 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder7.setHeadElement((org.jsoup.nodes.Element) document21);
        htmlTreeBuilder7.setFosterInserts(false);
        htmlTreeBuilder7.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder26 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int31 = parseErrorList30.getMaxSize();
        org.jsoup.nodes.Document document32 = htmlTreeBuilder26.parse("0: Doctype", "hi!", parseErrorList30);
        boolean boolean33 = htmlTreeBuilder26.framesetOk();
        org.jsoup.parser.Parser parser34 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser36 = parser34.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document39 = parser34.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document42 = parser34.parseInput("<hi!>", "[]");
        htmlTreeBuilder26.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document42);
        java.lang.String[] strArray44 = new java.lang.String[] {};
        boolean boolean45 = htmlTreeBuilder26.inScope(strArray44);
        htmlTreeBuilder26.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder47 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList51 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int52 = parseErrorList51.getMaxSize();
        org.jsoup.nodes.Document document53 = htmlTreeBuilder47.parse("0: Doctype", "hi!", parseErrorList51);
        htmlTreeBuilder26.setHeadElement((org.jsoup.nodes.Element) document53);
        htmlTreeBuilder7.pushActiveFormattingElements((org.jsoup.nodes.Element) document53);
        org.jsoup.nodes.Document document58 = htmlTreeBuilder7.parse("a", "ndTag");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document58);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(parser34);
        org.junit.Assert.assertNotNull(parser36);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(parseErrorList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertNotNull(document58);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        char[] charArray3 = new char[] { '#', '#' };
        endTag0.appendAttributeValue(charArray3);
        endTag0.finaliseTag();
        boolean boolean6 = endTag0.isSelfClosing();
        org.jsoup.nodes.Attributes attributes7 = endTag0.getAttributes();
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(attributes7);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.Tag tag11 = tokeniser6.createTagPending(false);
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.Tokeniser tokeniser18 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList14);
        org.jsoup.parser.Token.Tag tag19 = tokeniser18.tagPending;
        tokeniser18.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype22 = tokeniser18.doctypePending;
        tokeniser18.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype24 = tokeniser18.doctypePending;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState25 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype26 = new org.jsoup.parser.Token.Doctype();
        boolean boolean27 = doctype26.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = null;
        boolean boolean29 = htmlTreeBuilderState25.process((org.jsoup.parser.Token) doctype26, htmlTreeBuilder28);
        tokeniser18.doctypePending = doctype26;
        tokeniser6.doctypePending = doctype26;
        java.lang.StringBuilder stringBuilder32 = tokeniser6.dataBuffer;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNull(tag19);
        org.junit.Assert.assertNull(doctype22);
        org.junit.Assert.assertNull(doctype24);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(stringBuilder32);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.CharacterReader characterReader14 = null;
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList16.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList16.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList16.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        boolean boolean23 = parseErrorList16.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        org.jsoup.parser.Tokeniser tokeniser24 = new org.jsoup.parser.Tokeniser(characterReader14, parseErrorList21);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList21.iterator();
        htmlTreeBuilder0.initialiseParse("hi!", "hi!#", parseErrorList21);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState27 = org.jsoup.parser.HtmlTreeBuilderState.InCell;
        org.jsoup.parser.Token.StartTag startTag29 = new org.jsoup.parser.Token.StartTag("Doctype");
        org.jsoup.parser.Token.Tag tag31 = startTag29.name("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder32 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int37 = parseErrorList36.getMaxSize();
        org.jsoup.nodes.Document document38 = htmlTreeBuilder32.parse("0: Doctype", "hi!", parseErrorList36);
        org.jsoup.parser.ParseErrorList parseErrorList42 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream43 = parseErrorList42.stream();
        boolean boolean44 = parseErrorList42.canAddError();
        org.jsoup.nodes.Document document45 = htmlTreeBuilder32.parse("EndTag", "hi!#", parseErrorList42);
        java.lang.String[] strArray53 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean54 = htmlTreeBuilder32.inScope("hi!#", strArray53);
        htmlTreeBuilder32.clearStackToTableContext();
        boolean boolean56 = htmlTreeBuilderState27.process((org.jsoup.parser.Token) startTag29, htmlTreeBuilder32);
        boolean boolean57 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag29);
        org.jsoup.parser.Token.StartTag startTag59 = new org.jsoup.parser.Token.StartTag();
        startTag59.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag62 = startTag59.asStartTag();
        org.jsoup.parser.Token.Tag tag64 = startTag62.name("");
        startTag62.selfClosing = false;
        org.jsoup.nodes.Attributes attributes67 = startTag62.getAttributes();
        org.jsoup.parser.Token.StartTag startTag68 = new org.jsoup.parser.Token.StartTag("0: []", attributes67);
        org.jsoup.nodes.Attributes attributes69 = startTag68.getAttributes();
        boolean boolean70 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag68);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState27);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNotNull(parseErrorList42);
        org.junit.Assert.assertNotNull(parseErrorStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(startTag62);
        org.junit.Assert.assertNotNull(tag64);
        org.junit.Assert.assertNotNull(attributes67);
        org.junit.Assert.assertNotNull(attributes69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.jsoup.parser.Token.Comment comment0 = new org.jsoup.parser.Token.Comment();
        comment0.bogus = true;
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        org.jsoup.parser.TreeBuilder treeBuilder11 = null;
        org.jsoup.parser.Parser parser12 = new org.jsoup.parser.Parser(treeBuilder11);
        org.jsoup.parser.TreeBuilder treeBuilder13 = null;
        org.jsoup.parser.Parser parser14 = parser12.setTreeBuilder(treeBuilder13);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder15 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document16 = xmlTreeBuilder15.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder17 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        boolean boolean27 = parseErrorList22.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
        xmlTreeBuilder17.initialiseParse("<!---->", "hi!", parseErrorList22);
        xmlTreeBuilder15.errors = parseErrorList22;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList30 = xmlTreeBuilder15.stack;
        org.jsoup.parser.CharacterReader characterReader31 = null;
        xmlTreeBuilder15.reader = characterReader31;
        org.jsoup.parser.Parser parser33 = parser12.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder15);
        org.jsoup.parser.Parser parser35 = parser12.setTrackErrors((int) '#');
        int int36 = parseErrorList8.lastIndexOf((java.lang.Object) parser35);
        parseErrorList8.trimToSize();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parser14);
        org.junit.Assert.assertNull(document16);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(elementList30);
        org.junit.Assert.assertNotNull(parser33);
        org.junit.Assert.assertNotNull(parser35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        org.jsoup.parser.Token.StartTag startTag23 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes24 = startTag23.getAttributes();
        xmlTreeBuilder3.currentToken = startTag23;
        org.jsoup.parser.Token.StartTag startTag26 = startTag23.asStartTag();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(attributes24);
        org.junit.Assert.assertNotNull(startTag26);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        int int8 = parseErrorList4.lastIndexOf((java.lang.Object) (byte) -1);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.noTracking();
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList9.parallelStream();
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        org.jsoup.parser.ParseError[] parseErrorArray15 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList16 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16, parseErrorArray15);
        boolean boolean18 = parseErrorList13.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16);
        java.lang.Object[] objArray19 = parseErrorList13.toArray();
        parseErrorList13.clear();
        org.jsoup.parser.ParseError[] parseErrorArray21 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList22 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList22, parseErrorArray21);
        org.jsoup.parser.ParseError[] parseErrorArray24 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList25 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList25, parseErrorArray24);
        boolean boolean27 = parseErrorList22.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList25);
        java.lang.Object[] objArray28 = parseErrorList22.toArray();
        parseErrorList22.clear();
        org.jsoup.parser.ParseError[] parseErrorArray30 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList31 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31, parseErrorArray30);
        boolean boolean33 = parseErrorList22.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        boolean boolean34 = parseErrorList13.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder35 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int40 = parseErrorList39.getMaxSize();
        org.jsoup.nodes.Document document41 = htmlTreeBuilder35.parse("0: Doctype", "hi!", parseErrorList39);
        htmlTreeBuilder35.resetInsertionMode();
        htmlTreeBuilder35.popStackToBefore("EndTag");
        boolean boolean45 = parseErrorList31.contains((java.lang.Object) "EndTag");
        boolean boolean46 = parseErrorList9.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parseErrorArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        org.jsoup.parser.Tag tag24 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean25 = tag24.isFormListed();
        org.jsoup.parser.CharacterReader characterReader26 = null;
        org.jsoup.parser.ParseErrorList parseErrorList28 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream29 = parseErrorList28.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor30 = parseErrorList28.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor31 = parseErrorList28.iterator();
        org.jsoup.parser.Tokeniser tokeniser32 = new org.jsoup.parser.Tokeniser(characterReader26, parseErrorList28);
        org.jsoup.parser.Token.Tag tag33 = tokeniser32.tagPending;
        org.jsoup.parser.Token.Tag tag35 = tokeniser32.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype36 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype37 = doctype36.asDoctype();
        java.lang.String str38 = doctype36.tokenType();
        tokeniser32.emit((org.jsoup.parser.Token) doctype36);
        boolean boolean40 = tag24.equals((java.lang.Object) doctype36);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder41 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader42 = null;
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList44.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList44.iterator();
        org.jsoup.parser.Tokeniser tokeniser48 = new org.jsoup.parser.Tokeniser(characterReader42, parseErrorList44);
        org.jsoup.parser.Token.Tag tag49 = tokeniser48.tagPending;
        org.jsoup.parser.Token.Tag tag51 = tokeniser48.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype52 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype53 = doctype52.asDoctype();
        java.lang.String str54 = doctype52.tokenType();
        tokeniser48.emit((org.jsoup.parser.Token) doctype52);
        org.jsoup.parser.Token.Tag tag57 = tokeniser48.createTagPending(true);
        xmlTreeBuilder41.currentToken = tag57;
        boolean boolean59 = tag24.equals((java.lang.Object) tag57);
        java.lang.String str60 = tag24.toString();
        org.jsoup.parser.Token.StartTag startTag61 = new org.jsoup.parser.Token.StartTag();
        startTag61.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag65 = startTag61.name("hi!#");
        boolean boolean66 = tag24.equals((java.lang.Object) startTag61);
        startTag61.appendTagName("</hi![]>");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element69 = xmlTreeBuilder3.insert(startTag61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(tag24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorList28);
        org.junit.Assert.assertNotNull(parseErrorStream29);
        org.junit.Assert.assertNotNull(parseErrorItor30);
        org.junit.Assert.assertNotNull(parseErrorItor31);
        org.junit.Assert.assertNull(tag33);
        org.junit.Assert.assertNotNull(tag35);
        org.junit.Assert.assertNotNull(doctype37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Doctype" + "'", str38, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNull(tag49);
        org.junit.Assert.assertNotNull(tag51);
        org.junit.Assert.assertNotNull(doctype53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Doctype" + "'", str54, "Doctype");
        org.junit.Assert.assertNotNull(tag57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(tag65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        boolean boolean1 = endTag0.selfClosing;
        org.jsoup.parser.Token.StartTag startTag3 = new org.jsoup.parser.Token.StartTag();
        startTag3.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag6 = startTag3.asStartTag();
        org.jsoup.parser.Token.Tag tag8 = startTag6.name("");
        startTag6.selfClosing = false;
        org.jsoup.nodes.Attributes attributes11 = startTag6.getAttributes();
        org.jsoup.parser.Token.StartTag startTag12 = new org.jsoup.parser.Token.StartTag("0: []", attributes11);
        endTag0.attributes = attributes11;
        endTag0.appendAttributeValue('4');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(startTag6);
        org.junit.Assert.assertNotNull(tag8);
        org.junit.Assert.assertNotNull(attributes11);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder21 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int26 = parseErrorList25.getMaxSize();
        org.jsoup.nodes.Document document27 = htmlTreeBuilder21.parse("0: Doctype", "hi!", parseErrorList25);
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document27);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder29 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int34 = parseErrorList33.getMaxSize();
        org.jsoup.nodes.Document document35 = htmlTreeBuilder29.parse("0: Doctype", "hi!", parseErrorList33);
        htmlTreeBuilder29.resetInsertionMode();
        org.jsoup.nodes.Element element37 = htmlTreeBuilder29.currentElement();
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList38 = htmlTreeBuilder29.getStack();
        htmlTreeBuilder0.stack = elementList38;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNotNull(element37);
        org.junit.Assert.assertNotNull(elementList38);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.Tag tag11 = tokeniser6.createTagPending(false);
        org.jsoup.parser.Token.Tag tag13 = tag11.name("hi!#");
        org.jsoup.parser.Token.TokenType tokenType14 = tag11.type;
        boolean boolean15 = tag11.isCharacter();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(tag13);
        org.junit.Assert.assertTrue("'" + tokenType14 + "' != '" + org.jsoup.parser.Token.TokenType.EndTag + "'", tokenType14.equals(org.jsoup.parser.Token.TokenType.EndTag));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.preserveWhitespace();
        boolean boolean3 = tag1.isKnownTag();
        boolean boolean4 = tag1.isBlock();
        org.jsoup.parser.Tag tag6 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean7 = tag6.isFormListed();
        org.jsoup.parser.Tag tag8 = tag6.setSelfClosing();
        boolean boolean9 = tag6.isKnownTag();
        boolean boolean10 = tag6.isKnownTag();
        boolean boolean11 = tag1.equals((java.lang.Object) boolean10);
        boolean boolean12 = tag1.isBlock();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(tag6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(tag8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        htmlTreeBuilder3.clearStackToTableContext();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder12.setHeadElement((org.jsoup.nodes.Element) document22);
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder12.setHeadElement((org.jsoup.nodes.Element) document26);
        htmlTreeBuilder12.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder30 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int35 = parseErrorList34.getMaxSize();
        org.jsoup.nodes.Document document36 = htmlTreeBuilder30.parse("0: Doctype", "hi!", parseErrorList34);
        boolean boolean37 = htmlTreeBuilder30.framesetOk();
        org.jsoup.nodes.Document document40 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder30.setHeadElement((org.jsoup.nodes.Element) document40);
        org.jsoup.nodes.Document document44 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder30.setHeadElement((org.jsoup.nodes.Element) document44);
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document44);
        htmlTreeBuilder3.push((org.jsoup.nodes.Element) document44);
        org.jsoup.parser.Token.Comment comment48 = new org.jsoup.parser.Token.Comment();
        java.lang.String str49 = comment48.toString();
        java.lang.StringBuilder stringBuilder50 = comment48.data;
        boolean boolean51 = comment48.isEndTag();
        boolean boolean52 = comment48.isEOF();
        htmlTreeBuilder3.insert(comment48);
        org.jsoup.parser.ParseError[] parseErrorArray54 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList55 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList55, parseErrorArray54);
        org.jsoup.parser.ParseError[] parseErrorArray57 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList58 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList58, parseErrorArray57);
        boolean boolean60 = parseErrorList55.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList58);
        int int62 = parseErrorList58.lastIndexOf((java.lang.Object) (byte) -1);
        org.jsoup.parser.ParseErrorList parseErrorList63 = org.jsoup.parser.ParseErrorList.noTracking();
        boolean boolean64 = parseErrorList58.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList63);
        htmlTreeBuilder3.errors = parseErrorList63;
        org.jsoup.parser.Token.StartTag startTag67 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag67.appendTagName("hi!");
        startTag67.appendAttributeName('4');
        org.jsoup.parser.Token.Tag tag73 = startTag67.name("");
        startTag67.appendAttributeValue('4');
        boolean boolean76 = parseErrorList63.contains((java.lang.Object) startTag67);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "<!---->" + "'", str49, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder50);
        org.junit.Assert.assertEquals(stringBuilder50.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(parseErrorArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(parseErrorArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(parseErrorList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(tag73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        int int8 = parseErrorList4.size();
        parseErrorList4.clear();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList10 = htmlTreeBuilder0.getStack();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(elementList10);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        java.lang.String[] strArray21 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean22 = htmlTreeBuilder0.inScope("hi!#", strArray21);
        htmlTreeBuilder0.clearStackToTableContext();
        org.jsoup.parser.Parser parser24 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.nodes.Document document27 = parser24.parseInput("", "hi!");
        htmlTreeBuilder0.doc = document27;
        org.jsoup.nodes.Element element30 = htmlTreeBuilder0.insert("hi!hi!");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(parser24);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNotNull(element30);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes1 = startTag0.getAttributes();
        org.jsoup.parser.TokenQueue tokenQueue3 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean4 = tokenQueue3.isEmpty();
        java.lang.String str6 = tokenQueue3.consumeToIgnoreCase("<hi!>");
        java.lang.String str7 = tokenQueue3.consumeTagName();
        boolean boolean8 = tokenQueue3.matchesWord();
        boolean boolean10 = tokenQueue3.matchesCS("StartTag");
        java.lang.String str13 = tokenQueue3.chompBalanced('E', '#');
        org.jsoup.parser.CharacterReader characterReader14 = null;
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList16.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList16.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList16.iterator();
        org.jsoup.parser.Tokeniser tokeniser20 = new org.jsoup.parser.Tokeniser(characterReader14, parseErrorList16);
        org.jsoup.parser.Token.EndTag endTag21 = new org.jsoup.parser.Token.EndTag();
        char[] charArray24 = new char[] { '#', '#' };
        endTag21.appendAttributeValue(charArray24);
        endTag21.appendAttributeValue(' ');
        char[] charArray29 = new char[] { '4' };
        endTag21.appendAttributeValue(charArray29);
        tokeniser20.emit(charArray29);
        boolean boolean32 = tokenQueue3.matchesAny(charArray29);
        startTag0.appendAttributeValue(charArray29);
        org.jsoup.parser.TokenQueue tokenQueue35 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str37 = tokenQueue35.chompTo("Doctype");
        java.lang.String str38 = tokenQueue35.consumeWord();
        boolean boolean39 = tokenQueue35.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag40 = new org.jsoup.parser.Token.EndTag();
        char[] charArray43 = new char[] { '#', '#' };
        endTag40.appendAttributeValue(charArray43);
        boolean boolean45 = tokenQueue35.matchesAny(charArray43);
        startTag0.appendAttributeValue(charArray43);
        org.junit.Assert.assertNotNull(attributes1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "EndTag" + "'", str6, "EndTag");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#, #]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[4]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "EndTag" + "'", str37, "EndTag");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList15 = xmlTreeBuilder0.stack;
        org.jsoup.parser.CharacterReader characterReader16 = null;
        xmlTreeBuilder0.reader = characterReader16;
        org.jsoup.nodes.Document document18 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token token20 = xmlTreeBuilder19.currentToken;
        org.jsoup.parser.Parser parser22 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser24 = parser22.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document27 = parser22.parseInput("Doctype", "[]");
        java.util.List<org.jsoup.nodes.Node> nodeList29 = org.jsoup.parser.Parser.parseFragment("", (org.jsoup.nodes.Element) document27, "<hi!>");
        org.jsoup.nodes.Element[] elementArray30 = new org.jsoup.nodes.Element[] { document27 };
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList31 = new org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<org.jsoup.nodes.Element>) elementList31, elementArray30);
        xmlTreeBuilder19.stack = elementList31;
        xmlTreeBuilder0.stack = elementList31;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder35 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int40 = parseErrorList39.getMaxSize();
        org.jsoup.nodes.Document document41 = htmlTreeBuilder35.parse("0: Doctype", "hi!", parseErrorList39);
        boolean boolean42 = htmlTreeBuilder35.framesetOk();
        org.jsoup.nodes.Document document45 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder35.setHeadElement((org.jsoup.nodes.Element) document45);
        org.jsoup.parser.Token.Comment comment47 = new org.jsoup.parser.Token.Comment();
        java.lang.String str48 = comment47.toString();
        boolean boolean49 = comment47.isCharacter();
        htmlTreeBuilder35.insert(comment47);
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(comment47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(elementList15);
        org.junit.Assert.assertNull(document18);
        org.junit.Assert.assertNull(token20);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(parser24);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNotNull(nodeList29);
        org.junit.Assert.assertNotNull(elementArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "<!---->" + "'", str48, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\uffff');
        boolean boolean5 = characterReader1.containsIgnoreCase("0: []");
        int int7 = characterReader1.nextIndexOf('#');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.jsoup.parser.Token.EndTag endTag6 = new org.jsoup.parser.Token.EndTag();
        char[] charArray9 = new char[] { '#', '#' };
        endTag6.appendAttributeValue(charArray9);
        endTag6.finaliseTag();
        boolean boolean12 = endTag6.isSelfClosing();
        org.jsoup.parser.Tag tag14 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean15 = tag14.isFormListed();
        org.jsoup.parser.Tag tag16 = tag14.setSelfClosing();
        boolean boolean17 = tag14.isKnownTag();
        java.lang.Object[] objArray19 = new java.lang.Object[] { boolean12, tag14, "Doctype" };
        org.jsoup.parser.ParseError parseError20 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray19);
        org.jsoup.parser.ParseError parseError21 = new org.jsoup.parser.ParseError((int) (short) -1, "[]", objArray19);
        org.jsoup.parser.ParseError parseError22 = new org.jsoup.parser.ParseError((int) (byte) 10, "", objArray19);
        int int23 = parseError22.getPosition();
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(tag14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(tag16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        boolean boolean19 = doctype18.isCharacter();
        tokeniser6.doctypePending = doctype18;
        org.jsoup.parser.ParseError[] parseErrorArray21 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList22 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList22, parseErrorArray21);
        org.jsoup.parser.ParseError[] parseErrorArray24 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList25 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList25, parseErrorArray24);
        boolean boolean27 = parseErrorList22.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList25);
        org.jsoup.parser.ParseError[] parseErrorArray28 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList29 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList29, parseErrorArray28);
        boolean boolean31 = parseErrorList25.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList29);
        parseErrorList29.clear();
        boolean boolean33 = parseErrorList29.isEmpty();
        org.jsoup.parser.ParseErrorList parseErrorList35 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream36 = parseErrorList35.stream();
        boolean boolean37 = parseErrorList35.canAddError();
        org.jsoup.parser.ParseError parseError40 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str41 = parseError40.getErrorMessage();
        boolean boolean42 = parseErrorList35.add(parseError40);
        org.jsoup.parser.CharacterReader characterReader43 = null;
        org.jsoup.parser.ParseErrorList parseErrorList45 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream46 = parseErrorList45.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList45.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor48 = parseErrorList45.iterator();
        org.jsoup.parser.Tokeniser tokeniser49 = new org.jsoup.parser.Tokeniser(characterReader43, parseErrorList45);
        org.jsoup.parser.Token.Tag tag50 = tokeniser49.tagPending;
        org.jsoup.parser.Token.Tag tag52 = tokeniser49.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype53 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype54 = doctype53.asDoctype();
        java.lang.String str55 = doctype53.tokenType();
        tokeniser49.emit((org.jsoup.parser.Token) doctype53);
        org.jsoup.parser.ITokeniserState iTokeniserState57 = tokeniser49.getState();
        org.jsoup.parser.Token.Comment comment58 = new org.jsoup.parser.Token.Comment();
        java.lang.String str59 = comment58.toString();
        java.lang.StringBuilder stringBuilder60 = comment58.data;
        boolean boolean61 = comment58.isEndTag();
        boolean boolean62 = comment58.isComment();
        tokeniser49.commentPending = comment58;
        int int64 = parseErrorList35.lastIndexOf((java.lang.Object) comment58);
        boolean boolean65 = parseErrorList29.contains((java.lang.Object) comment58);
        org.jsoup.parser.Token.Doctype doctype66 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str67 = doctype66.getSystemIdentifier();
        org.jsoup.parser.Token.TokenType tokenType68 = doctype66.type;
        comment58.type = tokenType68;
        doctype18.type = tokenType68;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parseErrorArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(parseErrorArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(parseErrorList35);
        org.junit.Assert.assertNotNull(parseErrorStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(parseErrorList45);
        org.junit.Assert.assertNotNull(parseErrorStream46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNotNull(parseErrorItor48);
        org.junit.Assert.assertNull(tag50);
        org.junit.Assert.assertNotNull(tag52);
        org.junit.Assert.assertNotNull(doctype54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Doctype" + "'", str55, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "<!---->" + "'", str59, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder60);
        org.junit.Assert.assertEquals(stringBuilder60.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + tokenType68 + "' != '" + org.jsoup.parser.Token.TokenType.Doctype + "'", tokenType68.equals(org.jsoup.parser.Token.TokenType.Doctype));
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        org.jsoup.parser.ITokeniserState iTokeniserState14 = tokeniser6.getState();
        org.jsoup.parser.TokeniserState tokeniserState15 = org.jsoup.parser.TokeniserState.Rawtext;
        tokeniser6.eofError((org.jsoup.parser.ITokeniserState) tokeniserState15);
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState17 = org.jsoup.parser.MiniSoupTokeniserState.EndTagOpen;
        org.jsoup.parser.CharacterReader characterReader18 = null;
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream21 = parseErrorList20.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor22 = parseErrorList20.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList20.iterator();
        org.jsoup.parser.Tokeniser tokeniser24 = new org.jsoup.parser.Tokeniser(characterReader18, parseErrorList20);
        org.jsoup.parser.Token.Tag tag25 = tokeniser24.tagPending;
        java.lang.StringBuilder stringBuilder26 = null;
        tokeniser24.dataBuffer = stringBuilder26;
        org.jsoup.parser.Token.Tag tag29 = tokeniser24.createTagPending(false);
        org.jsoup.parser.CharacterReader characterReader31 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader31.advance();
        characterReader31.advance();
        java.lang.String str35 = characterReader31.consumeTo('E');
        miniSoupTokeniserState17.read(tokeniser24, characterReader31);
        tokeniser6.eofError((org.jsoup.parser.ITokeniserState) miniSoupTokeniserState17);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState14);
        org.junit.Assert.assertNotNull(tokeniserState15);
        org.junit.Assert.assertNotNull(miniSoupTokeniserState17);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertNotNull(parseErrorStream21);
        org.junit.Assert.assertNotNull(parseErrorItor22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNull(tag25);
        org.junit.Assert.assertNotNull(tag29);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "artTag" + "'", str35, "artTag");
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.parser.ParseErrorList parseErrorList41 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor45 = parseErrorList43.iterator();
        boolean boolean46 = parseErrorList41.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        boolean boolean47 = parseErrorList41.canAddError();
        org.jsoup.parser.CharacterReader characterReader48 = null;
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream51 = parseErrorList50.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor52 = parseErrorList50.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor53 = parseErrorList50.iterator();
        org.jsoup.parser.Tokeniser tokeniser54 = new org.jsoup.parser.Tokeniser(characterReader48, parseErrorList50);
        org.jsoup.parser.Token.Tag tag55 = tokeniser54.tagPending;
        java.lang.StringBuilder stringBuilder56 = null;
        tokeniser54.dataBuffer = stringBuilder56;
        org.jsoup.parser.Token.EndTag endTag58 = new org.jsoup.parser.Token.EndTag();
        char[] charArray61 = new char[] { '#', '#' };
        endTag58.appendAttributeValue(charArray61);
        tokeniser54.emit(charArray61);
        boolean boolean64 = parseErrorList41.remove((java.lang.Object) tokeniser54);
        org.jsoup.nodes.Document document65 = htmlTreeBuilder0.parse("<!---->", "\uffff", parseErrorList41);
        htmlTreeBuilder0.clearStackToTableBodyContext();
        boolean boolean68 = htmlTreeBuilder0.inSelectScope("</hi![]>");
        htmlTreeBuilder0.runParser();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder70 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList74 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int75 = parseErrorList74.getMaxSize();
        org.jsoup.nodes.Document document76 = htmlTreeBuilder70.parse("0: Doctype", "hi!", parseErrorList74);
        org.jsoup.parser.ParseErrorList parseErrorList80 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream81 = parseErrorList80.stream();
        boolean boolean82 = parseErrorList80.canAddError();
        org.jsoup.nodes.Document document83 = htmlTreeBuilder70.parse("EndTag", "hi!#", parseErrorList80);
        org.jsoup.nodes.Element element85 = htmlTreeBuilder70.insert("hi!#");
        htmlTreeBuilder0.maybeSetBaseUri(element85);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertNotNull(parseErrorItor45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertNotNull(parseErrorStream51);
        org.junit.Assert.assertNotNull(parseErrorItor52);
        org.junit.Assert.assertNotNull(parseErrorItor53);
        org.junit.Assert.assertNull(tag55);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(parseErrorList74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(document76);
        org.junit.Assert.assertNotNull(parseErrorList80);
        org.junit.Assert.assertNotNull(parseErrorStream81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(document83);
        org.junit.Assert.assertNotNull(element85);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        boolean boolean10 = parseErrorList5.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        xmlTreeBuilder0.initialiseParse("<!---->", "hi!", parseErrorList5);
        int int12 = parseErrorList5.size();
        boolean boolean13 = parseErrorList5.isEmpty();
        parseErrorList5.clear();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList16.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList16.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList16.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        boolean boolean23 = parseErrorList16.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        org.jsoup.parser.ParseError[] parseErrorArray24 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList25 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList25, parseErrorArray24);
        org.jsoup.parser.ParseError[] parseErrorArray27 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList28 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList28, parseErrorArray27);
        boolean boolean30 = parseErrorList25.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList28);
        boolean boolean31 = parseErrorList16.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList25);
        org.jsoup.parser.ParseError[] parseErrorArray32 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList33 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33, parseErrorArray32);
        org.jsoup.parser.ParseError[] parseErrorArray35 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList36 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36, parseErrorArray35);
        boolean boolean38 = parseErrorList33.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor39 = parseErrorList36.listIterator();
        parseErrorList36.trimToSize();
        boolean boolean41 = parseErrorList16.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36);
        boolean boolean42 = parseErrorList5.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parseErrorArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(parseErrorArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(parseErrorArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(parseErrorArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parseErrorItor39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("\ufffd>");
        boolean boolean2 = tag1.isKnownTag();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        java.lang.String str2 = org.jsoup.parser.Parser.unescapeEntities("tartTag", true);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tartTag" + "'", str2, "tartTag");
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        java.lang.String str2 = characterReader1.consumeToEnd();
        int int4 = characterReader1.nextIndexOf('a');
        java.lang.String str5 = characterReader1.consumeDigitSequence();
        char char6 = characterReader1.current();
        boolean boolean7 = characterReader1.matchesDigit();
        java.lang.String str8 = characterReader1.toString();
        int int9 = characterReader1.pos();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "StartTag" + "'", str2, "StartTag");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\uffff' + "'", char6 == '\uffff');
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Token.StartTag startTag2 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes3 = startTag2.getAttributes();
        org.jsoup.parser.Token.StartTag startTag4 = new org.jsoup.parser.Token.StartTag("<!---->", attributes3);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader6 = null;
        org.jsoup.parser.ParseErrorList parseErrorList8 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream9 = parseErrorList8.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor10 = parseErrorList8.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList8.iterator();
        org.jsoup.parser.Tokeniser tokeniser12 = new org.jsoup.parser.Tokeniser(characterReader6, parseErrorList8);
        xmlTreeBuilder5.tokeniser = tokeniser12;
        org.jsoup.parser.CharacterReader characterReader14 = null;
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList16.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList16.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList16.iterator();
        org.jsoup.parser.Tokeniser tokeniser20 = new org.jsoup.parser.Tokeniser(characterReader14, parseErrorList16);
        org.jsoup.parser.Token.Tag tag21 = tokeniser20.tagPending;
        org.jsoup.parser.Token.Tag tag23 = tokeniser20.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype24 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype25 = doctype24.asDoctype();
        java.lang.String str26 = doctype24.tokenType();
        tokeniser20.emit((org.jsoup.parser.Token) doctype24);
        org.jsoup.parser.ITokeniserState iTokeniserState28 = tokeniser20.getState();
        org.jsoup.parser.TokeniserState tokeniserState29 = org.jsoup.parser.TokeniserState.Rawtext;
        tokeniser20.eofError((org.jsoup.parser.ITokeniserState) tokeniserState29);
        tokeniser12.transition((org.jsoup.parser.ITokeniserState) tokeniserState29);
        org.jsoup.parser.Token.Tag tag33 = tokeniser12.createTagPending(true);
        org.jsoup.parser.Token.EndTag endTag35 = new org.jsoup.parser.Token.EndTag("<hi!>");
        org.jsoup.parser.CharacterReader characterReader36 = null;
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList38.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor41 = parseErrorList38.iterator();
        org.jsoup.parser.Tokeniser tokeniser42 = new org.jsoup.parser.Tokeniser(characterReader36, parseErrorList38);
        org.jsoup.parser.Token.Tag tag43 = tokeniser42.tagPending;
        tokeniser42.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype46 = tokeniser42.doctypePending;
        tokeniser42.createCommentPending();
        org.jsoup.parser.Token.Comment comment48 = tokeniser42.commentPending;
        org.jsoup.parser.TokenQueue tokenQueue50 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean51 = tokenQueue50.isEmpty();
        char[] charArray53 = new char[] { '4' };
        boolean boolean54 = tokenQueue50.matchesAny(charArray53);
        tokeniser42.emit(charArray53);
        endTag35.appendAttributeValue(charArray53);
        tag33.appendAttributeValue(charArray53);
        startTag4.appendAttributeValue(charArray53);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element59 = htmlTreeBuilder0.insertEmpty(startTag4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(attributes3);
        org.junit.Assert.assertNotNull(parseErrorList8);
        org.junit.Assert.assertNotNull(parseErrorStream9);
        org.junit.Assert.assertNotNull(parseErrorItor10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertNull(tag21);
        org.junit.Assert.assertNotNull(tag23);
        org.junit.Assert.assertNotNull(doctype25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Doctype" + "'", str26, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState28);
        org.junit.Assert.assertNotNull(tokeniserState29);
        org.junit.Assert.assertNotNull(tag33);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
        org.junit.Assert.assertNotNull(parseErrorItor41);
        org.junit.Assert.assertNull(tag43);
        org.junit.Assert.assertNull(doctype46);
        org.junit.Assert.assertNotNull(comment48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[4]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        boolean boolean10 = parseErrorList5.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        xmlTreeBuilder0.initialiseParse("<!---->", "hi!", parseErrorList5);
        org.jsoup.parser.CharacterReader characterReader13 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean15 = characterReader13.matches('\000');
        characterReader13.mark();
        int int17 = parseErrorList5.indexOf((java.lang.Object) characterReader13);
        java.lang.String str19 = characterReader13.consumeTo("artTag");
        java.lang.String str20 = characterReader13.consumeLetterSequence();
        boolean boolean22 = characterReader13.matchesIgnoreCase("S");
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "St" + "'", str19, "St");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "artTag" + "'", str20, "artTag");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.Token.StartTag startTag19 = new org.jsoup.parser.Token.StartTag();
        startTag19.appendAttributeValue("hi!");
        startTag19.appendAttributeValue("");
        org.jsoup.nodes.Attributes attributes24 = null;
        startTag19.attributes = attributes24;
        startTag19.appendAttributeValue("StartTag");
        htmlTreeBuilder0.currentToken = startTag19;
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("a");
        boolean boolean3 = tokenQueue1.matchChomp("t");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\uffff');
        boolean boolean5 = characterReader1.containsIgnoreCase("0: []");
        boolean boolean6 = characterReader1.matchesDigit();
        java.lang.String str7 = characterReader1.consumeToEnd();
        java.lang.String str9 = characterReader1.consumeTo('\uffff');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "StartTag" + "'", str7, "StartTag");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        boolean boolean5 = tokenQueue1.matchChomp("<!---->");
        java.lang.String str6 = tokenQueue1.consumeCssIdentifier();
        java.lang.String str8 = tokenQueue1.chompToIgnoreCase("Doctype");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder16 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.nodes.Document document22 = htmlTreeBuilder16.parse("0: Doctype", "hi!", parseErrorList20);
        boolean boolean23 = htmlTreeBuilder16.framesetOk();
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder16.setHeadElement((org.jsoup.nodes.Element) document26);
        org.jsoup.nodes.Element element28 = htmlTreeBuilder16.pop();
        htmlTreeBuilder9.pushActiveFormattingElements(element28);
        org.jsoup.nodes.Element element31 = htmlTreeBuilder9.insert("[100: ]");
        htmlTreeBuilder9.generateImpliedEndTags("[100: ]");
        org.jsoup.parser.Token token34 = htmlTreeBuilder9.currentToken;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder35 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int40 = parseErrorList39.getMaxSize();
        org.jsoup.nodes.Document document41 = htmlTreeBuilder35.parse("0: Doctype", "hi!", parseErrorList39);
        boolean boolean42 = htmlTreeBuilder35.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState43 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder35.error(htmlTreeBuilderState43);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState45 = null;
        htmlTreeBuilder35.transition(htmlTreeBuilderState45);
        htmlTreeBuilder35.clearStackToTableContext();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder48 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList52 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int53 = parseErrorList52.getMaxSize();
        org.jsoup.nodes.Document document54 = htmlTreeBuilder48.parse("0: Doctype", "hi!", parseErrorList52);
        boolean boolean55 = htmlTreeBuilder48.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState56 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder48.error(htmlTreeBuilderState56);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder58 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList62 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int63 = parseErrorList62.getMaxSize();
        org.jsoup.nodes.Document document64 = htmlTreeBuilder58.parse("0: Doctype", "hi!", parseErrorList62);
        org.jsoup.parser.ParseErrorList parseErrorList68 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream69 = parseErrorList68.stream();
        boolean boolean70 = parseErrorList68.canAddError();
        org.jsoup.nodes.Document document71 = htmlTreeBuilder58.parse("EndTag", "hi!#", parseErrorList68);
        java.lang.String[] strArray79 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean80 = htmlTreeBuilder58.inScope("hi!#", strArray79);
        boolean boolean81 = htmlTreeBuilder48.inScope(strArray79);
        htmlTreeBuilder35.popStackToClose(strArray79);
        boolean boolean83 = htmlTreeBuilder9.inScope(strArray79);
        java.lang.String str84 = tokenQueue1.consumeToAny(strArray79);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "EndTag" + "'", str6, "EndTag");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(element28);
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertNotNull(token34);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState43);
        org.junit.Assert.assertNotNull(parseErrorList52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(document54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState56);
        org.junit.Assert.assertNotNull(parseErrorList62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(document64);
        org.junit.Assert.assertNotNull(parseErrorList68);
        org.junit.Assert.assertNotNull(parseErrorStream69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(document71);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.CharacterReader characterReader14 = null;
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList16.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList16.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList16.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        boolean boolean23 = parseErrorList16.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        org.jsoup.parser.Tokeniser tokeniser24 = new org.jsoup.parser.Tokeniser(characterReader14, parseErrorList21);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList21.iterator();
        htmlTreeBuilder0.initialiseParse("hi!", "hi!#", parseErrorList21);
        org.jsoup.parser.CharacterReader characterReader27 = null;
        org.jsoup.parser.ParseErrorList parseErrorList29 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream30 = parseErrorList29.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor31 = parseErrorList29.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList29.iterator();
        org.jsoup.parser.Tokeniser tokeniser33 = new org.jsoup.parser.Tokeniser(characterReader27, parseErrorList29);
        org.jsoup.parser.Token.Tag tag34 = tokeniser33.tagPending;
        java.lang.StringBuilder stringBuilder35 = null;
        tokeniser33.dataBuffer = stringBuilder35;
        org.jsoup.parser.Token.EndTag endTag37 = new org.jsoup.parser.Token.EndTag();
        char[] charArray40 = new char[] { '#', '#' };
        endTag37.appendAttributeValue(charArray40);
        tokeniser33.emit(charArray40);
        htmlTreeBuilder0.tokeniser = tokeniser33;
        org.jsoup.parser.TokeniserState tokeniserState44 = org.jsoup.parser.TokeniserState.ScriptDataEndTagName;
        tokeniser33.error((org.jsoup.parser.ITokeniserState) tokeniserState44);
        org.jsoup.parser.ITokeniserState iTokeniserState46 = tokeniser33.getState();
        org.jsoup.parser.TokeniserState tokeniserState47 = org.jsoup.parser.TokeniserState.BeforeDoctypePublicIdentifier;
        tokeniser33.transition((org.jsoup.parser.ITokeniserState) tokeniserState47);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNotNull(parseErrorList29);
        org.junit.Assert.assertNotNull(parseErrorStream30);
        org.junit.Assert.assertNotNull(parseErrorItor31);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertNull(tag34);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#, #]");
        org.junit.Assert.assertNotNull(tokeniserState44);
        org.junit.Assert.assertNotNull(iTokeniserState46);
        org.junit.Assert.assertNotNull(tokeniserState47);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.matchesStartTag();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        boolean boolean4 = tokenQueue1.matchesWhitespace();
        java.lang.String str6 = tokenQueue1.consumeTo("EOF");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "EndTag" + "'", str6, "EndTag");
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        java.lang.String str4 = tag1.getName();
        org.jsoup.parser.CharacterReader characterReader5 = null;
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor10 = parseErrorList7.iterator();
        org.jsoup.parser.Tokeniser tokeniser11 = new org.jsoup.parser.Tokeniser(characterReader5, parseErrorList7);
        org.jsoup.parser.Token.Tag tag12 = tokeniser11.tagPending;
        org.jsoup.parser.Token.Tag tag14 = tokeniser11.createTagPending(true);
        java.lang.StringBuilder stringBuilder15 = tokeniser11.dataBuffer;
        boolean boolean16 = tag1.equals((java.lang.Object) stringBuilder15);
        java.lang.String str17 = tag1.getName();
        boolean boolean18 = tag1.isData();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertNotNull(parseErrorItor10);
        org.junit.Assert.assertNull(tag12);
        org.junit.Assert.assertNotNull(tag14);
        org.junit.Assert.assertNull(stringBuilder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.EndTagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        tokeniser7.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag12 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType13 = startTag12.type;
        startTag12.appendTagName('#');
        tokeniser7.tagPending = startTag12;
        org.jsoup.parser.TokeniserState tokeniserState17 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser7.transition((org.jsoup.parser.ITokeniserState) tokeniserState17);
        tokeniser7.createDoctypePending();
        org.jsoup.parser.CharacterReader characterReader21 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean23 = characterReader21.matches('\000');
        characterReader21.mark();
        boolean boolean25 = characterReader21.isEmpty();
        org.jsoup.parser.TokenQueue tokenQueue27 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str29 = tokenQueue27.chompTo("Doctype");
        java.lang.String str30 = tokenQueue27.consumeWord();
        boolean boolean31 = tokenQueue27.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag32 = new org.jsoup.parser.Token.EndTag();
        char[] charArray35 = new char[] { '#', '#' };
        endTag32.appendAttributeValue(charArray35);
        boolean boolean37 = tokenQueue27.matchesAny(charArray35);
        boolean boolean38 = characterReader21.matchesAny(charArray35);
        miniSoupTokeniserState0.read(tokeniser7, characterReader21);
        characterReader21.mark();
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertTrue("'" + tokenType13 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType13.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "EndTag" + "'", str29, "EndTag");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        boolean boolean10 = parseErrorList5.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        xmlTreeBuilder0.initialiseParse("<!---->", "hi!", parseErrorList5);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError13 = parseErrorList5.get((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor2 = parseErrorList1.listIterator();
        boolean boolean3 = parseErrorList1.canAddError();
        java.util.function.UnaryOperator<org.jsoup.parser.ParseError> parseErrorUnaryOperator4 = null;
        // The following exception was thrown during execution in test generation
        try {
            parseErrorList1.replaceAll(parseErrorUnaryOperator4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorItor2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        htmlTreeBuilder3.baseUri = "</hi![]>";
        htmlTreeBuilder3.clearFormattingElementsToLastMarker();
        org.jsoup.parser.Token token14 = htmlTreeBuilder3.currentToken;
        htmlTreeBuilder3.newPendingTableCharacters();
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(token14);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader1.advance();
        boolean boolean4 = characterReader1.matchConsume("<hi!>");
        java.lang.String str5 = characterReader1.consumeDigitSequence();
        boolean boolean7 = characterReader1.matchConsumeIgnoreCase("artTag");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        org.jsoup.parser.Token.StartTag startTag19 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes20 = startTag19.getAttributes();
        org.jsoup.parser.Token.StartTag startTag21 = new org.jsoup.parser.Token.StartTag("<!---->", attributes20);
        org.jsoup.nodes.Element element22 = htmlTreeBuilder0.insert(startTag21);
        boolean boolean24 = htmlTreeBuilder0.inScope("[]");
        org.jsoup.parser.Tokeniser tokeniser25 = htmlTreeBuilder0.tokeniser;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder26 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int31 = parseErrorList30.getMaxSize();
        org.jsoup.nodes.Document document32 = htmlTreeBuilder26.parse("0: Doctype", "hi!", parseErrorList30);
        boolean boolean33 = htmlTreeBuilder26.framesetOk();
        org.jsoup.nodes.Document document36 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder26.setHeadElement((org.jsoup.nodes.Element) document36);
        org.jsoup.parser.CharacterReader characterReader40 = null;
        org.jsoup.parser.ParseErrorList parseErrorList42 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream43 = parseErrorList42.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor44 = parseErrorList42.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor45 = parseErrorList42.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList47 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int48 = parseErrorList47.getMaxSize();
        boolean boolean49 = parseErrorList42.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList47);
        org.jsoup.parser.Tokeniser tokeniser50 = new org.jsoup.parser.Tokeniser(characterReader40, parseErrorList47);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor51 = parseErrorList47.iterator();
        htmlTreeBuilder26.initialiseParse("hi!", "hi!#", parseErrorList47);
        parseErrorList47.trimToSize();
        org.jsoup.parser.CharacterReader characterReader54 = null;
        org.jsoup.parser.ParseErrorList parseErrorList56 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream57 = parseErrorList56.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor58 = parseErrorList56.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor59 = parseErrorList56.iterator();
        org.jsoup.parser.Tokeniser tokeniser60 = new org.jsoup.parser.Tokeniser(characterReader54, parseErrorList56);
        org.jsoup.parser.Token.Tag tag61 = tokeniser60.tagPending;
        org.jsoup.parser.Token.Tag tag63 = tokeniser60.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype64 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype65 = doctype64.asDoctype();
        java.lang.String str66 = doctype64.tokenType();
        tokeniser60.emit((org.jsoup.parser.Token) doctype64);
        org.jsoup.parser.ITokeniserState iTokeniserState68 = tokeniser60.getState();
        org.jsoup.parser.TokeniserState tokeniserState69 = org.jsoup.parser.TokeniserState.Doctype;
        tokeniser60.error((org.jsoup.parser.ITokeniserState) tokeniserState69);
        int int71 = parseErrorList47.lastIndexOf((java.lang.Object) tokeniserState69);
        tokeniser25.transition((org.jsoup.parser.ITokeniserState) tokeniserState69);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(attributes20);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(tokeniser25);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNotNull(parseErrorList42);
        org.junit.Assert.assertNotNull(parseErrorStream43);
        org.junit.Assert.assertNotNull(parseErrorItor44);
        org.junit.Assert.assertNotNull(parseErrorItor45);
        org.junit.Assert.assertNotNull(parseErrorList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(parseErrorItor51);
        org.junit.Assert.assertNotNull(parseErrorList56);
        org.junit.Assert.assertNotNull(parseErrorStream57);
        org.junit.Assert.assertNotNull(parseErrorItor58);
        org.junit.Assert.assertNotNull(parseErrorItor59);
        org.junit.Assert.assertNull(tag61);
        org.junit.Assert.assertNotNull(tag63);
        org.junit.Assert.assertNotNull(doctype65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Doctype" + "'", str66, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState68);
        org.junit.Assert.assertNotNull(tokeniserState69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder0.getPendingTableCharacters();
        htmlTreeBuilder0.framesetOk(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder17 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        org.jsoup.nodes.Document document23 = htmlTreeBuilder17.parse("0: Doctype", "hi!", parseErrorList21);
        boolean boolean24 = htmlTreeBuilder17.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState25 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder17.error(htmlTreeBuilderState25);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder27 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        org.jsoup.nodes.Document document33 = htmlTreeBuilder27.parse("0: Doctype", "hi!", parseErrorList31);
        org.jsoup.parser.ParseErrorList parseErrorList37 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream38 = parseErrorList37.stream();
        boolean boolean39 = parseErrorList37.canAddError();
        org.jsoup.nodes.Document document40 = htmlTreeBuilder27.parse("EndTag", "hi!#", parseErrorList37);
        java.lang.String[] strArray48 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean49 = htmlTreeBuilder27.inScope("hi!#", strArray48);
        boolean boolean50 = htmlTreeBuilder17.inScope(strArray48);
        java.util.List<org.jsoup.parser.Token.Character> characterList51 = htmlTreeBuilder17.getPendingTableCharacters();
        org.jsoup.nodes.Document document54 = org.jsoup.parser.Parser.parse("", "Doctype");
        htmlTreeBuilder17.insertInFosterParent((org.jsoup.nodes.Node) document54);
        htmlTreeBuilder0.pushActiveFormattingElements((org.jsoup.nodes.Element) document54);
        htmlTreeBuilder0.clearStackToTableBodyContext();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState25);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(parseErrorList37);
        org.junit.Assert.assertNotNull(parseErrorStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(characterList51);
        org.junit.Assert.assertNotNull(document54);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList14 = htmlTreeBuilder0.stack;
        java.lang.String str15 = htmlTreeBuilder0.baseUri;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(elementList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.resetInsertionMode();
        org.jsoup.nodes.Element element8 = htmlTreeBuilder0.currentElement();
        boolean boolean10 = htmlTreeBuilder0.inButtonScope("-1: []");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState11 = htmlTreeBuilder0.state();
        org.jsoup.nodes.Document document12 = htmlTreeBuilder0.getDocument();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState11);
        org.junit.Assert.assertNotNull(document12);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.nodes.Document document3 = parser0.parseInput("", "hi!");
        org.jsoup.parser.Parser parser5 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.TreeBuilder treeBuilder6 = parser5.getTreeBuilder();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertNotNull(parser5);
        org.junit.Assert.assertNotNull(treeBuilder6);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor2 = parseErrorList1.listIterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList1.parallelStream();
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList5.listIterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream7 = parseErrorList5.parallelStream();
        boolean boolean8 = parseErrorList1.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList5);
        org.jsoup.parser.ParseError parseError11 = new org.jsoup.parser.ParseError(100, "</hi![]>");
        boolean boolean12 = parseErrorList1.add(parseError11);
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorItor2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder21 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int26 = parseErrorList25.getMaxSize();
        org.jsoup.nodes.Document document27 = htmlTreeBuilder21.parse("0: Doctype", "hi!", parseErrorList25);
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document27);
        org.jsoup.parser.CharacterReader characterReader29 = null;
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream32 = parseErrorList31.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor33 = parseErrorList31.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor34 = parseErrorList31.iterator();
        org.jsoup.parser.Tokeniser tokeniser35 = new org.jsoup.parser.Tokeniser(characterReader29, parseErrorList31);
        org.jsoup.parser.Token.Tag tag36 = tokeniser35.tagPending;
        org.jsoup.parser.Token.Tag tag38 = tokeniser35.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype39 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype40 = doctype39.asDoctype();
        java.lang.String str41 = doctype39.tokenType();
        tokeniser35.emit((org.jsoup.parser.Token) doctype39);
        org.jsoup.parser.ITokeniserState iTokeniserState43 = tokeniser35.getState();
        org.jsoup.parser.Token.Comment comment44 = new org.jsoup.parser.Token.Comment();
        java.lang.String str45 = comment44.toString();
        java.lang.StringBuilder stringBuilder46 = comment44.data;
        boolean boolean47 = comment44.isEndTag();
        boolean boolean48 = comment44.isComment();
        tokeniser35.commentPending = comment44;
        htmlTreeBuilder0.insert(comment44);
        htmlTreeBuilder0.resetInsertionMode();
        org.jsoup.nodes.Element element53 = htmlTreeBuilder0.getActiveFormattingElement("hi!#");
        org.jsoup.parser.CharacterReader characterReader54 = htmlTreeBuilder0.reader;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertNotNull(parseErrorStream32);
        org.junit.Assert.assertNotNull(parseErrorItor33);
        org.junit.Assert.assertNotNull(parseErrorItor34);
        org.junit.Assert.assertNull(tag36);
        org.junit.Assert.assertNotNull(tag38);
        org.junit.Assert.assertNotNull(doctype40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Doctype" + "'", str41, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "<!---->" + "'", str45, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder46);
        org.junit.Assert.assertEquals(stringBuilder46.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(element53);
        org.junit.Assert.assertNotNull(characterReader54);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("[0: []]");
        org.junit.Assert.assertNotNull(tag1);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        boolean boolean12 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        java.lang.String str13 = parseErrorList1.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError15 = parseErrorList1.get(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token token1 = xmlTreeBuilder0.currentToken;
        org.jsoup.parser.CharacterReader characterReader2 = null;
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.iterator();
        org.jsoup.parser.Tokeniser tokeniser8 = new org.jsoup.parser.Tokeniser(characterReader2, parseErrorList4);
        org.jsoup.parser.Token.Tag tag9 = tokeniser8.tagPending;
        org.jsoup.parser.Token.Tag tag11 = tokeniser8.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype12 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype13 = doctype12.asDoctype();
        java.lang.String str14 = doctype12.tokenType();
        tokeniser8.emit((org.jsoup.parser.Token) doctype12);
        org.jsoup.parser.Token.Tag tag17 = tokeniser8.createTagPending(true);
        xmlTreeBuilder0.tokeniser = tokeniser8;
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        java.lang.StringBuilder stringBuilder27 = null;
        tokeniser25.dataBuffer = stringBuilder27;
        org.jsoup.parser.Token.Tag tag30 = tokeniser25.createTagPending(false);
        org.jsoup.parser.Token.Tag tag32 = tag30.name("hi!#");
        tokeniser8.tagPending = tag30;
        boolean boolean34 = tokeniser8.currentNodeInHtmlNS();
        org.jsoup.parser.ITokeniserState iTokeniserState35 = tokeniser8.getState();
        org.junit.Assert.assertNull(token1);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNull(tag9);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(doctype13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Doctype" + "'", str14, "Doctype");
        org.junit.Assert.assertNotNull(tag17);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag30);
        org.junit.Assert.assertNotNull(tag32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(iTokeniserState35);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.nodes.Document document22 = parser19.parseInput("hi!", "[]");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder23 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList27 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int28 = parseErrorList27.getMaxSize();
        org.jsoup.nodes.Document document29 = htmlTreeBuilder23.parse("0: Doctype", "hi!", parseErrorList27);
        htmlTreeBuilder23.resetInsertionMode();
        htmlTreeBuilder23.popStackToBefore("EndTag");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState33 = htmlTreeBuilder23.state();
        htmlTreeBuilder23.runParser();
        org.jsoup.parser.Parser parser35 = parser19.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder23);
        org.jsoup.parser.CharacterReader characterReader36 = htmlTreeBuilder23.reader;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder37 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader38 = null;
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream41 = parseErrorList40.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList40.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList40.iterator();
        org.jsoup.parser.Tokeniser tokeniser44 = new org.jsoup.parser.Tokeniser(characterReader38, parseErrorList40);
        org.jsoup.parser.Token.Tag tag45 = tokeniser44.tagPending;
        org.jsoup.parser.Token.Tag tag47 = tokeniser44.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype48 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype49 = doctype48.asDoctype();
        java.lang.String str50 = doctype48.tokenType();
        tokeniser44.emit((org.jsoup.parser.Token) doctype48);
        org.jsoup.parser.Token.Tag tag53 = tokeniser44.createTagPending(true);
        xmlTreeBuilder37.currentToken = tag53;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder55 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList59 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int60 = parseErrorList59.getMaxSize();
        org.jsoup.nodes.Document document61 = htmlTreeBuilder55.parse("0: Doctype", "hi!", parseErrorList59);
        boolean boolean62 = htmlTreeBuilder55.framesetOk();
        org.jsoup.nodes.Document document65 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder55.setHeadElement((org.jsoup.nodes.Element) document65);
        xmlTreeBuilder37.doc = document65;
        org.jsoup.parser.ParseErrorList parseErrorList71 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream72 = parseErrorList71.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor73 = parseErrorList71.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor74 = parseErrorList71.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList76 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int77 = parseErrorList76.getMaxSize();
        boolean boolean78 = parseErrorList71.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList76);
        xmlTreeBuilder37.initialiseParse("hi!#", "0: []", parseErrorList76);
        parseErrorList76.clear();
        org.jsoup.parser.Tokeniser tokeniser81 = new org.jsoup.parser.Tokeniser(characterReader36, parseErrorList76);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError83 = parseErrorList76.get((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(parseErrorList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState33);
        org.junit.Assert.assertNotNull(parser35);
        org.junit.Assert.assertNotNull(characterReader36);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertNotNull(parseErrorStream41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNull(tag45);
        org.junit.Assert.assertNotNull(tag47);
        org.junit.Assert.assertNotNull(doctype49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Doctype" + "'", str50, "Doctype");
        org.junit.Assert.assertNotNull(tag53);
        org.junit.Assert.assertNotNull(parseErrorList59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(document61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertNotNull(parseErrorList71);
        org.junit.Assert.assertNotNull(parseErrorStream72);
        org.junit.Assert.assertNotNull(parseErrorItor73);
        org.junit.Assert.assertNotNull(parseErrorItor74);
        org.junit.Assert.assertNotNull(parseErrorList76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("<!---->");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder10 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader11 = null;
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList13.iterator();
        org.jsoup.parser.Tokeniser tokeniser17 = new org.jsoup.parser.Tokeniser(characterReader11, parseErrorList13);
        org.jsoup.parser.Token.Tag tag18 = tokeniser17.tagPending;
        org.jsoup.parser.Token.Tag tag20 = tokeniser17.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype21 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype22 = doctype21.asDoctype();
        java.lang.String str23 = doctype21.tokenType();
        tokeniser17.emit((org.jsoup.parser.Token) doctype21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser17.createTagPending(true);
        xmlTreeBuilder10.currentToken = tag26;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        boolean boolean35 = htmlTreeBuilder28.framesetOk();
        org.jsoup.nodes.Document document38 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder28.setHeadElement((org.jsoup.nodes.Element) document38);
        xmlTreeBuilder10.doc = document38;
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList44.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList44.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int50 = parseErrorList49.getMaxSize();
        boolean boolean51 = parseErrorList44.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList49);
        xmlTreeBuilder10.initialiseParse("hi!#", "0: []", parseErrorList49);
        org.jsoup.parser.Token.Comment comment53 = new org.jsoup.parser.Token.Comment();
        java.lang.String str54 = comment53.getData();
        xmlTreeBuilder10.insert(comment53);
        java.lang.StringBuilder stringBuilder56 = comment53.data;
        tokeniser6.commentPending = comment53;
        boolean boolean58 = comment53.bogus;
        comment53.bogus = false;
        boolean boolean61 = comment53.bogus;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNull(tag18);
        org.junit.Assert.assertNotNull(tag20);
        org.junit.Assert.assertNotNull(doctype22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Doctype" + "'", str23, "Doctype");
        org.junit.Assert.assertNotNull(tag26);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(stringBuilder56);
        org.junit.Assert.assertEquals(stringBuilder56.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        java.lang.String[] strArray13 = null;
        boolean boolean14 = htmlTreeBuilder0.inScope("EndTag", strArray13);
        htmlTreeBuilder0.resetInsertionMode();
        org.jsoup.parser.CharacterReader characterReader16 = htmlTreeBuilder0.reader;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(characterReader16);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.jsoup.parser.Token.Comment comment0 = new org.jsoup.parser.Token.Comment();
        java.lang.String str1 = comment0.toString();
        java.lang.StringBuilder stringBuilder2 = comment0.data;
        boolean boolean3 = comment0.isEndTag();
        java.lang.String str4 = comment0.toString();
        java.lang.StringBuilder stringBuilder5 = comment0.data;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.StartTag startTag6 = comment0.asStartTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$StartTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "<!---->" + "'", str1, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder2);
        org.junit.Assert.assertEquals(stringBuilder2.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "<!---->" + "'", str4, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder5);
        org.junit.Assert.assertEquals(stringBuilder5.toString(), "");
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("a");
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        boolean boolean10 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.ParseError[] parseErrorArray11 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList12 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12, parseErrorArray11);
        org.jsoup.parser.ParseError[] parseErrorArray14 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList15 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15, parseErrorArray14);
        boolean boolean17 = parseErrorList12.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList15.listIterator();
        int int20 = parseErrorList15.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag24 = new org.jsoup.parser.Token.EndTag();
        char[] charArray27 = new char[] { '#', '#' };
        endTag24.appendAttributeValue(charArray27);
        endTag24.finaliseTag();
        boolean boolean30 = endTag24.isSelfClosing();
        org.jsoup.parser.Tag tag32 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean33 = tag32.isFormListed();
        org.jsoup.parser.Tag tag34 = tag32.setSelfClosing();
        boolean boolean35 = tag32.isKnownTag();
        java.lang.Object[] objArray37 = new java.lang.Object[] { boolean30, tag32, "Doctype" };
        org.jsoup.parser.ParseError parseError38 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray37);
        parseErrorList15.add(0, parseError38);
        org.jsoup.parser.Token.Doctype doctype40 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str41 = doctype40.getSystemIdentifier();
        boolean boolean42 = doctype40.forceQuirks;
        boolean boolean43 = parseErrorList15.equals((java.lang.Object) doctype40);
        boolean boolean44 = htmlTreeBuilder0.process((org.jsoup.parser.Token) doctype40);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parseErrorArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(tag32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(tag34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.CharacterReader characterReader3 = null;
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream6 = parseErrorList5.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList5.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList5.iterator();
        org.jsoup.parser.Tokeniser tokeniser9 = new org.jsoup.parser.Tokeniser(characterReader3, parseErrorList5);
        org.jsoup.parser.Token.Tag tag10 = tokeniser9.tagPending;
        org.jsoup.parser.Token.Tag tag12 = tokeniser9.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype13 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype14 = doctype13.asDoctype();
        java.lang.String str15 = doctype13.tokenType();
        tokeniser9.emit((org.jsoup.parser.Token) doctype13);
        boolean boolean17 = tag1.equals((java.lang.Object) doctype13);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder18 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        org.jsoup.parser.Token.Tag tag28 = tokeniser25.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype29 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype30 = doctype29.asDoctype();
        java.lang.String str31 = doctype29.tokenType();
        tokeniser25.emit((org.jsoup.parser.Token) doctype29);
        org.jsoup.parser.Token.Tag tag34 = tokeniser25.createTagPending(true);
        xmlTreeBuilder18.currentToken = tag34;
        boolean boolean36 = tag1.equals((java.lang.Object) tag34);
        org.jsoup.parser.Tag tag37 = tag1.setSelfClosing();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorStream6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNull(tag10);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertNotNull(doctype14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Doctype" + "'", str15, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(doctype30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Doctype" + "'", str31, "Doctype");
        org.junit.Assert.assertNotNull(tag34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(tag37);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        boolean boolean10 = parseErrorList5.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        xmlTreeBuilder0.initialiseParse("<!---->", "hi!", parseErrorList5);
        int int13 = parseErrorList5.indexOf((java.lang.Object) '#');
        boolean boolean15 = parseErrorList5.equals((java.lang.Object) (short) 0);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder16 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.nodes.Document document22 = htmlTreeBuilder16.parse("0: Doctype", "hi!", parseErrorList20);
        boolean boolean23 = htmlTreeBuilder16.framesetOk();
        org.jsoup.parser.Parser parser24 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser26 = parser24.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document29 = parser24.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document32 = parser24.parseInput("<hi!>", "[]");
        htmlTreeBuilder16.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        boolean boolean34 = htmlTreeBuilder16.isFragmentParsing();
        org.jsoup.parser.Parser parser35 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder16);
        org.jsoup.parser.Token.StartTag startTag36 = new org.jsoup.parser.Token.StartTag();
        startTag36.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag40 = startTag36.name("hi!#");
        boolean boolean41 = startTag36.selfClosing;
        java.lang.String str42 = startTag36.toString();
        org.jsoup.nodes.Element element43 = htmlTreeBuilder16.insertEmpty(startTag36);
        boolean boolean44 = parseErrorList5.remove((java.lang.Object) startTag36);
        char[] charArray45 = null;
        // The following exception was thrown during execution in test generation
        try {
            startTag36.appendAttributeValue(charArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parser24);
        org.junit.Assert.assertNotNull(parser26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(tag40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "<hi!#>" + "'", str42, "<hi!#>");
        org.junit.Assert.assertNotNull(element43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean8 = htmlTreeBuilder0.inListItemScope("100: ");
        boolean boolean9 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        endTag11.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilderState10.process((org.jsoup.parser.Token) endTag11, htmlTreeBuilder13);
        org.jsoup.nodes.FormElement formElement21 = htmlTreeBuilder13.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder22 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int27 = parseErrorList26.getMaxSize();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder22.parse("0: Doctype", "hi!", parseErrorList26);
        boolean boolean29 = htmlTreeBuilder22.framesetOk();
        org.jsoup.parser.Parser parser30 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser32 = parser30.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document35 = parser30.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document38 = parser30.parseInput("<hi!>", "[]");
        htmlTreeBuilder22.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document38);
        boolean boolean40 = htmlTreeBuilder22.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder41 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList46 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList48 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream49 = parseErrorList48.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor50 = parseErrorList48.iterator();
        boolean boolean51 = parseErrorList46.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList48);
        xmlTreeBuilder41.initialiseParse("<!---->", "hi!", parseErrorList46);
        org.jsoup.parser.ParseErrorList parseErrorList56 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document57 = xmlTreeBuilder41.parse("", "[]", parseErrorList56);
        boolean boolean58 = htmlTreeBuilder22.isInActiveFormattingElements((org.jsoup.nodes.Element) document57);
        boolean boolean59 = htmlTreeBuilder13.isInActiveFormattingElements((org.jsoup.nodes.Element) document57);
        java.util.List<org.jsoup.parser.Token.Character> characterList60 = htmlTreeBuilder13.getPendingTableCharacters();
        org.jsoup.nodes.Element element61 = htmlTreeBuilder13.getHeadElement();
        htmlTreeBuilder0.insert(element61);
        org.jsoup.parser.Tokeniser tokeniser63 = htmlTreeBuilder0.tokeniser;
        boolean boolean65 = htmlTreeBuilder0.inSelectScope(" EndTag");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState10);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(formElement21);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parser30);
        org.junit.Assert.assertNotNull(parser32);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList48);
        org.junit.Assert.assertNotNull(parseErrorStream49);
        org.junit.Assert.assertNotNull(parseErrorItor50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(parseErrorList56);
        org.junit.Assert.assertNotNull(document57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(characterList60);
        org.junit.Assert.assertNotNull(element61);
        org.junit.Assert.assertNotNull(tokeniser63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.isEmpty();
        java.lang.String str6 = tag1.toString();
        boolean boolean7 = tag1.isSelfClosing();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        org.jsoup.parser.Token.StartTag startTag23 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes24 = startTag23.getAttributes();
        xmlTreeBuilder3.currentToken = startTag23;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        boolean boolean35 = htmlTreeBuilder28.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState36 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder28.error(htmlTreeBuilderState36);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState38 = null;
        htmlTreeBuilder28.transition(htmlTreeBuilderState38);
        htmlTreeBuilder28.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader44 = null;
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream47 = parseErrorList46.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor48 = parseErrorList46.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList46.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList51 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int52 = parseErrorList51.getMaxSize();
        boolean boolean53 = parseErrorList46.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList51);
        org.jsoup.parser.Tokeniser tokeniser54 = new org.jsoup.parser.Tokeniser(characterReader44, parseErrorList51);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList51.iterator();
        org.jsoup.nodes.Document document56 = htmlTreeBuilder28.parse("[]", "Doctype", parseErrorList51);
        xmlTreeBuilder3.initialiseParse("", "StartTag", parseErrorList51);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream58 = parseErrorList51.stream();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(attributes24);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState36);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(parseErrorStream47);
        org.junit.Assert.assertNotNull(parseErrorItor48);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertNotNull(parseErrorList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertNotNull(document56);
        org.junit.Assert.assertNotNull(parseErrorStream58);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        boolean boolean13 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag15 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState16 = org.jsoup.parser.HtmlTreeBuilderState.InRow;
        boolean boolean17 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag15, htmlTreeBuilderState16);
        org.jsoup.nodes.Element element19 = htmlTreeBuilder0.insert("hi!");
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList20 = htmlTreeBuilder0.getStack();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(elementList20);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean4 = characterReader1.matchesDigit();
        java.lang.String str5 = characterReader1.consumeHexSequence();
        java.lang.String str6 = characterReader1.consumeLetterThenDigitSequence();
        java.lang.String str7 = characterReader1.consumeLetterThenDigitSequence();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "StartTag" + "'", str6, "StartTag");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        boolean boolean1 = doctype0.isCharacter();
        boolean boolean2 = doctype0.isEndTag();
        boolean boolean3 = doctype0.isCharacter();
        java.lang.StringBuilder stringBuilder4 = doctype0.publicIdentifier;
        boolean boolean5 = doctype0.forceQuirks;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(stringBuilder4);
        org.junit.Assert.assertEquals(stringBuilder4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.InCell;
        org.jsoup.parser.Token.StartTag startTag2 = new org.jsoup.parser.Token.StartTag("Doctype");
        org.jsoup.parser.Token.Tag tag4 = startTag2.name("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder5 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int10 = parseErrorList9.getMaxSize();
        org.jsoup.nodes.Document document11 = htmlTreeBuilder5.parse("0: Doctype", "hi!", parseErrorList9);
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream16 = parseErrorList15.stream();
        boolean boolean17 = parseErrorList15.canAddError();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder5.parse("EndTag", "hi!#", parseErrorList15);
        java.lang.String[] strArray26 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean27 = htmlTreeBuilder5.inScope("hi!#", strArray26);
        htmlTreeBuilder5.clearStackToTableContext();
        boolean boolean29 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) startTag2, htmlTreeBuilder5);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder30 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int35 = parseErrorList34.getMaxSize();
        org.jsoup.nodes.Document document36 = htmlTreeBuilder30.parse("0: Doctype", "hi!", parseErrorList34);
        boolean boolean37 = htmlTreeBuilder30.framesetOk();
        org.jsoup.nodes.Document document40 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder30.setHeadElement((org.jsoup.nodes.Element) document40);
        htmlTreeBuilder5.doc = document40;
        htmlTreeBuilder5.insertMarkerToFormattingElements();
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(tag4);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(parseErrorStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document40);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Token token8 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState9 = org.jsoup.parser.HtmlTreeBuilderState.InTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState9);
        org.jsoup.parser.Token.Comment comment11 = new org.jsoup.parser.Token.Comment();
        java.lang.String str12 = comment11.toString();
        java.lang.StringBuilder stringBuilder13 = comment11.data;
        boolean boolean14 = comment11.isEndTag();
        boolean boolean15 = comment11.isComment();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState16 = org.jsoup.parser.HtmlTreeBuilderState.Initial;
        boolean boolean17 = htmlTreeBuilder0.process((org.jsoup.parser.Token) comment11, htmlTreeBuilderState16);
        boolean boolean19 = htmlTreeBuilder0.inSelectScope("artTag");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder20 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int25 = parseErrorList24.getMaxSize();
        org.jsoup.nodes.Document document26 = htmlTreeBuilder20.parse("0: Doctype", "hi!", parseErrorList24);
        boolean boolean27 = htmlTreeBuilder20.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState28 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder20.error(htmlTreeBuilderState28);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState30 = null;
        htmlTreeBuilder20.transition(htmlTreeBuilderState30);
        htmlTreeBuilder20.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader36 = null;
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList38.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor41 = parseErrorList38.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int44 = parseErrorList43.getMaxSize();
        boolean boolean45 = parseErrorList38.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        org.jsoup.parser.Tokeniser tokeniser46 = new org.jsoup.parser.Tokeniser(characterReader36, parseErrorList43);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList43.iterator();
        org.jsoup.nodes.Document document48 = htmlTreeBuilder20.parse("[]", "Doctype", parseErrorList43);
        org.jsoup.parser.CharacterReader characterReader51 = null;
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream54 = parseErrorList53.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList53.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor56 = parseErrorList53.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList58 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int59 = parseErrorList58.getMaxSize();
        boolean boolean60 = parseErrorList53.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList58);
        org.jsoup.parser.Tokeniser tokeniser61 = new org.jsoup.parser.Tokeniser(characterReader51, parseErrorList58);
        org.jsoup.parser.ParseErrorList parseErrorList63 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream64 = parseErrorList63.stream();
        boolean boolean65 = parseErrorList63.canAddError();
        boolean boolean66 = parseErrorList58.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList63);
        org.jsoup.nodes.Document document67 = htmlTreeBuilder20.parse("hi!", "<!---->", parseErrorList63);
        org.jsoup.parser.Tokeniser tokeniser68 = htmlTreeBuilder20.tokeniser;
        org.jsoup.parser.Parser parser69 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser71 = parser69.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document74 = parser69.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document77 = parser69.parseInput("<hi!>", "[]");
        htmlTreeBuilder20.setHeadElement((org.jsoup.nodes.Element) document77);
        boolean boolean79 = htmlTreeBuilder20.framesetOk();
        java.util.List<org.jsoup.parser.Token.Character> characterList80 = htmlTreeBuilder20.getPendingTableCharacters();
        htmlTreeBuilder0.setPendingTableCharacters(characterList80);
        org.jsoup.nodes.Document document84 = org.jsoup.parser.Parser.parse("hi!", "<!---->");
        htmlTreeBuilder0.doc = document84;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(token8);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<!---->" + "'", str12, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder13);
        org.junit.Assert.assertEquals(stringBuilder13.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState28);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
        org.junit.Assert.assertNotNull(parseErrorItor41);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertNotNull(parseErrorStream54);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertNotNull(parseErrorItor56);
        org.junit.Assert.assertNotNull(parseErrorList58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(parseErrorList63);
        org.junit.Assert.assertNotNull(parseErrorStream64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(document67);
        org.junit.Assert.assertNotNull(tokeniser68);
        org.junit.Assert.assertNotNull(parser69);
        org.junit.Assert.assertNotNull(parser71);
        org.junit.Assert.assertNotNull(document74);
        org.junit.Assert.assertNotNull(document77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(characterList80);
        org.junit.Assert.assertNotNull(document84);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList12 = htmlTreeBuilder0.stack;
        org.jsoup.parser.Token.StartTag startTag14 = new org.jsoup.parser.Token.StartTag("<!---->");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState15 = org.jsoup.parser.HtmlTreeBuilderState.AfterFrameset;
        boolean boolean16 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag14, htmlTreeBuilderState15);
        boolean boolean17 = htmlTreeBuilder0.framesetOk();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(elementList12);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking((int) '\uffff');
        java.util.Spliterator<org.jsoup.parser.ParseError> parseErrorSpliterator2 = parseErrorList1.spliterator();
        java.lang.Object obj3 = parseErrorList1.clone();
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorSpliterator2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "[]");
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\000');
        characterReader1.mark();
        boolean boolean5 = characterReader1.isEmpty();
        boolean boolean6 = characterReader1.matchesLetter();
        boolean boolean7 = characterReader1.matchesLetter();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.EndTag endTag10 = new org.jsoup.parser.Token.EndTag();
        char[] charArray13 = new char[] { '#', '#' };
        endTag10.appendAttributeValue(charArray13);
        tokeniser6.emit(charArray13);
        org.jsoup.parser.Token.Comment comment16 = tokeniser6.commentPending;
        tokeniser6.createDoctypePending();
        org.jsoup.parser.Token.Tag tag19 = tokeniser6.createTagPending(false);
        org.jsoup.parser.TokeniserState tokeniserState20 = org.jsoup.parser.TokeniserState.BogusComment;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState20);
        boolean boolean22 = tokeniser6.isAppropriateEndTagToken();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, #]");
        org.junit.Assert.assertNull(comment16);
        org.junit.Assert.assertNotNull(tag19);
        org.junit.Assert.assertNotNull(tokeniserState20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        htmlTreeBuilder0.clearStackToTableRowContext();
        java.util.List<org.jsoup.parser.Token.Character> characterList17 = htmlTreeBuilder0.getPendingTableCharacters();
        htmlTreeBuilder0.newPendingTableCharacters();
        boolean boolean20 = htmlTreeBuilder0.inScope("\uffff");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup;
        htmlTreeBuilder0.transition(htmlTreeBuilderState21);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(characterList17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState21);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.Tag tag11 = tokeniser6.createTagPending(false);
        org.jsoup.parser.Token.Comment comment12 = new org.jsoup.parser.Token.Comment();
        java.lang.String str13 = comment12.toString();
        java.lang.StringBuilder stringBuilder14 = comment12.data;
        boolean boolean15 = comment12.isEndTag();
        java.lang.String str16 = comment12.toString();
        java.lang.StringBuilder stringBuilder17 = comment12.data;
        tokeniser6.commentPending = comment12;
        java.lang.StringBuilder stringBuilder19 = tokeniser6.dataBuffer;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<!---->" + "'", str13, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder14);
        org.junit.Assert.assertEquals(stringBuilder14.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<!---->" + "'", str16, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder17);
        org.junit.Assert.assertEquals(stringBuilder17.toString(), "");
        org.junit.Assert.assertNull(stringBuilder19);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        tokenQueue1.addFirst((java.lang.Character) ' ');
        java.lang.String str6 = tokenQueue1.consumeTo("StartTag");
        java.lang.String str7 = tokenQueue1.consumeCssIdentifier();
        tokenQueue1.addFirst("<0: Doctype>");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + " EndTag" + "'", str6, " EndTag");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState7 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState7);
        org.jsoup.nodes.Document document12 = org.jsoup.parser.Parser.parseBodyFragment("\ufffd>", "StartTag");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder14 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader15 = null;
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream18 = parseErrorList17.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList17.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList17.iterator();
        org.jsoup.parser.Tokeniser tokeniser21 = new org.jsoup.parser.Tokeniser(characterReader15, parseErrorList17);
        org.jsoup.parser.Token.Tag tag22 = tokeniser21.tagPending;
        org.jsoup.parser.Token.Tag tag24 = tokeniser21.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype25 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype26 = doctype25.asDoctype();
        java.lang.String str27 = doctype25.tokenType();
        tokeniser21.emit((org.jsoup.parser.Token) doctype25);
        org.jsoup.parser.Token.Tag tag30 = tokeniser21.createTagPending(true);
        xmlTreeBuilder14.currentToken = tag30;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder32 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int37 = parseErrorList36.getMaxSize();
        org.jsoup.nodes.Document document38 = htmlTreeBuilder32.parse("0: Doctype", "hi!", parseErrorList36);
        boolean boolean39 = htmlTreeBuilder32.framesetOk();
        org.jsoup.nodes.Document document42 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder32.setHeadElement((org.jsoup.nodes.Element) document42);
        xmlTreeBuilder14.doc = document42;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder47 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document48 = xmlTreeBuilder47.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder49 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList54 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList56 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream57 = parseErrorList56.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor58 = parseErrorList56.iterator();
        boolean boolean59 = parseErrorList54.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList56);
        xmlTreeBuilder49.initialiseParse("<!---->", "hi!", parseErrorList54);
        xmlTreeBuilder47.errors = parseErrorList54;
        org.jsoup.parser.ParseErrorList parseErrorList65 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream66 = parseErrorList65.stream();
        xmlTreeBuilder47.initialiseParse("a", "[]", parseErrorList65);
        org.jsoup.parser.CharacterReader characterReader68 = null;
        org.jsoup.parser.ParseErrorList parseErrorList70 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream71 = parseErrorList70.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor72 = parseErrorList70.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor73 = parseErrorList70.iterator();
        org.jsoup.parser.Tokeniser tokeniser74 = new org.jsoup.parser.Tokeniser(characterReader68, parseErrorList70);
        org.jsoup.parser.Token.Tag tag75 = tokeniser74.tagPending;
        tokeniser74.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype78 = tokeniser74.doctypePending;
        tokeniser74.createCommentPending();
        org.jsoup.parser.Token.Comment comment80 = tokeniser74.commentPending;
        boolean boolean81 = parseErrorList65.remove((java.lang.Object) tokeniser74);
        org.jsoup.nodes.Document document82 = xmlTreeBuilder14.parse("<!---->", "[]", parseErrorList65);
        java.lang.String str83 = parseErrorList65.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList84 = htmlTreeBuilder0.parseFragment("S", (org.jsoup.nodes.Element) document12, "hi!", parseErrorList65);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertNotNull(parseErrorStream18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNull(tag22);
        org.junit.Assert.assertNotNull(tag24);
        org.junit.Assert.assertNotNull(doctype26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Doctype" + "'", str27, "Doctype");
        org.junit.Assert.assertNotNull(tag30);
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNull(document48);
        org.junit.Assert.assertNotNull(parseErrorList56);
        org.junit.Assert.assertNotNull(parseErrorStream57);
        org.junit.Assert.assertNotNull(parseErrorItor58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(parseErrorList65);
        org.junit.Assert.assertNotNull(parseErrorStream66);
        org.junit.Assert.assertNotNull(parseErrorList70);
        org.junit.Assert.assertNotNull(parseErrorStream71);
        org.junit.Assert.assertNotNull(parseErrorItor72);
        org.junit.Assert.assertNotNull(parseErrorItor73);
        org.junit.Assert.assertNull(tag75);
        org.junit.Assert.assertNull(doctype78);
        org.junit.Assert.assertNotNull(comment80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(document82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "[]" + "'", str83, "[]");
        org.junit.Assert.assertNotNull(nodeList84);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        boolean boolean25 = parseErrorList18.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23);
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList23);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList23.iterator();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("[]", "Doctype", parseErrorList23);
        org.jsoup.parser.CharacterReader characterReader31 = null;
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream34 = parseErrorList33.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList33.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor36 = parseErrorList33.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int39 = parseErrorList38.getMaxSize();
        boolean boolean40 = parseErrorList33.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        org.jsoup.parser.Tokeniser tokeniser41 = new org.jsoup.parser.Tokeniser(characterReader31, parseErrorList38);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        boolean boolean45 = parseErrorList43.canAddError();
        boolean boolean46 = parseErrorList38.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        org.jsoup.nodes.Document document47 = htmlTreeBuilder0.parse("hi!", "<!---->", parseErrorList43);
        org.jsoup.parser.Tokeniser tokeniser48 = htmlTreeBuilder0.tokeniser;
        org.jsoup.parser.Parser parser49 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser51 = parser49.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document54 = parser49.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document57 = parser49.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document57);
        htmlTreeBuilder0.popStackToBefore("<hi!#>");
        htmlTreeBuilder0.generateImpliedEndTags();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertNotNull(parseErrorStream34);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNotNull(parseErrorItor36);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(tokeniser48);
        org.junit.Assert.assertNotNull(parser49);
        org.junit.Assert.assertNotNull(parser51);
        org.junit.Assert.assertNotNull(document54);
        org.junit.Assert.assertNotNull(document57);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.Tag tag11 = tokeniser6.createTagPending(false);
        org.jsoup.parser.Token.Tag tag13 = tag11.name("hi!#");
        org.jsoup.nodes.Attributes attributes14 = tag11.getAttributes();
        tag11.appendAttributeValue(' ');
        tag11.selfClosing = false;
        boolean boolean19 = tag11.isComment();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(tag13);
        org.junit.Assert.assertNull(attributes14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList18);
        org.jsoup.parser.Token.Tag tag23 = tokeniser22.tagPending;
        tokeniser22.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype26 = tokeniser22.doctypePending;
        tokeniser22.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype28 = tokeniser22.doctypePending;
        htmlTreeBuilder0.tokeniser = tokeniser22;
        java.lang.String str30 = htmlTreeBuilder0.baseUri;
        htmlTreeBuilder0.generateImpliedEndTags("S");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNull(tag23);
        org.junit.Assert.assertNull(doctype26);
        org.junit.Assert.assertNull(doctype28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!#" + "'", str30, "hi!#");
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag6 = new org.jsoup.parser.Token.EndTag();
        char[] charArray9 = new char[] { '#', '#' };
        endTag6.appendAttributeValue(charArray9);
        boolean boolean11 = tokenQueue1.matchesAny(charArray9);
        boolean boolean12 = tokenQueue1.isEmpty();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Element element13 = htmlTreeBuilder0.getActiveFormattingElement("");
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder15 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        org.jsoup.nodes.Document document21 = htmlTreeBuilder15.parse("0: Doctype", "hi!", parseErrorList19);
        htmlTreeBuilder15.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray24 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList25 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList25, characterArray24);
        htmlTreeBuilder15.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList25);
        boolean boolean28 = htmlTreeBuilder15.isFosterInserts();
        org.jsoup.parser.ParseErrorList parseErrorList33 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        htmlTreeBuilder15.initialiseParse("</hi![]>", "0: []", parseErrorList33);
        htmlTreeBuilder15.resetInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder36 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser37 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder36);
        boolean boolean38 = htmlTreeBuilder36.isFosterInserts();
        htmlTreeBuilder36.clearFormattingElementsToLastMarker();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState40 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag41 = new org.jsoup.parser.Token.EndTag();
        endTag41.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder43 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList47 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int48 = parseErrorList47.getMaxSize();
        org.jsoup.nodes.Document document49 = htmlTreeBuilder43.parse("0: Doctype", "hi!", parseErrorList47);
        boolean boolean50 = htmlTreeBuilderState40.process((org.jsoup.parser.Token) endTag41, htmlTreeBuilder43);
        org.jsoup.nodes.FormElement formElement51 = htmlTreeBuilder43.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder52 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList56 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int57 = parseErrorList56.getMaxSize();
        org.jsoup.nodes.Document document58 = htmlTreeBuilder52.parse("0: Doctype", "hi!", parseErrorList56);
        boolean boolean59 = htmlTreeBuilder52.framesetOk();
        org.jsoup.parser.Parser parser60 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser62 = parser60.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document65 = parser60.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document68 = parser60.parseInput("<hi!>", "[]");
        htmlTreeBuilder52.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document68);
        boolean boolean70 = htmlTreeBuilder52.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder71 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList76 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList78 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream79 = parseErrorList78.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor80 = parseErrorList78.iterator();
        boolean boolean81 = parseErrorList76.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList78);
        xmlTreeBuilder71.initialiseParse("<!---->", "hi!", parseErrorList76);
        org.jsoup.parser.ParseErrorList parseErrorList86 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document87 = xmlTreeBuilder71.parse("", "[]", parseErrorList86);
        boolean boolean88 = htmlTreeBuilder52.isInActiveFormattingElements((org.jsoup.nodes.Element) document87);
        boolean boolean89 = htmlTreeBuilder43.isInActiveFormattingElements((org.jsoup.nodes.Element) document87);
        java.util.List<org.jsoup.parser.Token.Character> characterList90 = htmlTreeBuilder43.getPendingTableCharacters();
        htmlTreeBuilder36.setPendingTableCharacters(characterList90);
        htmlTreeBuilder15.setPendingTableCharacters(characterList90);
        htmlTreeBuilder0.setPendingTableCharacters(characterList90);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(element13);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(characterArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState40);
        org.junit.Assert.assertNotNull(parseErrorList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(formElement51);
        org.junit.Assert.assertNotNull(parseErrorList56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(document58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(parser60);
        org.junit.Assert.assertNotNull(parser62);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertNotNull(document68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(parseErrorList78);
        org.junit.Assert.assertNotNull(parseErrorStream79);
        org.junit.Assert.assertNotNull(parseErrorItor80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(parseErrorList86);
        org.junit.Assert.assertNotNull(document87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(characterList90);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder13.setHeadElement((org.jsoup.nodes.Element) document23);
        org.jsoup.nodes.Element element25 = htmlTreeBuilder13.pop();
        htmlTreeBuilder0.push(element25);
        org.jsoup.parser.Token token27 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        htmlTreeBuilder28.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray37 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList38 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList38, characterArray37);
        htmlTreeBuilder28.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList38);
        boolean boolean41 = htmlTreeBuilder28.isFosterInserts();
        htmlTreeBuilder28.generateImpliedEndTags();
        org.jsoup.parser.ParseErrorList parseErrorList43 = htmlTreeBuilder28.errors;
        htmlTreeBuilder0.errors = parseErrorList43;
        java.lang.String str45 = htmlTreeBuilder0.baseUri;
        boolean boolean46 = htmlTreeBuilder0.isFosterInserts();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(token27);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(characterArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        java.lang.String str2 = characterReader1.consumeToEnd();
        int int4 = characterReader1.nextIndexOf('a');
        char char5 = characterReader1.consume();
        characterReader1.rewindToMark();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder7 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int12 = parseErrorList11.getMaxSize();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder7.parse("0: Doctype", "hi!", parseErrorList11);
        boolean boolean14 = htmlTreeBuilder7.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState15 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder7.error(htmlTreeBuilderState15);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState17 = null;
        htmlTreeBuilder7.transition(htmlTreeBuilderState17);
        htmlTreeBuilder7.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement21 = htmlTreeBuilder7.getFormElement();
        org.jsoup.parser.ParseErrorList parseErrorList26 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        htmlTreeBuilder7.initialiseParse("StartTaga", "a", parseErrorList26);
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList26);
        boolean boolean30 = characterReader1.matches('\uffff');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "StartTag" + "'", str2, "StartTag");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\uffff' + "'", char5 == '\uffff');
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState15);
        org.junit.Assert.assertNull(formElement21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag3.formatAsBlock();
        boolean boolean5 = tag3.isFormSubmittable();
        boolean boolean6 = tag3.isBlock();
        boolean boolean7 = tag3.isInline();
        org.jsoup.parser.Tag tag8 = tag3.setSelfClosing();
        boolean boolean9 = tag3.preserveWhitespace();
        org.jsoup.parser.CharacterReader characterReader10 = null;
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList12.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        boolean boolean19 = parseErrorList12.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17);
        org.jsoup.parser.Tokeniser tokeniser20 = new org.jsoup.parser.Tokeniser(characterReader10, parseErrorList17);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList17.iterator();
        org.jsoup.parser.ParseError[] parseErrorArray22 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList23 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23, parseErrorArray22);
        org.jsoup.parser.ParseError[] parseErrorArray25 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList26 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26, parseErrorArray25);
        boolean boolean28 = parseErrorList23.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        int int30 = parseErrorList26.lastIndexOf((java.lang.Object) (byte) -1);
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.noTracking();
        boolean boolean32 = parseErrorList26.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream33 = parseErrorList26.parallelStream();
        boolean boolean34 = parseErrorList17.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        int int35 = parseErrorList17.getMaxSize();
        boolean boolean36 = tag3.equals((java.lang.Object) int35);
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(tag8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(parseErrorArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(parseErrorStream33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        boolean boolean10 = tag9.isCharacter();
        tag9.appendTagName('a');
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        tokeniser6.createTempBuffer();
        tokeniser6.emitTagPending();
        tokeniser6.createDoctypePending();
        org.jsoup.parser.Token.Tag tag13 = tokeniser6.tagPending;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(tag13);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        boolean boolean15 = parseErrorList10.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        java.lang.Object[] objArray16 = parseErrorList10.toArray();
        parseErrorList10.clear();
        org.jsoup.parser.ParseError[] parseErrorArray18 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList19 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19, parseErrorArray18);
        boolean boolean21 = parseErrorList10.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        boolean boolean22 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError24 = parseErrorList1.get((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        boolean boolean11 = doctype10.isCharacter();
        boolean boolean12 = doctype10.isEndTag();
        boolean boolean13 = doctype10.isCharacter();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        tokeniser6.createTempBuffer();
        org.jsoup.parser.Token.Comment comment16 = new org.jsoup.parser.Token.Comment();
        java.lang.String str17 = comment16.toString();
        java.lang.StringBuilder stringBuilder18 = comment16.data;
        boolean boolean19 = comment16.isEndTag();
        java.lang.String str20 = comment16.toString();
        tokeniser6.commentPending = comment16;
        java.lang.StringBuilder stringBuilder22 = comment16.data;
        java.lang.StringBuilder stringBuilder23 = comment16.data;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<!---->" + "'", str17, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder18);
        org.junit.Assert.assertEquals(stringBuilder18.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<!---->" + "'", str20, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder22);
        org.junit.Assert.assertEquals(stringBuilder22.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder23);
        org.junit.Assert.assertEquals(stringBuilder23.toString(), "");
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        char char6 = tokenQueue1.peek();
        boolean boolean8 = tokenQueue1.matchChomp("<hi!#>");
        boolean boolean9 = tokenQueue1.consumeWhitespace();
        boolean boolean10 = tokenQueue1.matchesWhitespace();
        boolean boolean11 = tokenQueue1.consumeWhitespace();
        java.lang.String str12 = tokenQueue1.remainder();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\000' + "'", char6 == '\000');
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.iterator();
        org.jsoup.parser.ParseError[] parseErrorArray4 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList5 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList5, parseErrorArray4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList5.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        org.jsoup.parser.ParseError[] parseErrorArray11 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList12 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12, parseErrorArray11);
        boolean boolean14 = parseErrorList8.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        parseErrorList12.clear();
        boolean boolean16 = parseErrorList12.isEmpty();
        org.jsoup.parser.Token.Doctype doctype17 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype18 = doctype17.asDoctype();
        boolean boolean19 = doctype17.isEOF();
        boolean boolean20 = doctype17.isForceQuirks();
        boolean boolean21 = doctype17.isEndTag();
        boolean boolean22 = parseErrorList12.remove((java.lang.Object) boolean21);
        org.jsoup.parser.CharacterReader characterReader23 = null;
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream26 = parseErrorList25.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList25.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList25.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int31 = parseErrorList30.getMaxSize();
        boolean boolean32 = parseErrorList25.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        org.jsoup.parser.Tokeniser tokeniser33 = new org.jsoup.parser.Tokeniser(characterReader23, parseErrorList30);
        org.jsoup.parser.ParseErrorList parseErrorList35 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream36 = parseErrorList35.stream();
        boolean boolean37 = parseErrorList35.canAddError();
        boolean boolean38 = parseErrorList30.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList35);
        boolean boolean39 = parseErrorList12.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        boolean boolean40 = parseErrorList30.isEmpty();
        boolean boolean41 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertNotNull(parseErrorArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doctype18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertNotNull(parseErrorStream26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(parseErrorList35);
        org.junit.Assert.assertNotNull(parseErrorStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        tokeniser6.acknowledgeSelfClosingFlag();
        org.jsoup.parser.CharacterReader characterReader15 = null;
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream18 = parseErrorList17.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList17.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList17.iterator();
        org.jsoup.parser.Tokeniser tokeniser21 = new org.jsoup.parser.Tokeniser(characterReader15, parseErrorList17);
        org.jsoup.parser.Token.Tag tag22 = tokeniser21.tagPending;
        tokeniser21.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype25 = tokeniser21.doctypePending;
        tokeniser21.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype27 = tokeniser21.doctypePending;
        org.jsoup.parser.Token.Comment comment28 = new org.jsoup.parser.Token.Comment();
        java.lang.String str29 = comment28.toString();
        java.lang.StringBuilder stringBuilder30 = comment28.data;
        boolean boolean31 = comment28.isEndTag();
        java.lang.String str32 = comment28.toString();
        tokeniser21.commentPending = comment28;
        org.jsoup.parser.TokeniserState tokeniserState34 = org.jsoup.parser.TokeniserState.AttributeValue_doubleQuoted;
        tokeniser21.eofError((org.jsoup.parser.ITokeniserState) tokeniserState34);
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.advanceTransition((org.jsoup.parser.ITokeniserState) tokeniserState34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertNotNull(parseErrorStream18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNull(tag22);
        org.junit.Assert.assertNull(doctype25);
        org.junit.Assert.assertNull(doctype27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<!---->" + "'", str29, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder30);
        org.junit.Assert.assertEquals(stringBuilder30.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<!---->" + "'", str32, "<!---->");
        org.junit.Assert.assertNotNull(tokeniserState34);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.nodes.Document document22 = parser19.parseInput("hi!", "[]");
        org.jsoup.parser.TreeBuilder treeBuilder23 = parser19.getTreeBuilder();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = new org.jsoup.parser.HtmlTreeBuilder();
        htmlTreeBuilder24.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        org.jsoup.parser.ParseError[] parseErrorArray35 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList36 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36, parseErrorArray35);
        org.jsoup.parser.ParseError[] parseErrorArray38 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList39 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList39, parseErrorArray38);
        boolean boolean41 = parseErrorList36.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList39);
        java.lang.Object[] objArray42 = parseErrorList36.toArray();
        parseErrorList36.clear();
        org.jsoup.parser.ParseError[] parseErrorArray44 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList45 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList45, parseErrorArray44);
        org.jsoup.parser.ParseError[] parseErrorArray47 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList48 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList48, parseErrorArray47);
        boolean boolean50 = parseErrorList45.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList48);
        java.lang.Object[] objArray51 = parseErrorList45.toArray();
        parseErrorList45.clear();
        org.jsoup.parser.ParseError[] parseErrorArray53 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList54 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54, parseErrorArray53);
        boolean boolean56 = parseErrorList45.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54);
        boolean boolean57 = parseErrorList36.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54);
        java.lang.Object[] objArray58 = parseErrorList54.toArray();
        boolean boolean59 = parseErrorList32.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54);
        org.jsoup.parser.ParseError[] parseErrorArray60 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList61 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList61, parseErrorArray60);
        org.jsoup.parser.ParseError[] parseErrorArray63 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList64 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList64, parseErrorArray63);
        boolean boolean66 = parseErrorList61.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList64);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor67 = parseErrorList64.listIterator();
        int int69 = parseErrorList64.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag73 = new org.jsoup.parser.Token.EndTag();
        char[] charArray76 = new char[] { '#', '#' };
        endTag73.appendAttributeValue(charArray76);
        endTag73.finaliseTag();
        boolean boolean79 = endTag73.isSelfClosing();
        org.jsoup.parser.Tag tag81 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean82 = tag81.isFormListed();
        org.jsoup.parser.Tag tag83 = tag81.setSelfClosing();
        boolean boolean84 = tag81.isKnownTag();
        java.lang.Object[] objArray86 = new java.lang.Object[] { boolean79, tag81, "Doctype" };
        org.jsoup.parser.ParseError parseError87 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray86);
        parseErrorList64.add(0, parseError87);
        boolean boolean89 = parseErrorList32.add(parseError87);
        org.jsoup.nodes.Document document90 = htmlTreeBuilder24.parse("\uffff", "", parseErrorList32);
        org.jsoup.parser.Parser parser91 = parser19.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder24);
        org.jsoup.nodes.FormElement formElement92 = htmlTreeBuilder24.getFormElement();
        htmlTreeBuilder24.markInsertionMode();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(treeBuilder23);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(parseErrorArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(parseErrorArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(parseErrorArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(parseErrorArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(parseErrorArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(parseErrorItor67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(tag81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(tag83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(document90);
        org.junit.Assert.assertNotNull(parser91);
        org.junit.Assert.assertNull(formElement92);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        boolean boolean19 = doctype18.isCharacter();
        tokeniser6.doctypePending = doctype18;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype22 = new org.jsoup.parser.Token.Doctype();
        boolean boolean23 = doctype22.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = null;
        boolean boolean25 = htmlTreeBuilderState21.process((org.jsoup.parser.Token) doctype22, htmlTreeBuilder24);
        java.lang.StringBuilder stringBuilder26 = doctype22.name;
        tokeniser6.dataBuffer = stringBuilder26;
        org.jsoup.parser.Token.EndTag endTag28 = new org.jsoup.parser.Token.EndTag();
        char[] charArray31 = new char[] { '#', '#' };
        endTag28.appendAttributeValue(charArray31);
        endTag28.appendAttributeValue(' ');
        char[] charArray36 = new char[] { '4' };
        endTag28.appendAttributeValue(charArray36);
        tokeniser6.emit(charArray36);
        org.jsoup.parser.Token.StartTag startTag40 = new org.jsoup.parser.Token.StartTag("t");
        tokeniser6.tagPending = startTag40;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(stringBuilder26);
        org.junit.Assert.assertEquals(stringBuilder26.toString(), "");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4]");
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag3.formatAsBlock();
        boolean boolean5 = tag3.isFormSubmittable();
        boolean boolean6 = tag3.isBlock();
        boolean boolean7 = tag3.preserveWhitespace();
        boolean boolean8 = tag3.formatAsBlock();
        boolean boolean9 = tag3.isInline();
        boolean boolean10 = tag3.isFormSubmittable();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        htmlTreeBuilder0.newPendingTableCharacters();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList16.listIterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList16.iterator();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder0.parse("StartTag", "[100: ]", parseErrorList16);
        org.jsoup.nodes.Element element21 = htmlTreeBuilder0.getActiveFormattingElement("-1: []");
        org.jsoup.nodes.Element element23 = htmlTreeBuilder0.insert("Comment");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList28 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int29 = parseErrorList28.getMaxSize();
        org.jsoup.nodes.Document document30 = htmlTreeBuilder24.parse("0: Doctype", "hi!", parseErrorList28);
        boolean boolean31 = htmlTreeBuilder24.framesetOk();
        org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder24.setHeadElement((org.jsoup.nodes.Element) document34);
        htmlTreeBuilder24.generateImpliedEndTags();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder37 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int42 = parseErrorList41.getMaxSize();
        org.jsoup.nodes.Document document43 = htmlTreeBuilder37.parse("0: Doctype", "hi!", parseErrorList41);
        boolean boolean44 = htmlTreeBuilder37.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState45 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder37.error(htmlTreeBuilderState45);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState47 = null;
        htmlTreeBuilder37.transition(htmlTreeBuilderState47);
        htmlTreeBuilder37.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList51 = htmlTreeBuilder37.getPendingTableCharacters();
        htmlTreeBuilder24.setPendingTableCharacters(characterList51);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder53 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList57 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int58 = parseErrorList57.getMaxSize();
        org.jsoup.nodes.Document document59 = htmlTreeBuilder53.parse("0: Doctype", "hi!", parseErrorList57);
        htmlTreeBuilder53.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray62 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList63 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList63, characterArray62);
        htmlTreeBuilder53.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList63);
        boolean boolean66 = htmlTreeBuilder53.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag68 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement70 = htmlTreeBuilder53.insertForm(startTag68, true);
        htmlTreeBuilder53.baseUri = "[]";
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState73 = org.jsoup.parser.HtmlTreeBuilderState.InTableText;
        htmlTreeBuilder53.error(htmlTreeBuilderState73);
        htmlTreeBuilder24.error(htmlTreeBuilderState73);
        htmlTreeBuilder0.error(htmlTreeBuilderState73);
        org.jsoup.parser.ParseErrorList parseErrorList77 = htmlTreeBuilder0.errors;
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream78 = parseErrorList77.parallelStream();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNull(element21);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(parseErrorList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState45);
        org.junit.Assert.assertNotNull(characterList51);
        org.junit.Assert.assertNotNull(parseErrorList57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertNotNull(characterArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(formElement70);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState73);
        org.junit.Assert.assertNotNull(parseErrorList77);
        org.junit.Assert.assertNotNull(parseErrorStream78);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag6 = new org.jsoup.parser.Token.EndTag();
        char[] charArray9 = new char[] { '#', '#' };
        endTag6.appendAttributeValue(charArray9);
        boolean boolean11 = tokenQueue1.matchesAny(charArray9);
        org.jsoup.parser.TokenQueue tokenQueue13 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean14 = tokenQueue13.isEmpty();
        java.lang.String str16 = tokenQueue13.consumeToIgnoreCase("<hi!>");
        java.lang.String str17 = tokenQueue13.consumeTagName();
        boolean boolean18 = tokenQueue13.matchesWord();
        tokenQueue13.advance();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder20 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int25 = parseErrorList24.getMaxSize();
        org.jsoup.nodes.Document document26 = htmlTreeBuilder20.parse("0: Doctype", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream31 = parseErrorList30.stream();
        boolean boolean32 = parseErrorList30.canAddError();
        org.jsoup.nodes.Document document33 = htmlTreeBuilder20.parse("EndTag", "hi!#", parseErrorList30);
        java.lang.String[] strArray41 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean42 = htmlTreeBuilder20.inScope("hi!#", strArray41);
        java.lang.String str43 = tokenQueue13.consumeToAny(strArray41);
        boolean boolean44 = tokenQueue1.matchesAny(strArray41);
        char char45 = tokenQueue1.peek();
        java.lang.String str48 = tokenQueue1.chompBalanced('a', '\000');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "EndTag" + "'", str16, "EndTag");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorStream31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.CharacterReader characterReader9 = null;
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream12 = parseErrorList11.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor13 = parseErrorList11.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList11.iterator();
        org.jsoup.parser.Tokeniser tokeniser15 = new org.jsoup.parser.Tokeniser(characterReader9, parseErrorList11);
        org.jsoup.parser.Token.Tag tag16 = tokeniser15.tagPending;
        org.jsoup.parser.Token.Tag tag18 = tokeniser15.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype19 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype20 = doctype19.asDoctype();
        java.lang.String str21 = doctype19.tokenType();
        tokeniser15.emit((org.jsoup.parser.Token) doctype19);
        org.jsoup.parser.ITokeniserState iTokeniserState23 = tokeniser15.getState();
        org.jsoup.parser.TokeniserState tokeniserState24 = org.jsoup.parser.TokeniserState.Rawtext;
        tokeniser15.eofError((org.jsoup.parser.ITokeniserState) tokeniserState24);
        tokeniser7.transition((org.jsoup.parser.ITokeniserState) tokeniserState24);
        // The following exception was thrown during execution in test generation
        try {
            tokeniser7.emitDoctypePending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertNotNull(parseErrorStream12);
        org.junit.Assert.assertNotNull(parseErrorItor13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertNull(tag16);
        org.junit.Assert.assertNotNull(tag18);
        org.junit.Assert.assertNotNull(doctype20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Doctype" + "'", str21, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState23);
        org.junit.Assert.assertNotNull(tokeniserState24);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder7 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList12 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        boolean boolean17 = parseErrorList12.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList14);
        xmlTreeBuilder7.initialiseParse("<!---->", "hi!", parseErrorList12);
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document23 = xmlTreeBuilder7.parse("", "[]", parseErrorList22);
        boolean boolean24 = parseErrorList4.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList22);
        org.jsoup.parser.ParseError[] parseErrorArray28 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList29 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList29, parseErrorArray28);
        org.jsoup.parser.ParseError[] parseErrorArray31 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList32 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32, parseErrorArray31);
        boolean boolean34 = parseErrorList29.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32);
        java.lang.Object[] objArray35 = parseErrorList29.toArray();
        parseErrorList29.clear();
        org.jsoup.parser.ParseError[] parseErrorArray37 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList38 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38, parseErrorArray37);
        org.jsoup.parser.ParseError[] parseErrorArray40 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList41 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList41, parseErrorArray40);
        boolean boolean43 = parseErrorList38.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList41);
        java.lang.Object[] objArray44 = parseErrorList38.toArray();
        parseErrorList38.clear();
        org.jsoup.parser.ParseError[] parseErrorArray46 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList47 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList47, parseErrorArray46);
        boolean boolean49 = parseErrorList38.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList47);
        boolean boolean50 = parseErrorList29.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList47);
        java.lang.Object[] objArray51 = parseErrorList47.toArray();
        org.jsoup.parser.ParseError parseError52 = new org.jsoup.parser.ParseError((int) '#', "hi!#", objArray51);
        java.lang.String str53 = parseError52.getErrorMessage();
        parseErrorList22.add((int) (byte) 0, parseError52);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.parser.ParseError> parseErrorList57 = parseErrorList22.subList((int) 'E', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(69) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(parseErrorArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parseErrorArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(parseErrorArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!#" + "'", str53, "hi!#");
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        tokenQueue1.addFirst((java.lang.Character) ' ');
        java.lang.String str6 = tokenQueue1.consumeTo("StartTag");
        java.lang.String str7 = tokenQueue1.consumeCssIdentifier();
        org.jsoup.parser.TokenQueue tokenQueue9 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean10 = tokenQueue9.isEmpty();
        boolean boolean11 = tokenQueue9.consumeWhitespace();
        java.lang.String str12 = tokenQueue9.consumeWord();
        boolean boolean13 = tokenQueue9.matchesWhitespace();
        boolean boolean15 = tokenQueue9.matches("S");
        java.lang.String str16 = tokenQueue9.consumeCssIdentifier();
        org.jsoup.parser.TokenQueue tokenQueue18 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean19 = tokenQueue18.isEmpty();
        java.lang.String str21 = tokenQueue18.consumeToIgnoreCase("<hi!>");
        java.lang.String str22 = tokenQueue18.consumeTagName();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder23 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList27 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int28 = parseErrorList27.getMaxSize();
        org.jsoup.nodes.Document document29 = htmlTreeBuilder23.parse("0: Doctype", "hi!", parseErrorList27);
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream34 = parseErrorList33.stream();
        boolean boolean35 = parseErrorList33.canAddError();
        org.jsoup.nodes.Document document36 = htmlTreeBuilder23.parse("EndTag", "hi!#", parseErrorList33);
        java.lang.String[] strArray44 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean45 = htmlTreeBuilder23.inScope("hi!#", strArray44);
        java.lang.String str46 = tokenQueue18.consumeToAny(strArray44);
        java.lang.String str47 = tokenQueue9.consumeToAny(strArray44);
        boolean boolean48 = tokenQueue1.matchesAny(strArray44);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + " EndTag" + "'", str6, " EndTag");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "EndTag" + "'", str12, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "EndTag" + "'", str21, "EndTag");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(parseErrorList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertNotNull(parseErrorStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype1 = new org.jsoup.parser.Token.Doctype();
        boolean boolean2 = doctype1.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = null;
        boolean boolean4 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) doctype1, htmlTreeBuilder3);
        java.lang.String str5 = doctype1.getName();
        java.lang.String str6 = doctype1.getSystemIdentifier();
        doctype1.forceQuirks = false;
        java.lang.String str9 = doctype1.getPublicIdentifier();
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        org.jsoup.nodes.FormElement formElement11 = htmlTreeBuilder3.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.parser.Parser parser20 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser22 = parser20.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document25 = parser20.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document28 = parser20.parseInput("<hi!>", "[]");
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document28);
        boolean boolean30 = htmlTreeBuilder12.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder31 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList38.iterator();
        boolean boolean41 = parseErrorList36.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        xmlTreeBuilder31.initialiseParse("<!---->", "hi!", parseErrorList36);
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document47 = xmlTreeBuilder31.parse("", "[]", parseErrorList46);
        boolean boolean48 = htmlTreeBuilder12.isInActiveFormattingElements((org.jsoup.nodes.Element) document47);
        boolean boolean49 = htmlTreeBuilder3.isInActiveFormattingElements((org.jsoup.nodes.Element) document47);
        java.util.List<org.jsoup.parser.Token.Character> characterList50 = htmlTreeBuilder3.getPendingTableCharacters();
        org.jsoup.parser.Tokeniser tokeniser51 = htmlTreeBuilder3.tokeniser;
        org.jsoup.parser.Token.Tag tag52 = tokeniser51.tagPending;
        char[] charArray55 = tokeniser51.consumeCharacterReference((java.lang.Character) ' ', false);
        org.jsoup.parser.Token.Doctype doctype56 = new org.jsoup.parser.Token.Doctype();
        boolean boolean57 = doctype56.isCharacter();
        java.lang.StringBuilder stringBuilder58 = doctype56.systemIdentifier;
        tokeniser51.dataBuffer = stringBuilder58;
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(formElement11);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parser20);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(characterList50);
        org.junit.Assert.assertNotNull(tokeniser51);
        org.junit.Assert.assertNull(tag52);
        org.junit.Assert.assertNull(charArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(stringBuilder58);
        org.junit.Assert.assertEquals(stringBuilder58.toString(), "");
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("Doctype");
        org.jsoup.parser.Token.Tag tag3 = startTag1.name("hi!#");
        boolean boolean4 = startTag1.isCharacter();
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.Tag tag11 = tokeniser6.createTagPending(false);
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.Tokeniser tokeniser18 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList14);
        org.jsoup.parser.Token.Tag tag19 = tokeniser18.tagPending;
        org.jsoup.parser.Token.Tag tag21 = tokeniser18.createTagPending(true);
        java.lang.StringBuilder stringBuilder22 = tokeniser18.dataBuffer;
        org.jsoup.parser.Token.EndTag endTag23 = new org.jsoup.parser.Token.EndTag();
        char[] charArray26 = new char[] { '#', '#' };
        endTag23.appendAttributeValue(charArray26);
        tokeniser18.emit(charArray26);
        tokeniser6.emit(charArray26);
        org.jsoup.parser.Token.Tag tag30 = tokeniser6.tagPending;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNull(tag19);
        org.junit.Assert.assertNotNull(tag21);
        org.junit.Assert.assertNull(stringBuilder22);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, #]");
        org.junit.Assert.assertNotNull(tag30);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList9 = xmlTreeBuilder0.stack;
        org.jsoup.parser.Parser parser10 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) xmlTreeBuilder0);
        java.util.List<org.jsoup.parser.ParseError> parseErrorList11 = parser10.getErrors();
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(elementList9);
        org.junit.Assert.assertNull(parseErrorList11);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList15 = xmlTreeBuilder0.stack;
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList18);
        org.jsoup.parser.Token.Tag tag23 = tokeniser22.tagPending;
        org.jsoup.parser.Token.Tag tag25 = tokeniser22.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype26 = tokeniser22.doctypePending;
        xmlTreeBuilder0.tokeniser = tokeniser22;
        org.jsoup.parser.CharacterReader characterReader28 = null;
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream31 = parseErrorList30.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList30.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor33 = parseErrorList30.iterator();
        org.jsoup.parser.Tokeniser tokeniser34 = new org.jsoup.parser.Tokeniser(characterReader28, parseErrorList30);
        tokeniser34.createTempBuffer();
        xmlTreeBuilder0.tokeniser = tokeniser34;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder39 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader40 = null;
        org.jsoup.parser.ParseErrorList parseErrorList42 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream43 = parseErrorList42.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor44 = parseErrorList42.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor45 = parseErrorList42.iterator();
        org.jsoup.parser.Tokeniser tokeniser46 = new org.jsoup.parser.Tokeniser(characterReader40, parseErrorList42);
        org.jsoup.parser.Token.Tag tag47 = tokeniser46.tagPending;
        org.jsoup.parser.Token.Tag tag49 = tokeniser46.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype50 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype51 = doctype50.asDoctype();
        java.lang.String str52 = doctype50.tokenType();
        tokeniser46.emit((org.jsoup.parser.Token) doctype50);
        org.jsoup.parser.Token.Tag tag55 = tokeniser46.createTagPending(true);
        xmlTreeBuilder39.currentToken = tag55;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder57 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList61 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int62 = parseErrorList61.getMaxSize();
        org.jsoup.nodes.Document document63 = htmlTreeBuilder57.parse("0: Doctype", "hi!", parseErrorList61);
        boolean boolean64 = htmlTreeBuilder57.framesetOk();
        org.jsoup.nodes.Document document67 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder57.setHeadElement((org.jsoup.nodes.Element) document67);
        xmlTreeBuilder39.doc = document67;
        org.jsoup.parser.ParseErrorList parseErrorList73 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream74 = parseErrorList73.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor75 = parseErrorList73.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor76 = parseErrorList73.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList78 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int79 = parseErrorList78.getMaxSize();
        boolean boolean80 = parseErrorList73.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList78);
        xmlTreeBuilder39.initialiseParse("hi!#", "0: []", parseErrorList78);
        org.jsoup.parser.ParseErrorList parseErrorList82 = xmlTreeBuilder39.errors;
        xmlTreeBuilder0.initialiseParse("<hi!>", "t", parseErrorList82);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError85 = parseErrorList82.get((int) 't');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 116, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(elementList15);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNull(tag23);
        org.junit.Assert.assertNotNull(tag25);
        org.junit.Assert.assertNull(doctype26);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorStream31);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertNotNull(parseErrorItor33);
        org.junit.Assert.assertNotNull(parseErrorList42);
        org.junit.Assert.assertNotNull(parseErrorStream43);
        org.junit.Assert.assertNotNull(parseErrorItor44);
        org.junit.Assert.assertNotNull(parseErrorItor45);
        org.junit.Assert.assertNull(tag47);
        org.junit.Assert.assertNotNull(tag49);
        org.junit.Assert.assertNotNull(doctype51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Doctype" + "'", str52, "Doctype");
        org.junit.Assert.assertNotNull(tag55);
        org.junit.Assert.assertNotNull(parseErrorList61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(document63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(document67);
        org.junit.Assert.assertNotNull(parseErrorList73);
        org.junit.Assert.assertNotNull(parseErrorStream74);
        org.junit.Assert.assertNotNull(parseErrorItor75);
        org.junit.Assert.assertNotNull(parseErrorItor76);
        org.junit.Assert.assertNotNull(parseErrorList78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(parseErrorList82);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.CharacterReader characterReader16 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean18 = characterReader16.matches("[100: ]");
        htmlTreeBuilder0.reader = characterReader16;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder20 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int25 = parseErrorList24.getMaxSize();
        org.jsoup.nodes.Document document26 = htmlTreeBuilder20.parse("0: Doctype", "hi!", parseErrorList24);
        htmlTreeBuilder20.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray29 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList30 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList30, characterArray29);
        htmlTreeBuilder20.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList30);
        boolean boolean33 = htmlTreeBuilder20.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag35 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement37 = htmlTreeBuilder20.insertForm(startTag35, true);
        htmlTreeBuilder0.setFormElement(formElement37);
        org.jsoup.nodes.Document document41 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "<hi!>");
        boolean boolean42 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document41);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(characterArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(formElement37);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.nodes.Document document16 = htmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder17 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document18 = xmlTreeBuilder17.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        xmlTreeBuilder17.errors = parseErrorList24;
        org.jsoup.parser.ParseErrorList parseErrorList35 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream36 = parseErrorList35.stream();
        xmlTreeBuilder17.initialiseParse("a", "[]", parseErrorList35);
        org.jsoup.parser.Token.Character character39 = new org.jsoup.parser.Token.Character("-1: []");
        xmlTreeBuilder17.insert(character39);
        java.lang.String str41 = character39.toString();
        htmlTreeBuilder0.insert(character39);
        java.lang.String str43 = character39.getData();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNull(document18);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList35);
        org.junit.Assert.assertNotNull(parseErrorStream36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1: []" + "'", str41, "-1: []");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1: []" + "'", str43, "-1: []");
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.jsoup.nodes.Element element1 = null;
        java.util.List<org.jsoup.nodes.Node> nodeList3 = org.jsoup.parser.Parser.parseFragment("\uffff>", element1, "StartTag");
        org.junit.Assert.assertNotNull(nodeList3);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        java.lang.StringBuilder stringBuilder9 = null;
        tokeniser7.dataBuffer = stringBuilder9;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        tokeniser7.emit(charArray14);
        org.jsoup.parser.Token.Comment comment17 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean20 = characterReader19.matchesLetter();
        miniSoupTokeniserState0.read(tokeniser7, characterReader19);
        int int22 = characterReader19.pos();
        java.lang.String str24 = characterReader19.consumeTo("<0: Doctype>");
        int int26 = characterReader19.nextIndexOf('S');
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "StartTag" + "'", str24, "StartTag");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag3.preserveWhitespace();
        java.lang.String str5 = tag3.toString();
        boolean boolean6 = tag3.isBlock();
        boolean boolean7 = tag3.isData();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.EndTag endTag10 = new org.jsoup.parser.Token.EndTag();
        char[] charArray13 = new char[] { '#', '#' };
        endTag10.appendAttributeValue(charArray13);
        tokeniser6.emit(charArray13);
        org.jsoup.parser.Token.Comment comment16 = tokeniser6.commentPending;
        tokeniser6.emit(" EndTag");
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, #]");
        org.junit.Assert.assertNull(comment16);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        boolean boolean8 = tokenQueue1.matchesCS("StartTag");
        java.lang.String str11 = tokenQueue1.chompBalanced('E', '#');
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.Tokeniser tokeniser18 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList14);
        org.jsoup.parser.Token.EndTag endTag19 = new org.jsoup.parser.Token.EndTag();
        char[] charArray22 = new char[] { '#', '#' };
        endTag19.appendAttributeValue(charArray22);
        endTag19.appendAttributeValue(' ');
        char[] charArray27 = new char[] { '4' };
        endTag19.appendAttributeValue(charArray27);
        tokeniser18.emit(charArray27);
        boolean boolean30 = tokenQueue1.matchesAny(charArray27);
        java.lang.String str31 = tokenQueue1.consumeElementSelector();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        org.jsoup.nodes.FormElement formElement11 = htmlTreeBuilder3.getFormElement();
        boolean boolean13 = htmlTreeBuilder3.inListItemScope("0: []");
        org.jsoup.nodes.Document document14 = htmlTreeBuilder3.doc;
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(formElement11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(document14);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList18);
        org.jsoup.parser.Token.Tag tag23 = tokeniser22.tagPending;
        tokeniser22.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype26 = tokeniser22.doctypePending;
        tokeniser22.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype28 = tokeniser22.doctypePending;
        htmlTreeBuilder0.tokeniser = tokeniser22;
        org.jsoup.parser.Token.Comment comment30 = tokeniser22.commentPending;
        java.lang.StringBuilder stringBuilder31 = comment30.data;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNull(tag23);
        org.junit.Assert.assertNull(doctype26);
        org.junit.Assert.assertNull(doctype28);
        org.junit.Assert.assertNotNull(comment30);
        org.junit.Assert.assertNotNull(stringBuilder31);
        org.junit.Assert.assertEquals(stringBuilder31.toString(), "");
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        java.lang.String[] strArray13 = null;
        boolean boolean14 = htmlTreeBuilder0.inScope("EndTag", strArray13);
        org.jsoup.parser.ParseErrorList parseErrorList15 = htmlTreeBuilder0.errors;
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.parser.CharacterReader characterReader17 = null;
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream20 = parseErrorList19.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList19.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor22 = parseErrorList19.iterator();
        org.jsoup.parser.Tokeniser tokeniser23 = new org.jsoup.parser.Tokeniser(characterReader17, parseErrorList19);
        org.jsoup.parser.Token.Tag tag24 = tokeniser23.tagPending;
        java.lang.StringBuilder stringBuilder25 = null;
        tokeniser23.dataBuffer = stringBuilder25;
        org.jsoup.parser.Token.Tag tag28 = tokeniser23.createTagPending(false);
        org.jsoup.parser.Token.Tag tag30 = tokeniser23.createTagPending(false);
        tag30.appendAttributeName("0: Doctype");
        java.lang.String str33 = tag30.tagName;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = htmlTreeBuilder0.process((org.jsoup.parser.Token) tag30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertNotNull(parseErrorStream20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorItor22);
        org.junit.Assert.assertNull(tag24);
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(tag30);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        java.lang.String str8 = tokenQueue1.consumeTo("[]");
        boolean boolean10 = tokenQueue1.matches("hi!#");
        boolean boolean11 = tokenQueue1.matchesWord();
        tokenQueue1.addFirst((java.lang.Character) ' ');
        java.lang.Class<?> wildcardClass14 = tokenQueue1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        boolean boolean12 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        org.jsoup.parser.ParseError[] parseErrorArray13 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList14 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList14, parseErrorArray13);
        org.jsoup.parser.ParseError[] parseErrorArray16 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList17 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17, parseErrorArray16);
        boolean boolean19 = parseErrorList14.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList17.listIterator();
        int int22 = parseErrorList17.lastIndexOf((java.lang.Object) 1.0d);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList17.iterator();
        boolean boolean24 = parseErrorList10.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str1 = doctype0.getSystemIdentifier();
        boolean boolean2 = doctype0.forceQuirks;
        boolean boolean3 = doctype0.isCharacter();
        java.lang.StringBuilder stringBuilder4 = doctype0.name;
        java.lang.StringBuilder stringBuilder5 = doctype0.name;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(stringBuilder4);
        org.junit.Assert.assertEquals(stringBuilder4.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder5);
        org.junit.Assert.assertEquals(stringBuilder5.toString(), "");
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        htmlTreeBuilder0.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document32);
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        org.jsoup.parser.CharacterReader characterReader35 = htmlTreeBuilder0.reader;
        org.jsoup.parser.ParseErrorList parseErrorList37 = org.jsoup.parser.ParseErrorList.tracking(100);
        int int38 = parseErrorList37.getMaxSize();
        htmlTreeBuilder0.errors = parseErrorList37;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(characterReader35);
        org.junit.Assert.assertNotNull(parseErrorList37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("<hi!>");
        startTag1.tagName = "ndTag";
        boolean boolean4 = startTag1.isSelfClosing();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.StartTag startTag13 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType14 = startTag13.type;
        startTag13.appendTagName('#');
        boolean boolean17 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag13);
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader19.advance();
        boolean boolean22 = characterReader19.matchConsume("<hi!>");
        htmlTreeBuilder0.reader = characterReader19;
        boolean boolean25 = characterReader19.matchConsume("[100: ]");
        java.lang.String str26 = characterReader19.consumeDigitSequence();
        boolean boolean28 = characterReader19.matchConsumeIgnoreCase("St");
        boolean boolean29 = characterReader19.matchesDigit();
        boolean boolean31 = characterReader19.matches('a');
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertTrue("'" + tokenType14 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType14.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        boolean boolean9 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList7);
        org.jsoup.parser.Token.Tag tag12 = tokeniser10.createTagPending(true);
        tokeniser10.emit('a');
        org.jsoup.parser.ITokeniserState iTokeniserState15 = tokeniser10.getState();
        tokeniser10.emit('a');
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertNotNull(iTokeniserState15);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.isInline();
        org.jsoup.parser.Tag tag6 = tag1.setSelfClosing();
        boolean boolean7 = tag6.formatAsBlock();
        boolean boolean8 = tag6.isBlock();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(tag6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWhitespace();
        java.lang.String str8 = tokenQueue1.consumeTo("<hi!>");
        java.lang.String str9 = tokenQueue1.consumeAttributeKey();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document5 = parser0.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document8 = parser0.parseInput("<hi!>", "[]");
        org.jsoup.parser.TreeBuilder treeBuilder9 = parser0.getTreeBuilder();
        org.jsoup.nodes.Document document12 = parser0.parseInput("hi!", "hi!#");
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNotNull(treeBuilder9);
        org.junit.Assert.assertNotNull(document12);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches("[100: ]");
        char char4 = characterReader1.current();
        boolean boolean6 = characterReader1.matchConsume("0: []");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'S' + "'", char4 == 'S');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.CharacterReader characterReader16 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean18 = characterReader16.matches("[100: ]");
        htmlTreeBuilder0.reader = characterReader16;
        java.lang.String str20 = characterReader16.consumeDigitSequence();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("t");
        java.lang.String str2 = tokenQueue1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "t" + "'", str2, "t");
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.jsoup.parser.Token.EOF eOF0 = new org.jsoup.parser.Token.EOF();
        boolean boolean1 = eOF0.isComment();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.preserveWhitespace();
        boolean boolean3 = tag1.isKnownTag();
        boolean boolean4 = tag1.isBlock();
        boolean boolean5 = tag1.isFormSubmittable();
        java.lang.String str6 = tag1.getName();
        boolean boolean7 = tag1.formatAsBlock();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag();
        startTag1.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag4 = startTag1.asStartTag();
        org.jsoup.parser.Token.Tag tag6 = startTag4.name("");
        org.jsoup.parser.Token.Tag tag8 = tag6.name("-1: []");
        boolean boolean9 = tag8.isEOF();
        org.jsoup.nodes.Attributes attributes10 = tag8.getAttributes();
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("", attributes10);
        org.junit.Assert.assertNotNull(startTag4);
        org.junit.Assert.assertNotNull(tag6);
        org.junit.Assert.assertNotNull(tag8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(attributes10);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        java.lang.StringBuilder stringBuilder10 = tokeniser6.dataBuffer;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        tokeniser6.emit(charArray14);
        org.jsoup.parser.ITokeniserState iTokeniserState17 = tokeniser6.getState();
        org.jsoup.parser.Token.Tag tag19 = tokeniser6.createTagPending(true);
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitCommentPending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNull(stringBuilder10);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNotNull(iTokeniserState17);
        org.junit.Assert.assertNotNull(tag19);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.framesetOk(false);
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        boolean boolean23 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.Token.EndTag endTag24 = new org.jsoup.parser.Token.EndTag();
        endTag24.tagName = "hi!";
        endTag24.selfClosing = false;
        boolean boolean29 = endTag24.isEOF();
        org.jsoup.parser.Token.EndTag endTag30 = endTag24.asEndTag();
        boolean boolean31 = htmlTreeBuilder0.process((org.jsoup.parser.Token) endTag24);
        org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parseBodyFragment("[]", "[100: ]");
        boolean boolean35 = htmlTreeBuilder0.removeFromStack((org.jsoup.nodes.Element) document34);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(endTag30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        tokenQueue1.advance();
        java.lang.String str7 = tokenQueue1.toString();
        tokenQueue1.advance();
        java.lang.String str10 = tokenQueue1.consumeTo("\ufffd>");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        htmlTreeBuilder0.newPendingTableCharacters();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        org.jsoup.parser.Token.StartTag startTag6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element7 = htmlTreeBuilder0.insertEmpty(startTag6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.Parser parser19 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.parser.Token.StartTag startTag20 = new org.jsoup.parser.Token.StartTag();
        startTag20.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag24 = startTag20.name("hi!#");
        boolean boolean25 = startTag20.selfClosing;
        java.lang.String str26 = startTag20.toString();
        org.jsoup.nodes.Element element27 = htmlTreeBuilder0.insertEmpty(startTag20);
        org.jsoup.nodes.Element element28 = htmlTreeBuilder0.currentElement();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(tag24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<hi!#>" + "'", str26, "<hi!#>");
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(element28);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        htmlTreeBuilder0.newPendingTableCharacters();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        java.lang.String str14 = htmlTreeBuilder0.baseUri;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        boolean boolean37 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.CharacterReader characterReader38 = null;
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream41 = parseErrorList40.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList40.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList40.iterator();
        org.jsoup.parser.Tokeniser tokeniser44 = new org.jsoup.parser.Tokeniser(characterReader38, parseErrorList40);
        org.jsoup.parser.Token.Tag tag45 = tokeniser44.tagPending;
        org.jsoup.parser.Token.Tag tag47 = tokeniser44.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype48 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype49 = doctype48.asDoctype();
        java.lang.String str50 = doctype48.tokenType();
        tokeniser44.emit((org.jsoup.parser.Token) doctype48);
        org.jsoup.parser.ITokeniserState iTokeniserState52 = tokeniser44.getState();
        org.jsoup.parser.Token token53 = tokeniser44.read();
        htmlTreeBuilder0.tokeniser = tokeniser44;
        org.jsoup.parser.CharacterReader characterReader55 = null;
        org.jsoup.parser.ParseErrorList parseErrorList57 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream58 = parseErrorList57.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor59 = parseErrorList57.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor60 = parseErrorList57.iterator();
        org.jsoup.parser.Tokeniser tokeniser61 = new org.jsoup.parser.Tokeniser(characterReader55, parseErrorList57);
        org.jsoup.parser.Token.Tag tag62 = tokeniser61.tagPending;
        java.lang.StringBuilder stringBuilder63 = null;
        tokeniser61.dataBuffer = stringBuilder63;
        org.jsoup.parser.Token.EndTag endTag65 = new org.jsoup.parser.Token.EndTag();
        char[] charArray68 = new char[] { '#', '#' };
        endTag65.appendAttributeValue(charArray68);
        tokeniser61.emit(charArray68);
        org.jsoup.parser.Token.Comment comment71 = tokeniser61.commentPending;
        org.jsoup.parser.TokeniserState tokeniserState72 = org.jsoup.parser.TokeniserState.ScriptDataEscapedLessthanSign;
        tokeniser61.error((org.jsoup.parser.ITokeniserState) tokeniserState72);
        tokeniser44.transition((org.jsoup.parser.ITokeniserState) tokeniserState72);
        // The following exception was thrown during execution in test generation
        try {
            tokeniser44.emitCommentPending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertNotNull(parseErrorStream41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNull(tag45);
        org.junit.Assert.assertNotNull(tag47);
        org.junit.Assert.assertNotNull(doctype49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Doctype" + "'", str50, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState52);
        org.junit.Assert.assertNotNull(token53);
        org.junit.Assert.assertNotNull(parseErrorList57);
        org.junit.Assert.assertNotNull(parseErrorStream58);
        org.junit.Assert.assertNotNull(parseErrorItor59);
        org.junit.Assert.assertNotNull(parseErrorItor60);
        org.junit.Assert.assertNull(tag62);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[#, #]");
        org.junit.Assert.assertNull(comment71);
        org.junit.Assert.assertNotNull(tokeniserState72);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        boolean boolean12 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        java.lang.String str13 = parseErrorList1.toString();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList1.stream();
        java.lang.Object[] objArray15 = parseErrorList1.toArray();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder16 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.nodes.Document document22 = htmlTreeBuilder16.parse("0: Doctype", "hi!", parseErrorList20);
        boolean boolean23 = htmlTreeBuilder16.framesetOk();
        org.jsoup.parser.Parser parser24 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser26 = parser24.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document29 = parser24.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document32 = parser24.parseInput("<hi!>", "[]");
        htmlTreeBuilder16.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        boolean boolean34 = htmlTreeBuilder16.isFragmentParsing();
        htmlTreeBuilder16.clearStackToTableContext();
        int int36 = parseErrorList1.indexOf((java.lang.Object) htmlTreeBuilder16);
        org.jsoup.nodes.Document document37 = htmlTreeBuilder16.getDocument();
        org.jsoup.parser.CharacterReader characterReader39 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader39.advance();
        characterReader39.advance();
        boolean boolean43 = characterReader39.containsIgnoreCase("tartTag");
        htmlTreeBuilder16.reader = characterReader39;
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parser24);
        org.junit.Assert.assertNotNull(parser26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        tokenQueue1.addFirst((java.lang.Character) ' ');
        java.lang.String str6 = tokenQueue1.consumeTo("StartTag");
        java.lang.String str7 = tokenQueue1.consumeCssIdentifier();
        tokenQueue1.addFirst((java.lang.Character) 'S');
        java.lang.String str10 = tokenQueue1.consumeWord();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + " EndTag" + "'", str6, " EndTag");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "S" + "'", str10, "S");
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.Comment comment12 = new org.jsoup.parser.Token.Comment();
        java.lang.String str13 = comment12.toString();
        boolean boolean14 = comment12.isCharacter();
        htmlTreeBuilder0.insert(comment12);
        org.jsoup.parser.Parser parser16 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder17 = new org.jsoup.parser.HtmlTreeBuilder();
        htmlTreeBuilder17.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder21 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int26 = parseErrorList25.getMaxSize();
        org.jsoup.nodes.Document document27 = htmlTreeBuilder21.parse("0: Doctype", "hi!", parseErrorList25);
        org.jsoup.parser.ParseError[] parseErrorArray28 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList29 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList29, parseErrorArray28);
        org.jsoup.parser.ParseError[] parseErrorArray31 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList32 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32, parseErrorArray31);
        boolean boolean34 = parseErrorList29.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32);
        java.lang.Object[] objArray35 = parseErrorList29.toArray();
        parseErrorList29.clear();
        org.jsoup.parser.ParseError[] parseErrorArray37 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList38 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38, parseErrorArray37);
        org.jsoup.parser.ParseError[] parseErrorArray40 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList41 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList41, parseErrorArray40);
        boolean boolean43 = parseErrorList38.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList41);
        java.lang.Object[] objArray44 = parseErrorList38.toArray();
        parseErrorList38.clear();
        org.jsoup.parser.ParseError[] parseErrorArray46 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList47 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList47, parseErrorArray46);
        boolean boolean49 = parseErrorList38.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList47);
        boolean boolean50 = parseErrorList29.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList47);
        java.lang.Object[] objArray51 = parseErrorList47.toArray();
        boolean boolean52 = parseErrorList25.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList47);
        org.jsoup.parser.ParseError[] parseErrorArray53 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList54 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54, parseErrorArray53);
        org.jsoup.parser.ParseError[] parseErrorArray56 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList57 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList57, parseErrorArray56);
        boolean boolean59 = parseErrorList54.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList57);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor60 = parseErrorList57.listIterator();
        int int62 = parseErrorList57.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag66 = new org.jsoup.parser.Token.EndTag();
        char[] charArray69 = new char[] { '#', '#' };
        endTag66.appendAttributeValue(charArray69);
        endTag66.finaliseTag();
        boolean boolean72 = endTag66.isSelfClosing();
        org.jsoup.parser.Tag tag74 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean75 = tag74.isFormListed();
        org.jsoup.parser.Tag tag76 = tag74.setSelfClosing();
        boolean boolean77 = tag74.isKnownTag();
        java.lang.Object[] objArray79 = new java.lang.Object[] { boolean72, tag74, "Doctype" };
        org.jsoup.parser.ParseError parseError80 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray79);
        parseErrorList57.add(0, parseError80);
        boolean boolean82 = parseErrorList25.add(parseError80);
        org.jsoup.nodes.Document document83 = htmlTreeBuilder17.parse("\uffff", "", parseErrorList25);
        org.jsoup.parser.Parser parser84 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.nodes.Document document87 = parser84.parseInput("", "hi!");
        org.jsoup.nodes.Document document90 = parser84.parseInput("<hi!>", "[]");
        htmlTreeBuilder17.insertInFosterParent((org.jsoup.nodes.Node) document90);
        java.lang.String str92 = htmlTreeBuilder17.toString();
        org.jsoup.nodes.Element element93 = htmlTreeBuilder17.pop();
        org.jsoup.parser.Parser parser94 = parser16.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder17);
        org.jsoup.nodes.Element element96 = htmlTreeBuilder17.getActiveFormattingElement("Comment");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<!---->" + "'", str13, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNotNull(parseErrorArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parseErrorArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(parseErrorArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(parseErrorArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(parseErrorArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(parseErrorItor60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(tag74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(tag76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(document83);
        org.junit.Assert.assertNotNull(parser84);
        org.junit.Assert.assertNotNull(document87);
        org.junit.Assert.assertNotNull(document90);
        org.junit.Assert.assertNotNull(element93);
        org.junit.Assert.assertNotNull(parser94);
        org.junit.Assert.assertNull(element96);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        tokenQueue1.addFirst((java.lang.Character) 'a');
        tokenQueue1.addFirst("StartTag");
        java.lang.String str11 = tokenQueue1.consumeTo("hi!#");
        boolean boolean12 = tokenQueue1.matchesWord();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "StartTaga" + "'", str11, "StartTaga");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.nodes.FormElement formElement19 = htmlTreeBuilder0.getFormElement();
        htmlTreeBuilder0.resetInsertionMode();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(formElement19);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.listIterator();
        parseErrorList1.clear();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList1.stream();
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertNotNull(parseErrorStream5);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        boolean boolean1 = doctype0.isStartTag();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.parser.TokenQueue tokenQueue38 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean39 = tokenQueue38.isEmpty();
        boolean boolean40 = tokenQueue38.consumeWhitespace();
        java.lang.String str41 = tokenQueue38.consumeWord();
        boolean boolean42 = tokenQueue38.matchesWhitespace();
        java.lang.String[] strArray47 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str48 = tokenQueue38.consumeToAny(strArray47);
        boolean boolean49 = htmlTreeBuilder0.inScope(strArray47);
        org.jsoup.parser.CharacterReader characterReader50 = null;
        org.jsoup.parser.ParseErrorList parseErrorList52 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream53 = parseErrorList52.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor54 = parseErrorList52.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList52.iterator();
        org.jsoup.parser.Tokeniser tokeniser56 = new org.jsoup.parser.Tokeniser(characterReader50, parseErrorList52);
        org.jsoup.parser.Token.Tag tag57 = tokeniser56.tagPending;
        tokeniser56.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag61 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType62 = startTag61.type;
        startTag61.appendTagName('#');
        tokeniser56.tagPending = startTag61;
        org.jsoup.parser.TokeniserState tokeniserState66 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser56.transition((org.jsoup.parser.ITokeniserState) tokeniserState66);
        org.jsoup.parser.Token.Doctype doctype68 = new org.jsoup.parser.Token.Doctype();
        boolean boolean69 = doctype68.isCharacter();
        tokeniser56.doctypePending = doctype68;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState71 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype72 = new org.jsoup.parser.Token.Doctype();
        boolean boolean73 = doctype72.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder74 = null;
        boolean boolean75 = htmlTreeBuilderState71.process((org.jsoup.parser.Token) doctype72, htmlTreeBuilder74);
        java.lang.StringBuilder stringBuilder76 = doctype72.name;
        tokeniser56.dataBuffer = stringBuilder76;
        org.jsoup.parser.Token.EndTag endTag78 = new org.jsoup.parser.Token.EndTag();
        char[] charArray81 = new char[] { '#', '#' };
        endTag78.appendAttributeValue(charArray81);
        endTag78.appendAttributeValue(' ');
        char[] charArray86 = new char[] { '4' };
        endTag78.appendAttributeValue(charArray86);
        tokeniser56.emit(charArray86);
        htmlTreeBuilder0.tokeniser = tokeniser56;
        org.jsoup.parser.Token.Doctype doctype90 = tokeniser56.doctypePending;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "EndTag" + "'", str41, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(parseErrorList52);
        org.junit.Assert.assertNotNull(parseErrorStream53);
        org.junit.Assert.assertNotNull(parseErrorItor54);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertNull(tag57);
        org.junit.Assert.assertTrue("'" + tokenType62 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType62.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(stringBuilder76);
        org.junit.Assert.assertEquals(stringBuilder76.toString(), "");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[#, #]");
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[4]");
        org.junit.Assert.assertNotNull(doctype90);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        boolean boolean19 = doctype18.isCharacter();
        tokeniser6.doctypePending = doctype18;
        org.jsoup.parser.Token.Doctype doctype21 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype22 = doctype21.asDoctype();
        java.lang.StringBuilder stringBuilder23 = doctype22.name;
        tokeniser6.dataBuffer = stringBuilder23;
        tokeniser6.emitDoctypePending();
        org.jsoup.parser.TokeniserState tokeniserState26 = org.jsoup.parser.TokeniserState.AttributeValue_doubleQuoted;
        tokeniser6.eofError((org.jsoup.parser.ITokeniserState) tokeniserState26);
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitCommentPending();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: There is an unread token pending!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doctype22);
        org.junit.Assert.assertNotNull(stringBuilder23);
        org.junit.Assert.assertEquals(stringBuilder23.toString(), "");
        org.junit.Assert.assertNotNull(tokeniserState26);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking((int) '\uffff');
        java.util.Spliterator<org.jsoup.parser.ParseError> parseErrorSpliterator2 = parseErrorList1.spliterator();
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        org.jsoup.parser.ParseError[] parseErrorArray6 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList7 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7, parseErrorArray6);
        boolean boolean9 = parseErrorList4.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList7.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        parseErrorList7.trimToSize();
        boolean boolean15 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream21 = parseErrorList20.stream();
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState22 = org.jsoup.parser.MiniSoupTokeniserState.Data;
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState23 = org.jsoup.parser.MiniSoupTokeniserState.Data;
        org.jsoup.parser.MiniSoupTokeniserState[] miniSoupTokeniserStateArray24 = new org.jsoup.parser.MiniSoupTokeniserState[] { miniSoupTokeniserState22, miniSoupTokeniserState23 };
        org.jsoup.parser.MiniSoupTokeniserState[] miniSoupTokeniserStateArray25 = parseErrorList20.toArray(miniSoupTokeniserStateArray24);
        org.jsoup.parser.ParseError parseError26 = new org.jsoup.parser.ParseError(10, "", (java.lang.Object[]) miniSoupTokeniserStateArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError27 = parseErrorList1.set((-1), parseError26);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorSpliterator2);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(parseErrorArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertNotNull(parseErrorStream21);
        org.junit.Assert.assertNotNull(miniSoupTokeniserState22);
        org.junit.Assert.assertNotNull(miniSoupTokeniserState23);
        org.junit.Assert.assertNotNull(miniSoupTokeniserStateArray24);
        org.junit.Assert.assertNotNull(miniSoupTokeniserStateArray25);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.parser.CharacterReader characterReader2 = new org.jsoup.parser.CharacterReader("t");
        java.lang.String str3 = characterReader2.toString();
        org.jsoup.parser.TokenQueue tokenQueue5 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean6 = tokenQueue5.isEmpty();
        boolean boolean7 = tokenQueue5.consumeWhitespace();
        java.lang.String str8 = tokenQueue5.consumeWord();
        boolean boolean9 = tokenQueue5.matchesWhitespace();
        java.lang.String[] strArray14 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str15 = tokenQueue5.consumeToAny(strArray14);
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList18);
        org.jsoup.parser.Token.Tag tag23 = tokeniser22.tagPending;
        java.lang.StringBuilder stringBuilder24 = null;
        tokeniser22.dataBuffer = stringBuilder24;
        org.jsoup.parser.Token.EndTag endTag26 = new org.jsoup.parser.Token.EndTag();
        char[] charArray29 = new char[] { '#', '#' };
        endTag26.appendAttributeValue(charArray29);
        tokeniser22.emit(charArray29);
        boolean boolean32 = tokenQueue5.matchesAny(charArray29);
        java.lang.String str33 = characterReader2.consumeToAny(charArray29);
        startTag0.appendAttributeValue(charArray29);
        boolean boolean35 = startTag0.isSelfClosing();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "t" + "'", str3, "t");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "EndTag" + "'", str8, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNull(tag23);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "t" + "'", str33, "t");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        boolean boolean7 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder8 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int13 = parseErrorList12.getMaxSize();
        org.jsoup.nodes.Document document14 = htmlTreeBuilder8.parse("0: Doctype", "hi!", parseErrorList12);
        htmlTreeBuilder8.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray17 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList18 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList18, characterArray17);
        htmlTreeBuilder8.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList18);
        boolean boolean21 = htmlTreeBuilder8.isFosterInserts();
        htmlTreeBuilder8.generateImpliedEndTags();
        org.jsoup.parser.ParseErrorList parseErrorList23 = htmlTreeBuilder8.errors;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList28 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int29 = parseErrorList28.getMaxSize();
        org.jsoup.nodes.Document document30 = htmlTreeBuilder24.parse("0: Doctype", "hi!", parseErrorList28);
        org.jsoup.parser.ParseError[] parseErrorArray31 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList32 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32, parseErrorArray31);
        org.jsoup.parser.ParseError[] parseErrorArray34 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList35 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList35, parseErrorArray34);
        boolean boolean37 = parseErrorList32.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList35);
        java.lang.Object[] objArray38 = parseErrorList32.toArray();
        parseErrorList32.clear();
        org.jsoup.parser.ParseError[] parseErrorArray40 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList41 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList41, parseErrorArray40);
        org.jsoup.parser.ParseError[] parseErrorArray43 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList44 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44, parseErrorArray43);
        boolean boolean46 = parseErrorList41.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        java.lang.Object[] objArray47 = parseErrorList41.toArray();
        parseErrorList41.clear();
        org.jsoup.parser.ParseError[] parseErrorArray49 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList50 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList50, parseErrorArray49);
        boolean boolean52 = parseErrorList41.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList50);
        boolean boolean53 = parseErrorList32.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList50);
        java.lang.Object[] objArray54 = parseErrorList50.toArray();
        boolean boolean55 = parseErrorList28.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList50);
        java.lang.String str56 = parseErrorList28.toString();
        java.util.Spliterator<org.jsoup.parser.ParseError> parseErrorSpliterator57 = parseErrorList28.spliterator();
        boolean boolean58 = parseErrorList23.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList28);
        boolean boolean59 = parseErrorList2.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList28);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(characterArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertNotNull(parseErrorList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNotNull(parseErrorArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(parseErrorArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(parseErrorArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(parseErrorSpliterator57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.jsoup.parser.Token.Character character1 = new org.jsoup.parser.Token.Character("[0: []]");
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        boolean boolean3 = tag1.preserveWhitespace();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\uffff');
        java.lang.String str5 = characterReader1.consumeTo("<Doctype>");
        characterReader1.rewindToMark();
        java.lang.String str7 = characterReader1.consumeHexSequence();
        char char8 = characterReader1.current();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + 'S' + "'", char8 == 'S');
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        parseErrorList2.clear();
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token token1 = xmlTreeBuilder0.currentToken;
        org.jsoup.parser.CharacterReader characterReader2 = null;
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.iterator();
        org.jsoup.parser.Tokeniser tokeniser8 = new org.jsoup.parser.Tokeniser(characterReader2, parseErrorList4);
        org.jsoup.parser.Token.Tag tag9 = tokeniser8.tagPending;
        org.jsoup.parser.Token.Tag tag11 = tokeniser8.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype12 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype13 = doctype12.asDoctype();
        java.lang.String str14 = doctype12.tokenType();
        tokeniser8.emit((org.jsoup.parser.Token) doctype12);
        org.jsoup.parser.Token.Tag tag17 = tokeniser8.createTagPending(true);
        xmlTreeBuilder0.tokeniser = tokeniser8;
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        java.lang.StringBuilder stringBuilder27 = null;
        tokeniser25.dataBuffer = stringBuilder27;
        org.jsoup.parser.Token.Tag tag30 = tokeniser25.createTagPending(false);
        org.jsoup.parser.Token.Tag tag32 = tag30.name("hi!#");
        tokeniser8.tagPending = tag30;
        boolean boolean34 = tokeniser8.currentNodeInHtmlNS();
        org.jsoup.parser.Token.Tag tag36 = tokeniser8.createTagPending(true);
        tag36.appendAttributeValue("-1: []");
        boolean boolean39 = tag36.isStartTag();
        tag36.tagName = "StartTag";
        tag36.selfClosing = false;
        org.junit.Assert.assertNull(token1);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNull(tag9);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(doctype13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Doctype" + "'", str14, "Doctype");
        org.junit.Assert.assertNotNull(tag17);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag30);
        org.junit.Assert.assertNotNull(tag32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(tag36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int6 = parseErrorList5.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList8.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        org.jsoup.parser.ParseError[] parseErrorArray14 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList15 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15, parseErrorArray14);
        boolean boolean17 = parseErrorList11.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15);
        parseErrorList15.clear();
        boolean boolean19 = parseErrorList5.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList5.iterator();
        org.jsoup.nodes.Document document21 = xmlTreeBuilder0.parse("<hi!>", "0: []", parseErrorList5);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder22 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int27 = parseErrorList26.getMaxSize();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder22.parse("0: Doctype", "hi!", parseErrorList26);
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream33 = parseErrorList32.stream();
        boolean boolean34 = parseErrorList32.canAddError();
        org.jsoup.nodes.Document document35 = htmlTreeBuilder22.parse("EndTag", "hi!#", parseErrorList32);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState36 = null;
        htmlTreeBuilder22.transition(htmlTreeBuilderState36);
        org.jsoup.nodes.Document document38 = htmlTreeBuilder22.doc;
        boolean boolean40 = htmlTreeBuilder22.inTableScope("<!---->");
        htmlTreeBuilder22.clearStackToTableBodyContext();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder42 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader43 = null;
        org.jsoup.parser.ParseErrorList parseErrorList45 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream46 = parseErrorList45.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList45.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor48 = parseErrorList45.iterator();
        org.jsoup.parser.Tokeniser tokeniser49 = new org.jsoup.parser.Tokeniser(characterReader43, parseErrorList45);
        xmlTreeBuilder42.tokeniser = tokeniser49;
        org.jsoup.parser.Tokeniser tokeniser51 = xmlTreeBuilder42.tokeniser;
        org.jsoup.parser.ITokeniserState iTokeniserState52 = tokeniser51.getState();
        org.jsoup.parser.Token.Comment comment53 = new org.jsoup.parser.Token.Comment();
        java.lang.String str54 = comment53.toString();
        boolean boolean55 = comment53.isCharacter();
        boolean boolean56 = comment53.bogus;
        tokeniser51.commentPending = comment53;
        htmlTreeBuilder22.insert(comment53);
        xmlTreeBuilder0.insert(comment53);
        java.lang.String str60 = comment53.getData();
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parseErrorArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertNotNull(parseErrorStream33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList45);
        org.junit.Assert.assertNotNull(parseErrorStream46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNotNull(parseErrorItor48);
        org.junit.Assert.assertNotNull(tokeniser51);
        org.junit.Assert.assertNotNull(iTokeniserState52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<!---->" + "'", str54, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        boolean boolean9 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList7);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList7.iterator();
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        org.jsoup.parser.ParseError[] parseErrorArray15 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList16 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16, parseErrorArray15);
        boolean boolean18 = parseErrorList13.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16);
        int int20 = parseErrorList16.lastIndexOf((java.lang.Object) (byte) -1);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.noTracking();
        boolean boolean22 = parseErrorList16.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream23 = parseErrorList16.parallelStream();
        boolean boolean24 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16);
        parseErrorList16.clear();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(parseErrorStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWhitespace();
        java.lang.String str7 = tokenQueue1.consumeWord();
        tokenQueue1.addFirst((java.lang.Character) ' ');
        boolean boolean10 = tokenQueue1.consumeWhitespace();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        java.lang.StringBuilder stringBuilder18 = tokeniser6.dataBuffer;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertNull(stringBuilder18);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        htmlTreeBuilder0.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document32);
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        org.jsoup.parser.CharacterReader characterReader35 = htmlTreeBuilder0.reader;
        java.lang.String str37 = characterReader35.consumeTo('\ufffd');
        int int39 = characterReader35.nextIndexOf((java.lang.CharSequence) "[100: ]");
        java.lang.String str40 = characterReader35.consumeToEnd();
        boolean boolean42 = characterReader35.matchesIgnoreCase("Comment");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(characterReader35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.Token.Tag tag10 = tokeniser7.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype11 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype12 = doctype11.asDoctype();
        java.lang.String str13 = doctype11.tokenType();
        tokeniser7.emit((org.jsoup.parser.Token) doctype11);
        org.jsoup.parser.Token.Tag tag16 = tokeniser7.createTagPending(true);
        xmlTreeBuilder0.currentToken = tag16;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        xmlTreeBuilder0.doc = document28;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder33 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document34 = xmlTreeBuilder33.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder35 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList40 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList42 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream43 = parseErrorList42.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor44 = parseErrorList42.iterator();
        boolean boolean45 = parseErrorList40.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList42);
        xmlTreeBuilder35.initialiseParse("<!---->", "hi!", parseErrorList40);
        xmlTreeBuilder33.errors = parseErrorList40;
        org.jsoup.parser.ParseErrorList parseErrorList51 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream52 = parseErrorList51.stream();
        xmlTreeBuilder33.initialiseParse("a", "[]", parseErrorList51);
        org.jsoup.parser.CharacterReader characterReader54 = null;
        org.jsoup.parser.ParseErrorList parseErrorList56 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream57 = parseErrorList56.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor58 = parseErrorList56.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor59 = parseErrorList56.iterator();
        org.jsoup.parser.Tokeniser tokeniser60 = new org.jsoup.parser.Tokeniser(characterReader54, parseErrorList56);
        org.jsoup.parser.Token.Tag tag61 = tokeniser60.tagPending;
        tokeniser60.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype64 = tokeniser60.doctypePending;
        tokeniser60.createCommentPending();
        org.jsoup.parser.Token.Comment comment66 = tokeniser60.commentPending;
        boolean boolean67 = parseErrorList51.remove((java.lang.Object) tokeniser60);
        org.jsoup.nodes.Document document68 = xmlTreeBuilder0.parse("<!---->", "[]", parseErrorList51);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor70 = parseErrorList51.listIterator((int) '\ufffd');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 65533");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(tag10);
        org.junit.Assert.assertNotNull(doctype12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Doctype" + "'", str13, "Doctype");
        org.junit.Assert.assertNotNull(tag16);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNull(document34);
        org.junit.Assert.assertNotNull(parseErrorList42);
        org.junit.Assert.assertNotNull(parseErrorStream43);
        org.junit.Assert.assertNotNull(parseErrorItor44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(parseErrorList51);
        org.junit.Assert.assertNotNull(parseErrorStream52);
        org.junit.Assert.assertNotNull(parseErrorList56);
        org.junit.Assert.assertNotNull(parseErrorStream57);
        org.junit.Assert.assertNotNull(parseErrorItor58);
        org.junit.Assert.assertNotNull(parseErrorItor59);
        org.junit.Assert.assertNull(tag61);
        org.junit.Assert.assertNull(doctype64);
        org.junit.Assert.assertNotNull(comment66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(document68);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\000');
        java.lang.String str4 = characterReader1.consumeHexSequence();
        char char5 = characterReader1.current();
        java.lang.String str6 = characterReader1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + 'S' + "'", char5 == 'S');
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "StartTag" + "'", str6, "StartTag");
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.CharacterReader characterReader3 = null;
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream6 = parseErrorList5.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList5.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList5.iterator();
        org.jsoup.parser.Tokeniser tokeniser9 = new org.jsoup.parser.Tokeniser(characterReader3, parseErrorList5);
        org.jsoup.parser.Token.Tag tag10 = tokeniser9.tagPending;
        org.jsoup.parser.Token.Tag tag12 = tokeniser9.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype13 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype14 = doctype13.asDoctype();
        java.lang.String str15 = doctype13.tokenType();
        tokeniser9.emit((org.jsoup.parser.Token) doctype13);
        boolean boolean17 = tag1.equals((java.lang.Object) doctype13);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder18 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        org.jsoup.parser.Token.Tag tag28 = tokeniser25.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype29 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype30 = doctype29.asDoctype();
        java.lang.String str31 = doctype29.tokenType();
        tokeniser25.emit((org.jsoup.parser.Token) doctype29);
        org.jsoup.parser.Token.Tag tag34 = tokeniser25.createTagPending(true);
        xmlTreeBuilder18.currentToken = tag34;
        boolean boolean36 = tag1.equals((java.lang.Object) tag34);
        tag34.finaliseTag();
        tag34.appendTagName("<hi!>");
        boolean boolean40 = tag34.selfClosing;
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorStream6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNull(tag10);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertNotNull(doctype14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Doctype" + "'", str15, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(doctype30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Doctype" + "'", str31, "Doctype");
        org.junit.Assert.assertNotNull(tag34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype12 = new org.jsoup.parser.Token.Doctype();
        java.lang.StringBuilder stringBuilder13 = doctype12.systemIdentifier;
        java.lang.String str14 = doctype12.getSystemIdentifier();
        java.lang.String str15 = doctype12.getName();
        tokeniser6.doctypePending = doctype12;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNotNull(stringBuilder13);
        org.junit.Assert.assertEquals(stringBuilder13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList((int) (byte) 0, (int) (byte) 0);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.Token.Tag tag10 = tokeniser7.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype11 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype12 = doctype11.asDoctype();
        java.lang.String str13 = doctype11.tokenType();
        tokeniser7.emit((org.jsoup.parser.Token) doctype11);
        org.jsoup.parser.Token.Tag tag16 = tokeniser7.createTagPending(true);
        xmlTreeBuilder0.currentToken = tag16;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        xmlTreeBuilder0.doc = document28;
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream35 = parseErrorList34.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor36 = parseErrorList34.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor37 = parseErrorList34.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int40 = parseErrorList39.getMaxSize();
        boolean boolean41 = parseErrorList34.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList39);
        xmlTreeBuilder0.initialiseParse("hi!#", "0: []", parseErrorList39);
        org.jsoup.parser.Token.Comment comment43 = new org.jsoup.parser.Token.Comment();
        java.lang.String str44 = comment43.getData();
        xmlTreeBuilder0.insert(comment43);
        java.lang.String str46 = comment43.getData();
        comment43.bogus = true;
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(tag10);
        org.junit.Assert.assertNotNull(doctype12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Doctype" + "'", str13, "Doctype");
        org.junit.Assert.assertNotNull(tag16);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(parseErrorStream35);
        org.junit.Assert.assertNotNull(parseErrorItor36);
        org.junit.Assert.assertNotNull(parseErrorItor37);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        boolean boolean5 = tokenQueue1.matchChomp("<!---->");
        char char6 = tokenQueue1.peek();
        boolean boolean7 = tokenQueue1.isEmpty();
        boolean boolean9 = tokenQueue1.matchChomp("<!---->");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + 'E' + "'", char6 == 'E');
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        boolean boolean19 = doctype18.isCharacter();
        boolean boolean20 = doctype18.isEndTag();
        htmlTreeBuilder0.currentToken = doctype18;
        org.jsoup.nodes.Element element22 = htmlTreeBuilder0.pop();
        htmlTreeBuilder0.framesetOk(false);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(element22);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        boolean boolean13 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag15 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement17 = htmlTreeBuilder0.insertForm(startTag15, true);
        boolean boolean18 = startTag15.isDoctype();
        java.lang.String str19 = startTag15.tokenType();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(formElement17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "StartTag" + "'", str19, "StartTag");
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int2 = parseErrorList1.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        org.jsoup.parser.ParseError[] parseErrorArray6 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList7 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7, parseErrorArray6);
        boolean boolean9 = parseErrorList4.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList7.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        parseErrorList11.clear();
        boolean boolean15 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList1.iterator();
        org.jsoup.parser.CharacterReader characterReader17 = null;
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream20 = parseErrorList19.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList19.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor22 = parseErrorList19.iterator();
        org.jsoup.parser.Tokeniser tokeniser23 = new org.jsoup.parser.Tokeniser(characterReader17, parseErrorList19);
        tokeniser23.createTempBuffer();
        boolean boolean25 = parseErrorList1.contains((java.lang.Object) tokeniser23);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray28 = tokeniser23.consumeCharacterReference((java.lang.Character) ' ', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(parseErrorArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertNotNull(parseErrorStream20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorItor22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.Comment comment12 = new org.jsoup.parser.Token.Comment();
        java.lang.String str13 = comment12.toString();
        boolean boolean14 = comment12.isCharacter();
        htmlTreeBuilder0.insert(comment12);
        org.jsoup.parser.Parser parser16 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.nodes.Element element18 = htmlTreeBuilder0.insert("StartTag");
        htmlTreeBuilder0.generateImpliedEndTags();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<!---->" + "'", str13, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(element18);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.isEmpty();
        org.jsoup.parser.Tag tag6 = tag1.setSelfClosing();
        org.jsoup.parser.Tag tag7 = tag6.setSelfClosing();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(tag6);
        org.junit.Assert.assertNotNull(tag7);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        boolean boolean12 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList10.parallelStream();
        java.lang.Object[] objArray14 = parseErrorList10.toArray();
        boolean boolean15 = parseErrorList10.isEmpty();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.newPendingTableCharacters();
        boolean boolean9 = htmlTreeBuilder0.inTableScope("");
        org.jsoup.parser.Token token10 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList12.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        boolean boolean19 = parseErrorList12.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17);
        org.jsoup.parser.ParseError[] parseErrorArray20 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList21 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21, parseErrorArray20);
        org.jsoup.parser.ParseError[] parseErrorArray23 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList24 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24, parseErrorArray23);
        boolean boolean26 = parseErrorList21.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
        boolean boolean27 = parseErrorList12.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        org.jsoup.parser.ParseError[] parseErrorArray28 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList29 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList29, parseErrorArray28);
        org.jsoup.parser.ParseError[] parseErrorArray31 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList32 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32, parseErrorArray31);
        boolean boolean34 = parseErrorList29.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList32.listIterator();
        parseErrorList32.trimToSize();
        boolean boolean37 = parseErrorList12.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder38 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList42 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int43 = parseErrorList42.getMaxSize();
        org.jsoup.nodes.Document document44 = htmlTreeBuilder38.parse("0: Doctype", "hi!", parseErrorList42);
        htmlTreeBuilder38.resetInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder46 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int51 = parseErrorList50.getMaxSize();
        org.jsoup.nodes.Document document52 = htmlTreeBuilder46.parse("0: Doctype", "hi!", parseErrorList50);
        boolean boolean53 = htmlTreeBuilder46.framesetOk();
        org.jsoup.nodes.Document document56 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder46.setHeadElement((org.jsoup.nodes.Element) document56);
        org.jsoup.nodes.Document document60 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder46.setHeadElement((org.jsoup.nodes.Element) document60);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder63 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList67 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int68 = parseErrorList67.getMaxSize();
        org.jsoup.nodes.Document document69 = htmlTreeBuilder63.parse("0: Doctype", "hi!", parseErrorList67);
        org.jsoup.parser.ParseErrorList parseErrorList73 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream74 = parseErrorList73.stream();
        boolean boolean75 = parseErrorList73.canAddError();
        org.jsoup.nodes.Document document76 = htmlTreeBuilder63.parse("EndTag", "hi!#", parseErrorList73);
        java.lang.String[] strArray84 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean85 = htmlTreeBuilder63.inScope("hi!#", strArray84);
        boolean boolean86 = htmlTreeBuilder46.inScope("hi!#", strArray84);
        htmlTreeBuilder38.popStackToClose(strArray84);
        int int88 = parseErrorList32.indexOf((java.lang.Object) htmlTreeBuilder38);
        org.jsoup.nodes.Element element90 = htmlTreeBuilder38.insert("hi!");
        htmlTreeBuilder0.setHeadElement(element90);
        org.jsoup.parser.Parser parser92 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(token10);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(parseErrorArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(parseErrorArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parseErrorArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(parseErrorList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(document56);
        org.junit.Assert.assertNotNull(document60);
        org.junit.Assert.assertNotNull(parseErrorList67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(document69);
        org.junit.Assert.assertNotNull(parseErrorList73);
        org.junit.Assert.assertNotNull(parseErrorStream74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(document76);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(element90);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        org.jsoup.nodes.FormElement formElement11 = htmlTreeBuilder3.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.parser.Parser parser20 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser22 = parser20.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document25 = parser20.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document28 = parser20.parseInput("<hi!>", "[]");
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document28);
        boolean boolean30 = htmlTreeBuilder12.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder31 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList38.iterator();
        boolean boolean41 = parseErrorList36.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        xmlTreeBuilder31.initialiseParse("<!---->", "hi!", parseErrorList36);
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document47 = xmlTreeBuilder31.parse("", "[]", parseErrorList46);
        boolean boolean48 = htmlTreeBuilder12.isInActiveFormattingElements((org.jsoup.nodes.Element) document47);
        boolean boolean49 = htmlTreeBuilder3.isInActiveFormattingElements((org.jsoup.nodes.Element) document47);
        java.util.List<org.jsoup.parser.Token.Character> characterList50 = htmlTreeBuilder3.getPendingTableCharacters();
        org.jsoup.nodes.FormElement formElement51 = htmlTreeBuilder3.getFormElement();
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(formElement11);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parser20);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(characterList50);
        org.junit.Assert.assertNull(formElement51);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.nodes.Element element38 = htmlTreeBuilder0.insert("<!---->");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder39 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int44 = parseErrorList43.getMaxSize();
        org.jsoup.nodes.Document document45 = htmlTreeBuilder39.parse("0: Doctype", "hi!", parseErrorList43);
        boolean boolean46 = htmlTreeBuilder39.framesetOk();
        org.jsoup.parser.Parser parser47 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser49 = parser47.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document52 = parser47.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document55 = parser47.parseInput("<hi!>", "[]");
        htmlTreeBuilder39.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document55);
        java.lang.String[] strArray57 = new java.lang.String[] {};
        boolean boolean58 = htmlTreeBuilder39.inScope(strArray57);
        htmlTreeBuilder39.markInsertionMode();
        boolean boolean61 = htmlTreeBuilder39.inScope("StartTag");
        org.jsoup.parser.Parser parser62 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder39);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList63 = htmlTreeBuilder39.stack;
        htmlTreeBuilder0.stack = elementList63;
        boolean boolean66 = htmlTreeBuilder0.inSelectScope("0: []");
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        htmlTreeBuilder0.generateImpliedEndTags();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(element38);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(parser47);
        org.junit.Assert.assertNotNull(parser49);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(elementList63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes1 = startTag0.getAttributes();
        org.jsoup.parser.TokenQueue tokenQueue3 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean4 = tokenQueue3.isEmpty();
        java.lang.String str6 = tokenQueue3.consumeToIgnoreCase("<hi!>");
        java.lang.String str7 = tokenQueue3.consumeTagName();
        boolean boolean8 = tokenQueue3.matchesWord();
        boolean boolean10 = tokenQueue3.matchesCS("StartTag");
        java.lang.String str13 = tokenQueue3.chompBalanced('E', '#');
        org.jsoup.parser.CharacterReader characterReader14 = null;
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList16.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList16.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList16.iterator();
        org.jsoup.parser.Tokeniser tokeniser20 = new org.jsoup.parser.Tokeniser(characterReader14, parseErrorList16);
        org.jsoup.parser.Token.EndTag endTag21 = new org.jsoup.parser.Token.EndTag();
        char[] charArray24 = new char[] { '#', '#' };
        endTag21.appendAttributeValue(charArray24);
        endTag21.appendAttributeValue(' ');
        char[] charArray29 = new char[] { '4' };
        endTag21.appendAttributeValue(charArray29);
        tokeniser20.emit(charArray29);
        boolean boolean32 = tokenQueue3.matchesAny(charArray29);
        startTag0.appendAttributeValue(charArray29);
        startTag0.newAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = startTag0.name();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(attributes1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "EndTag" + "'", str6, "EndTag");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#, #]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[4]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        boolean boolean9 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList7);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        boolean boolean14 = parseErrorList12.canAddError();
        boolean boolean15 = parseErrorList7.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        boolean boolean16 = parseErrorList7.canAddError();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder17 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = new org.jsoup.parser.ParseErrorList(0, (int) (byte) 0);
        htmlTreeBuilder17.initialiseParse("<hi!>", "hi!#", parseErrorList22);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList22.listIterator();
        boolean boolean25 = parseErrorList7.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList22);
        parseErrorList22.clear();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.newPendingTableCharacters();
        boolean boolean9 = htmlTreeBuilder0.inTableScope("");
        org.jsoup.parser.Token token10 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList12.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        boolean boolean19 = parseErrorList12.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17);
        org.jsoup.parser.ParseError[] parseErrorArray20 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList21 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21, parseErrorArray20);
        org.jsoup.parser.ParseError[] parseErrorArray23 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList24 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24, parseErrorArray23);
        boolean boolean26 = parseErrorList21.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
        boolean boolean27 = parseErrorList12.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        org.jsoup.parser.ParseError[] parseErrorArray28 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList29 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList29, parseErrorArray28);
        org.jsoup.parser.ParseError[] parseErrorArray31 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList32 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32, parseErrorArray31);
        boolean boolean34 = parseErrorList29.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList32.listIterator();
        parseErrorList32.trimToSize();
        boolean boolean37 = parseErrorList12.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder38 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList42 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int43 = parseErrorList42.getMaxSize();
        org.jsoup.nodes.Document document44 = htmlTreeBuilder38.parse("0: Doctype", "hi!", parseErrorList42);
        htmlTreeBuilder38.resetInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder46 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int51 = parseErrorList50.getMaxSize();
        org.jsoup.nodes.Document document52 = htmlTreeBuilder46.parse("0: Doctype", "hi!", parseErrorList50);
        boolean boolean53 = htmlTreeBuilder46.framesetOk();
        org.jsoup.nodes.Document document56 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder46.setHeadElement((org.jsoup.nodes.Element) document56);
        org.jsoup.nodes.Document document60 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder46.setHeadElement((org.jsoup.nodes.Element) document60);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder63 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList67 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int68 = parseErrorList67.getMaxSize();
        org.jsoup.nodes.Document document69 = htmlTreeBuilder63.parse("0: Doctype", "hi!", parseErrorList67);
        org.jsoup.parser.ParseErrorList parseErrorList73 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream74 = parseErrorList73.stream();
        boolean boolean75 = parseErrorList73.canAddError();
        org.jsoup.nodes.Document document76 = htmlTreeBuilder63.parse("EndTag", "hi!#", parseErrorList73);
        java.lang.String[] strArray84 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean85 = htmlTreeBuilder63.inScope("hi!#", strArray84);
        boolean boolean86 = htmlTreeBuilder46.inScope("hi!#", strArray84);
        htmlTreeBuilder38.popStackToClose(strArray84);
        int int88 = parseErrorList32.indexOf((java.lang.Object) htmlTreeBuilder38);
        org.jsoup.nodes.Element element90 = htmlTreeBuilder38.insert("hi!");
        htmlTreeBuilder0.setHeadElement(element90);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState92 = htmlTreeBuilder0.state();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(token10);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(parseErrorArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(parseErrorArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parseErrorArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(parseErrorList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(document56);
        org.junit.Assert.assertNotNull(document60);
        org.junit.Assert.assertNotNull(parseErrorList67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(document69);
        org.junit.Assert.assertNotNull(parseErrorList73);
        org.junit.Assert.assertNotNull(parseErrorStream74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(document76);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(element90);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState92);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder13.setHeadElement((org.jsoup.nodes.Element) document23);
        org.jsoup.nodes.Element element25 = htmlTreeBuilder13.pop();
        htmlTreeBuilder0.push(element25);
        htmlTreeBuilder0.resetInsertionMode();
        org.jsoup.nodes.Element element29 = htmlTreeBuilder0.getActiveFormattingElement(" EndTag");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNull(element29);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        int int8 = parseErrorList4.lastIndexOf((java.lang.Object) (byte) -1);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.noTracking();
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList4.parallelStream();
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState20 = org.jsoup.parser.MiniSoupTokeniserState.Data;
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState21 = org.jsoup.parser.MiniSoupTokeniserState.Data;
        org.jsoup.parser.MiniSoupTokeniserState[] miniSoupTokeniserStateArray22 = new org.jsoup.parser.MiniSoupTokeniserState[] { miniSoupTokeniserState20, miniSoupTokeniserState21 };
        org.jsoup.parser.MiniSoupTokeniserState[] miniSoupTokeniserStateArray23 = parseErrorList18.toArray(miniSoupTokeniserStateArray22);
        org.jsoup.parser.ParseError parseError24 = new org.jsoup.parser.ParseError(10, "", (java.lang.Object[]) miniSoupTokeniserStateArray22);
        org.jsoup.parser.ParseError parseError25 = new org.jsoup.parser.ParseError((int) (short) 10, "<Doctype>", (java.lang.Object[]) miniSoupTokeniserStateArray22);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError26 = parseErrorList4.set((int) ' ', parseError25);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(miniSoupTokeniserState20);
        org.junit.Assert.assertNotNull(miniSoupTokeniserState21);
        org.junit.Assert.assertNotNull(miniSoupTokeniserStateArray22);
        org.junit.Assert.assertNotNull(miniSoupTokeniserStateArray23);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.Token.StartTag startTag17 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType18 = startTag17.type;
        java.lang.String str19 = startTag17.toString();
        tokeniser6.emit((org.jsoup.parser.Token) startTag17);
        boolean boolean21 = startTag17.selfClosing;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + tokenType18 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType18.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<hi!>" + "'", str19, "<hi!>");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        char[] charArray3 = new char[] { '#', '#' };
        endTag0.appendAttributeValue(charArray3);
        endTag0.finaliseTag();
        boolean boolean6 = endTag0.isSelfClosing();
        boolean boolean7 = endTag0.isSelfClosing();
        org.jsoup.parser.Token.EndTag endTag8 = endTag0.asEndTag();
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(endTag8);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.markInsertionMode();
        htmlTreeBuilder0.clearStackToTableBodyContext();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        boolean boolean5 = tokenQueue1.matchChomp("<!---->");
        java.lang.String str6 = tokenQueue1.consumeTagName();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder7 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int12 = parseErrorList11.getMaxSize();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder7.parse("0: Doctype", "hi!", parseErrorList11);
        boolean boolean14 = htmlTreeBuilder7.framesetOk();
        org.jsoup.parser.Parser parser15 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser17 = parser15.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document20 = parser15.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document23 = parser15.parseInput("<hi!>", "[]");
        htmlTreeBuilder7.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document23);
        java.lang.String[] strArray25 = new java.lang.String[] {};
        boolean boolean26 = htmlTreeBuilder7.inScope(strArray25);
        htmlTreeBuilder7.framesetOk(false);
        htmlTreeBuilder7.insertMarkerToFormattingElements();
        org.jsoup.nodes.Element element30 = htmlTreeBuilder7.currentElement();
        htmlTreeBuilder7.clearStackToTableContext();
        org.jsoup.parser.Token token32 = htmlTreeBuilder7.currentToken;
        org.jsoup.parser.TokenQueue tokenQueue34 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean35 = tokenQueue34.isEmpty();
        boolean boolean36 = tokenQueue34.consumeWhitespace();
        java.lang.String str37 = tokenQueue34.consumeWord();
        boolean boolean38 = tokenQueue34.matchesWhitespace();
        java.lang.String[] strArray43 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str44 = tokenQueue34.consumeToAny(strArray43);
        boolean boolean45 = htmlTreeBuilder7.inScope(strArray43);
        java.lang.String str46 = tokenQueue1.consumeToAny(strArray43);
        java.lang.String str47 = tokenQueue1.remainder();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "EndTag" + "'", str6, "EndTag");
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parser15);
        org.junit.Assert.assertNotNull(parser17);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertNotNull(token32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "EndTag" + "'", str37, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        boolean boolean25 = parseErrorList18.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23);
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList23);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList23.iterator();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("[]", "Doctype", parseErrorList23);
        org.jsoup.parser.CharacterReader characterReader31 = null;
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream34 = parseErrorList33.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList33.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor36 = parseErrorList33.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int39 = parseErrorList38.getMaxSize();
        boolean boolean40 = parseErrorList33.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        org.jsoup.parser.Tokeniser tokeniser41 = new org.jsoup.parser.Tokeniser(characterReader31, parseErrorList38);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        boolean boolean45 = parseErrorList43.canAddError();
        boolean boolean46 = parseErrorList38.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        org.jsoup.nodes.Document document47 = htmlTreeBuilder0.parse("hi!", "<!---->", parseErrorList43);
        org.jsoup.parser.Tokeniser tokeniser48 = htmlTreeBuilder0.tokeniser;
        org.jsoup.nodes.Element element49 = htmlTreeBuilder0.pop();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertNotNull(parseErrorStream34);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNotNull(parseErrorItor36);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(tokeniser48);
        org.junit.Assert.assertNotNull(element49);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor29 = parseErrorList26.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        boolean boolean33 = parseErrorList26.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        xmlTreeBuilder3.initialiseParse("<!---->", "", parseErrorList26);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder35 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int40 = parseErrorList39.getMaxSize();
        org.jsoup.nodes.Document document41 = htmlTreeBuilder35.parse("0: Doctype", "hi!", parseErrorList39);
        htmlTreeBuilder35.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray44 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList45 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList45, characterArray44);
        htmlTreeBuilder35.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList45);
        boolean boolean48 = htmlTreeBuilder35.isFosterInserts();
        htmlTreeBuilder35.generateImpliedEndTags();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder50 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document51 = xmlTreeBuilder50.doc;
        org.jsoup.nodes.Document document52 = xmlTreeBuilder50.doc;
        java.lang.Object[] objArray53 = new java.lang.Object[] { htmlTreeBuilder35, xmlTreeBuilder50 };
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder54 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList58 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int59 = parseErrorList58.getMaxSize();
        org.jsoup.nodes.Document document60 = htmlTreeBuilder54.parse("0: Doctype", "hi!", parseErrorList58);
        htmlTreeBuilder54.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray63 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList64 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList64, characterArray63);
        htmlTreeBuilder54.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList64);
        boolean boolean67 = htmlTreeBuilder54.isFosterInserts();
        htmlTreeBuilder54.generateImpliedEndTags();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder69 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document70 = xmlTreeBuilder69.doc;
        org.jsoup.nodes.Document document71 = xmlTreeBuilder69.doc;
        java.lang.Object[] objArray72 = new java.lang.Object[] { htmlTreeBuilder54, xmlTreeBuilder69 };
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder73 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList77 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int78 = parseErrorList77.getMaxSize();
        org.jsoup.nodes.Document document79 = htmlTreeBuilder73.parse("0: Doctype", "hi!", parseErrorList77);
        htmlTreeBuilder73.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray82 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList83 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList83, characterArray82);
        htmlTreeBuilder73.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList83);
        boolean boolean86 = htmlTreeBuilder73.isFosterInserts();
        htmlTreeBuilder73.generateImpliedEndTags();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder88 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document89 = xmlTreeBuilder88.doc;
        org.jsoup.nodes.Document document90 = xmlTreeBuilder88.doc;
        java.lang.Object[] objArray91 = new java.lang.Object[] { htmlTreeBuilder73, xmlTreeBuilder88 };
        java.lang.Object[][] objArray92 = new java.lang.Object[][] { objArray53, objArray72, objArray91 };
        java.lang.Object[][] objArray93 = parseErrorList26.toArray(objArray92);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream94 = parseErrorList26.parallelStream();
        parseErrorList26.ensureCapacity((int) (byte) 1);
        boolean boolean97 = parseErrorList26.canAddError();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertNotNull(parseErrorItor29);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(characterArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(document51);
        org.junit.Assert.assertNull(document52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(parseErrorList58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(document60);
        org.junit.Assert.assertNotNull(characterArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(document70);
        org.junit.Assert.assertNull(document71);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertNotNull(parseErrorList77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(document79);
        org.junit.Assert.assertNotNull(characterArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(document89);
        org.junit.Assert.assertNull(document90);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertNotNull(parseErrorStream94);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        startTag0.appendAttributeValue("hi!");
        boolean boolean3 = startTag0.selfClosing;
        org.jsoup.parser.Token.StartTag startTag4 = new org.jsoup.parser.Token.StartTag();
        startTag4.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag7 = startTag4.asStartTag();
        org.jsoup.parser.Token.Tag tag9 = startTag7.name("");
        startTag7.selfClosing = false;
        org.jsoup.nodes.Attributes attributes12 = startTag7.getAttributes();
        startTag0.attributes = attributes12;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(startTag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(attributes12);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList4.stream();
        org.jsoup.parser.Token.EndTag endTag17 = new org.jsoup.parser.Token.EndTag();
        char[] charArray20 = new char[] { '#', '#' };
        endTag17.appendAttributeValue(charArray20);
        endTag17.finaliseTag();
        boolean boolean23 = endTag17.isSelfClosing();
        org.jsoup.parser.Tag tag25 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean26 = tag25.isFormListed();
        org.jsoup.parser.Tag tag27 = tag25.setSelfClosing();
        boolean boolean28 = tag25.isKnownTag();
        java.lang.Object[] objArray30 = new java.lang.Object[] { boolean23, tag25, "Doctype" };
        org.jsoup.parser.ParseError parseError31 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray30);
        org.jsoup.parser.ParseError parseError32 = new org.jsoup.parser.ParseError((int) (byte) 0, "Doctype", objArray30);
        parseErrorList4.add((int) (short) 0, parseError32);
        parseErrorList4.clear();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder35 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int40 = parseErrorList39.getMaxSize();
        org.jsoup.nodes.Document document41 = htmlTreeBuilder35.parse("0: Doctype", "hi!", parseErrorList39);
        htmlTreeBuilder35.generateImpliedEndTags("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder44 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList48 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int49 = parseErrorList48.getMaxSize();
        org.jsoup.nodes.Document document50 = htmlTreeBuilder44.parse("0: Doctype", "hi!", parseErrorList48);
        boolean boolean51 = htmlTreeBuilder44.framesetOk();
        org.jsoup.nodes.Document document54 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder44.setHeadElement((org.jsoup.nodes.Element) document54);
        org.jsoup.nodes.Document document58 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder44.setHeadElement((org.jsoup.nodes.Element) document58);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder61 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList65 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int66 = parseErrorList65.getMaxSize();
        org.jsoup.nodes.Document document67 = htmlTreeBuilder61.parse("0: Doctype", "hi!", parseErrorList65);
        org.jsoup.parser.ParseErrorList parseErrorList71 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream72 = parseErrorList71.stream();
        boolean boolean73 = parseErrorList71.canAddError();
        org.jsoup.nodes.Document document74 = htmlTreeBuilder61.parse("EndTag", "hi!#", parseErrorList71);
        java.lang.String[] strArray82 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean83 = htmlTreeBuilder61.inScope("hi!#", strArray82);
        boolean boolean84 = htmlTreeBuilder44.inScope("hi!#", strArray82);
        htmlTreeBuilder35.popStackToClose(strArray82);
        org.jsoup.nodes.Element element87 = htmlTreeBuilder35.getActiveFormattingElement("<Doctype>");
        org.jsoup.parser.Token.StartTag startTag89 = new org.jsoup.parser.Token.StartTag("hi!");
        boolean boolean90 = startTag89.isCharacter();
        startTag89.selfClosing = false;
        org.jsoup.parser.Token.StartTag startTag93 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes94 = startTag93.getAttributes();
        startTag89.attributes = attributes94;
        java.lang.String str96 = startTag89.tokenType();
        org.jsoup.nodes.Element element97 = htmlTreeBuilder35.insert(startTag89);
        int int98 = parseErrorList4.indexOf((java.lang.Object) htmlTreeBuilder35);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(tag25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(tag27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[false, hi!, Doctype]");
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(parseErrorList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(document54);
        org.junit.Assert.assertNotNull(document58);
        org.junit.Assert.assertNotNull(parseErrorList65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(document67);
        org.junit.Assert.assertNotNull(parseErrorList71);
        org.junit.Assert.assertNotNull(parseErrorStream72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(document74);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(element87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(attributes94);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "StartTag" + "'", str96, "StartTag");
        org.junit.Assert.assertNotNull(element97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        htmlTreeBuilder0.markInsertionMode();
        htmlTreeBuilder0.framesetOk(true);
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState4 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader5 = null;
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor10 = parseErrorList7.iterator();
        org.jsoup.parser.Tokeniser tokeniser11 = new org.jsoup.parser.Tokeniser(characterReader5, parseErrorList7);
        org.jsoup.parser.Token.Tag tag12 = tokeniser11.tagPending;
        java.lang.StringBuilder stringBuilder13 = null;
        tokeniser11.dataBuffer = stringBuilder13;
        org.jsoup.parser.Token.EndTag endTag15 = new org.jsoup.parser.Token.EndTag();
        char[] charArray18 = new char[] { '#', '#' };
        endTag15.appendAttributeValue(charArray18);
        tokeniser11.emit(charArray18);
        org.jsoup.parser.Token.Comment comment21 = tokeniser11.commentPending;
        org.jsoup.parser.CharacterReader characterReader23 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean24 = characterReader23.matchesLetter();
        miniSoupTokeniserState4.read(tokeniser11, characterReader23);
        htmlTreeBuilder0.tokeniser = tokeniser11;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder27 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader28 = null;
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream31 = parseErrorList30.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList30.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor33 = parseErrorList30.iterator();
        org.jsoup.parser.Tokeniser tokeniser34 = new org.jsoup.parser.Tokeniser(characterReader28, parseErrorList30);
        org.jsoup.parser.Token.Tag tag35 = tokeniser34.tagPending;
        org.jsoup.parser.Token.Tag tag37 = tokeniser34.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype38 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype39 = doctype38.asDoctype();
        java.lang.String str40 = doctype38.tokenType();
        tokeniser34.emit((org.jsoup.parser.Token) doctype38);
        org.jsoup.parser.Token.Tag tag43 = tokeniser34.createTagPending(true);
        xmlTreeBuilder27.currentToken = tag43;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder45 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int50 = parseErrorList49.getMaxSize();
        org.jsoup.nodes.Document document51 = htmlTreeBuilder45.parse("0: Doctype", "hi!", parseErrorList49);
        boolean boolean52 = htmlTreeBuilder45.framesetOk();
        org.jsoup.nodes.Document document55 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder45.setHeadElement((org.jsoup.nodes.Element) document55);
        xmlTreeBuilder27.doc = document55;
        org.jsoup.parser.ParseErrorList parseErrorList61 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream62 = parseErrorList61.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor63 = parseErrorList61.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor64 = parseErrorList61.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList66 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int67 = parseErrorList66.getMaxSize();
        boolean boolean68 = parseErrorList61.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList66);
        xmlTreeBuilder27.initialiseParse("hi!#", "0: []", parseErrorList66);
        org.jsoup.parser.Token.Comment comment70 = new org.jsoup.parser.Token.Comment();
        java.lang.String str71 = comment70.getData();
        xmlTreeBuilder27.insert(comment70);
        java.lang.StringBuilder stringBuilder73 = comment70.data;
        tokeniser11.emit((org.jsoup.parser.Token) comment70);
        java.lang.StringBuilder stringBuilder75 = comment70.data;
        org.junit.Assert.assertNotNull(miniSoupTokeniserState4);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertNotNull(parseErrorItor10);
        org.junit.Assert.assertNull(tag12);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#, #]");
        org.junit.Assert.assertNull(comment21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorStream31);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertNotNull(parseErrorItor33);
        org.junit.Assert.assertNull(tag35);
        org.junit.Assert.assertNotNull(tag37);
        org.junit.Assert.assertNotNull(doctype39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Doctype" + "'", str40, "Doctype");
        org.junit.Assert.assertNotNull(tag43);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(document51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNotNull(parseErrorList61);
        org.junit.Assert.assertNotNull(parseErrorStream62);
        org.junit.Assert.assertNotNull(parseErrorItor63);
        org.junit.Assert.assertNotNull(parseErrorItor64);
        org.junit.Assert.assertNotNull(parseErrorList66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(stringBuilder73);
        org.junit.Assert.assertEquals(stringBuilder73.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder75);
        org.junit.Assert.assertEquals(stringBuilder75.toString(), "");
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader2 = new org.jsoup.parser.CharacterReader("StartTag");
        int int4 = characterReader2.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean5 = characterReader2.matchesDigit();
        java.lang.String str6 = characterReader2.toString();
        xmlTreeBuilder0.reader = characterReader2;
        java.lang.String str9 = characterReader2.consumeTo('\uffff');
        characterReader2.rewindToMark();
        java.lang.String str11 = characterReader2.consumeAsString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "StartTag" + "'", str6, "StartTag");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "StartTag" + "'", str9, "StartTag");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "S" + "'", str11, "S");
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.Token.Tag tag10 = tokeniser7.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype11 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype12 = doctype11.asDoctype();
        java.lang.String str13 = doctype11.tokenType();
        tokeniser7.emit((org.jsoup.parser.Token) doctype11);
        org.jsoup.parser.Token.Tag tag16 = tokeniser7.createTagPending(true);
        xmlTreeBuilder0.currentToken = tag16;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        xmlTreeBuilder0.doc = document28;
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream35 = parseErrorList34.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor36 = parseErrorList34.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor37 = parseErrorList34.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int40 = parseErrorList39.getMaxSize();
        boolean boolean41 = parseErrorList34.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList39);
        xmlTreeBuilder0.initialiseParse("hi!#", "0: []", parseErrorList39);
        org.jsoup.parser.ParseErrorList parseErrorList43 = xmlTreeBuilder0.errors;
        parseErrorList43.ensureCapacity((int) ' ');
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(tag10);
        org.junit.Assert.assertNotNull(doctype12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Doctype" + "'", str13, "Doctype");
        org.junit.Assert.assertNotNull(tag16);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(parseErrorStream35);
        org.junit.Assert.assertNotNull(parseErrorItor36);
        org.junit.Assert.assertNotNull(parseErrorItor37);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList1.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int7 = parseErrorList6.getMaxSize();
        boolean boolean8 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList6);
        org.jsoup.parser.TokeniserState tokeniserState9 = org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted;
        int int10 = parseErrorList1.lastIndexOf((java.lang.Object) tokeniserState9);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.listIterator();
        parseErrorList12.clear();
        int int16 = parseErrorList1.indexOf((java.lang.Object) parseErrorList12);
        parseErrorList12.trimToSize();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder18 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        org.jsoup.parser.Token.Tag tag28 = tokeniser25.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype29 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype30 = doctype29.asDoctype();
        java.lang.String str31 = doctype29.tokenType();
        tokeniser25.emit((org.jsoup.parser.Token) doctype29);
        org.jsoup.parser.Token.Tag tag34 = tokeniser25.createTagPending(true);
        xmlTreeBuilder18.currentToken = tag34;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder36 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int41 = parseErrorList40.getMaxSize();
        org.jsoup.nodes.Document document42 = htmlTreeBuilder36.parse("0: Doctype", "hi!", parseErrorList40);
        boolean boolean43 = htmlTreeBuilder36.framesetOk();
        org.jsoup.nodes.Document document46 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder36.setHeadElement((org.jsoup.nodes.Element) document46);
        xmlTreeBuilder18.doc = document46;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder51 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document52 = xmlTreeBuilder51.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder53 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList58 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList60 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream61 = parseErrorList60.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor62 = parseErrorList60.iterator();
        boolean boolean63 = parseErrorList58.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList60);
        xmlTreeBuilder53.initialiseParse("<!---->", "hi!", parseErrorList58);
        xmlTreeBuilder51.errors = parseErrorList58;
        org.jsoup.parser.ParseErrorList parseErrorList69 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream70 = parseErrorList69.stream();
        xmlTreeBuilder51.initialiseParse("a", "[]", parseErrorList69);
        org.jsoup.parser.CharacterReader characterReader72 = null;
        org.jsoup.parser.ParseErrorList parseErrorList74 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream75 = parseErrorList74.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor76 = parseErrorList74.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor77 = parseErrorList74.iterator();
        org.jsoup.parser.Tokeniser tokeniser78 = new org.jsoup.parser.Tokeniser(characterReader72, parseErrorList74);
        org.jsoup.parser.Token.Tag tag79 = tokeniser78.tagPending;
        tokeniser78.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype82 = tokeniser78.doctypePending;
        tokeniser78.createCommentPending();
        org.jsoup.parser.Token.Comment comment84 = tokeniser78.commentPending;
        boolean boolean85 = parseErrorList69.remove((java.lang.Object) tokeniser78);
        org.jsoup.nodes.Document document86 = xmlTreeBuilder18.parse("<!---->", "[]", parseErrorList69);
        boolean boolean87 = parseErrorList12.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList69);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError89 = parseErrorList69.remove((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(tokeniserState9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(doctype30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Doctype" + "'", str31, "Doctype");
        org.junit.Assert.assertNotNull(tag34);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(document46);
        org.junit.Assert.assertNull(document52);
        org.junit.Assert.assertNotNull(parseErrorList60);
        org.junit.Assert.assertNotNull(parseErrorStream61);
        org.junit.Assert.assertNotNull(parseErrorItor62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(parseErrorList69);
        org.junit.Assert.assertNotNull(parseErrorStream70);
        org.junit.Assert.assertNotNull(parseErrorList74);
        org.junit.Assert.assertNotNull(parseErrorStream75);
        org.junit.Assert.assertNotNull(parseErrorItor76);
        org.junit.Assert.assertNotNull(parseErrorItor77);
        org.junit.Assert.assertNull(tag79);
        org.junit.Assert.assertNull(doctype82);
        org.junit.Assert.assertNotNull(comment84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(document86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.isInline();
        org.jsoup.parser.Tag tag6 = tag1.setSelfClosing();
        org.jsoup.parser.Tag tag7 = tag6.setSelfClosing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder8 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader9 = null;
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream12 = parseErrorList11.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor13 = parseErrorList11.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList11.iterator();
        org.jsoup.parser.Tokeniser tokeniser15 = new org.jsoup.parser.Tokeniser(characterReader9, parseErrorList11);
        org.jsoup.parser.Token.Tag tag16 = tokeniser15.tagPending;
        org.jsoup.parser.Token.Tag tag18 = tokeniser15.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype19 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype20 = doctype19.asDoctype();
        java.lang.String str21 = doctype19.tokenType();
        tokeniser15.emit((org.jsoup.parser.Token) doctype19);
        org.jsoup.parser.Token.Tag tag24 = tokeniser15.createTagPending(true);
        xmlTreeBuilder8.currentToken = tag24;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder26 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int31 = parseErrorList30.getMaxSize();
        org.jsoup.nodes.Document document32 = htmlTreeBuilder26.parse("0: Doctype", "hi!", parseErrorList30);
        boolean boolean33 = htmlTreeBuilder26.framesetOk();
        org.jsoup.nodes.Document document36 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder26.setHeadElement((org.jsoup.nodes.Element) document36);
        xmlTreeBuilder8.doc = document36;
        org.jsoup.parser.ParseErrorList parseErrorList42 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream43 = parseErrorList42.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor44 = parseErrorList42.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor45 = parseErrorList42.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList47 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int48 = parseErrorList47.getMaxSize();
        boolean boolean49 = parseErrorList42.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList47);
        xmlTreeBuilder8.initialiseParse("hi!#", "0: []", parseErrorList47);
        parseErrorList47.clear();
        boolean boolean52 = tag7.equals((java.lang.Object) parseErrorList47);
        org.jsoup.parser.Token.EndTag endTag56 = new org.jsoup.parser.Token.EndTag();
        char[] charArray59 = new char[] { '#', '#' };
        endTag56.appendAttributeValue(charArray59);
        endTag56.finaliseTag();
        boolean boolean62 = endTag56.isSelfClosing();
        org.jsoup.parser.Tag tag64 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean65 = tag64.isFormListed();
        org.jsoup.parser.Tag tag66 = tag64.setSelfClosing();
        boolean boolean67 = tag64.isKnownTag();
        java.lang.Object[] objArray69 = new java.lang.Object[] { boolean62, tag64, "Doctype" };
        org.jsoup.parser.ParseError parseError70 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray69);
        int int71 = parseError70.getPosition();
        int int72 = parseError70.getPosition();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError73 = parseErrorList47.set(0, parseError70);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(tag6);
        org.junit.Assert.assertNotNull(tag7);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertNotNull(parseErrorStream12);
        org.junit.Assert.assertNotNull(parseErrorItor13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertNull(tag16);
        org.junit.Assert.assertNotNull(tag18);
        org.junit.Assert.assertNotNull(doctype20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Doctype" + "'", str21, "Doctype");
        org.junit.Assert.assertNotNull(tag24);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNotNull(parseErrorList42);
        org.junit.Assert.assertNotNull(parseErrorStream43);
        org.junit.Assert.assertNotNull(parseErrorItor44);
        org.junit.Assert.assertNotNull(parseErrorItor45);
        org.junit.Assert.assertNotNull(parseErrorList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(tag64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(tag66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.jsoup.parser.Tag tag2 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean3 = tag2.isFormListed();
        org.jsoup.parser.CharacterReader characterReader4 = null;
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream7 = parseErrorList6.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList6.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList6.iterator();
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader4, parseErrorList6);
        org.jsoup.parser.Token.Tag tag11 = tokeniser10.tagPending;
        org.jsoup.parser.Token.Tag tag13 = tokeniser10.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype14 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype15 = doctype14.asDoctype();
        java.lang.String str16 = doctype14.tokenType();
        tokeniser10.emit((org.jsoup.parser.Token) doctype14);
        boolean boolean18 = tag2.equals((java.lang.Object) doctype14);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader20 = null;
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream23 = parseErrorList22.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList22.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList22.iterator();
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader20, parseErrorList22);
        org.jsoup.parser.Token.Tag tag27 = tokeniser26.tagPending;
        org.jsoup.parser.Token.Tag tag29 = tokeniser26.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype30 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype31 = doctype30.asDoctype();
        java.lang.String str32 = doctype30.tokenType();
        tokeniser26.emit((org.jsoup.parser.Token) doctype30);
        org.jsoup.parser.Token.Tag tag35 = tokeniser26.createTagPending(true);
        xmlTreeBuilder19.currentToken = tag35;
        boolean boolean37 = tag2.equals((java.lang.Object) tag35);
        tag35.finaliseTag();
        org.jsoup.nodes.Attributes attributes39 = tag35.attributes;
        org.jsoup.parser.Token.StartTag startTag40 = new org.jsoup.parser.Token.StartTag("", attributes39);
        boolean boolean41 = startTag40.isSelfClosing();
        org.junit.Assert.assertNotNull(tag2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertNotNull(parseErrorStream7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertNull(tag11);
        org.junit.Assert.assertNotNull(tag13);
        org.junit.Assert.assertNotNull(doctype15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Doctype" + "'", str16, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertNotNull(parseErrorStream23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNull(tag27);
        org.junit.Assert.assertNotNull(tag29);
        org.junit.Assert.assertNotNull(doctype31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Doctype" + "'", str32, "Doctype");
        org.junit.Assert.assertNotNull(tag35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(attributes39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("[]");
        boolean boolean3 = characterReader1.containsIgnoreCase("0: []");
        characterReader1.unconsume();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = characterReader1.matchesLetter();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        org.jsoup.nodes.FormElement formElement11 = htmlTreeBuilder3.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.parser.Parser parser20 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser22 = parser20.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document25 = parser20.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document28 = parser20.parseInput("<hi!>", "[]");
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document28);
        boolean boolean30 = htmlTreeBuilder12.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder31 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList38.iterator();
        boolean boolean41 = parseErrorList36.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        xmlTreeBuilder31.initialiseParse("<!---->", "hi!", parseErrorList36);
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document47 = xmlTreeBuilder31.parse("", "[]", parseErrorList46);
        boolean boolean48 = htmlTreeBuilder12.isInActiveFormattingElements((org.jsoup.nodes.Element) document47);
        boolean boolean49 = htmlTreeBuilder3.isInActiveFormattingElements((org.jsoup.nodes.Element) document47);
        java.util.List<org.jsoup.parser.Token.Character> characterList50 = htmlTreeBuilder3.getPendingTableCharacters();
        org.jsoup.parser.Tokeniser tokeniser51 = htmlTreeBuilder3.tokeniser;
        tokeniser51.emit('a');
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(formElement11);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parser20);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(characterList50);
        org.junit.Assert.assertNotNull(tokeniser51);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Element element13 = htmlTreeBuilder0.getActiveFormattingElement("");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder14 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int19 = parseErrorList18.getMaxSize();
        org.jsoup.nodes.Document document20 = htmlTreeBuilder14.parse("0: Doctype", "hi!", parseErrorList18);
        boolean boolean21 = htmlTreeBuilder14.framesetOk();
        org.jsoup.parser.Parser parser22 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser24 = parser22.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document27 = parser22.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document30 = parser22.parseInput("<hi!>", "[]");
        htmlTreeBuilder14.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document30);
        boolean boolean32 = htmlTreeBuilder14.isFragmentParsing();
        org.jsoup.parser.Parser parser33 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder14);
        org.jsoup.parser.CharacterReader characterReader34 = null;
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream37 = parseErrorList36.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor38 = parseErrorList36.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor39 = parseErrorList36.iterator();
        org.jsoup.parser.Tokeniser tokeniser40 = new org.jsoup.parser.Tokeniser(characterReader34, parseErrorList36);
        org.jsoup.parser.Token.Tag tag41 = tokeniser40.tagPending;
        tokeniser40.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag45 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType46 = startTag45.type;
        startTag45.appendTagName('#');
        tokeniser40.tagPending = startTag45;
        org.jsoup.parser.Token.StartTag startTag51 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType52 = startTag51.type;
        java.lang.String str53 = startTag51.toString();
        tokeniser40.emit((org.jsoup.parser.Token) startTag51);
        org.jsoup.nodes.FormElement formElement56 = htmlTreeBuilder14.insertForm(startTag51, true);
        org.jsoup.nodes.Document document59 = org.jsoup.parser.Parser.parseBodyFragment("", "hi!#");
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.replaceOnStack((org.jsoup.nodes.Element) formElement56, (org.jsoup.nodes.Element) document59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(element13);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(parser24);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertNotNull(parseErrorStream37);
        org.junit.Assert.assertNotNull(parseErrorItor38);
        org.junit.Assert.assertNotNull(parseErrorItor39);
        org.junit.Assert.assertNull(tag41);
        org.junit.Assert.assertTrue("'" + tokenType46 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType46.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + tokenType52 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType52.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "<hi!>" + "'", str53, "<hi!>");
        org.junit.Assert.assertNotNull(formElement56);
        org.junit.Assert.assertNotNull(document59);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        int int8 = parseErrorList4.size();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        htmlTreeBuilder9.newPendingTableCharacters();
        boolean boolean17 = parseErrorList4.equals((java.lang.Object) htmlTreeBuilder9);
        org.jsoup.nodes.Document document18 = htmlTreeBuilder9.getDocument();
        htmlTreeBuilder9.popStackToBefore("100: ");
        htmlTreeBuilder9.newPendingTableCharacters();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(document18);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        boolean boolean8 = parseErrorList1.isEmpty();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream9 = parseErrorList1.parallelStream();
        parseErrorList1.trimToSize();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parseErrorStream9);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        boolean boolean2 = startTag1.isCharacter();
        startTag1.selfClosing = false;
        org.jsoup.parser.Token.StartTag startTag5 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes6 = startTag5.getAttributes();
        startTag1.attributes = attributes6;
        org.jsoup.parser.Token.Tag tag9 = startTag1.name(" EndTag");
        boolean boolean10 = startTag1.isComment();
        org.jsoup.parser.Token.TokenType tokenType11 = startTag1.type;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(attributes6);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + tokenType11 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType11.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean4 = characterReader1.matchesDigit();
        java.lang.String str5 = characterReader1.consumeHexSequence();
        java.lang.String str6 = characterReader1.consumeAsString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "S" + "'", str6, "S");
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedLessthanSign;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        tokeniser7.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag12 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType13 = startTag12.type;
        startTag12.appendTagName('#');
        tokeniser7.tagPending = startTag12;
        org.jsoup.parser.TokeniserState tokeniserState17 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser7.transition((org.jsoup.parser.ITokeniserState) tokeniserState17);
        org.jsoup.parser.Token.Doctype doctype19 = new org.jsoup.parser.Token.Doctype();
        boolean boolean20 = doctype19.isCharacter();
        tokeniser7.doctypePending = doctype19;
        org.jsoup.parser.Token.Comment comment22 = new org.jsoup.parser.Token.Comment();
        java.lang.String str23 = comment22.toString();
        java.lang.StringBuilder stringBuilder24 = comment22.data;
        tokeniser7.commentPending = comment22;
        org.jsoup.parser.CharacterReader characterReader27 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean29 = characterReader27.matches('\000');
        characterReader27.mark();
        boolean boolean31 = characterReader27.isEmpty();
        org.jsoup.parser.TokenQueue tokenQueue33 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str35 = tokenQueue33.chompTo("Doctype");
        java.lang.String str36 = tokenQueue33.consumeWord();
        boolean boolean37 = tokenQueue33.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag38 = new org.jsoup.parser.Token.EndTag();
        char[] charArray41 = new char[] { '#', '#' };
        endTag38.appendAttributeValue(charArray41);
        boolean boolean43 = tokenQueue33.matchesAny(charArray41);
        boolean boolean44 = characterReader27.matchesAny(charArray41);
        tokeniserState0.read(tokeniser7, characterReader27);
        java.lang.String str46 = characterReader27.consumeAsString();
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertTrue("'" + tokenType13 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType13.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "<!---->" + "'", str23, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder24);
        org.junit.Assert.assertEquals(stringBuilder24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "EndTag" + "'", str35, "EndTag");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "S" + "'", str46, "S");
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        tokeniser6.createTempBuffer();
        tokeniser6.emitTagPending();
        org.jsoup.parser.Token.Tag tag12 = tokeniser6.tagPending;
        tag12.selfClosing = false;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(tag12);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        boolean boolean11 = doctype10.isCharacter();
        boolean boolean12 = doctype10.isEndTag();
        boolean boolean13 = doctype10.isCharacter();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        org.jsoup.parser.TokeniserState tokeniserState15 = org.jsoup.parser.TokeniserState.ScriptData;
        tokeniser6.eofError((org.jsoup.parser.ITokeniserState) tokeniserState15);
        org.jsoup.parser.Token.Doctype doctype17 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str18 = doctype17.getSystemIdentifier();
        org.jsoup.parser.Token.TokenType tokenType19 = doctype17.type;
        tokeniser6.doctypePending = doctype17;
        tokeniser6.createCommentPending();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(tokeniserState15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + tokenType19 + "' != '" + org.jsoup.parser.Token.TokenType.Doctype + "'", tokenType19.equals(org.jsoup.parser.Token.TokenType.Doctype));
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader2 = new org.jsoup.parser.CharacterReader("StartTag");
        int int4 = characterReader2.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean5 = characterReader2.matchesDigit();
        java.lang.String str6 = characterReader2.toString();
        xmlTreeBuilder0.reader = characterReader2;
        java.lang.String str8 = characterReader2.consumeHexSequence();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "StartTag" + "'", str6, "StartTag");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.Token.Tag tag10 = tokeniser7.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype11 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype12 = doctype11.asDoctype();
        java.lang.String str13 = doctype11.tokenType();
        tokeniser7.emit((org.jsoup.parser.Token) doctype11);
        org.jsoup.parser.Token.Tag tag16 = tokeniser7.createTagPending(true);
        xmlTreeBuilder0.currentToken = tag16;
        org.jsoup.parser.Token.Character character19 = new org.jsoup.parser.Token.Character("a");
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(character19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(tag10);
        org.junit.Assert.assertNotNull(doctype12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Doctype" + "'", str13, "Doctype");
        org.junit.Assert.assertNotNull(tag16);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        boolean boolean14 = doctype10.isForceQuirks();
        boolean boolean15 = doctype10.isComment();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag6 = new org.jsoup.parser.Token.EndTag();
        char[] charArray9 = new char[] { '#', '#' };
        endTag6.appendAttributeValue(charArray9);
        boolean boolean11 = tokenQueue1.matchesAny(charArray9);
        boolean boolean13 = tokenQueue1.matchesCS("<hi!>");
        // The following exception was thrown during execution in test generation
        try {
            char char14 = tokenQueue1.consume();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 6");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        parseErrorList21.trimToSize();
        int int24 = parseErrorList21.getMaxSize();
        int int25 = parseErrorList21.size();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        int int8 = parseErrorList4.size();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        htmlTreeBuilder9.newPendingTableCharacters();
        boolean boolean17 = parseErrorList4.equals((java.lang.Object) htmlTreeBuilder9);
        org.jsoup.nodes.Document document18 = htmlTreeBuilder9.getDocument();
        htmlTreeBuilder9.clearFormattingElementsToLastMarker();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int27 = parseErrorList26.getMaxSize();
        boolean boolean28 = parseErrorList21.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        org.jsoup.parser.TokeniserState tokeniserState29 = org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted;
        int int30 = parseErrorList21.lastIndexOf((java.lang.Object) tokeniserState29);
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream33 = parseErrorList32.stream();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor34 = parseErrorList32.listIterator();
        parseErrorList32.clear();
        int int36 = parseErrorList21.indexOf((java.lang.Object) parseErrorList32);
        int int37 = parseErrorList32.size();
        htmlTreeBuilder9.errors = parseErrorList32;
        java.lang.Class<?> wildcardClass39 = parseErrorList32.getClass();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(tokeniserState29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertNotNull(parseErrorStream33);
        org.junit.Assert.assertNotNull(parseErrorItor34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        java.lang.Object obj8 = parseErrorList4.clone();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList4.iterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList4.parallelStream();
        org.jsoup.parser.CharacterReader characterReader11 = null;
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList13.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int19 = parseErrorList18.getMaxSize();
        boolean boolean20 = parseErrorList13.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList18);
        org.jsoup.parser.Tokeniser tokeniser21 = new org.jsoup.parser.Tokeniser(characterReader11, parseErrorList18);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor22 = parseErrorList18.iterator();
        boolean boolean23 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "[]");
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(parseErrorItor22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType2 = startTag1.type;
        java.lang.String str3 = startTag1.toString();
        java.lang.String str4 = startTag1.name();
        org.junit.Assert.assertTrue("'" + tokenType2 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType2.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<hi!>" + "'", str3, "<hi!>");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.Tokeniser tokeniser9 = xmlTreeBuilder0.tokeniser;
        org.jsoup.parser.ITokeniserState iTokeniserState10 = tokeniser9.getState();
        java.lang.StringBuilder stringBuilder11 = tokeniser9.dataBuffer;
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(tokeniser9);
        org.junit.Assert.assertNotNull(iTokeniserState10);
        org.junit.Assert.assertNull(stringBuilder11);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.Token.EndTag endTag10 = new org.jsoup.parser.Token.EndTag("t");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = xmlTreeBuilder0.process((org.jsoup.parser.Token) endTag10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        htmlTreeBuilder3.baseUri = "</hi![]>";
        htmlTreeBuilder3.clearFormattingElementsToLastMarker();
        org.jsoup.parser.Token token14 = htmlTreeBuilder3.currentToken;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder15 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        org.jsoup.nodes.Document document21 = htmlTreeBuilder15.parse("0: Doctype", "hi!", parseErrorList19);
        boolean boolean22 = htmlTreeBuilder15.framesetOk();
        org.jsoup.parser.Parser parser23 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser25 = parser23.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document28 = parser23.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document31 = parser23.parseInput("<hi!>", "[]");
        htmlTreeBuilder15.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document31);
        java.lang.String[] strArray33 = new java.lang.String[] {};
        boolean boolean34 = htmlTreeBuilder15.inScope(strArray33);
        htmlTreeBuilder15.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder36 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int41 = parseErrorList40.getMaxSize();
        org.jsoup.nodes.Document document42 = htmlTreeBuilder36.parse("0: Doctype", "hi!", parseErrorList40);
        htmlTreeBuilder15.setHeadElement((org.jsoup.nodes.Element) document42);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder44 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList48 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int49 = parseErrorList48.getMaxSize();
        org.jsoup.nodes.Document document50 = htmlTreeBuilder44.parse("0: Doctype", "hi!", parseErrorList48);
        htmlTreeBuilder44.resetInsertionMode();
        org.jsoup.nodes.Element element52 = htmlTreeBuilder44.currentElement();
        boolean boolean54 = htmlTreeBuilder44.inButtonScope("-1: []");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState55 = htmlTreeBuilder44.state();
        htmlTreeBuilder15.error(htmlTreeBuilderState55);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder57 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList61 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int62 = parseErrorList61.getMaxSize();
        org.jsoup.nodes.Document document63 = htmlTreeBuilder57.parse("0: Doctype", "hi!", parseErrorList61);
        htmlTreeBuilder57.generateImpliedEndTags("hi!#");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder68 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document69 = xmlTreeBuilder68.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder70 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList75 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList77 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream78 = parseErrorList77.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor79 = parseErrorList77.iterator();
        boolean boolean80 = parseErrorList75.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList77);
        xmlTreeBuilder70.initialiseParse("<!---->", "hi!", parseErrorList75);
        xmlTreeBuilder68.errors = parseErrorList75;
        org.jsoup.nodes.Document document83 = htmlTreeBuilder57.parse("EndTag", "a", parseErrorList75);
        htmlTreeBuilder15.setHeadElement((org.jsoup.nodes.Element) document83);
        boolean boolean85 = htmlTreeBuilder3.isInActiveFormattingElements((org.jsoup.nodes.Element) document83);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(token14);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(parser23);
        org.junit.Assert.assertNotNull(parser25);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNotNull(parseErrorList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertNotNull(element52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState55);
        org.junit.Assert.assertNotNull(parseErrorList61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(document63);
        org.junit.Assert.assertNull(document69);
        org.junit.Assert.assertNotNull(parseErrorList77);
        org.junit.Assert.assertNotNull(parseErrorStream78);
        org.junit.Assert.assertNotNull(parseErrorItor79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(document83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        boolean boolean9 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList7);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        boolean boolean14 = parseErrorList12.canAddError();
        boolean boolean15 = parseErrorList7.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        boolean boolean16 = parseErrorList7.canAddError();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder17 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = new org.jsoup.parser.ParseErrorList(0, (int) (byte) 0);
        htmlTreeBuilder17.initialiseParse("<hi!>", "hi!#", parseErrorList22);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList22.listIterator();
        boolean boolean25 = parseErrorList7.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList22);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError27 = parseErrorList22.remove(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.CharacterReader characterReader16 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean18 = characterReader16.matches("[100: ]");
        htmlTreeBuilder0.reader = characterReader16;
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        org.jsoup.parser.CharacterReader characterReader22 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader22.advance();
        characterReader22.advance();
        java.lang.String str26 = characterReader22.consumeTo('E');
        htmlTreeBuilder0.reader = characterReader22;
        java.lang.String str28 = characterReader22.consumeDigitSequence();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "artTag" + "'", str26, "artTag");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking((int) (byte) 0);
        org.jsoup.parser.Token.EndTag endTag8 = new org.jsoup.parser.Token.EndTag();
        char[] charArray11 = new char[] { '#', '#' };
        endTag8.appendAttributeValue(charArray11);
        endTag8.finaliseTag();
        boolean boolean14 = endTag8.isSelfClosing();
        org.jsoup.parser.Tag tag16 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean17 = tag16.isFormListed();
        org.jsoup.parser.Tag tag18 = tag16.setSelfClosing();
        boolean boolean19 = tag16.isKnownTag();
        java.lang.Object[] objArray21 = new java.lang.Object[] { boolean14, tag16, "Doctype" };
        org.jsoup.parser.ParseError parseError22 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray21);
        org.jsoup.parser.ParseError parseError23 = new org.jsoup.parser.ParseError((int) (short) -1, "[]", objArray21);
        org.jsoup.parser.ParseError parseError24 = new org.jsoup.parser.ParseError((int) (byte) 10, "", objArray21);
        boolean boolean25 = parseErrorList1.add(parseError24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.parser.ParseError> parseErrorList28 = parseErrorList1.subList((int) (short) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: fromIndex = -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(tag16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(tag18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.Comment comment12 = new org.jsoup.parser.Token.Comment();
        java.lang.String str13 = comment12.toString();
        boolean boolean14 = comment12.isCharacter();
        htmlTreeBuilder0.insert(comment12);
        boolean boolean16 = comment12.isComment();
        java.lang.String str17 = comment12.toString();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<!---->" + "'", str13, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<!---->" + "'", str17, "<!---->");
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.isInline();
        org.jsoup.parser.Tag tag6 = tag1.setSelfClosing();
        boolean boolean7 = tag6.isInline();
        org.jsoup.parser.Token.Doctype doctype8 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype9 = doctype8.asDoctype();
        java.lang.String str10 = doctype8.getName();
        boolean boolean11 = tag6.equals((java.lang.Object) str10);
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(tag6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(doctype9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        boolean boolean8 = tokenQueue1.matchesCS("StartTag");
        java.lang.String str11 = tokenQueue1.chompBalanced('E', '#');
        tokenQueue1.addFirst((java.lang.Character) 'S');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.CharacterReader characterReader3 = null;
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream6 = parseErrorList5.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList5.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList5.iterator();
        org.jsoup.parser.Tokeniser tokeniser9 = new org.jsoup.parser.Tokeniser(characterReader3, parseErrorList5);
        org.jsoup.parser.Token.Tag tag10 = tokeniser9.tagPending;
        org.jsoup.parser.Token.Tag tag12 = tokeniser9.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype13 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype14 = doctype13.asDoctype();
        java.lang.String str15 = doctype13.tokenType();
        tokeniser9.emit((org.jsoup.parser.Token) doctype13);
        boolean boolean17 = tag1.equals((java.lang.Object) doctype13);
        boolean boolean18 = doctype13.isComment();
        java.lang.StringBuilder stringBuilder19 = doctype13.name;
        java.lang.String str20 = doctype13.getPublicIdentifier();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorStream6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNull(tag10);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertNotNull(doctype14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Doctype" + "'", str15, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(stringBuilder19);
        org.junit.Assert.assertEquals(stringBuilder19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.EndTagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        tokeniser7.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag12 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType13 = startTag12.type;
        startTag12.appendTagName('#');
        tokeniser7.tagPending = startTag12;
        org.jsoup.parser.TokeniserState tokeniserState17 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser7.transition((org.jsoup.parser.ITokeniserState) tokeniserState17);
        tokeniser7.createDoctypePending();
        org.jsoup.parser.CharacterReader characterReader21 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean23 = characterReader21.matches('\000');
        characterReader21.mark();
        boolean boolean25 = characterReader21.isEmpty();
        org.jsoup.parser.TokenQueue tokenQueue27 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str29 = tokenQueue27.chompTo("Doctype");
        java.lang.String str30 = tokenQueue27.consumeWord();
        boolean boolean31 = tokenQueue27.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag32 = new org.jsoup.parser.Token.EndTag();
        char[] charArray35 = new char[] { '#', '#' };
        endTag32.appendAttributeValue(charArray35);
        boolean boolean37 = tokenQueue27.matchesAny(charArray35);
        boolean boolean38 = characterReader21.matchesAny(charArray35);
        miniSoupTokeniserState0.read(tokeniser7, characterReader21);
        org.jsoup.parser.CharacterReader characterReader40 = null;
        org.jsoup.parser.ParseErrorList parseErrorList42 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream43 = parseErrorList42.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor44 = parseErrorList42.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor45 = parseErrorList42.iterator();
        org.jsoup.parser.Tokeniser tokeniser46 = new org.jsoup.parser.Tokeniser(characterReader40, parseErrorList42);
        org.jsoup.parser.Token.Tag tag47 = tokeniser46.tagPending;
        org.jsoup.parser.Token.Tag tag49 = tokeniser46.createTagPending(true);
        java.lang.StringBuilder stringBuilder50 = tokeniser46.dataBuffer;
        org.jsoup.parser.Token.EndTag endTag51 = new org.jsoup.parser.Token.EndTag();
        char[] charArray54 = new char[] { '#', '#' };
        endTag51.appendAttributeValue(charArray54);
        tokeniser46.emit(charArray54);
        tokeniser46.createDoctypePending();
        org.jsoup.parser.CharacterReader characterReader59 = new org.jsoup.parser.CharacterReader("\ufffd>");
        java.lang.String str60 = characterReader59.consumeLetterSequence();
        miniSoupTokeniserState0.read(tokeniser46, characterReader59);
        java.lang.String str62 = characterReader59.consumeAsString();
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertTrue("'" + tokenType13 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType13.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "EndTag" + "'", str29, "EndTag");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parseErrorList42);
        org.junit.Assert.assertNotNull(parseErrorStream43);
        org.junit.Assert.assertNotNull(parseErrorItor44);
        org.junit.Assert.assertNotNull(parseErrorItor45);
        org.junit.Assert.assertNull(tag47);
        org.junit.Assert.assertNotNull(tag49);
        org.junit.Assert.assertNull(stringBuilder50);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[#, #]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "<" + "'", str62, "<");
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.StartTag startTag13 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType14 = startTag13.type;
        startTag13.appendTagName('#');
        boolean boolean17 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag13);
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader19.advance();
        boolean boolean22 = characterReader19.matchConsume("<hi!>");
        htmlTreeBuilder0.reader = characterReader19;
        boolean boolean25 = characterReader19.matchConsume("[100: ]");
        characterReader19.unconsume();
        org.jsoup.parser.TokenQueue tokenQueue28 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean29 = tokenQueue28.isEmpty();
        char[] charArray31 = new char[] { '4' };
        boolean boolean32 = tokenQueue28.matchesAny(charArray31);
        java.lang.String str33 = characterReader19.consumeToAny(charArray31);
        org.jsoup.parser.Parser parser34 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser36 = parser34.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder37 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document38 = xmlTreeBuilder37.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder39 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList44 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream47 = parseErrorList46.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor48 = parseErrorList46.iterator();
        boolean boolean49 = parseErrorList44.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList46);
        xmlTreeBuilder39.initialiseParse("<!---->", "hi!", parseErrorList44);
        xmlTreeBuilder37.errors = parseErrorList44;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList52 = xmlTreeBuilder37.stack;
        org.jsoup.parser.Parser parser53 = parser36.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder37);
        org.jsoup.parser.ParseErrorList parseErrorList55 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder37.errors = parseErrorList55;
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor57 = parseErrorList55.iterator();
        org.jsoup.parser.Tokeniser tokeniser58 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList55);
        boolean boolean60 = characterReader19.matches(" ");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertTrue("'" + tokenType14 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType14.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "StartTag" + "'", str33, "StartTag");
        org.junit.Assert.assertNotNull(parser34);
        org.junit.Assert.assertNotNull(parser36);
        org.junit.Assert.assertNull(document38);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(parseErrorStream47);
        org.junit.Assert.assertNotNull(parseErrorItor48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(elementList52);
        org.junit.Assert.assertNotNull(parser53);
        org.junit.Assert.assertNotNull(parseErrorList55);
        org.junit.Assert.assertNotNull(parseErrorItor57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        boolean boolean1 = doctype0.isCharacter();
        boolean boolean2 = doctype0.isEndTag();
        boolean boolean3 = doctype0.isCharacter();
        java.lang.StringBuilder stringBuilder4 = doctype0.publicIdentifier;
        org.jsoup.parser.Token.StartTag startTag6 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag6.appendTagName("hi!");
        startTag6.appendAttributeName('4');
        org.jsoup.parser.Token.TokenType tokenType11 = startTag6.type;
        doctype0.type = tokenType11;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.EndTag endTag13 = doctype0.asEndTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$EndTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(stringBuilder4);
        org.junit.Assert.assertEquals(stringBuilder4.toString(), "");
        org.junit.Assert.assertTrue("'" + tokenType11 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType11.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList(0, (int) (byte) 0);
        htmlTreeBuilder0.initialiseParse("<hi!>", "hi!#", parseErrorList5);
        htmlTreeBuilder0.resetInsertionMode();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder10 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList15 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream18 = parseErrorList17.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList17.iterator();
        boolean boolean20 = parseErrorList15.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17);
        xmlTreeBuilder10.initialiseParse("<!---->", "hi!", parseErrorList15);
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document26 = xmlTreeBuilder10.parse("", "[]", parseErrorList25);
        org.jsoup.parser.Token.StartTag startTag28 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType29 = startTag28.type;
        java.lang.String str30 = startTag28.toString();
        boolean boolean31 = xmlTreeBuilder10.process((org.jsoup.parser.Token) startTag28);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder34 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int39 = parseErrorList38.getMaxSize();
        org.jsoup.nodes.Document document40 = htmlTreeBuilder34.parse("0: Doctype", "hi!", parseErrorList38);
        boolean boolean41 = htmlTreeBuilder34.framesetOk();
        org.jsoup.nodes.Document document44 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder34.setHeadElement((org.jsoup.nodes.Element) document44);
        org.jsoup.parser.CharacterReader characterReader48 = null;
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream51 = parseErrorList50.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor52 = parseErrorList50.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor53 = parseErrorList50.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList55 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int56 = parseErrorList55.getMaxSize();
        boolean boolean57 = parseErrorList50.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList55);
        org.jsoup.parser.Tokeniser tokeniser58 = new org.jsoup.parser.Tokeniser(characterReader48, parseErrorList55);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor59 = parseErrorList55.iterator();
        htmlTreeBuilder34.initialiseParse("hi!", "hi!#", parseErrorList55);
        java.util.List<org.jsoup.nodes.Node> nodeList61 = xmlTreeBuilder10.parseFragment("S", "<Doctype>", parseErrorList55);
        org.jsoup.nodes.Document document62 = htmlTreeBuilder0.parse("StartTag", "[100: ]", parseErrorList55);
        java.lang.Object obj63 = null;
        int int64 = parseErrorList55.lastIndexOf(obj63);
        org.jsoup.parser.CharacterReader characterReader66 = null;
        org.jsoup.parser.ParseErrorList parseErrorList68 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream69 = parseErrorList68.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor70 = parseErrorList68.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor71 = parseErrorList68.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList73 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int74 = parseErrorList73.getMaxSize();
        boolean boolean75 = parseErrorList68.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList73);
        org.jsoup.parser.Tokeniser tokeniser76 = new org.jsoup.parser.Tokeniser(characterReader66, parseErrorList73);
        org.jsoup.parser.ParseErrorList parseErrorList78 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream79 = parseErrorList78.stream();
        boolean boolean80 = parseErrorList78.canAddError();
        boolean boolean81 = parseErrorList73.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList78);
        boolean boolean82 = parseErrorList73.canAddError();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder83 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList88 = new org.jsoup.parser.ParseErrorList(0, (int) (byte) 0);
        htmlTreeBuilder83.initialiseParse("<hi!>", "hi!#", parseErrorList88);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor90 = parseErrorList88.listIterator();
        boolean boolean91 = parseErrorList73.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList88);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = parseErrorList55.addAll((int) '#', (java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList73);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertNotNull(parseErrorStream18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertTrue("'" + tokenType29 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType29.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "<hi!>" + "'", str30, "<hi!>");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertNotNull(parseErrorStream51);
        org.junit.Assert.assertNotNull(parseErrorItor52);
        org.junit.Assert.assertNotNull(parseErrorItor53);
        org.junit.Assert.assertNotNull(parseErrorList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(parseErrorItor59);
        org.junit.Assert.assertNotNull(nodeList61);
        org.junit.Assert.assertNotNull(document62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(parseErrorList68);
        org.junit.Assert.assertNotNull(parseErrorStream69);
        org.junit.Assert.assertNotNull(parseErrorItor70);
        org.junit.Assert.assertNotNull(parseErrorItor71);
        org.junit.Assert.assertNotNull(parseErrorList73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(parseErrorList78);
        org.junit.Assert.assertNotNull(parseErrorStream79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(parseErrorItor90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.markInsertionMode();
        boolean boolean22 = htmlTreeBuilder0.inScope("StartTag");
        org.jsoup.parser.Parser parser23 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        htmlTreeBuilder0.resetInsertionMode();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token token1 = xmlTreeBuilder0.currentToken;
        org.jsoup.parser.CharacterReader characterReader2 = null;
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.iterator();
        org.jsoup.parser.Tokeniser tokeniser8 = new org.jsoup.parser.Tokeniser(characterReader2, parseErrorList4);
        org.jsoup.parser.Token.Tag tag9 = tokeniser8.tagPending;
        org.jsoup.parser.Token.Tag tag11 = tokeniser8.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype12 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype13 = doctype12.asDoctype();
        java.lang.String str14 = doctype12.tokenType();
        tokeniser8.emit((org.jsoup.parser.Token) doctype12);
        org.jsoup.parser.Token.Tag tag17 = tokeniser8.createTagPending(true);
        xmlTreeBuilder0.tokeniser = tokeniser8;
        boolean boolean19 = tokeniser8.isAppropriateEndTagToken();
        tokeniser8.acknowledgeSelfClosingFlag();
        org.junit.Assert.assertNull(token1);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNull(tag9);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(doctype13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Doctype" + "'", str14, "Doctype");
        org.junit.Assert.assertNotNull(tag17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
        org.jsoup.parser.TreeBuilder treeBuilder2 = null;
        org.jsoup.parser.Parser parser3 = parser1.setTreeBuilder(treeBuilder2);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder4 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document5 = xmlTreeBuilder4.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder6 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        boolean boolean16 = parseErrorList11.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        xmlTreeBuilder6.initialiseParse("<!---->", "hi!", parseErrorList11);
        xmlTreeBuilder4.errors = parseErrorList11;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList19 = xmlTreeBuilder4.stack;
        org.jsoup.parser.CharacterReader characterReader20 = null;
        xmlTreeBuilder4.reader = characterReader20;
        org.jsoup.parser.Parser parser22 = parser1.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder4);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder23 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser24 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder23);
        boolean boolean25 = htmlTreeBuilder23.isFosterInserts();
        htmlTreeBuilder23.clearFormattingElementsToLastMarker();
        htmlTreeBuilder23.newPendingTableCharacters();
        htmlTreeBuilder23.clearFormattingElementsToLastMarker();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState29 = htmlTreeBuilder23.originalState();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder30 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int35 = parseErrorList34.getMaxSize();
        org.jsoup.nodes.Document document36 = htmlTreeBuilder30.parse("0: Doctype", "hi!", parseErrorList34);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder37 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int42 = parseErrorList41.getMaxSize();
        org.jsoup.nodes.Document document43 = htmlTreeBuilder37.parse("0: Doctype", "hi!", parseErrorList41);
        boolean boolean44 = htmlTreeBuilder37.framesetOk();
        org.jsoup.nodes.Document document47 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder37.setHeadElement((org.jsoup.nodes.Element) document47);
        org.jsoup.nodes.Element element49 = htmlTreeBuilder37.pop();
        htmlTreeBuilder30.pushActiveFormattingElements(element49);
        boolean boolean51 = htmlTreeBuilder23.isInActiveFormattingElements(element49);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState52 = org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup;
        htmlTreeBuilder23.transition(htmlTreeBuilderState52);
        htmlTreeBuilder23.markInsertionMode();
        org.jsoup.parser.Parser parser55 = parser1.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder23);
        org.jsoup.parser.Parser parser56 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.nodes.Document document59 = parser56.parseInput("", "hi!");
        org.jsoup.nodes.Document document62 = parser56.parseInput("hi!", "hi!");
        htmlTreeBuilder23.setHeadElement((org.jsoup.nodes.Element) document62);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder64 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document65 = xmlTreeBuilder64.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder66 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList71 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList73 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream74 = parseErrorList73.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor75 = parseErrorList73.iterator();
        boolean boolean76 = parseErrorList71.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList73);
        xmlTreeBuilder66.initialiseParse("<!---->", "hi!", parseErrorList71);
        xmlTreeBuilder64.errors = parseErrorList71;
        org.jsoup.parser.ParseErrorList parseErrorList82 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream83 = parseErrorList82.stream();
        xmlTreeBuilder64.initialiseParse("a", "[]", parseErrorList82);
        org.jsoup.parser.Token.Character character86 = new org.jsoup.parser.Token.Character("-1: []");
        xmlTreeBuilder64.insert(character86);
        java.lang.String str88 = character86.toString();
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder23.insert(character86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNull(document5);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(elementList19);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(htmlTreeBuilderState29);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(element49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState52);
        org.junit.Assert.assertNotNull(parser55);
        org.junit.Assert.assertNotNull(parser56);
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertNotNull(document62);
        org.junit.Assert.assertNull(document65);
        org.junit.Assert.assertNotNull(parseErrorList73);
        org.junit.Assert.assertNotNull(parseErrorStream74);
        org.junit.Assert.assertNotNull(parseErrorItor75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(parseErrorList82);
        org.junit.Assert.assertNotNull(parseErrorStream83);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "-1: []" + "'", str88, "-1: []");
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        java.lang.String[] strArray21 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean22 = htmlTreeBuilder0.inScope("hi!#", strArray21);
        org.jsoup.nodes.Element element23 = htmlTreeBuilder0.currentElement();
        htmlTreeBuilder0.baseUri = "hi!hi!";
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(element23);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.jsoup.parser.Token.StartTag startTag2 = new org.jsoup.parser.Token.StartTag();
        startTag2.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag5 = startTag2.asStartTag();
        org.jsoup.parser.Token.Tag tag7 = startTag5.name("");
        startTag5.selfClosing = false;
        org.jsoup.nodes.Attributes attributes10 = startTag5.getAttributes();
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("0: []", attributes10);
        org.jsoup.nodes.Attributes attributes12 = startTag11.getAttributes();
        org.jsoup.parser.Token.StartTag startTag13 = new org.jsoup.parser.Token.StartTag("100: ", attributes12);
        boolean boolean14 = startTag13.selfClosing;
        startTag13.appendAttributeName("hi!");
        org.junit.Assert.assertNotNull(startTag5);
        org.junit.Assert.assertNotNull(tag7);
        org.junit.Assert.assertNotNull(attributes10);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.framesetOk(false);
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        boolean boolean23 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.ParseErrorList parseErrorList28 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream31 = parseErrorList30.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList30.iterator();
        boolean boolean33 = parseErrorList28.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        parseErrorList30.ensureCapacity((int) (short) 1);
        org.jsoup.nodes.Document document36 = htmlTreeBuilder0.parse("StartTaga", "</hi![]>", parseErrorList30);
        java.lang.String str37 = htmlTreeBuilder0.getBaseUri();
        boolean boolean39 = htmlTreeBuilder0.inTableScope("Comment");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorStream31);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "</hi![]>" + "'", str37, "</hi![]>");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("10: ");
        org.junit.Assert.assertNotNull(tag1);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.Comment comment12 = new org.jsoup.parser.Token.Comment();
        java.lang.String str13 = comment12.toString();
        boolean boolean14 = comment12.isCharacter();
        htmlTreeBuilder0.insert(comment12);
        org.jsoup.nodes.Document document16 = htmlTreeBuilder0.doc;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<!---->" + "'", str13, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(document16);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        boolean boolean25 = parseErrorList18.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23);
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList23);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList23.iterator();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("[]", "Doctype", parseErrorList23);
        org.jsoup.parser.CharacterReader characterReader31 = null;
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream34 = parseErrorList33.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList33.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor36 = parseErrorList33.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int39 = parseErrorList38.getMaxSize();
        boolean boolean40 = parseErrorList33.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        org.jsoup.parser.Tokeniser tokeniser41 = new org.jsoup.parser.Tokeniser(characterReader31, parseErrorList38);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        boolean boolean45 = parseErrorList43.canAddError();
        boolean boolean46 = parseErrorList38.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        org.jsoup.nodes.Document document47 = htmlTreeBuilder0.parse("hi!", "<!---->", parseErrorList43);
        org.jsoup.parser.Tokeniser tokeniser48 = htmlTreeBuilder0.tokeniser;
        org.jsoup.parser.Parser parser49 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser51 = parser49.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document54 = parser49.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document57 = parser49.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document57);
        boolean boolean59 = htmlTreeBuilder0.framesetOk();
        java.util.List<org.jsoup.parser.Token.Character> characterList60 = htmlTreeBuilder0.getPendingTableCharacters();
        boolean boolean61 = htmlTreeBuilder0.isFragmentParsing();
        boolean boolean63 = htmlTreeBuilder0.inButtonScope("Doctype");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertNotNull(parseErrorStream34);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNotNull(parseErrorItor36);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(tokeniser48);
        org.junit.Assert.assertNotNull(parser49);
        org.junit.Assert.assertNotNull(parser51);
        org.junit.Assert.assertNotNull(document54);
        org.junit.Assert.assertNotNull(document57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(characterList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.Tokeniser tokeniser9 = xmlTreeBuilder0.tokeniser;
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        boolean boolean12 = startTag11.isCharacter();
        org.jsoup.parser.Token.Doctype doctype13 = new org.jsoup.parser.Token.Doctype();
        java.lang.StringBuilder stringBuilder14 = doctype13.systemIdentifier;
        org.jsoup.parser.Token.TokenType tokenType15 = doctype13.type;
        startTag11.type = tokenType15;
        boolean boolean17 = startTag11.isComment();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element18 = xmlTreeBuilder0.insert(startTag11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(tokeniser9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(stringBuilder14);
        org.junit.Assert.assertEquals(stringBuilder14.toString(), "");
        org.junit.Assert.assertTrue("'" + tokenType15 + "' != '" + org.jsoup.parser.Token.TokenType.Doctype + "'", tokenType15.equals(org.jsoup.parser.Token.TokenType.Doctype));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token token1 = xmlTreeBuilder0.currentToken;
        org.jsoup.parser.CharacterReader characterReader2 = null;
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.iterator();
        org.jsoup.parser.Tokeniser tokeniser8 = new org.jsoup.parser.Tokeniser(characterReader2, parseErrorList4);
        org.jsoup.parser.Token.Tag tag9 = tokeniser8.tagPending;
        org.jsoup.parser.Token.Tag tag11 = tokeniser8.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype12 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype13 = doctype12.asDoctype();
        java.lang.String str14 = doctype12.tokenType();
        tokeniser8.emit((org.jsoup.parser.Token) doctype12);
        org.jsoup.parser.Token.Tag tag17 = tokeniser8.createTagPending(true);
        xmlTreeBuilder0.tokeniser = tokeniser8;
        org.jsoup.parser.Token.Character character20 = new org.jsoup.parser.Token.Character("tartTag");
        java.lang.String str21 = character20.getData();
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(character20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(token1);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNull(tag9);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(doctype13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Doctype" + "'", str14, "Doctype");
        org.junit.Assert.assertNotNull(tag17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tartTag" + "'", str21, "tartTag");
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isKnownTag();
        boolean boolean5 = tag1.isKnownTag();
        boolean boolean6 = tag1.preserveWhitespace();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        boolean boolean12 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.Parser parser13 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser15 = parser13.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder16 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document17 = xmlTreeBuilder16.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder18 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList23 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream26 = parseErrorList25.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList25.iterator();
        boolean boolean28 = parseErrorList23.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList25);
        xmlTreeBuilder18.initialiseParse("<!---->", "hi!", parseErrorList23);
        xmlTreeBuilder16.errors = parseErrorList23;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList31 = xmlTreeBuilder16.stack;
        org.jsoup.parser.Parser parser32 = parser15.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder16);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder16.errors = parseErrorList34;
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream40 = parseErrorList39.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor41 = parseErrorList39.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList39.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int45 = parseErrorList44.getMaxSize();
        boolean boolean46 = parseErrorList39.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        xmlTreeBuilder16.initialiseParse("<!---->", "", parseErrorList39);
        htmlTreeBuilder0.errors = parseErrorList39;
        htmlTreeBuilder0.generateImpliedEndTags("</hi![]>");
        boolean boolean52 = htmlTreeBuilder0.inButtonScope("-1: []");
        org.jsoup.parser.Token.StartTag startTag54 = new org.jsoup.parser.Token.StartTag("Doctype");
        org.jsoup.parser.Token.Tag tag56 = startTag54.name("hi!#");
        org.jsoup.nodes.FormElement formElement58 = htmlTreeBuilder0.insertForm(startTag54, false);
        startTag54.newAttribute();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parser13);
        org.junit.Assert.assertNotNull(parser15);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertNotNull(parseErrorStream26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(elementList31);
        org.junit.Assert.assertNotNull(parser32);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertNotNull(parseErrorStream40);
        org.junit.Assert.assertNotNull(parseErrorItor41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(tag56);
        org.junit.Assert.assertNotNull(formElement58);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean8 = htmlTreeBuilder0.inButtonScope("hi!#");
        htmlTreeBuilder0.markInsertionMode();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        startTag0.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag4 = startTag0.name("hi!#");
        boolean boolean5 = startTag0.isStartTag();
        startTag0.appendTagName("<hi!#>");
        java.lang.String str8 = startTag0.tagName;
        org.jsoup.parser.Token.StartTag startTag9 = startTag0.asStartTag();
        org.junit.Assert.assertNotNull(tag4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!#<hi!#>" + "'", str8, "hi!#<hi!#>");
        org.junit.Assert.assertNotNull(startTag9);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        java.lang.StringBuilder stringBuilder9 = null;
        tokeniser7.dataBuffer = stringBuilder9;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        tokeniser7.emit(charArray14);
        org.jsoup.parser.Token.Comment comment17 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean20 = characterReader19.matchesLetter();
        miniSoupTokeniserState0.read(tokeniser7, characterReader19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        org.jsoup.parser.Token.Tag tag31 = tokeniser28.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype32 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype33 = doctype32.asDoctype();
        java.lang.String str34 = doctype32.tokenType();
        tokeniser28.emit((org.jsoup.parser.Token) doctype32);
        org.jsoup.parser.ITokeniserState iTokeniserState36 = tokeniser28.getState();
        org.jsoup.parser.Token.Comment comment37 = new org.jsoup.parser.Token.Comment();
        java.lang.String str38 = comment37.toString();
        java.lang.StringBuilder stringBuilder39 = comment37.data;
        boolean boolean40 = comment37.isEndTag();
        boolean boolean41 = comment37.isComment();
        tokeniser28.commentPending = comment37;
        org.jsoup.parser.CharacterReader characterReader44 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean46 = characterReader44.matches('\000');
        characterReader44.mark();
        boolean boolean48 = characterReader44.isEmpty();
        java.lang.String str49 = characterReader44.consumeToEnd();
        miniSoupTokeniserState0.read(tokeniser28, characterReader44);
        org.jsoup.parser.CharacterReader characterReader51 = null;
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream54 = parseErrorList53.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList53.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor56 = parseErrorList53.iterator();
        org.jsoup.parser.Tokeniser tokeniser57 = new org.jsoup.parser.Tokeniser(characterReader51, parseErrorList53);
        org.jsoup.parser.Token.Tag tag58 = tokeniser57.tagPending;
        tokeniser57.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag62 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType63 = startTag62.type;
        startTag62.appendTagName('#');
        tokeniser57.tagPending = startTag62;
        tokeniser57.acknowledgeSelfClosingFlag();
        org.jsoup.parser.CharacterReader characterReader69 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean71 = characterReader69.matches('\uffff');
        miniSoupTokeniserState0.read(tokeniser57, characterReader69);
        boolean boolean74 = characterReader69.containsIgnoreCase("</hi![]>");
        boolean boolean76 = characterReader69.matches("");
        java.lang.String str77 = characterReader69.consumeToEnd();
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertNotNull(doctype33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Doctype" + "'", str34, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<!---->" + "'", str38, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder39);
        org.junit.Assert.assertEquals(stringBuilder39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "StartTag" + "'", str49, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertNotNull(parseErrorStream54);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertNotNull(parseErrorItor56);
        org.junit.Assert.assertNull(tag58);
        org.junit.Assert.assertTrue("'" + tokenType63 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType63.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "StartTag" + "'", str77, "StartTag");
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("<!---->");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder10 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader11 = null;
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList13.iterator();
        org.jsoup.parser.Tokeniser tokeniser17 = new org.jsoup.parser.Tokeniser(characterReader11, parseErrorList13);
        org.jsoup.parser.Token.Tag tag18 = tokeniser17.tagPending;
        org.jsoup.parser.Token.Tag tag20 = tokeniser17.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype21 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype22 = doctype21.asDoctype();
        java.lang.String str23 = doctype21.tokenType();
        tokeniser17.emit((org.jsoup.parser.Token) doctype21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser17.createTagPending(true);
        xmlTreeBuilder10.currentToken = tag26;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        boolean boolean35 = htmlTreeBuilder28.framesetOk();
        org.jsoup.nodes.Document document38 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder28.setHeadElement((org.jsoup.nodes.Element) document38);
        xmlTreeBuilder10.doc = document38;
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList44.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList44.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int50 = parseErrorList49.getMaxSize();
        boolean boolean51 = parseErrorList44.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList49);
        xmlTreeBuilder10.initialiseParse("hi!#", "0: []", parseErrorList49);
        org.jsoup.parser.Token.Comment comment53 = new org.jsoup.parser.Token.Comment();
        java.lang.String str54 = comment53.getData();
        xmlTreeBuilder10.insert(comment53);
        java.lang.StringBuilder stringBuilder56 = comment53.data;
        tokeniser6.commentPending = comment53;
        tokeniser6.emitCommentPending();
        tokeniser6.emit(' ');
        org.jsoup.parser.Token.Tag tag61 = tokeniser6.tagPending;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNull(tag18);
        org.junit.Assert.assertNotNull(tag20);
        org.junit.Assert.assertNotNull(doctype22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Doctype" + "'", str23, "Doctype");
        org.junit.Assert.assertNotNull(tag26);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(stringBuilder56);
        org.junit.Assert.assertEquals(stringBuilder56.toString(), "");
        org.junit.Assert.assertNull(tag61);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.Rawtext;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder1 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document2 = xmlTreeBuilder1.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList8 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor12 = parseErrorList10.iterator();
        boolean boolean13 = parseErrorList8.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        xmlTreeBuilder3.initialiseParse("<!---->", "hi!", parseErrorList8);
        xmlTreeBuilder1.errors = parseErrorList8;
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream20 = parseErrorList19.stream();
        xmlTreeBuilder1.initialiseParse("a", "[]", parseErrorList19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        tokeniser28.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype32 = tokeniser28.doctypePending;
        tokeniser28.createCommentPending();
        org.jsoup.parser.Token.Comment comment34 = tokeniser28.commentPending;
        boolean boolean35 = parseErrorList19.remove((java.lang.Object) tokeniser28);
        org.jsoup.parser.CharacterReader characterReader37 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean39 = characterReader37.matches('\uffff');
        boolean boolean41 = characterReader37.containsIgnoreCase("0: []");
        tokeniserState0.read(tokeniser28, characterReader37);
        boolean boolean44 = characterReader37.matchConsumeIgnoreCase("");
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNull(document2);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertNotNull(parseErrorItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertNotNull(parseErrorStream20);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNull(doctype32);
        org.junit.Assert.assertNotNull(comment34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement14 = htmlTreeBuilder0.getFormElement();
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList15 = htmlTreeBuilder0.getStack();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder16 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.nodes.Document document22 = htmlTreeBuilder16.parse("0: Doctype", "hi!", parseErrorList20);
        boolean boolean23 = htmlTreeBuilder16.framesetOk();
        org.jsoup.parser.Parser parser24 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser26 = parser24.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document29 = parser24.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document32 = parser24.parseInput("<hi!>", "[]");
        htmlTreeBuilder16.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        java.lang.String[] strArray34 = new java.lang.String[] {};
        boolean boolean35 = htmlTreeBuilder16.inScope(strArray34);
        htmlTreeBuilder16.markInsertionMode();
        boolean boolean38 = htmlTreeBuilder16.inScope("StartTag");
        htmlTreeBuilder16.markInsertionMode();
        org.jsoup.nodes.Document document42 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder16.setHeadElement((org.jsoup.nodes.Element) document42);
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document42);
        org.jsoup.parser.Token.EndTag endTag45 = new org.jsoup.parser.Token.EndTag();
        java.lang.String str46 = endTag45.tagName;
        htmlTreeBuilder0.currentToken = endTag45;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element48 = htmlTreeBuilder0.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(formElement14);
        org.junit.Assert.assertNotNull(elementList15);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parser24);
        org.junit.Assert.assertNotNull(parser26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        htmlTreeBuilder0.clearStackToTableContext();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder20 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int25 = parseErrorList24.getMaxSize();
        org.jsoup.nodes.Document document26 = htmlTreeBuilder20.parse("0: Doctype", "hi!", parseErrorList24);
        htmlTreeBuilder20.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray29 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList30 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList30, characterArray29);
        htmlTreeBuilder20.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList30);
        boolean boolean33 = htmlTreeBuilder20.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag35 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement37 = htmlTreeBuilder20.insertForm(startTag35, true);
        org.jsoup.nodes.Element element38 = htmlTreeBuilder0.insert(startTag35);
        htmlTreeBuilder0.setFosterInserts(false);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(characterArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(formElement37);
        org.junit.Assert.assertNotNull(element38);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        java.lang.String str1 = endTag0.tagName;
        org.jsoup.nodes.Attributes attributes2 = endTag0.attributes;
        boolean boolean3 = endTag0.isStartTag();
        endTag0.finaliseTag();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(attributes2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.jsoup.parser.Token.Comment comment0 = new org.jsoup.parser.Token.Comment();
        java.lang.String str1 = comment0.toString();
        java.lang.StringBuilder stringBuilder2 = comment0.data;
        comment0.bogus = false;
        java.lang.StringBuilder stringBuilder5 = comment0.data;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "<!---->" + "'", str1, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder2);
        org.junit.Assert.assertEquals(stringBuilder2.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder5);
        org.junit.Assert.assertEquals(stringBuilder5.toString(), "");
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        boolean boolean19 = doctype18.isCharacter();
        tokeniser6.doctypePending = doctype18;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype22 = new org.jsoup.parser.Token.Doctype();
        boolean boolean23 = doctype22.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = null;
        boolean boolean25 = htmlTreeBuilderState21.process((org.jsoup.parser.Token) doctype22, htmlTreeBuilder24);
        java.lang.StringBuilder stringBuilder26 = doctype22.name;
        tokeniser6.dataBuffer = stringBuilder26;
        org.jsoup.parser.Token.Comment comment28 = new org.jsoup.parser.Token.Comment();
        java.lang.String str29 = comment28.toString();
        boolean boolean30 = comment28.isCharacter();
        boolean boolean31 = comment28.bogus;
        tokeniser6.commentPending = comment28;
        tokeniser6.emitTagPending();
        org.jsoup.parser.Token.Tag tag35 = tokeniser6.createTagPending(false);
        boolean boolean36 = tag35.selfClosing;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(stringBuilder26);
        org.junit.Assert.assertEquals(stringBuilder26.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<!---->" + "'", str29, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(tag35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        xmlTreeBuilder0.initialiseParse("a", "[]", parseErrorList18);
        org.jsoup.parser.CharacterReader characterReader21 = null;
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream24 = parseErrorList23.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList23.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList23.iterator();
        org.jsoup.parser.Tokeniser tokeniser27 = new org.jsoup.parser.Tokeniser(characterReader21, parseErrorList23);
        org.jsoup.parser.Token.Tag tag28 = tokeniser27.tagPending;
        tokeniser27.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype31 = tokeniser27.doctypePending;
        tokeniser27.createCommentPending();
        org.jsoup.parser.Token.Comment comment33 = tokeniser27.commentPending;
        boolean boolean34 = parseErrorList18.remove((java.lang.Object) tokeniser27);
        org.jsoup.parser.ITokeniserState iTokeniserState35 = tokeniser27.getState();
        boolean boolean36 = tokeniser27.isAppropriateEndTagToken();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder37 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader38 = null;
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream41 = parseErrorList40.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList40.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList40.iterator();
        org.jsoup.parser.Tokeniser tokeniser44 = new org.jsoup.parser.Tokeniser(characterReader38, parseErrorList40);
        org.jsoup.parser.Token.Tag tag45 = tokeniser44.tagPending;
        org.jsoup.parser.Token.Tag tag47 = tokeniser44.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype48 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype49 = doctype48.asDoctype();
        java.lang.String str50 = doctype48.tokenType();
        tokeniser44.emit((org.jsoup.parser.Token) doctype48);
        org.jsoup.parser.Token.Tag tag53 = tokeniser44.createTagPending(true);
        xmlTreeBuilder37.currentToken = tag53;
        org.jsoup.parser.Token.Tag tag56 = tag53.name("");
        tokeniser27.emit((org.jsoup.parser.Token) tag56);
        org.jsoup.parser.Token.Tag tag59 = tokeniser27.createTagPending(false);
        java.lang.String str60 = tag59.tokenType();
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertNotNull(parseErrorStream24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNull(tag28);
        org.junit.Assert.assertNull(doctype31);
        org.junit.Assert.assertNotNull(comment33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(iTokeniserState35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertNotNull(parseErrorStream41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNull(tag45);
        org.junit.Assert.assertNotNull(tag47);
        org.junit.Assert.assertNotNull(doctype49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Doctype" + "'", str50, "Doctype");
        org.junit.Assert.assertNotNull(tag53);
        org.junit.Assert.assertNotNull(tag56);
        org.junit.Assert.assertNotNull(tag59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "EndTag" + "'", str60, "EndTag");
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("<!---->");
        java.lang.String str2 = tag1.getName();
        boolean boolean3 = tag1.preserveWhitespace();
        boolean boolean4 = tag1.isBlock();
        boolean boolean5 = tag1.isSelfClosing();
        org.jsoup.parser.Token.TokenType tokenType6 = org.jsoup.parser.Token.TokenType.EOF;
        boolean boolean7 = tag1.equals((java.lang.Object) tokenType6);
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "<!---->" + "'", str2, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + tokenType6 + "' != '" + org.jsoup.parser.Token.TokenType.EOF + "'", tokenType6.equals(org.jsoup.parser.Token.TokenType.EOF));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.Token.StartTag startTag16 = new org.jsoup.parser.Token.StartTag("Doctype");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState17 = org.jsoup.parser.HtmlTreeBuilderState.AfterBody;
        boolean boolean18 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag16, htmlTreeBuilderState17);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState19 = htmlTreeBuilder0.state();
        htmlTreeBuilder0.markInsertionMode();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState19);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        java.lang.String str12 = htmlTreeBuilder0.toString();
        java.util.List<org.jsoup.parser.Token.Character> characterList13 = htmlTreeBuilder0.getPendingTableCharacters();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(characterList13);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.nodes.Document document22 = parser19.parseInput("hi!", "[]");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder23 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList27 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int28 = parseErrorList27.getMaxSize();
        org.jsoup.nodes.Document document29 = htmlTreeBuilder23.parse("0: Doctype", "hi!", parseErrorList27);
        htmlTreeBuilder23.resetInsertionMode();
        htmlTreeBuilder23.popStackToBefore("EndTag");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState33 = htmlTreeBuilder23.state();
        htmlTreeBuilder23.runParser();
        org.jsoup.parser.Parser parser35 = parser19.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder23);
        org.jsoup.parser.CharacterReader characterReader36 = htmlTreeBuilder23.reader;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder37 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader38 = null;
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream41 = parseErrorList40.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList40.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList40.iterator();
        org.jsoup.parser.Tokeniser tokeniser44 = new org.jsoup.parser.Tokeniser(characterReader38, parseErrorList40);
        org.jsoup.parser.Token.Tag tag45 = tokeniser44.tagPending;
        org.jsoup.parser.Token.Tag tag47 = tokeniser44.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype48 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype49 = doctype48.asDoctype();
        java.lang.String str50 = doctype48.tokenType();
        tokeniser44.emit((org.jsoup.parser.Token) doctype48);
        org.jsoup.parser.Token.Tag tag53 = tokeniser44.createTagPending(true);
        xmlTreeBuilder37.currentToken = tag53;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder55 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList59 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int60 = parseErrorList59.getMaxSize();
        org.jsoup.nodes.Document document61 = htmlTreeBuilder55.parse("0: Doctype", "hi!", parseErrorList59);
        boolean boolean62 = htmlTreeBuilder55.framesetOk();
        org.jsoup.nodes.Document document65 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder55.setHeadElement((org.jsoup.nodes.Element) document65);
        xmlTreeBuilder37.doc = document65;
        org.jsoup.parser.ParseErrorList parseErrorList71 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream72 = parseErrorList71.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor73 = parseErrorList71.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor74 = parseErrorList71.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList76 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int77 = parseErrorList76.getMaxSize();
        boolean boolean78 = parseErrorList71.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList76);
        xmlTreeBuilder37.initialiseParse("hi!#", "0: []", parseErrorList76);
        parseErrorList76.clear();
        org.jsoup.parser.Tokeniser tokeniser81 = new org.jsoup.parser.Tokeniser(characterReader36, parseErrorList76);
        org.jsoup.parser.Token token82 = tokeniser81.read();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(parseErrorList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState33);
        org.junit.Assert.assertNotNull(parser35);
        org.junit.Assert.assertNotNull(characterReader36);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertNotNull(parseErrorStream41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNull(tag45);
        org.junit.Assert.assertNotNull(tag47);
        org.junit.Assert.assertNotNull(doctype49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Doctype" + "'", str50, "Doctype");
        org.junit.Assert.assertNotNull(tag53);
        org.junit.Assert.assertNotNull(parseErrorList59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(document61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertNotNull(parseErrorList71);
        org.junit.Assert.assertNotNull(parseErrorStream72);
        org.junit.Assert.assertNotNull(parseErrorItor73);
        org.junit.Assert.assertNotNull(parseErrorItor74);
        org.junit.Assert.assertNotNull(parseErrorList76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(token82);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWhitespace();
        java.lang.String str7 = tokenQueue1.consumeWord();
        boolean boolean9 = tokenQueue1.matches("hi!#<hi!#>");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        htmlTreeBuilder3.clearStackToTableContext();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder12.setHeadElement((org.jsoup.nodes.Element) document22);
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder12.setHeadElement((org.jsoup.nodes.Element) document26);
        htmlTreeBuilder12.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder30 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int35 = parseErrorList34.getMaxSize();
        org.jsoup.nodes.Document document36 = htmlTreeBuilder30.parse("0: Doctype", "hi!", parseErrorList34);
        boolean boolean37 = htmlTreeBuilder30.framesetOk();
        org.jsoup.nodes.Document document40 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder30.setHeadElement((org.jsoup.nodes.Element) document40);
        org.jsoup.nodes.Document document44 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder30.setHeadElement((org.jsoup.nodes.Element) document44);
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document44);
        htmlTreeBuilder3.push((org.jsoup.nodes.Element) document44);
        htmlTreeBuilder3.clearStackToTableBodyContext();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder49 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int54 = parseErrorList53.getMaxSize();
        org.jsoup.nodes.Document document55 = htmlTreeBuilder49.parse("0: Doctype", "hi!", parseErrorList53);
        boolean boolean56 = htmlTreeBuilder49.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState57 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder49.error(htmlTreeBuilderState57);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState59 = null;
        htmlTreeBuilder49.transition(htmlTreeBuilderState59);
        htmlTreeBuilder49.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList63 = htmlTreeBuilder49.getPendingTableCharacters();
        org.jsoup.parser.CharacterReader characterReader65 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean67 = characterReader65.matches("[100: ]");
        htmlTreeBuilder49.reader = characterReader65;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder69 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList73 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int74 = parseErrorList73.getMaxSize();
        org.jsoup.nodes.Document document75 = htmlTreeBuilder69.parse("0: Doctype", "hi!", parseErrorList73);
        htmlTreeBuilder69.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray78 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList79 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList79, characterArray78);
        htmlTreeBuilder69.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList79);
        boolean boolean82 = htmlTreeBuilder69.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag84 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement86 = htmlTreeBuilder69.insertForm(startTag84, true);
        htmlTreeBuilder49.setFormElement(formElement86);
        htmlTreeBuilder3.setFormElement(formElement86);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState57);
        org.junit.Assert.assertNotNull(characterList63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(parseErrorList73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(document75);
        org.junit.Assert.assertNotNull(characterArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(formElement86);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        boolean boolean19 = doctype18.isCharacter();
        tokeniser6.doctypePending = doctype18;
        tokeniser6.emit("StartTag");
        boolean boolean23 = tokeniser6.isAppropriateEndTagToken();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        java.lang.String[] strArray13 = null;
        boolean boolean14 = htmlTreeBuilder0.inScope("EndTag", strArray13);
        org.jsoup.parser.Parser parser15 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.Comment comment12 = new org.jsoup.parser.Token.Comment();
        java.lang.String str13 = comment12.toString();
        boolean boolean14 = comment12.isCharacter();
        htmlTreeBuilder0.insert(comment12);
        org.jsoup.parser.Parser parser16 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        java.util.List<org.jsoup.parser.ParseError> parseErrorList17 = parser16.getErrors();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<!---->" + "'", str13, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(parseErrorList17);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        boolean boolean2 = startTag1.isCharacter();
        org.jsoup.parser.Token.TokenType tokenType3 = startTag1.type;
        startTag1.finaliseTag();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + tokenType3 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType3.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        boolean boolean13 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.CharacterReader characterReader15 = new org.jsoup.parser.CharacterReader("t");
        htmlTreeBuilder0.reader = characterReader15;
        java.lang.String str18 = characterReader15.consumeTo("0: Doctype");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "t" + "'", str18, "t");
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.resetInsertionMode();
        htmlTreeBuilder0.popStackToBefore("EndTag");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = htmlTreeBuilder0.state();
        htmlTreeBuilder0.runParser();
        org.jsoup.parser.Tokeniser tokeniser12 = htmlTreeBuilder0.tokeniser;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder14 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int19 = parseErrorList18.getMaxSize();
        org.jsoup.nodes.Document document20 = htmlTreeBuilder14.parse("0: Doctype", "hi!", parseErrorList18);
        boolean boolean21 = htmlTreeBuilder14.framesetOk();
        org.jsoup.nodes.Document document24 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder14.setHeadElement((org.jsoup.nodes.Element) document24);
        htmlTreeBuilder14.newPendingTableCharacters();
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor31 = parseErrorList30.listIterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList30.iterator();
        org.jsoup.nodes.Document document33 = htmlTreeBuilder14.parse("StartTag", "[100: ]", parseErrorList30);
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        boolean boolean38 = parseErrorList36.contains((java.lang.Object) "0: []");
        java.util.List<org.jsoup.nodes.Node> nodeList39 = htmlTreeBuilder0.parseFragment("35: hi!#", (org.jsoup.nodes.Element) document33, "S", parseErrorList36);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder40 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int45 = parseErrorList44.getMaxSize();
        org.jsoup.nodes.Document document46 = htmlTreeBuilder40.parse("0: Doctype", "hi!", parseErrorList44);
        htmlTreeBuilder40.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray49 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList50 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList50, characterArray49);
        htmlTreeBuilder40.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList50);
        boolean boolean53 = htmlTreeBuilder40.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag55 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement57 = htmlTreeBuilder40.insertForm(startTag55, true);
        org.jsoup.parser.TokenQueue tokenQueue60 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean61 = tokenQueue60.matchesStartTag();
        boolean boolean62 = tokenQueue60.consumeWhitespace();
        boolean boolean63 = tokenQueue60.matchesWhitespace();
        org.jsoup.parser.TokenQueue tokenQueue65 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str67 = tokenQueue65.chompTo("Doctype");
        java.lang.String str68 = tokenQueue65.consumeWord();
        boolean boolean69 = tokenQueue65.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag70 = new org.jsoup.parser.Token.EndTag();
        char[] charArray73 = new char[] { '#', '#' };
        endTag70.appendAttributeValue(charArray73);
        boolean boolean75 = tokenQueue65.matchesAny(charArray73);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder76 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList80 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int81 = parseErrorList80.getMaxSize();
        org.jsoup.nodes.Document document82 = htmlTreeBuilder76.parse("0: Doctype", "hi!", parseErrorList80);
        boolean boolean83 = htmlTreeBuilder76.framesetOk();
        org.jsoup.parser.Parser parser84 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser86 = parser84.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document89 = parser84.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document92 = parser84.parseInput("<hi!>", "[]");
        htmlTreeBuilder76.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document92);
        java.lang.String[] strArray94 = new java.lang.String[] {};
        boolean boolean95 = htmlTreeBuilder76.inScope(strArray94);
        boolean boolean96 = tokenQueue65.matchesAny(strArray94);
        java.lang.String str97 = tokenQueue60.consumeToAny(strArray94);
        boolean boolean98 = htmlTreeBuilder40.inScope("[0: []]", strArray94);
        boolean boolean99 = htmlTreeBuilder0.inScope(strArray94);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState10);
        org.junit.Assert.assertNotNull(tokeniser12);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorItor31);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeList39);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(document46);
        org.junit.Assert.assertNotNull(characterArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(formElement57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "EndTag" + "'", str67, "EndTag");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(parseErrorList80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(document82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(parser84);
        org.junit.Assert.assertNotNull(parser86);
        org.junit.Assert.assertNotNull(document89);
        org.junit.Assert.assertNotNull(document92);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "EndTag" + "'", str97, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.nodes.Element element38 = htmlTreeBuilder0.insert("<!---->");
        htmlTreeBuilder0.generateImpliedEndTags();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(element38);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag("10: ");
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.Rawtext;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder1 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document2 = xmlTreeBuilder1.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList8 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor12 = parseErrorList10.iterator();
        boolean boolean13 = parseErrorList8.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        xmlTreeBuilder3.initialiseParse("<!---->", "hi!", parseErrorList8);
        xmlTreeBuilder1.errors = parseErrorList8;
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream20 = parseErrorList19.stream();
        xmlTreeBuilder1.initialiseParse("a", "[]", parseErrorList19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        tokeniser28.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype32 = tokeniser28.doctypePending;
        tokeniser28.createCommentPending();
        org.jsoup.parser.Token.Comment comment34 = tokeniser28.commentPending;
        boolean boolean35 = parseErrorList19.remove((java.lang.Object) tokeniser28);
        org.jsoup.parser.CharacterReader characterReader37 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean39 = characterReader37.matches('\uffff');
        boolean boolean41 = characterReader37.containsIgnoreCase("0: []");
        tokeniserState0.read(tokeniser28, characterReader37);
        org.jsoup.parser.CharacterReader characterReader43 = null;
        org.jsoup.parser.ParseErrorList parseErrorList45 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream46 = parseErrorList45.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList45.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor48 = parseErrorList45.iterator();
        org.jsoup.parser.Tokeniser tokeniser49 = new org.jsoup.parser.Tokeniser(characterReader43, parseErrorList45);
        org.jsoup.parser.Token.Tag tag50 = tokeniser49.tagPending;
        tokeniser49.emit("hi!");
        org.jsoup.parser.CharacterReader characterReader54 = new org.jsoup.parser.CharacterReader("StartTag");
        int int56 = characterReader54.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean57 = characterReader54.matchesDigit();
        java.lang.String str58 = characterReader54.toString();
        boolean boolean60 = characterReader54.matches(' ');
        boolean boolean62 = characterReader54.matchConsumeIgnoreCase("S");
        char char63 = characterReader54.current();
        java.lang.String str64 = characterReader54.consumeAsString();
        boolean boolean65 = characterReader54.isEmpty();
        java.lang.String str66 = characterReader54.consumeLetterThenDigitSequence();
        tokeniserState0.read(tokeniser49, characterReader54);
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNull(document2);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertNotNull(parseErrorItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertNotNull(parseErrorStream20);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNull(doctype32);
        org.junit.Assert.assertNotNull(comment34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(parseErrorList45);
        org.junit.Assert.assertNotNull(parseErrorStream46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNotNull(parseErrorItor48);
        org.junit.Assert.assertNull(tag50);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "StartTag" + "'", str58, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + char63 + "' != '" + 't' + "'", char63 == 't');
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "t" + "'", str64, "t");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "artTag" + "'", str66, "artTag");
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        htmlTreeBuilder3.clearStackToTableContext();
        htmlTreeBuilder3.generateImpliedEndTags("hi!#");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder3.getPendingTableCharacters();
        boolean boolean16 = htmlTreeBuilder3.inSelectScope("hi!#");
        org.jsoup.parser.CharacterReader characterReader17 = null;
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream20 = parseErrorList19.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList19.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor22 = parseErrorList19.iterator();
        org.jsoup.parser.Tokeniser tokeniser23 = new org.jsoup.parser.Tokeniser(characterReader17, parseErrorList19);
        org.jsoup.parser.Token.Tag tag24 = tokeniser23.tagPending;
        tokeniser23.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag28 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType29 = startTag28.type;
        startTag28.appendTagName('#');
        tokeniser23.tagPending = startTag28;
        java.lang.String str33 = startTag28.tagName;
        java.lang.String str34 = startTag28.tagName;
        org.jsoup.nodes.Element element35 = htmlTreeBuilder3.insert(startTag28);
        startTag28.selfClosing = true;
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertNotNull(parseErrorStream20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorItor22);
        org.junit.Assert.assertNull(tag24);
        org.junit.Assert.assertTrue("'" + tokenType29 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType29.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!#" + "'", str33, "hi!#");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!#" + "'", str34, "hi!#");
        org.junit.Assert.assertNotNull(element35);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.Parser parser19 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder20 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader21 = null;
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream24 = parseErrorList23.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList23.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList23.iterator();
        org.jsoup.parser.Tokeniser tokeniser27 = new org.jsoup.parser.Tokeniser(characterReader21, parseErrorList23);
        org.jsoup.parser.Token.Tag tag28 = tokeniser27.tagPending;
        org.jsoup.parser.Token.Tag tag30 = tokeniser27.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype31 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype32 = doctype31.asDoctype();
        java.lang.String str33 = doctype31.tokenType();
        tokeniser27.emit((org.jsoup.parser.Token) doctype31);
        org.jsoup.parser.Token.Tag tag36 = tokeniser27.createTagPending(true);
        xmlTreeBuilder20.currentToken = tag36;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder38 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList42 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int43 = parseErrorList42.getMaxSize();
        org.jsoup.nodes.Document document44 = htmlTreeBuilder38.parse("0: Doctype", "hi!", parseErrorList42);
        boolean boolean45 = htmlTreeBuilder38.framesetOk();
        org.jsoup.nodes.Document document48 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder38.setHeadElement((org.jsoup.nodes.Element) document48);
        xmlTreeBuilder20.doc = document48;
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document48);
        org.jsoup.parser.Tokeniser tokeniser52 = htmlTreeBuilder0.tokeniser;
        org.jsoup.parser.CharacterReader characterReader53 = htmlTreeBuilder0.reader;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertNotNull(parseErrorStream24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNull(tag28);
        org.junit.Assert.assertNotNull(tag30);
        org.junit.Assert.assertNotNull(doctype32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Doctype" + "'", str33, "Doctype");
        org.junit.Assert.assertNotNull(tag36);
        org.junit.Assert.assertNotNull(parseErrorList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertNotNull(tokeniser52);
        org.junit.Assert.assertNotNull(characterReader53);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        boolean boolean12 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList10.parallelStream();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder14 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int19 = parseErrorList18.getMaxSize();
        org.jsoup.nodes.Document document20 = htmlTreeBuilder14.parse("0: Doctype", "hi!", parseErrorList18);
        htmlTreeBuilder14.generateImpliedEndTags("hi!#");
        htmlTreeBuilder14.generateImpliedEndTags();
        org.jsoup.parser.Token token24 = htmlTreeBuilder14.currentToken;
        org.jsoup.parser.ParseErrorList parseErrorList28 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream29 = parseErrorList28.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor30 = parseErrorList28.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor31 = parseErrorList28.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int34 = parseErrorList33.getMaxSize();
        boolean boolean35 = parseErrorList28.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33);
        org.jsoup.nodes.Document document36 = htmlTreeBuilder14.parse("[]", "hi!", parseErrorList33);
        org.jsoup.parser.ParseError[] parseErrorArray37 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList38 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38, parseErrorArray37);
        org.jsoup.parser.ParseError[] parseErrorArray40 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList41 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList41, parseErrorArray40);
        boolean boolean43 = parseErrorList38.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList41);
        org.jsoup.parser.ParseError[] parseErrorArray44 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList45 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList45, parseErrorArray44);
        boolean boolean47 = parseErrorList41.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList45);
        parseErrorList45.clear();
        boolean boolean49 = parseErrorList45.isEmpty();
        org.jsoup.parser.ParseErrorList parseErrorList51 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream52 = parseErrorList51.stream();
        boolean boolean53 = parseErrorList51.canAddError();
        org.jsoup.parser.ParseError parseError56 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str57 = parseError56.getErrorMessage();
        boolean boolean58 = parseErrorList51.add(parseError56);
        org.jsoup.parser.CharacterReader characterReader59 = null;
        org.jsoup.parser.ParseErrorList parseErrorList61 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream62 = parseErrorList61.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor63 = parseErrorList61.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor64 = parseErrorList61.iterator();
        org.jsoup.parser.Tokeniser tokeniser65 = new org.jsoup.parser.Tokeniser(characterReader59, parseErrorList61);
        org.jsoup.parser.Token.Tag tag66 = tokeniser65.tagPending;
        org.jsoup.parser.Token.Tag tag68 = tokeniser65.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype69 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype70 = doctype69.asDoctype();
        java.lang.String str71 = doctype69.tokenType();
        tokeniser65.emit((org.jsoup.parser.Token) doctype69);
        org.jsoup.parser.ITokeniserState iTokeniserState73 = tokeniser65.getState();
        org.jsoup.parser.Token.Comment comment74 = new org.jsoup.parser.Token.Comment();
        java.lang.String str75 = comment74.toString();
        java.lang.StringBuilder stringBuilder76 = comment74.data;
        boolean boolean77 = comment74.isEndTag();
        boolean boolean78 = comment74.isComment();
        tokeniser65.commentPending = comment74;
        int int80 = parseErrorList51.lastIndexOf((java.lang.Object) comment74);
        boolean boolean81 = parseErrorList45.contains((java.lang.Object) comment74);
        org.jsoup.parser.Token.Doctype doctype82 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str83 = doctype82.getSystemIdentifier();
        org.jsoup.parser.Token.TokenType tokenType84 = doctype82.type;
        comment74.type = tokenType84;
        int int86 = parseErrorList33.lastIndexOf((java.lang.Object) tokenType84);
        org.jsoup.parser.Parser parser87 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser89 = parser87.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document92 = parser87.parseInput("Doctype", "[]");
        java.util.List<org.jsoup.parser.ParseError> parseErrorList93 = parser87.getErrors();
        boolean boolean94 = parseErrorList33.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList93);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream95 = parseErrorList33.parallelStream();
        boolean boolean96 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNotNull(token24);
        org.junit.Assert.assertNotNull(parseErrorList28);
        org.junit.Assert.assertNotNull(parseErrorStream29);
        org.junit.Assert.assertNotNull(parseErrorItor30);
        org.junit.Assert.assertNotNull(parseErrorItor31);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNotNull(parseErrorArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(parseErrorArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(parseErrorArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(parseErrorList51);
        org.junit.Assert.assertNotNull(parseErrorStream52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(parseErrorList61);
        org.junit.Assert.assertNotNull(parseErrorStream62);
        org.junit.Assert.assertNotNull(parseErrorItor63);
        org.junit.Assert.assertNotNull(parseErrorItor64);
        org.junit.Assert.assertNull(tag66);
        org.junit.Assert.assertNotNull(tag68);
        org.junit.Assert.assertNotNull(doctype70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Doctype" + "'", str71, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "<!---->" + "'", str75, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder76);
        org.junit.Assert.assertEquals(stringBuilder76.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertTrue("'" + tokenType84 + "' != '" + org.jsoup.parser.Token.TokenType.Doctype + "'", tokenType84.equals(org.jsoup.parser.Token.TokenType.Doctype));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(parser87);
        org.junit.Assert.assertNotNull(parser89);
        org.junit.Assert.assertNotNull(document92);
        org.junit.Assert.assertNotNull(parseErrorList93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(parseErrorStream95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesStartTag();
        char char6 = tokenQueue1.peek();
        java.lang.String str7 = tokenQueue1.consumeAttributeKey();
        java.lang.String str8 = tokenQueue1.consumeAttributeKey();
        boolean boolean9 = tokenQueue1.matchesStartTag();
        boolean boolean10 = tokenQueue1.consumeWhitespace();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\000' + "'", char6 == '\000');
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.nodes.Document document22 = parser19.parseInput("hi!", "[]");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder23 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList27 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int28 = parseErrorList27.getMaxSize();
        org.jsoup.nodes.Document document29 = htmlTreeBuilder23.parse("0: Doctype", "hi!", parseErrorList27);
        htmlTreeBuilder23.resetInsertionMode();
        htmlTreeBuilder23.popStackToBefore("EndTag");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState33 = htmlTreeBuilder23.state();
        htmlTreeBuilder23.runParser();
        org.jsoup.parser.Parser parser35 = parser19.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder23);
        org.jsoup.parser.CharacterReader characterReader36 = htmlTreeBuilder23.reader;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder37 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader38 = null;
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream41 = parseErrorList40.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList40.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList40.iterator();
        org.jsoup.parser.Tokeniser tokeniser44 = new org.jsoup.parser.Tokeniser(characterReader38, parseErrorList40);
        org.jsoup.parser.Token.Tag tag45 = tokeniser44.tagPending;
        org.jsoup.parser.Token.Tag tag47 = tokeniser44.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype48 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype49 = doctype48.asDoctype();
        java.lang.String str50 = doctype48.tokenType();
        tokeniser44.emit((org.jsoup.parser.Token) doctype48);
        org.jsoup.parser.Token.Tag tag53 = tokeniser44.createTagPending(true);
        xmlTreeBuilder37.currentToken = tag53;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder55 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList59 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int60 = parseErrorList59.getMaxSize();
        org.jsoup.nodes.Document document61 = htmlTreeBuilder55.parse("0: Doctype", "hi!", parseErrorList59);
        boolean boolean62 = htmlTreeBuilder55.framesetOk();
        org.jsoup.nodes.Document document65 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder55.setHeadElement((org.jsoup.nodes.Element) document65);
        xmlTreeBuilder37.doc = document65;
        org.jsoup.parser.ParseErrorList parseErrorList71 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream72 = parseErrorList71.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor73 = parseErrorList71.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor74 = parseErrorList71.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList76 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int77 = parseErrorList76.getMaxSize();
        boolean boolean78 = parseErrorList71.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList76);
        xmlTreeBuilder37.initialiseParse("hi!#", "0: []", parseErrorList76);
        parseErrorList76.clear();
        org.jsoup.parser.Tokeniser tokeniser81 = new org.jsoup.parser.Tokeniser(characterReader36, parseErrorList76);
        java.lang.String str83 = tokeniser81.unescapeEntities(true);
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(parseErrorList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState33);
        org.junit.Assert.assertNotNull(parser35);
        org.junit.Assert.assertNotNull(characterReader36);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertNotNull(parseErrorStream41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNull(tag45);
        org.junit.Assert.assertNotNull(tag47);
        org.junit.Assert.assertNotNull(doctype49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Doctype" + "'", str50, "Doctype");
        org.junit.Assert.assertNotNull(tag53);
        org.junit.Assert.assertNotNull(parseErrorList59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(document61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertNotNull(parseErrorList71);
        org.junit.Assert.assertNotNull(parseErrorStream72);
        org.junit.Assert.assertNotNull(parseErrorItor73);
        org.junit.Assert.assertNotNull(parseErrorItor74);
        org.junit.Assert.assertNotNull(parseErrorList76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.parser.Token token10 = htmlTreeBuilder0.currentToken;
        htmlTreeBuilder0.framesetOk(true);
        boolean boolean13 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag15 = new org.jsoup.parser.Token.EndTag();
        endTag15.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder17 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        org.jsoup.nodes.Document document23 = htmlTreeBuilder17.parse("0: Doctype", "hi!", parseErrorList21);
        boolean boolean24 = htmlTreeBuilderState14.process((org.jsoup.parser.Token) endTag15, htmlTreeBuilder17);
        org.jsoup.nodes.FormElement formElement25 = htmlTreeBuilder17.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder26 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int31 = parseErrorList30.getMaxSize();
        org.jsoup.nodes.Document document32 = htmlTreeBuilder26.parse("0: Doctype", "hi!", parseErrorList30);
        boolean boolean33 = htmlTreeBuilder26.framesetOk();
        org.jsoup.parser.Parser parser34 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser36 = parser34.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document39 = parser34.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document42 = parser34.parseInput("<hi!>", "[]");
        htmlTreeBuilder26.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document42);
        boolean boolean44 = htmlTreeBuilder26.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder45 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList50 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList52 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream53 = parseErrorList52.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor54 = parseErrorList52.iterator();
        boolean boolean55 = parseErrorList50.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList52);
        xmlTreeBuilder45.initialiseParse("<!---->", "hi!", parseErrorList50);
        org.jsoup.parser.ParseErrorList parseErrorList60 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document61 = xmlTreeBuilder45.parse("", "[]", parseErrorList60);
        boolean boolean62 = htmlTreeBuilder26.isInActiveFormattingElements((org.jsoup.nodes.Element) document61);
        boolean boolean63 = htmlTreeBuilder17.isInActiveFormattingElements((org.jsoup.nodes.Element) document61);
        htmlTreeBuilder0.doc = document61;
        htmlTreeBuilder0.generateImpliedEndTags("[100: ]");
        boolean boolean68 = htmlTreeBuilder0.inListItemScope("<hi!>");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(token10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState14);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(formElement25);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(parser34);
        org.junit.Assert.assertNotNull(parser36);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(parseErrorList52);
        org.junit.Assert.assertNotNull(parseErrorStream53);
        org.junit.Assert.assertNotNull(parseErrorItor54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(parseErrorList60);
        org.junit.Assert.assertNotNull(document61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        tokenQueue1.advance();
        boolean boolean7 = tokenQueue1.matchChomp("0: Doctype");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder8 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int13 = parseErrorList12.getMaxSize();
        org.jsoup.nodes.Document document14 = htmlTreeBuilder8.parse("0: Doctype", "hi!", parseErrorList12);
        boolean boolean15 = htmlTreeBuilder8.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState16 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder8.error(htmlTreeBuilderState16);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState18 = null;
        htmlTreeBuilder8.transition(htmlTreeBuilderState18);
        htmlTreeBuilder8.clearStackToTableContext();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder21 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int26 = parseErrorList25.getMaxSize();
        org.jsoup.nodes.Document document27 = htmlTreeBuilder21.parse("0: Doctype", "hi!", parseErrorList25);
        boolean boolean28 = htmlTreeBuilder21.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState29 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder21.error(htmlTreeBuilderState29);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder31 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList35 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int36 = parseErrorList35.getMaxSize();
        org.jsoup.nodes.Document document37 = htmlTreeBuilder31.parse("0: Doctype", "hi!", parseErrorList35);
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream42 = parseErrorList41.stream();
        boolean boolean43 = parseErrorList41.canAddError();
        org.jsoup.nodes.Document document44 = htmlTreeBuilder31.parse("EndTag", "hi!#", parseErrorList41);
        java.lang.String[] strArray52 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean53 = htmlTreeBuilder31.inScope("hi!#", strArray52);
        boolean boolean54 = htmlTreeBuilder21.inScope(strArray52);
        htmlTreeBuilder8.popStackToClose(strArray52);
        boolean boolean56 = tokenQueue1.matchesAny(strArray52);
        java.lang.String str57 = tokenQueue1.consumeWord();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState16);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState29);
        org.junit.Assert.assertNotNull(parseErrorList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertNotNull(parseErrorStream42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }
}
