package org.jsoup.parser;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.CharacterReferenceInRcdata;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.AttributeName;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.CommentEndBang;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapeStart;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "hi!");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.InHeadNoscript;
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.ScriptDataLessthanSign;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.Comment;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.AfterDoctypePublicIdentifier;
        java.lang.Class<?> wildcardClass1 = tokeniserState0.getClass();
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.AfterAfterBody;
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.RCDATAEndTagName;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.iterator();
        java.lang.Class<?> wildcardClass4 = parseErrorItor3.getClass();
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.DoctypeSystemIdentifier_doubleQuoted;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.ForeignContent;
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        java.lang.String str2 = org.jsoup.parser.Parser.unescapeEntities("", false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.DoctypePublicIdentifier_singleQuoted;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.CommentStartDash;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.function.UnaryOperator<org.jsoup.parser.ParseError> parseErrorUnaryOperator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            parseErrorList1.replaceAll(parseErrorUnaryOperator7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.iterator();
        org.jsoup.parser.ParseError[] parseErrorArray5 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList6 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList6, parseErrorArray5);
        org.jsoup.parser.ParseError[] parseErrorArray8 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList9 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9, parseErrorArray8);
        boolean boolean11 = parseErrorList6.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = parseErrorList1.addAll((int) '#', (java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertNotNull(parseErrorArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parseErrorArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        java.lang.String str1 = org.jsoup.parser.TokenQueue.unescape("");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.CommentEndDash;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        char char0 = org.jsoup.parser.Tokeniser.replacementChar;
        org.junit.Assert.assertTrue("'" + char0 + "' != '" + '\ufffd' + "'", char0 == '\ufffd');
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.InHead;
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList4.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = parseErrorList1.addAll((int) (byte) 100, (java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.PLAINTEXT;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.jsoup.parser.Token.TokenType tokenType0 = org.jsoup.parser.Token.TokenType.EndTag;
        org.junit.Assert.assertTrue("'" + tokenType0 + "' != '" + org.jsoup.parser.Token.TokenType.EndTag + "'", tokenType0.equals(org.jsoup.parser.Token.TokenType.EndTag));
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        int int8 = parseErrorList4.lastIndexOf((java.lang.Object) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor10 = parseErrorList4.listIterator((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError8 = parseErrorList1.remove(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        boolean boolean1 = doctype0.isCharacter();
        boolean boolean2 = doctype0.isEndTag();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.StartTag startTag3 = doctype0.asStartTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$StartTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup;
        org.jsoup.parser.Token.Doctype doctype1 = new org.jsoup.parser.Token.Doctype();
        boolean boolean2 = doctype1.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) doctype1, htmlTreeBuilder3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType2 = startTag1.type;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.EndTag endTag3 = startTag1.asEndTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$EndTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + tokenType2 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType2.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.Data;
        org.jsoup.parser.Tokeniser tokeniser1 = null;
        org.jsoup.parser.CharacterReader characterReader2 = null;
        // The following exception was thrown during execution in test generation
        try {
            miniSoupTokeniserState0.read(tokeniser1, characterReader2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.BeforeDoctypeName;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.Data;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.CharacterReader characterReader8 = null;
        // The following exception was thrown during execution in test generation
        try {
            miniSoupTokeniserState0.read(tokeniser7, characterReader8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitTagPending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.CommentEnd;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        tokeniser7.emit("hi!");
        org.jsoup.parser.CharacterReader characterReader11 = null;
        // The following exception was thrown during execution in test generation
        try {
            tokeniserState0.read(tokeniser7, characterReader11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.SelfClosingStartTag;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.CharacterReader characterReader9 = null;
        // The following exception was thrown during execution in test generation
        try {
            tokeniserState0.read(tokeniser7, characterReader9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.ScriptDataEscapedEndTagOpen;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        boolean boolean3 = parseErrorList1.canAddError();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError5 = parseErrorList1.get((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitTagPending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.jsoup.parser.Token.TokenType tokenType0 = org.jsoup.parser.Token.TokenType.Doctype;
        org.junit.Assert.assertTrue("'" + tokenType0 + "' != '" + org.jsoup.parser.Token.TokenType.Doctype + "'", tokenType0.equals(org.jsoup.parser.Token.TokenType.Doctype));
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.AfterDoctypePublicKeyword;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.RcdataLessthanSign;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        boolean boolean1 = doctype0.isCharacter();
        org.jsoup.parser.Token.TokenType tokenType2 = org.jsoup.parser.Token.TokenType.StartTag;
        doctype0.type = tokenType2;
        java.lang.String str4 = doctype0.getSystemIdentifier();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.EndTag endTag5 = doctype0.asEndTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$EndTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + tokenType2 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType2.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapeEnd;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype1 = doctype0.asDoctype();
        boolean boolean2 = doctype0.isEOF();
        boolean boolean3 = doctype0.isForceQuirks();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.StartTag startTag4 = doctype0.asStartTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$StartTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doctype1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype1 = doctype0.asDoctype();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.StartTag startTag2 = doctype1.asStartTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$StartTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doctype1);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.CharacterReferenceInData;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.TagName;
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.jsoup.parser.Token.TokenType tokenType0 = org.jsoup.parser.Token.TokenType.Comment;
        org.junit.Assert.assertTrue("'" + tokenType0 + "' != '" + org.jsoup.parser.Token.TokenType.Comment + "'", tokenType0.equals(org.jsoup.parser.Token.TokenType.Comment));
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.AfterHead;
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        org.jsoup.parser.ParseError parseError11 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        // The following exception was thrown during execution in test generation
        try {
            parseErrorList1.add((int) '4', parseError11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList1.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int7 = parseErrorList6.getMaxSize();
        boolean boolean8 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList6);
        org.jsoup.parser.ParseError parseError12 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str13 = parseError12.getErrorMessage();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError14 = parseErrorList1.set((int) (short) -1, parseError12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype1 = doctype0.asDoctype();
        java.lang.String str2 = doctype0.tokenType();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Comment comment3 = doctype0.asComment();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$Comment");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doctype1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Doctype" + "'", str2, "Doctype");
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.DoctypeSystemIdentifier_singleQuoted;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.CharacterReader characterReader8 = null;
        // The following exception was thrown during execution in test generation
        try {
            tokeniserState0.read(tokeniser7, characterReader8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        java.lang.String str2 = org.jsoup.parser.Parser.unescapeEntities("hi!", false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document4 = parser1.parseInput("hi!", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        tokeniser7.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag12 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType13 = startTag12.type;
        startTag12.appendTagName('#');
        tokeniser7.tagPending = startTag12;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element17 = xmlTreeBuilder0.insert(startTag12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertTrue("'" + tokenType13 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType13.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.BetweenDoctypePublicAndSystemIdentifiers;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "[]");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        java.lang.String str2 = org.jsoup.parser.Parser.unescapeEntities("", true);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        boolean boolean12 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList10.parallelStream();
        java.util.function.UnaryOperator<org.jsoup.parser.ParseError> parseErrorUnaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            parseErrorList10.replaceAll(parseErrorUnaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorStream13);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.TagOpen;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        java.util.List<org.jsoup.parser.ParseError> parseErrorList13 = parseErrorList8.subList(0, 0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.parallelStream();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token.Comment comment1 = new org.jsoup.parser.Token.Comment();
        java.lang.String str2 = comment1.toString();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = xmlTreeBuilder0.process((org.jsoup.parser.Token) comment1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "<!---->" + "'", str2, "<!---->");
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        boolean boolean1 = org.jsoup.parser.Tag.isKnownTag("");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        endTag0.tagName = "hi!";
        endTag0.selfClosing = false;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.StartTag startTag5 = endTag0.asStartTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$StartTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.ScriptDataEscapedDashDash;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.EndTagOpen;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        java.lang.StringBuilder stringBuilder10 = tokeniser6.dataBuffer;
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray13 = tokeniser6.consumeCharacterReference((java.lang.Character) 'a', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNull(stringBuilder10);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.ScriptDataEscapeStart;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.parser.ParseError> parseErrorList13 = parseErrorList8.subList((int) (byte) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: fromIndex = -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        java.lang.String str1 = org.jsoup.parser.TokenQueue.unescape("<hi!>");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "<hi!>" + "'", str1, "<hi!>");
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        char[] charArray3 = new char[] { '#', '#' };
        endTag0.appendAttributeValue(charArray3);
        org.jsoup.nodes.Attributes attributes5 = endTag0.attributes;
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#, #]");
        org.junit.Assert.assertNull(attributes5);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        char[] charArray3 = new char[] { '#', '#' };
        endTag0.appendAttributeValue(charArray3);
        endTag0.finaliseTag();
        boolean boolean6 = endTag0.selfClosing;
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isKnownTag();
        boolean boolean5 = tag1.preserveWhitespace();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList1.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int7 = parseErrorList6.getMaxSize();
        boolean boolean8 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList6);
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        boolean boolean16 = parseErrorList1.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        org.jsoup.parser.Token.EndTag endTag22 = new org.jsoup.parser.Token.EndTag();
        char[] charArray25 = new char[] { '#', '#' };
        endTag22.appendAttributeValue(charArray25);
        endTag22.finaliseTag();
        boolean boolean28 = endTag22.isSelfClosing();
        org.jsoup.parser.Tag tag30 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean31 = tag30.isFormListed();
        org.jsoup.parser.Tag tag32 = tag30.setSelfClosing();
        boolean boolean33 = tag30.isKnownTag();
        java.lang.Object[] objArray35 = new java.lang.Object[] { boolean28, tag30, "Doctype" };
        org.jsoup.parser.ParseError parseError36 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray35);
        org.jsoup.parser.ParseError parseError37 = new org.jsoup.parser.ParseError((int) (byte) 0, "Doctype", objArray35);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError38 = parseErrorList1.set((int) (short) -1, parseError37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(tag30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(tag32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[false, hi!, Doctype]");
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.SelfClosingStartTag;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        tokeniser7.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype11 = tokeniser7.doctypePending;
        org.jsoup.parser.CharacterReader characterReader12 = null;
        // The following exception was thrown during execution in test generation
        try {
            tokeniserState0.read(tokeniser7, characterReader12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNull(doctype11);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        java.lang.String str14 = doctype10.getPublicIdentifier();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.EndTag endTag15 = doctype10.asEndTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$EndTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.TokeniserState tokeniserState12 = org.jsoup.parser.TokeniserState.BeforeAttributeName;
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.advanceTransition((org.jsoup.parser.ITokeniserState) tokeniserState12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNotNull(tokeniserState12);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        char[] charArray3 = new char[] { '#', '#' };
        endTag0.appendAttributeValue(charArray3);
        endTag0.finaliseTag();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Character character6 = endTag0.asCharacter();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Character");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#, #]");
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray9 = tokeniser6.consumeCharacterReference((java.lang.Character) ' ', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        org.jsoup.parser.ParseError parseError11 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str12 = parseError11.getErrorMessage();
        // The following exception was thrown during execution in test generation
        try {
            parseErrorList4.add((int) (byte) -1, parseError11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        boolean boolean3 = parseErrorList1.canAddError();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList1.iterator();
        org.jsoup.parser.ParseError parseError8 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str9 = parseError8.getErrorMessage();
        // The following exception was thrown during execution in test generation
        try {
            parseErrorList1.add((int) (short) 100, parseError8);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.BeforeAttributeValue;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.Token.Tag tag10 = tokeniser7.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype11 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype12 = doctype11.asDoctype();
        java.lang.String str13 = doctype11.tokenType();
        tokeniser7.emit((org.jsoup.parser.Token) doctype11);
        org.jsoup.parser.CharacterReader characterReader15 = null;
        // The following exception was thrown during execution in test generation
        try {
            tokeniserState0.read(tokeniser7, characterReader15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(tag10);
        org.junit.Assert.assertNotNull(doctype12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Doctype" + "'", str13, "Doctype");
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.Data;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder1 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader2 = null;
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.iterator();
        org.jsoup.parser.Tokeniser tokeniser8 = new org.jsoup.parser.Tokeniser(characterReader2, parseErrorList4);
        xmlTreeBuilder1.tokeniser = tokeniser8;
        org.jsoup.parser.Tokeniser tokeniser10 = xmlTreeBuilder1.tokeniser;
        org.jsoup.parser.CharacterReader characterReader11 = null;
        // The following exception was thrown during execution in test generation
        try {
            miniSoupTokeniserState0.read(tokeniser10, characterReader11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(tokeniser10);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.Token.Tag tag10 = tokeniser7.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype11 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype12 = doctype11.asDoctype();
        java.lang.String str13 = doctype11.tokenType();
        tokeniser7.emit((org.jsoup.parser.Token) doctype11);
        org.jsoup.parser.Token.Tag tag16 = tokeniser7.createTagPending(true);
        xmlTreeBuilder0.currentToken = tag16;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element18 = xmlTreeBuilder0.currentElement();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(tag10);
        org.junit.Assert.assertNotNull(doctype12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Doctype" + "'", str13, "Doctype");
        org.junit.Assert.assertNotNull(tag16);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        java.util.function.UnaryOperator<org.jsoup.parser.ParseError> parseErrorUnaryOperator3 = null;
        // The following exception was thrown during execution in test generation
        try {
            parseErrorList2.replaceAll(parseErrorUnaryOperator3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.preserveWhitespace();
        boolean boolean3 = tag1.isKnownTag();
        boolean boolean4 = tag1.isBlock();
        boolean boolean5 = tag1.isEmpty();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitTagPending();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: There is an unread token pending!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        boolean boolean7 = tokeniser6.isAppropriateEndTagToken();
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitDoctypePending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.CharacterReader characterReader3 = null;
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream6 = parseErrorList5.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList5.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList5.iterator();
        org.jsoup.parser.Tokeniser tokeniser9 = new org.jsoup.parser.Tokeniser(characterReader3, parseErrorList5);
        org.jsoup.parser.Token.Tag tag10 = tokeniser9.tagPending;
        org.jsoup.parser.Token.Tag tag12 = tokeniser9.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype13 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype14 = doctype13.asDoctype();
        java.lang.String str15 = doctype13.tokenType();
        tokeniser9.emit((org.jsoup.parser.Token) doctype13);
        boolean boolean17 = tag1.equals((java.lang.Object) doctype13);
        boolean boolean18 = tag1.isInline();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorStream6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNull(tag10);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertNotNull(doctype14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Doctype" + "'", str15, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor2 = parseErrorList1.listIterator();
        org.jsoup.parser.ParseError[] parseErrorArray4 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList5 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList5, parseErrorArray4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList5.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        org.jsoup.parser.ParseError[] parseErrorArray11 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList12 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12, parseErrorArray11);
        boolean boolean14 = parseErrorList8.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList8.stream();
        org.jsoup.parser.Token.EndTag endTag21 = new org.jsoup.parser.Token.EndTag();
        char[] charArray24 = new char[] { '#', '#' };
        endTag21.appendAttributeValue(charArray24);
        endTag21.finaliseTag();
        boolean boolean27 = endTag21.isSelfClosing();
        org.jsoup.parser.Tag tag29 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean30 = tag29.isFormListed();
        org.jsoup.parser.Tag tag31 = tag29.setSelfClosing();
        boolean boolean32 = tag29.isKnownTag();
        java.lang.Object[] objArray34 = new java.lang.Object[] { boolean27, tag29, "Doctype" };
        org.jsoup.parser.ParseError parseError35 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray34);
        org.jsoup.parser.ParseError parseError36 = new org.jsoup.parser.ParseError((int) (byte) 0, "Doctype", objArray34);
        parseErrorList8.add((int) (short) 0, parseError36);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError38 = parseErrorList1.set((int) (byte) 1, parseError36);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorItor2);
        org.junit.Assert.assertNotNull(parseErrorArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(tag29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[false, hi!, Doctype]");
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.InFrameset;
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        boolean boolean15 = parseErrorList10.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        java.lang.Object[] objArray16 = parseErrorList10.toArray();
        parseErrorList10.clear();
        org.jsoup.parser.ParseError[] parseErrorArray18 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList19 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19, parseErrorArray18);
        boolean boolean21 = parseErrorList10.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        boolean boolean22 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        java.lang.Object[] objArray23 = parseErrorList19.toArray();
        java.lang.Object obj24 = parseErrorList19.clone();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "[]");
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.isEmpty();
        boolean boolean6 = tag1.isEmpty();
        boolean boolean7 = tag1.isEmpty();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token token1 = xmlTreeBuilder0.currentToken;
        org.jsoup.parser.CharacterReader characterReader2 = xmlTreeBuilder0.reader;
        org.junit.Assert.assertNull(token1);
        org.junit.Assert.assertNull(characterReader2);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.DoctypePublicIdentifier_doubleQuoted;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList2.listIterator(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.InBody;
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag();
        startTag1.appendAttributeValue("hi!");
        startTag1.appendAttributeValue("");
        org.jsoup.nodes.Attributes attributes6 = null;
        startTag1.attributes = attributes6;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder8 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) startTag1, htmlTreeBuilder8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        java.lang.StringBuilder stringBuilder10 = tokeniser6.dataBuffer;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = tokeniser6.unescapeEntities(true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNull(stringBuilder10);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        java.util.List<org.jsoup.nodes.Node> nodeList2 = org.jsoup.parser.Parser.parseXmlFragment("Doctype", "Doctype");
        java.lang.Class<?> wildcardClass3 = nodeList2.getClass();
        org.junit.Assert.assertNotNull(nodeList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        endTag0.tagName = "hi!";
        java.lang.String str3 = endTag0.tagName;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitCommentPending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str1 = doctype0.getSystemIdentifier();
        boolean boolean2 = doctype0.isForceQuirks();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList15 = xmlTreeBuilder0.stack;
        org.jsoup.parser.CharacterReader characterReader16 = null;
        xmlTreeBuilder0.reader = characterReader16;
        org.jsoup.parser.CharacterReader characterReader18 = null;
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream21 = parseErrorList20.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor22 = parseErrorList20.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList20.iterator();
        org.jsoup.parser.Tokeniser tokeniser24 = new org.jsoup.parser.Tokeniser(characterReader18, parseErrorList20);
        org.jsoup.parser.Token.Tag tag25 = tokeniser24.tagPending;
        tokeniser24.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag29 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType30 = startTag29.type;
        startTag29.appendTagName('#');
        tokeniser24.tagPending = startTag29;
        java.lang.String str34 = startTag29.tagName;
        java.lang.String str35 = startTag29.tagName;
        startTag29.appendTagName("");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = xmlTreeBuilder0.process((org.jsoup.parser.Token) startTag29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(elementList15);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertNotNull(parseErrorStream21);
        org.junit.Assert.assertNotNull(parseErrorItor22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNull(tag25);
        org.junit.Assert.assertTrue("'" + tokenType30 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType30.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!#" + "'", str34, "hi!#");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!#" + "'", str35, "hi!#");
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList4.stream();
        org.jsoup.parser.Token.EndTag endTag17 = new org.jsoup.parser.Token.EndTag();
        char[] charArray20 = new char[] { '#', '#' };
        endTag17.appendAttributeValue(charArray20);
        endTag17.finaliseTag();
        boolean boolean23 = endTag17.isSelfClosing();
        org.jsoup.parser.Tag tag25 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean26 = tag25.isFormListed();
        org.jsoup.parser.Tag tag27 = tag25.setSelfClosing();
        boolean boolean28 = tag25.isKnownTag();
        java.lang.Object[] objArray30 = new java.lang.Object[] { boolean23, tag25, "Doctype" };
        org.jsoup.parser.ParseError parseError31 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray30);
        org.jsoup.parser.ParseError parseError32 = new org.jsoup.parser.ParseError((int) (byte) 0, "Doctype", objArray30);
        parseErrorList4.add((int) (short) 0, parseError32);
        org.jsoup.parser.ParseError parseError37 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        // The following exception was thrown during execution in test generation
        try {
            parseErrorList4.add((int) '\ufffd', parseError37);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 65533, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(tag25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(tag27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[false, hi!, Doctype]");
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        org.jsoup.parser.ITokeniserState iTokeniserState14 = tokeniser6.getState();
        org.jsoup.parser.TokeniserState tokeniserState15 = org.jsoup.parser.TokeniserState.Rawtext;
        tokeniser6.eofError((org.jsoup.parser.ITokeniserState) tokeniserState15);
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitDoctypePending();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: There is an unread token pending!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState14);
        org.junit.Assert.assertNotNull(tokeniserState15);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        char[] charArray3 = new char[] { '#', '#' };
        endTag0.appendAttributeValue(charArray3);
        endTag0.finaliseTag();
        java.lang.String str6 = endTag0.tokenType();
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#, #]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "EndTag" + "'", str6, "EndTag");
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        char char0 = org.jsoup.parser.CharacterReader.EOF;
        org.junit.Assert.assertTrue("'" + char0 + "' != '" + '\uffff' + "'", char0 == '\uffff');
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList8.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList11.listIterator();
        int int16 = parseErrorList11.lastIndexOf((java.lang.Object) 1.0d);
        boolean boolean17 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError19 = parseErrorList1.get(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList((int) (byte) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal Capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        java.util.List<org.jsoup.parser.ParseError> parseErrorList13 = parseErrorList8.subList(0, 0);
        java.lang.Class<?> wildcardClass14 = parseErrorList13.getClass();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.CdataSection;
        java.lang.Class<?> wildcardClass1 = tokeniserState0.getClass();
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        org.jsoup.parser.Token.Doctype doctype23 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype24 = doctype23.asDoctype();
        java.lang.String str25 = doctype23.tokenType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = xmlTreeBuilder3.process((org.jsoup.parser.Token) doctype23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(doctype24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Doctype" + "'", str25, "Doctype");
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.Tag tag11 = tokeniser6.createTagPending(false);
        java.lang.StringBuilder stringBuilder12 = tokeniser6.dataBuffer;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNull(stringBuilder12);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        boolean boolean7 = tokeniser6.isAppropriateEndTagToken();
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitCommentPending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.nodes.Document document2 = xmlTreeBuilder0.doc;
        xmlTreeBuilder0.baseUri = "[]";
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNull(document2);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        java.lang.String str4 = tag1.getName();
        java.lang.String str5 = tag1.toString();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        boolean boolean3 = parseErrorList1.canAddError();
        org.jsoup.parser.ParseError parseError6 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str7 = parseError6.getErrorMessage();
        boolean boolean8 = parseErrorList1.add(parseError6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor10 = parseErrorList1.listIterator((int) '\ufffd');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 65533");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        int int9 = parseErrorList4.lastIndexOf((java.lang.Object) 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList4.listIterator(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        char[] charArray3 = new char[] { '#', '#' };
        endTag0.appendAttributeValue(charArray3);
        endTag0.finaliseTag();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.StartTag startTag6 = endTag0.asStartTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$StartTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#, #]");
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.AfterAfterFrameset;
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.Token.Comment comment2 = new org.jsoup.parser.Token.Comment();
        java.lang.String str3 = comment2.toString();
        java.lang.StringBuilder stringBuilder4 = comment2.data;
        boolean boolean5 = comment2.isEndTag();
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(comment2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<!---->" + "'", str3, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder4);
        org.junit.Assert.assertEquals(stringBuilder4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype1 = new org.jsoup.parser.Token.Doctype();
        boolean boolean2 = doctype1.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = null;
        boolean boolean4 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) doctype1, htmlTreeBuilder3);
        java.lang.StringBuilder stringBuilder5 = doctype1.name;
        doctype1.forceQuirks = false;
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(stringBuilder5);
        org.junit.Assert.assertEquals(stringBuilder5.toString(), "");
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype12 = tokeniser6.doctypePending;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token token13 = tokeniser6.read();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNull(doctype12);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.Data;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        parseErrorList8.clear();
        boolean boolean12 = parseErrorList8.isEmpty();
        org.jsoup.parser.Token.Doctype doctype13 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype14 = doctype13.asDoctype();
        boolean boolean15 = doctype13.isEOF();
        boolean boolean16 = doctype13.isForceQuirks();
        boolean boolean17 = doctype13.isEndTag();
        boolean boolean18 = parseErrorList8.remove((java.lang.Object) boolean17);
        parseErrorList8.ensureCapacity((int) (short) 10);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doctype14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        boolean boolean12 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError14 = parseErrorList10.get((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        boolean boolean3 = parseErrorList1.canAddError();
        org.jsoup.parser.ParseError parseError6 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str7 = parseError6.getErrorMessage();
        boolean boolean8 = parseErrorList1.add(parseError6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor10 = parseErrorList1.listIterator((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.Data;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        tokeniser7.createTempBuffer();
        boolean boolean9 = tokeniser7.currentNodeInHtmlNS();
        org.jsoup.parser.CharacterReader characterReader10 = null;
        // The following exception was thrown during execution in test generation
        try {
            miniSoupTokeniserState0.read(tokeniser7, characterReader10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int2 = parseErrorList1.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        org.jsoup.parser.ParseError[] parseErrorArray6 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList7 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7, parseErrorArray6);
        boolean boolean9 = parseErrorList4.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList7.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        parseErrorList11.clear();
        boolean boolean15 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.parser.ParseError> parseErrorList18 = parseErrorList11.subList(10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(10) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(parseErrorArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        boolean boolean1 = org.jsoup.parser.Tag.isKnownTag("0: []");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList4.stream();
        org.jsoup.parser.Token.EndTag endTag17 = new org.jsoup.parser.Token.EndTag();
        char[] charArray20 = new char[] { '#', '#' };
        endTag17.appendAttributeValue(charArray20);
        endTag17.finaliseTag();
        boolean boolean23 = endTag17.isSelfClosing();
        org.jsoup.parser.Tag tag25 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean26 = tag25.isFormListed();
        org.jsoup.parser.Tag tag27 = tag25.setSelfClosing();
        boolean boolean28 = tag25.isKnownTag();
        java.lang.Object[] objArray30 = new java.lang.Object[] { boolean23, tag25, "Doctype" };
        org.jsoup.parser.ParseError parseError31 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray30);
        org.jsoup.parser.ParseError parseError32 = new org.jsoup.parser.ParseError((int) (byte) 0, "Doctype", objArray30);
        parseErrorList4.add((int) (short) 0, parseError32);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream34 = parseErrorList4.parallelStream();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(tag25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(tag27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[false, hi!, Doctype]");
        org.junit.Assert.assertNotNull(parseErrorStream34);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.jsoup.parser.Token.TokenType tokenType0 = org.jsoup.parser.Token.TokenType.Character;
        org.junit.Assert.assertTrue("'" + tokenType0 + "' != '" + org.jsoup.parser.Token.TokenType.Character + "'", tokenType0.equals(org.jsoup.parser.Token.TokenType.Character));
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        boolean boolean9 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = tokeniser10.unescapeEntities(true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.jsoup.parser.ParseError parseError2 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        int int3 = parseError2.getPosition();
        java.lang.String str4 = parseError2.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100: " + "'", str4, "100: ");
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "<!---->");
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.replaceActiveFormattingElement((org.jsoup.nodes.Element) document13, (org.jsoup.nodes.Element) document16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        org.jsoup.nodes.Attributes attributes12 = null;
        org.jsoup.parser.Token.StartTag startTag13 = new org.jsoup.parser.Token.StartTag("[]", attributes12);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element14 = htmlTreeBuilder3.insert(startTag13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList2.listIterator();
        org.junit.Assert.assertNotNull(parseErrorItor3);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        boolean boolean3 = parseErrorList1.canAddError();
        org.jsoup.parser.ParseError parseError6 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str7 = parseError6.getErrorMessage();
        boolean boolean8 = parseErrorList1.add(parseError6);
        java.lang.Class<?> wildcardClass9 = parseErrorList1.getClass();
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        java.lang.String str1 = endTag0.tagName;
        org.jsoup.nodes.Attributes attributes2 = endTag0.attributes;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Character character3 = endTag0.asCharacter();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Character");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(attributes2);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        boolean boolean19 = doctype18.isCharacter();
        tokeniser6.doctypePending = doctype18;
        org.jsoup.parser.Token.Doctype doctype21 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype22 = doctype21.asDoctype();
        java.lang.StringBuilder stringBuilder23 = doctype22.name;
        tokeniser6.dataBuffer = stringBuilder23;
        tokeniser6.acknowledgeSelfClosingFlag();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doctype22);
        org.junit.Assert.assertNotNull(stringBuilder23);
        org.junit.Assert.assertEquals(stringBuilder23.toString(), "");
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        boolean boolean11 = doctype10.isCharacter();
        boolean boolean12 = doctype10.isEndTag();
        boolean boolean13 = doctype10.isCharacter();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = tokeniser6.appropriateEndTagName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        boolean boolean19 = doctype18.isCharacter();
        tokeniser6.doctypePending = doctype18;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype22 = new org.jsoup.parser.Token.Doctype();
        boolean boolean23 = doctype22.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = null;
        boolean boolean25 = htmlTreeBuilderState21.process((org.jsoup.parser.Token) doctype22, htmlTreeBuilder24);
        java.lang.StringBuilder stringBuilder26 = doctype22.name;
        tokeniser6.dataBuffer = stringBuilder26;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = tokeniser6.unescapeEntities(true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(stringBuilder26);
        org.junit.Assert.assertEquals(stringBuilder26.toString(), "");
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.Data;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        tokeniser7.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype11 = tokeniser7.doctypePending;
        tokeniser7.createCommentPending();
        org.jsoup.parser.Token.Comment comment13 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader14 = null;
        // The following exception was thrown during execution in test generation
        try {
            miniSoupTokeniserState0.read(tokeniser7, characterReader14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNull(doctype11);
        org.junit.Assert.assertNotNull(comment13);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        boolean boolean9 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList7);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        boolean boolean14 = parseErrorList12.canAddError();
        boolean boolean15 = parseErrorList7.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        boolean boolean16 = parseErrorList7.canAddError();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream20 = parseErrorList19.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList19.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor22 = parseErrorList19.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int25 = parseErrorList24.getMaxSize();
        boolean boolean26 = parseErrorList19.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
        org.jsoup.parser.Token.Doctype doctype27 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str28 = doctype27.getSystemIdentifier();
        boolean boolean29 = doctype27.forceQuirks;
        int int30 = parseErrorList24.lastIndexOf((java.lang.Object) boolean29);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = parseErrorList7.addAll((int) '\ufffd', (java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 65533, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertNotNull(parseErrorStream20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorItor22);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        startTag0.appendAttributeValue("hi!");
        startTag0.appendAttributeValue("");
        org.jsoup.nodes.Attributes attributes5 = null;
        startTag0.attributes = attributes5;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.EndTag endTag7 = startTag0.asEndTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$EndTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        boolean boolean12 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList10.parallelStream();
        java.lang.Object[] objArray14 = parseErrorList10.toArray();
        java.util.Collection<org.jsoup.parser.ParseError> parseErrorCollection15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = parseErrorList10.removeAll(parseErrorCollection15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        boolean boolean5 = tokenQueue1.matchChomp("0: Doctype");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        int int11 = parseErrorList4.size();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.nodes.Element element2 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = htmlTreeBuilder0.isSpecial(element2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError8 = parseErrorList2.remove((int) 'E');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 69, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        boolean boolean19 = doctype18.isCharacter();
        boolean boolean20 = doctype18.isEndTag();
        htmlTreeBuilder0.currentToken = doctype18;
        org.jsoup.parser.Token.Character character22 = null;
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.insert(character22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList15 = xmlTreeBuilder0.stack;
        xmlTreeBuilder0.baseUri = "<!---->";
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(elementList15);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.resetInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder8 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int13 = parseErrorList12.getMaxSize();
        org.jsoup.nodes.Document document14 = htmlTreeBuilder8.parse("0: Doctype", "hi!", parseErrorList12);
        boolean boolean15 = htmlTreeBuilder8.framesetOk();
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder8.setHeadElement((org.jsoup.nodes.Element) document18);
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder8.setHeadElement((org.jsoup.nodes.Element) document22);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder25 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList29 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int30 = parseErrorList29.getMaxSize();
        org.jsoup.nodes.Document document31 = htmlTreeBuilder25.parse("0: Doctype", "hi!", parseErrorList29);
        org.jsoup.parser.ParseErrorList parseErrorList35 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream36 = parseErrorList35.stream();
        boolean boolean37 = parseErrorList35.canAddError();
        org.jsoup.nodes.Document document38 = htmlTreeBuilder25.parse("EndTag", "hi!#", parseErrorList35);
        java.lang.String[] strArray46 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean47 = htmlTreeBuilder25.inScope("hi!#", strArray46);
        boolean boolean48 = htmlTreeBuilder8.inScope("hi!#", strArray46);
        htmlTreeBuilder0.popStackToClose(strArray46);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean51 = htmlTreeBuilder0.inListItemScope("0: Doctype");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Should not be reachable");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(parseErrorList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertNotNull(parseErrorList35);
        org.junit.Assert.assertNotNull(parseErrorStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        java.lang.String str1 = org.jsoup.parser.TokenQueue.unescape("<!---->");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "<!---->" + "'", str1, "<!---->");
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        boolean boolean7 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError9 = parseErrorList4.remove(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        java.lang.String str2 = org.jsoup.parser.Parser.unescapeEntities("Doctype", false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Doctype" + "'", str2, "Doctype");
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList9 = xmlTreeBuilder0.stack;
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag11.appendTagName("hi!");
        startTag11.appendAttributeName('4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = xmlTreeBuilder0.process((org.jsoup.parser.Token) startTag11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(elementList9);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList1.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int7 = parseErrorList6.getMaxSize();
        boolean boolean8 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList6);
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        boolean boolean16 = parseErrorList1.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream20 = parseErrorList19.stream();
        boolean boolean21 = parseErrorList19.canAddError();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = parseErrorList10.addAll((int) 'a', (java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertNotNull(parseErrorStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.Tokeniser tokeniser9 = xmlTreeBuilder0.tokeniser;
        xmlTreeBuilder0.baseUri = "[]";
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.runParser();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(tokeniser9);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag1.appendTagName("hi!");
        startTag1.appendAttributeValue("[]");
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList(10, (int) '#');
        org.jsoup.parser.Token.EndTag endTag8 = new org.jsoup.parser.Token.EndTag();
        char[] charArray11 = new char[] { '#', '#' };
        endTag8.appendAttributeValue(charArray11);
        endTag8.finaliseTag();
        boolean boolean14 = endTag8.isSelfClosing();
        org.jsoup.parser.Tag tag16 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean17 = tag16.isFormListed();
        org.jsoup.parser.Tag tag18 = tag16.setSelfClosing();
        boolean boolean19 = tag16.isKnownTag();
        java.lang.Object[] objArray21 = new java.lang.Object[] { boolean14, tag16, "Doctype" };
        org.jsoup.parser.ParseError parseError22 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray21);
        org.jsoup.parser.ParseError parseError23 = new org.jsoup.parser.ParseError((int) (byte) 0, "Doctype", objArray21);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError24 = parseErrorList2.set((int) ' ', parseError23);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(tag16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(tag18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[false, hi!, Doctype]");
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        java.util.List<org.jsoup.nodes.Node> nodeList2 = org.jsoup.parser.Parser.parseXmlFragment("0: []", "[100: ]");
        org.junit.Assert.assertNotNull(nodeList2);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitTagPending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        java.lang.String str16 = startTag11.tagName;
        startTag11.tagName = "[]";
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!#" + "'", str16, "hi!#");
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        java.lang.String str8 = tokenQueue1.chompTo("hi!#");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.Comment comment12 = new org.jsoup.parser.Token.Comment();
        java.lang.String str13 = comment12.toString();
        boolean boolean14 = comment12.isCharacter();
        htmlTreeBuilder0.insert(comment12);
        htmlTreeBuilder0.popStackToClose("0: []");
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.generateImpliedEndTags("EndTag");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<!---->" + "'", str13, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        org.jsoup.parser.ParseErrorList parseErrorList25 = new org.jsoup.parser.ParseErrorList(10, (int) '#');
        org.jsoup.parser.ParseError[] parseErrorArray26 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList27 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList27, parseErrorArray26);
        org.jsoup.parser.ParseError[] parseErrorArray29 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList30 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30, parseErrorArray29);
        boolean boolean32 = parseErrorList27.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        org.jsoup.parser.ParseError[] parseErrorArray33 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList34 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList34, parseErrorArray33);
        boolean boolean36 = parseErrorList30.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList34);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream37 = parseErrorList30.stream();
        boolean boolean38 = parseErrorList25.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        org.jsoup.parser.ParseError[] parseErrorArray39 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList40 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40, parseErrorArray39);
        org.jsoup.parser.ParseError[] parseErrorArray42 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList43 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43, parseErrorArray42);
        boolean boolean45 = parseErrorList40.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        java.lang.Object[] objArray46 = parseErrorList40.toArray();
        parseErrorList40.clear();
        org.jsoup.parser.ParseError[] parseErrorArray48 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList49 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList49, parseErrorArray48);
        boolean boolean51 = parseErrorList40.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList49);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream52 = parseErrorList49.parallelStream();
        java.lang.Object[] objArray53 = parseErrorList49.toArray();
        org.jsoup.parser.ParseError parseError56 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        boolean boolean57 = parseErrorList49.add(parseError56);
        boolean boolean58 = parseErrorList25.add(parseError56);
        int int59 = parseErrorList21.lastIndexOf((java.lang.Object) boolean58);
        int int60 = parseErrorList21.size();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(parseErrorArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(parseErrorArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parseErrorStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parseErrorArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(parseErrorArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(parseErrorStream52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        boolean boolean19 = doctype18.isCharacter();
        tokeniser6.doctypePending = doctype18;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype22 = new org.jsoup.parser.Token.Doctype();
        boolean boolean23 = doctype22.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = null;
        boolean boolean25 = htmlTreeBuilderState21.process((org.jsoup.parser.Token) doctype22, htmlTreeBuilder24);
        java.lang.StringBuilder stringBuilder26 = doctype22.name;
        tokeniser6.dataBuffer = stringBuilder26;
        org.jsoup.parser.Token.EndTag endTag28 = new org.jsoup.parser.Token.EndTag();
        char[] charArray31 = new char[] { '#', '#' };
        endTag28.appendAttributeValue(charArray31);
        endTag28.appendAttributeValue(' ');
        char[] charArray36 = new char[] { '4' };
        endTag28.appendAttributeValue(charArray36);
        tokeniser6.emit(charArray36);
        org.jsoup.parser.Token.Comment comment39 = tokeniser6.commentPending;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(stringBuilder26);
        org.junit.Assert.assertEquals(stringBuilder26.toString(), "");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4]");
        org.junit.Assert.assertNull(comment39);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        org.jsoup.parser.Token.Doctype doctype11 = new org.jsoup.parser.Token.Doctype();
        java.lang.StringBuilder stringBuilder12 = doctype11.systemIdentifier;
        java.lang.String str13 = doctype11.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype11);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNotNull(stringBuilder12);
        org.junit.Assert.assertEquals(stringBuilder12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Doctype" + "'", str13, "Doctype");
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        htmlTreeBuilder0.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder25 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList29 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int30 = parseErrorList29.getMaxSize();
        org.jsoup.nodes.Document document31 = htmlTreeBuilder25.parse("0: Doctype", "hi!", parseErrorList29);
        boolean boolean32 = htmlTreeBuilder25.framesetOk();
        org.jsoup.nodes.Document document35 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder25.setHeadElement((org.jsoup.nodes.Element) document35);
        org.jsoup.nodes.Element element37 = htmlTreeBuilder25.pop();
        htmlTreeBuilder18.pushActiveFormattingElements(element37);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder39 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int44 = parseErrorList43.getMaxSize();
        org.jsoup.nodes.Document document45 = htmlTreeBuilder39.parse("0: Doctype", "hi!", parseErrorList43);
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream50 = parseErrorList49.stream();
        boolean boolean51 = parseErrorList49.canAddError();
        org.jsoup.nodes.Document document52 = htmlTreeBuilder39.parse("EndTag", "hi!#", parseErrorList49);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState53 = null;
        htmlTreeBuilder39.transition(htmlTreeBuilderState53);
        org.jsoup.parser.Token token55 = htmlTreeBuilder39.currentToken;
        org.jsoup.nodes.Element element57 = htmlTreeBuilder39.insert("[100: ]");
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.replaceOnStack(element37, element57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNotNull(parseErrorList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNotNull(element37);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertNotNull(parseErrorStream50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertNotNull(token55);
        org.junit.Assert.assertNotNull(element57);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.Token.Tag tag10 = tokeniser7.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype11 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype12 = doctype11.asDoctype();
        java.lang.String str13 = doctype11.tokenType();
        tokeniser7.emit((org.jsoup.parser.Token) doctype11);
        org.jsoup.parser.Token.Tag tag16 = tokeniser7.createTagPending(true);
        xmlTreeBuilder0.currentToken = tag16;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        xmlTreeBuilder0.doc = document28;
        org.jsoup.parser.Token.Comment comment31 = new org.jsoup.parser.Token.Comment();
        java.lang.String str32 = comment31.toString();
        java.lang.StringBuilder stringBuilder33 = comment31.data;
        boolean boolean34 = comment31.isEndTag();
        boolean boolean35 = comment31.isComment();
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(comment31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(tag10);
        org.junit.Assert.assertNotNull(doctype12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Doctype" + "'", str13, "Doctype");
        org.junit.Assert.assertNotNull(tag16);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<!---->" + "'", str32, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder33);
        org.junit.Assert.assertEquals(stringBuilder33.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.BogusDoctype;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        tokeniser7.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag12 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType13 = startTag12.type;
        startTag12.appendTagName('#');
        tokeniser7.tagPending = startTag12;
        org.jsoup.parser.TokeniserState tokeniserState17 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser7.transition((org.jsoup.parser.ITokeniserState) tokeniserState17);
        org.jsoup.parser.Token.Doctype doctype19 = new org.jsoup.parser.Token.Doctype();
        boolean boolean20 = doctype19.isCharacter();
        tokeniser7.doctypePending = doctype19;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState22 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype23 = new org.jsoup.parser.Token.Doctype();
        boolean boolean24 = doctype23.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder25 = null;
        boolean boolean26 = htmlTreeBuilderState22.process((org.jsoup.parser.Token) doctype23, htmlTreeBuilder25);
        java.lang.StringBuilder stringBuilder27 = doctype23.name;
        tokeniser7.dataBuffer = stringBuilder27;
        org.jsoup.parser.CharacterReader characterReader29 = null;
        // The following exception was thrown during execution in test generation
        try {
            tokeniserState0.read(tokeniser7, characterReader29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertTrue("'" + tokenType13 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType13.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(stringBuilder27);
        org.junit.Assert.assertEquals(stringBuilder27.toString(), "");
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        htmlTreeBuilder0.setFosterInserts(false);
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parse("[]", "<!---->");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList28 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int29 = parseErrorList28.getMaxSize();
        org.jsoup.nodes.Document document30 = htmlTreeBuilder24.parse("0: Doctype", "hi!", parseErrorList28);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream35 = parseErrorList34.stream();
        boolean boolean36 = parseErrorList34.canAddError();
        org.jsoup.nodes.Document document37 = htmlTreeBuilder24.parse("EndTag", "hi!#", parseErrorList34);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState38 = null;
        htmlTreeBuilder24.transition(htmlTreeBuilderState38);
        org.jsoup.parser.Token token40 = htmlTreeBuilder24.currentToken;
        org.jsoup.nodes.Element element42 = htmlTreeBuilder24.insert("[100: ]");
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.replaceOnStack((org.jsoup.nodes.Element) document23, element42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(parseErrorList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(parseErrorStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertNotNull(token40);
        org.junit.Assert.assertNotNull(element42);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype12 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        tokeniser6.emit('\uffff');
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitDoctypePending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNull(doctype12);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.ParseErrorList parseErrorList3 = htmlTreeBuilder0.errors;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder4 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList8 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int9 = parseErrorList8.getMaxSize();
        org.jsoup.nodes.Document document10 = htmlTreeBuilder4.parse("0: Doctype", "hi!", parseErrorList8);
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        boolean boolean16 = parseErrorList14.canAddError();
        org.jsoup.nodes.Document document17 = htmlTreeBuilder4.parse("EndTag", "hi!#", parseErrorList14);
        org.jsoup.nodes.Element element19 = htmlTreeBuilder4.insert("hi!#");
        org.jsoup.parser.Parser parser20 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser22 = parser20.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder23 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document24 = xmlTreeBuilder23.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder25 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream33 = parseErrorList32.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor34 = parseErrorList32.iterator();
        boolean boolean35 = parseErrorList30.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32);
        xmlTreeBuilder25.initialiseParse("<!---->", "hi!", parseErrorList30);
        xmlTreeBuilder23.errors = parseErrorList30;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList38 = xmlTreeBuilder23.stack;
        org.jsoup.parser.Parser parser39 = parser22.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder23);
        org.jsoup.nodes.Document document42 = parser39.parseInput("hi!", "[]");
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.replaceActiveFormattingElement(element19, (org.jsoup.nodes.Element) document42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(parser20);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNull(document24);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertNotNull(parseErrorStream33);
        org.junit.Assert.assertNotNull(parseErrorItor34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(elementList38);
        org.junit.Assert.assertNotNull(parser39);
        org.junit.Assert.assertNotNull(document42);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        boolean boolean4 = tokenQueue1.matchesWhitespace();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        tokeniser6.createTempBuffer();
        org.jsoup.parser.Token.Tag tag8 = tokeniser6.tagPending;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag8);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        boolean boolean16 = htmlTreeBuilder9.framesetOk();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder9.setHeadElement((org.jsoup.nodes.Element) document19);
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder9.setHeadElement((org.jsoup.nodes.Element) document23);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder26 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int31 = parseErrorList30.getMaxSize();
        org.jsoup.nodes.Document document32 = htmlTreeBuilder26.parse("0: Doctype", "hi!", parseErrorList30);
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream37 = parseErrorList36.stream();
        boolean boolean38 = parseErrorList36.canAddError();
        org.jsoup.nodes.Document document39 = htmlTreeBuilder26.parse("EndTag", "hi!#", parseErrorList36);
        java.lang.String[] strArray47 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean48 = htmlTreeBuilder26.inScope("hi!#", strArray47);
        boolean boolean49 = htmlTreeBuilder9.inScope("hi!#", strArray47);
        htmlTreeBuilder0.popStackToClose(strArray47);
        org.jsoup.nodes.Document document53 = org.jsoup.parser.Parser.parseBodyFragment("", "hi!#");
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.insertInFosterParent((org.jsoup.nodes.Node) document53);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertNotNull(parseErrorStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(document53);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.framesetOk(false);
        org.jsoup.parser.Parser parser23 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser25 = parser23.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document28 = parser23.parseInput("Doctype", "[]");
        java.util.List<org.jsoup.nodes.Node> nodeList30 = org.jsoup.parser.Parser.parseFragment("", (org.jsoup.nodes.Element) document28, "<hi!>");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder31 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList35 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int36 = parseErrorList35.getMaxSize();
        org.jsoup.nodes.Document document37 = htmlTreeBuilder31.parse("0: Doctype", "hi!", parseErrorList35);
        boolean boolean38 = htmlTreeBuilder31.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState39 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder31.error(htmlTreeBuilderState39);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState41 = null;
        htmlTreeBuilder31.transition(htmlTreeBuilderState41);
        htmlTreeBuilder31.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader47 = null;
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream50 = parseErrorList49.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor51 = parseErrorList49.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor52 = parseErrorList49.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList54 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int55 = parseErrorList54.getMaxSize();
        boolean boolean56 = parseErrorList49.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54);
        org.jsoup.parser.Tokeniser tokeniser57 = new org.jsoup.parser.Tokeniser(characterReader47, parseErrorList54);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor58 = parseErrorList54.iterator();
        org.jsoup.nodes.Document document59 = htmlTreeBuilder31.parse("[]", "Doctype", parseErrorList54);
        org.jsoup.parser.CharacterReader characterReader62 = null;
        org.jsoup.parser.ParseErrorList parseErrorList64 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream65 = parseErrorList64.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor66 = parseErrorList64.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor67 = parseErrorList64.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList69 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int70 = parseErrorList69.getMaxSize();
        boolean boolean71 = parseErrorList64.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList69);
        org.jsoup.parser.Tokeniser tokeniser72 = new org.jsoup.parser.Tokeniser(characterReader62, parseErrorList69);
        org.jsoup.parser.ParseErrorList parseErrorList74 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream75 = parseErrorList74.stream();
        boolean boolean76 = parseErrorList74.canAddError();
        boolean boolean77 = parseErrorList69.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList74);
        org.jsoup.nodes.Document document78 = htmlTreeBuilder31.parse("hi!", "<!---->", parseErrorList74);
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.insertOnStackAfter((org.jsoup.nodes.Element) document28, (org.jsoup.nodes.Element) document78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parser23);
        org.junit.Assert.assertNotNull(parser25);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(nodeList30);
        org.junit.Assert.assertNotNull(parseErrorList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState39);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertNotNull(parseErrorStream50);
        org.junit.Assert.assertNotNull(parseErrorItor51);
        org.junit.Assert.assertNotNull(parseErrorItor52);
        org.junit.Assert.assertNotNull(parseErrorList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(parseErrorItor58);
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertNotNull(parseErrorList64);
        org.junit.Assert.assertNotNull(parseErrorStream65);
        org.junit.Assert.assertNotNull(parseErrorItor66);
        org.junit.Assert.assertNotNull(parseErrorItor67);
        org.junit.Assert.assertNotNull(parseErrorList69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(parseErrorList74);
        org.junit.Assert.assertNotNull(parseErrorStream75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(document78);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        java.lang.String str2 = org.jsoup.parser.Parser.unescapeEntities("[100: ]", true);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[100: ]" + "'", str2, "[100: ]");
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.AfterDoctypeName;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        boolean boolean2 = startTag1.isCharacter();
        startTag1.selfClosing = false;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.EndTag endTag5 = startTag1.asEndTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$EndTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader1.unconsume();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = characterReader1.matches("hi!#");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader1.unconsume();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = characterReader1.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList1.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int7 = parseErrorList6.getMaxSize();
        boolean boolean8 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList6);
        org.jsoup.parser.Token.Doctype doctype9 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str10 = doctype9.getSystemIdentifier();
        boolean boolean11 = doctype9.forceQuirks;
        int int12 = parseErrorList6.lastIndexOf((java.lang.Object) boolean11);
        org.jsoup.parser.Token.EndTag endTag18 = new org.jsoup.parser.Token.EndTag();
        char[] charArray21 = new char[] { '#', '#' };
        endTag18.appendAttributeValue(charArray21);
        endTag18.finaliseTag();
        boolean boolean24 = endTag18.isSelfClosing();
        org.jsoup.parser.Tag tag26 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean27 = tag26.isFormListed();
        org.jsoup.parser.Tag tag28 = tag26.setSelfClosing();
        boolean boolean29 = tag26.isKnownTag();
        java.lang.Object[] objArray31 = new java.lang.Object[] { boolean24, tag26, "Doctype" };
        org.jsoup.parser.ParseError parseError32 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray31);
        org.jsoup.parser.ParseError parseError33 = new org.jsoup.parser.ParseError((int) (short) -1, "[]", objArray31);
        java.lang.String str34 = parseError33.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError35 = parseErrorList6.set((int) (byte) 10, parseError33);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(tag26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1: []" + "'", str34, "-1: []");
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList1.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int7 = parseErrorList6.getMaxSize();
        boolean boolean8 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList6);
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        boolean boolean16 = parseErrorList1.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.parser.ParseError> parseErrorList19 = parseErrorList1.subList((int) '\uffff', (int) '\uffff');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 65535");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.CommentStart;
        org.junit.Assert.assertNotNull(tokeniserState0);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.StartTag startTag13 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType14 = startTag13.type;
        startTag13.appendTagName('#');
        boolean boolean17 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag13);
        boolean boolean18 = startTag13.isEndTag();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertTrue("'" + tokenType14 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType14.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        boolean boolean7 = tokeniser6.isAppropriateEndTagToken();
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = tokeniser6.appropriateEndTagName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(tag9);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder8 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream16 = parseErrorList15.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList15.iterator();
        boolean boolean18 = parseErrorList13.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15);
        xmlTreeBuilder8.initialiseParse("<!---->", "hi!", parseErrorList13);
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document24 = xmlTreeBuilder8.parse("", "[]", parseErrorList23);
        org.jsoup.nodes.Document document27 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.replaceOnStack((org.jsoup.nodes.Element) document24, (org.jsoup.nodes.Element) document27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(parseErrorStream16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNotNull(document27);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        startTag0.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag4 = startTag0.name("hi!#");
        boolean boolean5 = startTag0.selfClosing;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.EndTag endTag6 = startTag0.asEndTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$EndTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tag4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("<hi!>", "[]");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        tokenQueue1.advance();
        java.lang.String str6 = tokenQueue1.consumeCssIdentifier();
        boolean boolean8 = tokenQueue1.matches("<hi!>");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.CharacterReader characterReader9 = null;
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream12 = parseErrorList11.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor13 = parseErrorList11.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList11.iterator();
        org.jsoup.parser.Tokeniser tokeniser15 = new org.jsoup.parser.Tokeniser(characterReader9, parseErrorList11);
        org.jsoup.parser.Token.Tag tag16 = tokeniser15.tagPending;
        org.jsoup.parser.Token.Tag tag18 = tokeniser15.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype19 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype20 = doctype19.asDoctype();
        java.lang.String str21 = doctype19.tokenType();
        tokeniser15.emit((org.jsoup.parser.Token) doctype19);
        org.jsoup.parser.ITokeniserState iTokeniserState23 = tokeniser15.getState();
        org.jsoup.parser.TokeniserState tokeniserState24 = org.jsoup.parser.TokeniserState.Rawtext;
        tokeniser15.eofError((org.jsoup.parser.ITokeniserState) tokeniserState24);
        tokeniser7.transition((org.jsoup.parser.ITokeniserState) tokeniserState24);
        // The following exception was thrown during execution in test generation
        try {
            tokeniser7.emitTagPending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertNotNull(parseErrorStream12);
        org.junit.Assert.assertNotNull(parseErrorItor13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertNull(tag16);
        org.junit.Assert.assertNotNull(tag18);
        org.junit.Assert.assertNotNull(doctype20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Doctype" + "'", str21, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState23);
        org.junit.Assert.assertNotNull(tokeniserState24);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        boolean boolean1 = org.jsoup.parser.Tag.isKnownTag("[100: ]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag3.preserveWhitespace();
        boolean boolean5 = tag3.isBlock();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement14 = htmlTreeBuilder0.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder15 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        org.jsoup.nodes.Document document21 = htmlTreeBuilder15.parse("0: Doctype", "hi!", parseErrorList19);
        org.jsoup.parser.Parser parser22 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.nodes.Document document25 = parser22.parseInput("", "hi!");
        org.jsoup.nodes.Document document28 = parser22.parseInput("<hi!>", "[]");
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.insertOnStackAfter((org.jsoup.nodes.Element) document21, (org.jsoup.nodes.Element) document28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(formElement14);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(document28);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.markInsertionMode();
        boolean boolean22 = htmlTreeBuilder0.inScope("StartTag");
        org.jsoup.parser.Parser parser23 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList28 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int29 = parseErrorList28.getMaxSize();
        org.jsoup.nodes.Document document30 = htmlTreeBuilder24.parse("0: Doctype", "hi!", parseErrorList28);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream35 = parseErrorList34.stream();
        boolean boolean36 = parseErrorList34.canAddError();
        org.jsoup.nodes.Document document37 = htmlTreeBuilder24.parse("EndTag", "hi!#", parseErrorList34);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder38 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList42 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int43 = parseErrorList42.getMaxSize();
        org.jsoup.nodes.Document document44 = htmlTreeBuilder38.parse("0: Doctype", "hi!", parseErrorList42);
        boolean boolean45 = htmlTreeBuilder38.framesetOk();
        org.jsoup.nodes.Document document48 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder38.setHeadElement((org.jsoup.nodes.Element) document48);
        org.jsoup.nodes.Document document52 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder38.setHeadElement((org.jsoup.nodes.Element) document52);
        htmlTreeBuilder38.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder56 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList60 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int61 = parseErrorList60.getMaxSize();
        org.jsoup.nodes.Document document62 = htmlTreeBuilder56.parse("0: Doctype", "hi!", parseErrorList60);
        boolean boolean63 = htmlTreeBuilder56.framesetOk();
        org.jsoup.nodes.Document document66 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder56.setHeadElement((org.jsoup.nodes.Element) document66);
        org.jsoup.nodes.Document document70 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder56.setHeadElement((org.jsoup.nodes.Element) document70);
        htmlTreeBuilder38.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document70);
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.insertOnStackAfter((org.jsoup.nodes.Element) document37, (org.jsoup.nodes.Element) document70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(parseErrorList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(parseErrorStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertNotNull(parseErrorList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertNotNull(parseErrorList60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(document62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(document66);
        org.junit.Assert.assertNotNull(document70);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray8 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList9 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9, parseErrorArray8);
        org.jsoup.parser.ParseError[] parseErrorArray11 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList12 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12, parseErrorArray11);
        boolean boolean14 = parseErrorList9.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList12.listIterator();
        int int16 = parseErrorList12.size();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder17 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        org.jsoup.nodes.Document document23 = htmlTreeBuilder17.parse("0: Doctype", "hi!", parseErrorList21);
        htmlTreeBuilder17.newPendingTableCharacters();
        boolean boolean25 = parseErrorList12.equals((java.lang.Object) htmlTreeBuilder17);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = parseErrorList4.addAll(1, (java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader1.unconsume();
        org.jsoup.parser.Token.EndTag endTag3 = new org.jsoup.parser.Token.EndTag();
        char[] charArray6 = new char[] { '#', '#' };
        endTag3.appendAttributeValue(charArray6);
        endTag3.appendAttributeValue(' ');
        char[] charArray11 = new char[] { '4' };
        endTag3.appendAttributeValue(charArray11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = characterReader1.consumeToAny(charArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4]");
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        boolean boolean2 = startTag1.isCharacter();
        org.jsoup.parser.Token.TokenType tokenType3 = startTag1.type;
        java.lang.Class<?> wildcardClass4 = tokenType3.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + tokenType3 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType3.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.parser.Token.StartTag startTag22 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag22.appendTagName("hi!");
        startTag22.appendAttributeName('4');
        org.jsoup.parser.Token.Tag tag28 = startTag22.name("");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element29 = htmlTreeBuilder0.insertEmpty(startTag22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be false");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(tag28);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        boolean boolean15 = parseErrorList10.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        java.lang.Object[] objArray16 = parseErrorList10.toArray();
        parseErrorList10.clear();
        org.jsoup.parser.ParseError[] parseErrorArray18 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList19 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19, parseErrorArray18);
        boolean boolean21 = parseErrorList10.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        boolean boolean22 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        java.lang.Object[] objArray23 = parseErrorList19.toArray();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError25 = parseErrorList19.remove((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.jsoup.parser.ParseError parseError2 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        int int3 = parseError2.getPosition();
        java.lang.String str4 = parseError2.getErrorMessage();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        htmlTreeBuilder0.newPendingTableCharacters();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        org.jsoup.parser.Token.StartTag startTag7 = new org.jsoup.parser.Token.StartTag("hi!");
        boolean boolean8 = startTag7.isCharacter();
        startTag7.selfClosing = false;
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes12 = startTag11.getAttributes();
        startTag7.attributes = attributes12;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element14 = htmlTreeBuilder0.insertEmpty(startTag7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(attributes12);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        boolean boolean5 = tokenQueue1.matchesStartTag();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        java.util.List<org.jsoup.nodes.Node> nodeList2 = org.jsoup.parser.Parser.parseXmlFragment("hi!", "StartTag");
        org.junit.Assert.assertNotNull(nodeList2);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.Data;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        java.lang.StringBuilder stringBuilder9 = null;
        tokeniser7.dataBuffer = stringBuilder9;
        org.jsoup.parser.Token.Tag tag12 = tokeniser7.createTagPending(false);
        org.jsoup.parser.CharacterReader characterReader13 = null;
        // The following exception was thrown during execution in test generation
        try {
            miniSoupTokeniserState0.read(tokeniser7, characterReader13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(tag12);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement14 = htmlTreeBuilder0.getFormElement();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = htmlTreeBuilder0.inTableScope("<!---->");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Should not be reachable");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(formElement14);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedDash;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.Token.Tag tag10 = tokeniser7.createTagPending(true);
        java.lang.StringBuilder stringBuilder11 = tokeniser7.dataBuffer;
        org.jsoup.parser.Token.EndTag endTag12 = new org.jsoup.parser.Token.EndTag();
        char[] charArray15 = new char[] { '#', '#' };
        endTag12.appendAttributeValue(charArray15);
        tokeniser7.emit(charArray15);
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader19.unconsume();
        // The following exception was thrown during execution in test generation
        try {
            tokeniserState0.read(tokeniser7, characterReader19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(tag10);
        org.junit.Assert.assertNull(stringBuilder11);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[#, #]");
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        tokeniser6.emit('#');
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitCommentPending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.parser.Token.Character character16 = null;
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.insert(character16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.Token token15 = htmlTreeBuilder0.currentToken;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertNotNull(token15);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.parser.Token token16 = htmlTreeBuilder0.currentToken;
        org.jsoup.nodes.Element element18 = htmlTreeBuilder0.insert("[100: ]");
        org.jsoup.nodes.FormElement formElement19 = htmlTreeBuilder0.getFormElement();
        org.jsoup.parser.Token.Character character20 = null;
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.insert(character20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(token16);
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNull(formElement19);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        boolean boolean7 = tokeniser6.isAppropriateEndTagToken();
        org.jsoup.parser.Token.Comment comment8 = new org.jsoup.parser.Token.Comment();
        java.lang.String str9 = comment8.getData();
        tokeniser6.commentPending = comment8;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token token11 = tokeniser6.read();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.jsoup.nodes.Element element1 = null;
        java.util.List<org.jsoup.nodes.Node> nodeList3 = org.jsoup.parser.Parser.parseFragment("-1: []", element1, "hi!#");
        org.junit.Assert.assertNotNull(nodeList3);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.nodes.Document document16 = htmlTreeBuilder0.doc;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState17 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag18 = new org.jsoup.parser.Token.EndTag();
        endTag18.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder20 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int25 = parseErrorList24.getMaxSize();
        org.jsoup.nodes.Document document26 = htmlTreeBuilder20.parse("0: Doctype", "hi!", parseErrorList24);
        boolean boolean27 = htmlTreeBuilderState17.process((org.jsoup.parser.Token) endTag18, htmlTreeBuilder20);
        org.jsoup.nodes.FormElement formElement28 = htmlTreeBuilder20.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder29 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int34 = parseErrorList33.getMaxSize();
        org.jsoup.nodes.Document document35 = htmlTreeBuilder29.parse("0: Doctype", "hi!", parseErrorList33);
        boolean boolean36 = htmlTreeBuilder29.framesetOk();
        org.jsoup.parser.Parser parser37 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser39 = parser37.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document42 = parser37.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document45 = parser37.parseInput("<hi!>", "[]");
        htmlTreeBuilder29.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document45);
        boolean boolean47 = htmlTreeBuilder29.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder48 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList53 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList55 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream56 = parseErrorList55.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor57 = parseErrorList55.iterator();
        boolean boolean58 = parseErrorList53.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList55);
        xmlTreeBuilder48.initialiseParse("<!---->", "hi!", parseErrorList53);
        org.jsoup.parser.ParseErrorList parseErrorList63 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document64 = xmlTreeBuilder48.parse("", "[]", parseErrorList63);
        boolean boolean65 = htmlTreeBuilder29.isInActiveFormattingElements((org.jsoup.nodes.Element) document64);
        boolean boolean66 = htmlTreeBuilder20.isInActiveFormattingElements((org.jsoup.nodes.Element) document64);
        htmlTreeBuilder0.push((org.jsoup.nodes.Element) document64);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState17);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(formElement28);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parser37);
        org.junit.Assert.assertNotNull(parser39);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(parseErrorList55);
        org.junit.Assert.assertNotNull(parseErrorStream56);
        org.junit.Assert.assertNotNull(parseErrorItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(parseErrorList63);
        org.junit.Assert.assertNotNull(document64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag6 = new org.jsoup.parser.Token.EndTag();
        char[] charArray9 = new char[] { '#', '#' };
        endTag6.appendAttributeValue(charArray9);
        boolean boolean11 = tokenQueue1.matchesAny(charArray9);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.parser.Parser parser20 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser22 = parser20.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document25 = parser20.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document28 = parser20.parseInput("<hi!>", "[]");
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document28);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        boolean boolean31 = htmlTreeBuilder12.inScope(strArray30);
        boolean boolean32 = tokenQueue1.matchesAny(strArray30);
        // The following exception was thrown during execution in test generation
        try {
            tokenQueue1.consume("StartTag");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Queue did not match expected sequence");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parser20);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        int int8 = parseErrorList4.size();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        htmlTreeBuilder9.newPendingTableCharacters();
        boolean boolean17 = parseErrorList4.equals((java.lang.Object) htmlTreeBuilder9);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        htmlTreeBuilder18.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray27 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList28 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList28, characterArray27);
        htmlTreeBuilder18.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList28);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder31 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList35 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int36 = parseErrorList35.getMaxSize();
        org.jsoup.nodes.Document document37 = htmlTreeBuilder31.parse("0: Doctype", "hi!", parseErrorList35);
        boolean boolean38 = htmlTreeBuilder31.framesetOk();
        org.jsoup.nodes.Document document41 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder31.setHeadElement((org.jsoup.nodes.Element) document41);
        org.jsoup.nodes.Element element43 = htmlTreeBuilder31.pop();
        htmlTreeBuilder18.push(element43);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder45 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int50 = parseErrorList49.getMaxSize();
        org.jsoup.nodes.Document document51 = htmlTreeBuilder45.parse("0: Doctype", "hi!", parseErrorList49);
        htmlTreeBuilder45.resetInsertionMode();
        org.jsoup.nodes.Element element53 = htmlTreeBuilder45.currentElement();
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder9.replaceOnStack(element43, element53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNotNull(characterArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(element43);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(document51);
        org.junit.Assert.assertNotNull(element53);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        boolean boolean3 = tag1.formatAsBlock();
        boolean boolean4 = tag1.isFormListed();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList1.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int7 = parseErrorList6.getMaxSize();
        boolean boolean8 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList6);
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        boolean boolean16 = parseErrorList1.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        org.jsoup.parser.ParseError[] parseErrorArray18 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList19 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19, parseErrorArray18);
        org.jsoup.parser.ParseError[] parseErrorArray21 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList22 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList22, parseErrorArray21);
        boolean boolean24 = parseErrorList19.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList22);
        java.lang.Object[] objArray25 = parseErrorList19.toArray();
        parseErrorList19.clear();
        org.jsoup.parser.ParseError[] parseErrorArray27 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList28 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList28, parseErrorArray27);
        org.jsoup.parser.ParseError[] parseErrorArray30 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList31 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31, parseErrorArray30);
        boolean boolean33 = parseErrorList28.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        java.lang.Object[] objArray34 = parseErrorList28.toArray();
        parseErrorList28.clear();
        org.jsoup.parser.ParseError[] parseErrorArray36 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList37 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList37, parseErrorArray36);
        boolean boolean39 = parseErrorList28.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList37);
        boolean boolean40 = parseErrorList19.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList37);
        parseErrorList37.ensureCapacity((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean43 = parseErrorList1.addAll((int) (short) -1, (java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList37);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(parseErrorArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(parseErrorArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag();
        startTag1.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag4 = startTag1.asStartTag();
        org.jsoup.parser.Token.Tag tag6 = startTag4.name("");
        org.jsoup.parser.Token.StartTag startTag7 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes8 = startTag7.getAttributes();
        tag6.attributes = attributes8;
        org.jsoup.parser.Token.StartTag startTag10 = new org.jsoup.parser.Token.StartTag("-1: []", attributes8);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Doctype doctype11 = startTag10.asDoctype();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Doctype");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(startTag4);
        org.junit.Assert.assertNotNull(tag6);
        org.junit.Assert.assertNotNull(attributes8);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        boolean boolean9 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList7);
        org.jsoup.parser.Token.Tag tag12 = tokeniser10.createTagPending(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = tokeniser10.appropriateEndTagName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(tag12);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = tokeniser6.unescapeEntities(false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.jsoup.parser.Token.Comment comment0 = new org.jsoup.parser.Token.Comment();
        java.lang.String str1 = comment0.toString();
        java.lang.StringBuilder stringBuilder2 = comment0.data;
        boolean boolean3 = comment0.isEndTag();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.StartTag startTag4 = comment0.asStartTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$StartTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "<!---->" + "'", str1, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder2);
        org.junit.Assert.assertEquals(stringBuilder2.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str2 = tokenQueue1.consumeElementSelector();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "EndTag" + "'", str2, "EndTag");
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        org.jsoup.parser.ITokeniserState iTokeniserState14 = tokeniser6.getState();
        org.jsoup.parser.Token.Comment comment15 = new org.jsoup.parser.Token.Comment();
        java.lang.String str16 = comment15.toString();
        java.lang.StringBuilder stringBuilder17 = comment15.data;
        boolean boolean18 = comment15.isEndTag();
        boolean boolean19 = comment15.isComment();
        tokeniser6.commentPending = comment15;
        org.jsoup.parser.Token.StartTag startTag21 = new org.jsoup.parser.Token.StartTag();
        startTag21.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag25 = startTag21.name("hi!#");
        boolean boolean26 = startTag21.isStartTag();
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emit((org.jsoup.parser.Token) startTag21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: There is an unread token pending!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<!---->" + "'", str16, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder17);
        org.junit.Assert.assertEquals(stringBuilder17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(tag25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag3.formatAsBlock();
        boolean boolean5 = tag3.isFormSubmittable();
        boolean boolean6 = tag3.formatAsBlock();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        boolean boolean7 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray11 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList12 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12, parseErrorArray11);
        org.jsoup.parser.ParseError[] parseErrorArray14 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList15 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15, parseErrorArray14);
        boolean boolean17 = parseErrorList12.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15);
        java.lang.Object[] objArray18 = parseErrorList12.toArray();
        parseErrorList12.clear();
        org.jsoup.parser.ParseError[] parseErrorArray20 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList21 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21, parseErrorArray20);
        org.jsoup.parser.ParseError[] parseErrorArray23 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList24 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24, parseErrorArray23);
        boolean boolean26 = parseErrorList21.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
        java.lang.Object[] objArray27 = parseErrorList21.toArray();
        parseErrorList21.clear();
        org.jsoup.parser.ParseError[] parseErrorArray29 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList30 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30, parseErrorArray29);
        boolean boolean32 = parseErrorList21.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        boolean boolean33 = parseErrorList12.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        java.lang.Object[] objArray34 = parseErrorList30.toArray();
        org.jsoup.parser.ParseError parseError35 = new org.jsoup.parser.ParseError((int) '#', "hi!#", objArray34);
        java.lang.String str36 = parseError35.getErrorMessage();
        // The following exception was thrown during execution in test generation
        try {
            parseErrorList2.add(10, parseError35);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parseErrorArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parseErrorArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(parseErrorArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!#" + "'", str36, "hi!#");
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        int int8 = parseErrorList4.size();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        htmlTreeBuilder9.newPendingTableCharacters();
        boolean boolean17 = parseErrorList4.equals((java.lang.Object) htmlTreeBuilder9);
        int int19 = parseErrorList4.indexOf((java.lang.Object) 1.0d);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.parser.Token token16 = htmlTreeBuilder0.currentToken;
        htmlTreeBuilder0.popStackToBefore("100: ");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(token16);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        java.util.List<org.jsoup.nodes.Node> nodeList2 = org.jsoup.parser.Parser.parseXmlFragment("[100: ]", "hi!#");
        org.junit.Assert.assertNotNull(nodeList2);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.TagName;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder1 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader2 = null;
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.iterator();
        org.jsoup.parser.Tokeniser tokeniser8 = new org.jsoup.parser.Tokeniser(characterReader2, parseErrorList4);
        xmlTreeBuilder1.tokeniser = tokeniser8;
        org.jsoup.parser.Tokeniser tokeniser10 = xmlTreeBuilder1.tokeniser;
        org.jsoup.parser.CharacterReader characterReader12 = new org.jsoup.parser.CharacterReader("StartTag");
        int int14 = characterReader12.nextIndexOf((java.lang.CharSequence) "[]");
        // The following exception was thrown during execution in test generation
        try {
            tokeniserState0.read(tokeniser10, characterReader12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(tokeniser10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader1.unconsume();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = characterReader1.matchesDigit();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.Token.EndTag endTag10 = new org.jsoup.parser.Token.EndTag();
        char[] charArray13 = new char[] { '#', '#' };
        endTag10.appendAttributeValue(charArray13);
        endTag10.finaliseTag();
        boolean boolean16 = endTag10.isSelfClosing();
        org.jsoup.parser.Tag tag18 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean19 = tag18.isFormListed();
        org.jsoup.parser.Tag tag20 = tag18.setSelfClosing();
        boolean boolean21 = tag18.isKnownTag();
        java.lang.Object[] objArray23 = new java.lang.Object[] { boolean16, tag18, "Doctype" };
        org.jsoup.parser.ParseError parseError24 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray23);
        org.jsoup.parser.ParseError parseError25 = new org.jsoup.parser.ParseError((int) (short) -1, "[]", objArray23);
        org.jsoup.parser.ParseError parseError26 = new org.jsoup.parser.ParseError((int) (byte) 10, "", objArray23);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError27 = parseErrorList2.set(0, parseError26);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(tag18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(tag20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[false, hi!, Doctype]");
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.resetInsertionMode();
        org.jsoup.nodes.Element element8 = htmlTreeBuilder0.currentElement();
        htmlTreeBuilder0.setFosterInserts(false);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(element8);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        tag9.finaliseTag();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Character character11 = tag9.asCharacter();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Character");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        boolean boolean11 = doctype10.isCharacter();
        boolean boolean12 = doctype10.isEndTag();
        boolean boolean13 = doctype10.isCharacter();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        java.lang.StringBuilder stringBuilder15 = doctype10.publicIdentifier;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("StartTag");
        org.junit.Assert.assertNotNull(tag1);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.EndTag endTag7 = new org.jsoup.parser.Token.EndTag();
        char[] charArray10 = new char[] { '#', '#' };
        endTag7.appendAttributeValue(charArray10);
        endTag7.appendAttributeValue(' ');
        char[] charArray15 = new char[] { '4' };
        endTag7.appendAttributeValue(charArray15);
        tokeniser6.emit(charArray15);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token token18 = tokeniser6.read();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4]");
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.markInsertionMode();
        boolean boolean22 = htmlTreeBuilder0.inScope("StartTag");
        org.jsoup.nodes.Element element23 = htmlTreeBuilder0.pop();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(element23);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.CharacterReader characterReader16 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean18 = characterReader16.matches("[100: ]");
        htmlTreeBuilder0.reader = characterReader16;
        org.jsoup.parser.Token.Doctype doctype20 = new org.jsoup.parser.Token.Doctype();
        boolean boolean21 = doctype20.isCharacter();
        java.lang.StringBuilder stringBuilder22 = doctype20.systemIdentifier;
        // The following exception was thrown during execution in test generation
        try {
            int int23 = characterReader16.nextIndexOf((java.lang.CharSequence) stringBuilder22);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(stringBuilder22);
        org.junit.Assert.assertEquals(stringBuilder22.toString(), "");
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean2 = characterReader1.matchesLetter();
        int int4 = characterReader1.nextIndexOf('\uffff');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.parser.ParseError> parseErrorList4 = parseErrorList1.subList((int) (byte) 100, (int) '\ufffd');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 65533");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        boolean boolean15 = parseErrorList10.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        java.lang.Object[] objArray16 = parseErrorList10.toArray();
        parseErrorList10.clear();
        org.jsoup.parser.ParseError[] parseErrorArray18 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList19 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19, parseErrorArray18);
        boolean boolean21 = parseErrorList10.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        boolean boolean22 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        parseErrorList1.clear();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        boolean boolean16 = htmlTreeBuilder9.framesetOk();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder9.setHeadElement((org.jsoup.nodes.Element) document19);
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder9.setHeadElement((org.jsoup.nodes.Element) document23);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder26 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int31 = parseErrorList30.getMaxSize();
        org.jsoup.nodes.Document document32 = htmlTreeBuilder26.parse("0: Doctype", "hi!", parseErrorList30);
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream37 = parseErrorList36.stream();
        boolean boolean38 = parseErrorList36.canAddError();
        org.jsoup.nodes.Document document39 = htmlTreeBuilder26.parse("EndTag", "hi!#", parseErrorList36);
        java.lang.String[] strArray47 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean48 = htmlTreeBuilder26.inScope("hi!#", strArray47);
        boolean boolean49 = htmlTreeBuilder9.inScope("hi!#", strArray47);
        htmlTreeBuilder0.popStackToClose(strArray47);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = htmlTreeBuilder0.inButtonScope("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Should not be reachable");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertNotNull(parseErrorStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        boolean boolean3 = parseErrorList1.canAddError();
        org.jsoup.parser.ParseError parseError6 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str7 = parseError6.getErrorMessage();
        boolean boolean8 = parseErrorList1.add(parseError6);
        org.jsoup.parser.CharacterReader characterReader9 = null;
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream12 = parseErrorList11.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor13 = parseErrorList11.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList11.iterator();
        org.jsoup.parser.Tokeniser tokeniser15 = new org.jsoup.parser.Tokeniser(characterReader9, parseErrorList11);
        org.jsoup.parser.Token.Tag tag16 = tokeniser15.tagPending;
        org.jsoup.parser.Token.Tag tag18 = tokeniser15.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype19 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype20 = doctype19.asDoctype();
        java.lang.String str21 = doctype19.tokenType();
        tokeniser15.emit((org.jsoup.parser.Token) doctype19);
        org.jsoup.parser.ITokeniserState iTokeniserState23 = tokeniser15.getState();
        org.jsoup.parser.Token.Comment comment24 = new org.jsoup.parser.Token.Comment();
        java.lang.String str25 = comment24.toString();
        java.lang.StringBuilder stringBuilder26 = comment24.data;
        boolean boolean27 = comment24.isEndTag();
        boolean boolean28 = comment24.isComment();
        tokeniser15.commentPending = comment24;
        int int30 = parseErrorList1.lastIndexOf((java.lang.Object) comment24);
        org.jsoup.parser.Token.EndTag endTag34 = new org.jsoup.parser.Token.EndTag();
        char[] charArray37 = new char[] { '#', '#' };
        endTag34.appendAttributeValue(charArray37);
        endTag34.finaliseTag();
        boolean boolean40 = endTag34.isSelfClosing();
        org.jsoup.parser.Tag tag42 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean43 = tag42.isFormListed();
        org.jsoup.parser.Tag tag44 = tag42.setSelfClosing();
        boolean boolean45 = tag42.isKnownTag();
        java.lang.Object[] objArray47 = new java.lang.Object[] { boolean40, tag42, "Doctype" };
        org.jsoup.parser.ParseError parseError48 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray47);
        // The following exception was thrown during execution in test generation
        try {
            parseErrorList1.add((int) (short) 100, parseError48);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertNotNull(parseErrorStream12);
        org.junit.Assert.assertNotNull(parseErrorItor13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertNull(tag16);
        org.junit.Assert.assertNotNull(tag18);
        org.junit.Assert.assertNotNull(doctype20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Doctype" + "'", str21, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "<!---->" + "'", str25, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder26);
        org.junit.Assert.assertEquals(stringBuilder26.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(tag42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(tag44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[false, hi!, Doctype]");
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str1 = doctype0.getSystemIdentifier();
        java.lang.String str2 = doctype0.getName();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        java.lang.String str2 = characterReader1.consumeToEnd();
        int int4 = characterReader1.nextIndexOf('a');
        char char5 = characterReader1.consume();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = characterReader1.consumeTo("\uffff");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "StartTag" + "'", str2, "StartTag");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\uffff' + "'", char5 == '\uffff');
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.parser.TokenQueue tokenQueue38 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean39 = tokenQueue38.isEmpty();
        boolean boolean40 = tokenQueue38.consumeWhitespace();
        java.lang.String str41 = tokenQueue38.consumeWord();
        boolean boolean42 = tokenQueue38.matchesWhitespace();
        java.lang.String[] strArray47 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str48 = tokenQueue38.consumeToAny(strArray47);
        boolean boolean49 = htmlTreeBuilder0.inScope(strArray47);
        org.jsoup.nodes.Document document52 = org.jsoup.parser.Parser.parse("", "<hi!>");
        htmlTreeBuilder0.pushActiveFormattingElements((org.jsoup.nodes.Element) document52);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder54 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList58 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int59 = parseErrorList58.getMaxSize();
        org.jsoup.nodes.Document document60 = htmlTreeBuilder54.parse("0: Doctype", "hi!", parseErrorList58);
        org.jsoup.parser.ParseErrorList parseErrorList64 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream65 = parseErrorList64.stream();
        boolean boolean66 = parseErrorList64.canAddError();
        org.jsoup.nodes.Document document67 = htmlTreeBuilder54.parse("EndTag", "hi!#", parseErrorList64);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState68 = null;
        htmlTreeBuilder54.transition(htmlTreeBuilderState68);
        org.jsoup.nodes.Document document70 = htmlTreeBuilder54.doc;
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document70);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "EndTag" + "'", str41, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertNotNull(parseErrorList58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(document60);
        org.junit.Assert.assertNotNull(parseErrorList64);
        org.junit.Assert.assertNotNull(parseErrorStream65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(document67);
        org.junit.Assert.assertNotNull(document70);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.resetInsertionMode();
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.parser.Token.Comment comment9 = new org.jsoup.parser.Token.Comment();
        java.lang.String str10 = comment9.toString();
        java.lang.StringBuilder stringBuilder11 = comment9.data;
        boolean boolean12 = comment9.isEndTag();
        boolean boolean13 = comment9.isComment();
        htmlTreeBuilder0.insert(comment9);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "<!---->" + "'", str10, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder11);
        org.junit.Assert.assertEquals(stringBuilder11.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("0: []");
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        java.lang.String str16 = startTag11.tagName;
        org.jsoup.nodes.Attributes attributes17 = null;
        startTag11.attributes = attributes17;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Character character19 = startTag11.asCharacter();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Character");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!#" + "'", str16, "hi!#");
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        htmlTreeBuilder3.clearStackToTableContext();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder12.setHeadElement((org.jsoup.nodes.Element) document22);
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder12.setHeadElement((org.jsoup.nodes.Element) document26);
        htmlTreeBuilder12.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder30 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int35 = parseErrorList34.getMaxSize();
        org.jsoup.nodes.Document document36 = htmlTreeBuilder30.parse("0: Doctype", "hi!", parseErrorList34);
        boolean boolean37 = htmlTreeBuilder30.framesetOk();
        org.jsoup.nodes.Document document40 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder30.setHeadElement((org.jsoup.nodes.Element) document40);
        org.jsoup.nodes.Document document44 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder30.setHeadElement((org.jsoup.nodes.Element) document44);
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document44);
        htmlTreeBuilder3.push((org.jsoup.nodes.Element) document44);
        htmlTreeBuilder3.clearStackToTableBodyContext();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder49 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int54 = parseErrorList53.getMaxSize();
        org.jsoup.nodes.Document document55 = htmlTreeBuilder49.parse("0: Doctype", "hi!", parseErrorList53);
        htmlTreeBuilder49.resetInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder57 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList61 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int62 = parseErrorList61.getMaxSize();
        org.jsoup.nodes.Document document63 = htmlTreeBuilder57.parse("0: Doctype", "hi!", parseErrorList61);
        boolean boolean64 = htmlTreeBuilder57.framesetOk();
        org.jsoup.nodes.Document document67 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder57.setHeadElement((org.jsoup.nodes.Element) document67);
        org.jsoup.nodes.Document document71 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder57.setHeadElement((org.jsoup.nodes.Element) document71);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder74 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList78 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int79 = parseErrorList78.getMaxSize();
        org.jsoup.nodes.Document document80 = htmlTreeBuilder74.parse("0: Doctype", "hi!", parseErrorList78);
        org.jsoup.parser.ParseErrorList parseErrorList84 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream85 = parseErrorList84.stream();
        boolean boolean86 = parseErrorList84.canAddError();
        org.jsoup.nodes.Document document87 = htmlTreeBuilder74.parse("EndTag", "hi!#", parseErrorList84);
        java.lang.String[] strArray95 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean96 = htmlTreeBuilder74.inScope("hi!#", strArray95);
        boolean boolean97 = htmlTreeBuilder57.inScope("hi!#", strArray95);
        htmlTreeBuilder49.popStackToClose(strArray95);
        htmlTreeBuilder3.popStackToClose(strArray95);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNotNull(parseErrorList61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(document63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(document67);
        org.junit.Assert.assertNotNull(document71);
        org.junit.Assert.assertNotNull(parseErrorList78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(document80);
        org.junit.Assert.assertNotNull(parseErrorList84);
        org.junit.Assert.assertNotNull(parseErrorStream85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(document87);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList(10, (int) '#');
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        org.jsoup.parser.ParseError[] parseErrorArray6 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList7 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7, parseErrorArray6);
        boolean boolean9 = parseErrorList4.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList7.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList7.stream();
        boolean boolean15 = parseErrorList2.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.ParseError[] parseErrorArray16 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList17 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17, parseErrorArray16);
        org.jsoup.parser.ParseError[] parseErrorArray19 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList20 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20, parseErrorArray19);
        boolean boolean22 = parseErrorList17.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20);
        java.lang.Object[] objArray23 = parseErrorList17.toArray();
        parseErrorList17.clear();
        org.jsoup.parser.ParseError[] parseErrorArray25 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList26 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26, parseErrorArray25);
        boolean boolean28 = parseErrorList17.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream29 = parseErrorList26.parallelStream();
        java.lang.Object[] objArray30 = parseErrorList26.toArray();
        org.jsoup.parser.ParseError parseError33 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        boolean boolean34 = parseErrorList26.add(parseError33);
        boolean boolean35 = parseErrorList2.add(parseError33);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder36 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int41 = parseErrorList40.getMaxSize();
        org.jsoup.nodes.Document document42 = htmlTreeBuilder36.parse("0: Doctype", "hi!", parseErrorList40);
        org.jsoup.parser.ParseError[] parseErrorArray43 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList44 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44, parseErrorArray43);
        org.jsoup.parser.ParseError[] parseErrorArray46 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList47 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList47, parseErrorArray46);
        boolean boolean49 = parseErrorList44.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList47);
        java.lang.Object[] objArray50 = parseErrorList44.toArray();
        parseErrorList44.clear();
        org.jsoup.parser.ParseError[] parseErrorArray52 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList53 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList53, parseErrorArray52);
        org.jsoup.parser.ParseError[] parseErrorArray55 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList56 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList56, parseErrorArray55);
        boolean boolean58 = parseErrorList53.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList56);
        java.lang.Object[] objArray59 = parseErrorList53.toArray();
        parseErrorList53.clear();
        org.jsoup.parser.ParseError[] parseErrorArray61 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList62 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList62, parseErrorArray61);
        boolean boolean64 = parseErrorList53.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList62);
        boolean boolean65 = parseErrorList44.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList62);
        java.lang.Object[] objArray66 = parseErrorList62.toArray();
        boolean boolean67 = parseErrorList40.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList62);
        org.jsoup.parser.ParseError[] parseErrorArray68 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList69 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList69, parseErrorArray68);
        org.jsoup.parser.ParseError[] parseErrorArray71 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList72 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList72, parseErrorArray71);
        boolean boolean74 = parseErrorList69.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList72);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor75 = parseErrorList72.listIterator();
        int int77 = parseErrorList72.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag81 = new org.jsoup.parser.Token.EndTag();
        char[] charArray84 = new char[] { '#', '#' };
        endTag81.appendAttributeValue(charArray84);
        endTag81.finaliseTag();
        boolean boolean87 = endTag81.isSelfClosing();
        org.jsoup.parser.Tag tag89 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean90 = tag89.isFormListed();
        org.jsoup.parser.Tag tag91 = tag89.setSelfClosing();
        boolean boolean92 = tag89.isKnownTag();
        java.lang.Object[] objArray94 = new java.lang.Object[] { boolean87, tag89, "Doctype" };
        org.jsoup.parser.ParseError parseError95 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray94);
        parseErrorList72.add(0, parseError95);
        boolean boolean97 = parseErrorList40.add(parseError95);
        int int98 = parseErrorList2.lastIndexOf((java.lang.Object) parseError95);
        java.lang.String str99 = parseError95.getErrorMessage();
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(parseErrorArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(parseErrorStream29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNotNull(parseErrorArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(parseErrorArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(parseErrorArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(parseErrorArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(parseErrorArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(parseErrorItor75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(tag89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(tag91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(objArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray94), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray94), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "[]" + "'", str99, "[]");
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        org.jsoup.parser.ParseErrorList parseErrorList25 = new org.jsoup.parser.ParseErrorList(10, (int) '#');
        org.jsoup.parser.ParseError[] parseErrorArray26 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList27 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList27, parseErrorArray26);
        org.jsoup.parser.ParseError[] parseErrorArray29 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList30 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30, parseErrorArray29);
        boolean boolean32 = parseErrorList27.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        org.jsoup.parser.ParseError[] parseErrorArray33 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList34 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList34, parseErrorArray33);
        boolean boolean36 = parseErrorList30.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList34);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream37 = parseErrorList30.stream();
        boolean boolean38 = parseErrorList25.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        org.jsoup.parser.ParseError[] parseErrorArray39 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList40 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40, parseErrorArray39);
        org.jsoup.parser.ParseError[] parseErrorArray42 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList43 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43, parseErrorArray42);
        boolean boolean45 = parseErrorList40.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        java.lang.Object[] objArray46 = parseErrorList40.toArray();
        parseErrorList40.clear();
        org.jsoup.parser.ParseError[] parseErrorArray48 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList49 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList49, parseErrorArray48);
        boolean boolean51 = parseErrorList40.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList49);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream52 = parseErrorList49.parallelStream();
        java.lang.Object[] objArray53 = parseErrorList49.toArray();
        org.jsoup.parser.ParseError parseError56 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        boolean boolean57 = parseErrorList49.add(parseError56);
        boolean boolean58 = parseErrorList25.add(parseError56);
        int int59 = parseErrorList21.lastIndexOf((java.lang.Object) boolean58);
        org.jsoup.parser.Token.EndTag endTag63 = new org.jsoup.parser.Token.EndTag();
        char[] charArray66 = new char[] { '#', '#' };
        endTag63.appendAttributeValue(charArray66);
        endTag63.finaliseTag();
        boolean boolean69 = endTag63.isSelfClosing();
        org.jsoup.parser.Tag tag71 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean72 = tag71.isFormListed();
        org.jsoup.parser.Tag tag73 = tag71.setSelfClosing();
        boolean boolean74 = tag71.isKnownTag();
        java.lang.Object[] objArray76 = new java.lang.Object[] { boolean69, tag71, "Doctype" };
        org.jsoup.parser.ParseError parseError77 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray76);
        java.lang.String str78 = parseError77.getErrorMessage();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError79 = parseErrorList21.set((int) '\uffff', parseError77);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 65535, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(parseErrorArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(parseErrorArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parseErrorStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parseErrorArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(parseErrorArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(parseErrorStream52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(tag71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(tag73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        htmlTreeBuilder0.newPendingTableCharacters();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState6 = htmlTreeBuilder0.originalState();
        org.jsoup.nodes.Document document7 = htmlTreeBuilder0.doc;
        org.jsoup.parser.Token.StartTag startTag8 = new org.jsoup.parser.Token.StartTag();
        startTag8.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = startTag8.asStartTag();
        org.jsoup.parser.Token.Tag tag13 = startTag11.name("");
        startTag11.selfClosing = false;
        org.jsoup.nodes.Attributes attributes16 = startTag11.getAttributes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element17 = htmlTreeBuilder0.insert(startTag11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be false");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(htmlTreeBuilderState6);
        org.junit.Assert.assertNull(document7);
        org.junit.Assert.assertNotNull(startTag11);
        org.junit.Assert.assertNotNull(tag13);
        org.junit.Assert.assertNotNull(attributes16);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("<!---->");
        startTag1.appendAttributeValue(' ');
        startTag1.finaliseTag();
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document5 = parser0.parseInput("Doctype", "[]");
        org.jsoup.parser.TreeBuilder treeBuilder6 = parser0.getTreeBuilder();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNotNull(treeBuilder6);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.CharacterReader characterReader3 = null;
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream6 = parseErrorList5.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList5.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList5.iterator();
        org.jsoup.parser.Tokeniser tokeniser9 = new org.jsoup.parser.Tokeniser(characterReader3, parseErrorList5);
        org.jsoup.parser.Token.Tag tag10 = tokeniser9.tagPending;
        org.jsoup.parser.Token.Tag tag12 = tokeniser9.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype13 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype14 = doctype13.asDoctype();
        java.lang.String str15 = doctype13.tokenType();
        tokeniser9.emit((org.jsoup.parser.Token) doctype13);
        boolean boolean17 = tag1.equals((java.lang.Object) doctype13);
        java.lang.String str18 = doctype13.getName();
        doctype13.forceQuirks = true;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.EndTag endTag21 = doctype13.asEndTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$EndTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorStream6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNull(tag10);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertNotNull(doctype14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Doctype" + "'", str15, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.MarkupDeclarationOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        tokeniser7.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype11 = tokeniser7.doctypePending;
        tokeniser7.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype13 = tokeniser7.doctypePending;
        org.jsoup.parser.Token.Comment comment14 = new org.jsoup.parser.Token.Comment();
        java.lang.String str15 = comment14.toString();
        java.lang.StringBuilder stringBuilder16 = comment14.data;
        boolean boolean17 = comment14.isEndTag();
        java.lang.String str18 = comment14.toString();
        tokeniser7.commentPending = comment14;
        tokeniser7.createCommentPending();
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState21 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        java.lang.StringBuilder stringBuilder30 = null;
        tokeniser28.dataBuffer = stringBuilder30;
        org.jsoup.parser.Token.EndTag endTag32 = new org.jsoup.parser.Token.EndTag();
        char[] charArray35 = new char[] { '#', '#' };
        endTag32.appendAttributeValue(charArray35);
        tokeniser28.emit(charArray35);
        org.jsoup.parser.Token.Comment comment38 = tokeniser28.commentPending;
        org.jsoup.parser.CharacterReader characterReader40 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean41 = characterReader40.matchesLetter();
        miniSoupTokeniserState21.read(tokeniser28, characterReader40);
        // The following exception was thrown during execution in test generation
        try {
            tokeniserState0.read(tokeniser7, characterReader40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNull(doctype11);
        org.junit.Assert.assertNull(doctype13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "<!---->" + "'", str15, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder16);
        org.junit.Assert.assertEquals(stringBuilder16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<!---->" + "'", str18, "<!---->");
        org.junit.Assert.assertNotNull(miniSoupTokeniserState21);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#, #]");
        org.junit.Assert.assertNull(comment38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor29 = parseErrorList26.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        boolean boolean33 = parseErrorList26.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        xmlTreeBuilder3.initialiseParse("<!---->", "", parseErrorList26);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder35 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int40 = parseErrorList39.getMaxSize();
        org.jsoup.nodes.Document document41 = htmlTreeBuilder35.parse("0: Doctype", "hi!", parseErrorList39);
        htmlTreeBuilder35.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray44 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList45 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList45, characterArray44);
        htmlTreeBuilder35.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList45);
        boolean boolean48 = htmlTreeBuilder35.isFosterInserts();
        htmlTreeBuilder35.generateImpliedEndTags();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder50 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document51 = xmlTreeBuilder50.doc;
        org.jsoup.nodes.Document document52 = xmlTreeBuilder50.doc;
        java.lang.Object[] objArray53 = new java.lang.Object[] { htmlTreeBuilder35, xmlTreeBuilder50 };
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder54 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList58 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int59 = parseErrorList58.getMaxSize();
        org.jsoup.nodes.Document document60 = htmlTreeBuilder54.parse("0: Doctype", "hi!", parseErrorList58);
        htmlTreeBuilder54.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray63 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList64 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList64, characterArray63);
        htmlTreeBuilder54.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList64);
        boolean boolean67 = htmlTreeBuilder54.isFosterInserts();
        htmlTreeBuilder54.generateImpliedEndTags();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder69 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document70 = xmlTreeBuilder69.doc;
        org.jsoup.nodes.Document document71 = xmlTreeBuilder69.doc;
        java.lang.Object[] objArray72 = new java.lang.Object[] { htmlTreeBuilder54, xmlTreeBuilder69 };
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder73 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList77 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int78 = parseErrorList77.getMaxSize();
        org.jsoup.nodes.Document document79 = htmlTreeBuilder73.parse("0: Doctype", "hi!", parseErrorList77);
        htmlTreeBuilder73.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray82 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList83 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList83, characterArray82);
        htmlTreeBuilder73.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList83);
        boolean boolean86 = htmlTreeBuilder73.isFosterInserts();
        htmlTreeBuilder73.generateImpliedEndTags();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder88 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document89 = xmlTreeBuilder88.doc;
        org.jsoup.nodes.Document document90 = xmlTreeBuilder88.doc;
        java.lang.Object[] objArray91 = new java.lang.Object[] { htmlTreeBuilder73, xmlTreeBuilder88 };
        java.lang.Object[][] objArray92 = new java.lang.Object[][] { objArray53, objArray72, objArray91 };
        java.lang.Object[][] objArray93 = parseErrorList26.toArray(objArray92);
        parseErrorList26.trimToSize();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertNotNull(parseErrorItor29);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(characterArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(document51);
        org.junit.Assert.assertNull(document52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(parseErrorList58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(document60);
        org.junit.Assert.assertNotNull(characterArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(document70);
        org.junit.Assert.assertNull(document71);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertNotNull(parseErrorList77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(document79);
        org.junit.Assert.assertNotNull(characterArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(document89);
        org.junit.Assert.assertNull(document90);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertNotNull(objArray93);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        boolean boolean12 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList10.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError15 = parseErrorList10.remove((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorStream13);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.StartTag startTag13 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType14 = startTag13.type;
        startTag13.appendTagName('#');
        boolean boolean17 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag13);
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader19.advance();
        boolean boolean22 = characterReader19.matchConsume("<hi!>");
        htmlTreeBuilder0.reader = characterReader19;
        htmlTreeBuilder0.newPendingTableCharacters();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertTrue("'" + tokenType14 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType14.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        startTag0.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag3 = startTag0.asStartTag();
        startTag0.appendAttributeValue("<hi!#>");
        org.junit.Assert.assertNotNull(startTag3);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList4.stream();
        parseErrorList4.ensureCapacity((int) (byte) 10);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorStream11);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder17 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        org.jsoup.nodes.Document document23 = htmlTreeBuilder17.parse("0: Doctype", "hi!", parseErrorList21);
        org.jsoup.parser.ParseErrorList parseErrorList27 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream28 = parseErrorList27.stream();
        boolean boolean29 = parseErrorList27.canAddError();
        org.jsoup.nodes.Document document30 = htmlTreeBuilder17.parse("EndTag", "hi!#", parseErrorList27);
        java.lang.String[] strArray38 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean39 = htmlTreeBuilder17.inScope("hi!#", strArray38);
        boolean boolean40 = htmlTreeBuilder0.inScope("hi!#", strArray38);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder41 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList45 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int46 = parseErrorList45.getMaxSize();
        org.jsoup.nodes.Document document47 = htmlTreeBuilder41.parse("0: Doctype", "hi!", parseErrorList45);
        boolean boolean48 = htmlTreeBuilder41.framesetOk();
        org.jsoup.parser.Parser parser49 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser51 = parser49.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document54 = parser49.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document57 = parser49.parseInput("<hi!>", "[]");
        htmlTreeBuilder41.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document57);
        boolean boolean59 = htmlTreeBuilder41.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder60 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList65 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList67 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream68 = parseErrorList67.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor69 = parseErrorList67.iterator();
        boolean boolean70 = parseErrorList65.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList67);
        xmlTreeBuilder60.initialiseParse("<!---->", "hi!", parseErrorList65);
        org.jsoup.parser.ParseErrorList parseErrorList75 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document76 = xmlTreeBuilder60.parse("", "[]", parseErrorList75);
        boolean boolean77 = htmlTreeBuilder41.isInActiveFormattingElements((org.jsoup.nodes.Element) document76);
        org.jsoup.parser.TokenQueue tokenQueue79 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean80 = tokenQueue79.isEmpty();
        boolean boolean81 = tokenQueue79.consumeWhitespace();
        java.lang.String str82 = tokenQueue79.consumeWord();
        boolean boolean83 = tokenQueue79.matchesWhitespace();
        java.lang.String[] strArray88 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str89 = tokenQueue79.consumeToAny(strArray88);
        boolean boolean90 = htmlTreeBuilder41.inScope(strArray88);
        org.jsoup.nodes.Document document93 = org.jsoup.parser.Parser.parse("", "<hi!>");
        htmlTreeBuilder41.pushActiveFormattingElements((org.jsoup.nodes.Element) document93);
        htmlTreeBuilder0.doc = document93;
        htmlTreeBuilder0.framesetOk(true);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(parseErrorList27);
        org.junit.Assert.assertNotNull(parseErrorStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(parser49);
        org.junit.Assert.assertNotNull(parser51);
        org.junit.Assert.assertNotNull(document54);
        org.junit.Assert.assertNotNull(document57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(parseErrorList67);
        org.junit.Assert.assertNotNull(parseErrorStream68);
        org.junit.Assert.assertNotNull(parseErrorItor69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(parseErrorList75);
        org.junit.Assert.assertNotNull(document76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "EndTag" + "'", str82, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(document93);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype22 = new org.jsoup.parser.Token.Doctype();
        boolean boolean23 = doctype22.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = null;
        boolean boolean25 = htmlTreeBuilderState21.process((org.jsoup.parser.Token) doctype22, htmlTreeBuilder24);
        htmlTreeBuilder0.transition(htmlTreeBuilderState21);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        java.lang.String[] strArray10 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str11 = tokenQueue1.consumeToAny(strArray10);
        boolean boolean12 = tokenQueue1.matchesStartTag();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str3 = tokenQueue1.remainder();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Comment comment1 = endTag0.asComment();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Comment");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        boolean boolean25 = parseErrorList18.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23);
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList23);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList23.iterator();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("[]", "Doctype", parseErrorList23);
        org.jsoup.parser.CharacterReader characterReader31 = null;
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream34 = parseErrorList33.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList33.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor36 = parseErrorList33.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int39 = parseErrorList38.getMaxSize();
        boolean boolean40 = parseErrorList33.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        org.jsoup.parser.Tokeniser tokeniser41 = new org.jsoup.parser.Tokeniser(characterReader31, parseErrorList38);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        boolean boolean45 = parseErrorList43.canAddError();
        boolean boolean46 = parseErrorList38.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        org.jsoup.nodes.Document document47 = htmlTreeBuilder0.parse("hi!", "<!---->", parseErrorList43);
        boolean boolean48 = htmlTreeBuilder0.framesetOk();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertNotNull(parseErrorStream34);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNotNull(parseErrorItor36);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        java.util.List<org.jsoup.parser.ParseError> parseErrorList13 = parseErrorList8.subList(0, 0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList13.parallelStream();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.CharacterReader characterReader3 = null;
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream6 = parseErrorList5.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList5.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList5.iterator();
        org.jsoup.parser.Tokeniser tokeniser9 = new org.jsoup.parser.Tokeniser(characterReader3, parseErrorList5);
        org.jsoup.parser.Token.Tag tag10 = tokeniser9.tagPending;
        org.jsoup.parser.Token.Tag tag12 = tokeniser9.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype13 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype14 = doctype13.asDoctype();
        java.lang.String str15 = doctype13.tokenType();
        tokeniser9.emit((org.jsoup.parser.Token) doctype13);
        boolean boolean17 = tag1.equals((java.lang.Object) doctype13);
        java.lang.String str18 = doctype13.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.StartTag startTag19 = doctype13.asStartTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$StartTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorStream6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNull(tag10);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertNotNull(doctype14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Doctype" + "'", str15, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList8.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        java.lang.Object[] objArray14 = parseErrorList8.toArray();
        parseErrorList8.clear();
        org.jsoup.parser.ParseError[] parseErrorArray16 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList17 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17, parseErrorArray16);
        org.jsoup.parser.ParseError[] parseErrorArray19 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList20 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20, parseErrorArray19);
        boolean boolean22 = parseErrorList17.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20);
        java.lang.Object[] objArray23 = parseErrorList17.toArray();
        parseErrorList17.clear();
        org.jsoup.parser.ParseError[] parseErrorArray25 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList26 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26, parseErrorArray25);
        boolean boolean28 = parseErrorList17.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        boolean boolean29 = parseErrorList8.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        java.lang.Object[] objArray30 = parseErrorList26.toArray();
        boolean boolean31 = parseErrorList4.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        org.jsoup.parser.ParseError[] parseErrorArray32 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList33 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33, parseErrorArray32);
        org.jsoup.parser.ParseError[] parseErrorArray35 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList36 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36, parseErrorArray35);
        boolean boolean38 = parseErrorList33.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor39 = parseErrorList36.listIterator();
        int int41 = parseErrorList36.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag45 = new org.jsoup.parser.Token.EndTag();
        char[] charArray48 = new char[] { '#', '#' };
        endTag45.appendAttributeValue(charArray48);
        endTag45.finaliseTag();
        boolean boolean51 = endTag45.isSelfClosing();
        org.jsoup.parser.Tag tag53 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean54 = tag53.isFormListed();
        org.jsoup.parser.Tag tag55 = tag53.setSelfClosing();
        boolean boolean56 = tag53.isKnownTag();
        java.lang.Object[] objArray58 = new java.lang.Object[] { boolean51, tag53, "Doctype" };
        org.jsoup.parser.ParseError parseError59 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray58);
        parseErrorList36.add(0, parseError59);
        boolean boolean61 = parseErrorList4.add(parseError59);
        int int62 = parseError59.getPosition();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(parseErrorArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(parseErrorArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parseErrorItor39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(tag53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(tag55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        boolean boolean25 = parseErrorList18.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23);
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList23);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList23.iterator();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("[]", "Doctype", parseErrorList23);
        org.jsoup.parser.CharacterReader characterReader31 = null;
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream34 = parseErrorList33.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList33.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor36 = parseErrorList33.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int39 = parseErrorList38.getMaxSize();
        boolean boolean40 = parseErrorList33.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        org.jsoup.parser.Tokeniser tokeniser41 = new org.jsoup.parser.Tokeniser(characterReader31, parseErrorList38);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        boolean boolean45 = parseErrorList43.canAddError();
        boolean boolean46 = parseErrorList38.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        org.jsoup.nodes.Document document47 = htmlTreeBuilder0.parse("hi!", "<!---->", parseErrorList43);
        org.jsoup.parser.Tokeniser tokeniser48 = htmlTreeBuilder0.tokeniser;
        htmlTreeBuilder0.generateImpliedEndTags();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertNotNull(parseErrorStream34);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNotNull(parseErrorItor36);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(tokeniser48);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.parser.TokenQueue tokenQueue38 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean39 = tokenQueue38.isEmpty();
        boolean boolean40 = tokenQueue38.consumeWhitespace();
        java.lang.String str41 = tokenQueue38.consumeWord();
        boolean boolean42 = tokenQueue38.matchesWhitespace();
        java.lang.String[] strArray47 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str48 = tokenQueue38.consumeToAny(strArray47);
        boolean boolean49 = htmlTreeBuilder0.inScope(strArray47);
        org.jsoup.nodes.Document document52 = org.jsoup.parser.Parser.parse("", "<hi!>");
        htmlTreeBuilder0.pushActiveFormattingElements((org.jsoup.nodes.Element) document52);
        org.jsoup.nodes.Element element54 = htmlTreeBuilder0.pop();
        htmlTreeBuilder0.generateImpliedEndTags("");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "EndTag" + "'", str41, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertNotNull(element54);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray18 = tokeniser6.consumeCharacterReference((java.lang.Character) '#', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag("artTag");
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("<!---->");
        java.lang.String str2 = tag1.toString();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "<!---->" + "'", str2, "<!---->");
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        org.jsoup.nodes.FormElement formElement11 = htmlTreeBuilder3.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.parser.Parser parser20 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser22 = parser20.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document25 = parser20.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document28 = parser20.parseInput("<hi!>", "[]");
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document28);
        boolean boolean30 = htmlTreeBuilder12.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder31 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList38.iterator();
        boolean boolean41 = parseErrorList36.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        xmlTreeBuilder31.initialiseParse("<!---->", "hi!", parseErrorList36);
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document47 = xmlTreeBuilder31.parse("", "[]", parseErrorList46);
        boolean boolean48 = htmlTreeBuilder12.isInActiveFormattingElements((org.jsoup.nodes.Element) document47);
        boolean boolean49 = htmlTreeBuilder3.isInActiveFormattingElements((org.jsoup.nodes.Element) document47);
        java.util.List<org.jsoup.parser.Token.Character> characterList50 = htmlTreeBuilder3.getPendingTableCharacters();
        org.jsoup.parser.Tokeniser tokeniser51 = htmlTreeBuilder3.tokeniser;
        htmlTreeBuilder3.markInsertionMode();
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(formElement11);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parser20);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(characterList50);
        org.junit.Assert.assertNotNull(tokeniser51);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType2 = startTag1.type;
        startTag1.appendTagName('#');
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Character character5 = startTag1.asCharacter();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Character");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + tokenType2 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType2.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype1 = new org.jsoup.parser.Token.Doctype();
        boolean boolean2 = doctype1.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = null;
        boolean boolean4 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) doctype1, htmlTreeBuilder3);
        java.lang.String str5 = doctype1.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Comment comment6 = doctype1.asComment();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$Comment");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("<!---->");
        java.lang.String str2 = tokenQueue1.consumeTagName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        tokeniser6.createTempBuffer();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray10 = tokeniser6.consumeCharacterReference((java.lang.Character) '#', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("<hi!>");
        startTag1.selfClosing = true;
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
        org.jsoup.parser.TreeBuilder treeBuilder2 = null;
        org.jsoup.parser.Parser parser3 = parser1.setTreeBuilder(treeBuilder2);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder4 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document5 = xmlTreeBuilder4.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder6 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        boolean boolean16 = parseErrorList11.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        xmlTreeBuilder6.initialiseParse("<!---->", "hi!", parseErrorList11);
        xmlTreeBuilder4.errors = parseErrorList11;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList19 = xmlTreeBuilder4.stack;
        org.jsoup.parser.CharacterReader characterReader20 = null;
        xmlTreeBuilder4.reader = characterReader20;
        org.jsoup.parser.Parser parser22 = parser1.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder4);
        org.jsoup.parser.Token.EndTag endTag23 = new org.jsoup.parser.Token.EndTag();
        char[] charArray26 = new char[] { '#', '#' };
        endTag23.appendAttributeValue(charArray26);
        endTag23.appendAttributeValue(' ');
        char[] charArray31 = new char[] { '4' };
        endTag23.appendAttributeValue(charArray31);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = xmlTreeBuilder4.process((org.jsoup.parser.Token) endTag23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNull(document5);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(elementList19);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, #]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4]");
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList12 = htmlTreeBuilder0.stack;
        org.jsoup.parser.Token.StartTag startTag14 = new org.jsoup.parser.Token.StartTag("<!---->");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState15 = org.jsoup.parser.HtmlTreeBuilderState.AfterFrameset;
        boolean boolean16 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag14, htmlTreeBuilderState15);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.EndTag endTag17 = startTag14.asEndTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$EndTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(elementList12);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement14 = htmlTreeBuilder0.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder15 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        org.jsoup.nodes.Document document21 = htmlTreeBuilder15.parse("0: Doctype", "hi!", parseErrorList19);
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream26 = parseErrorList25.stream();
        boolean boolean27 = parseErrorList25.canAddError();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder15.parse("EndTag", "hi!#", parseErrorList25);
        java.lang.String[] strArray36 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean37 = htmlTreeBuilder15.inScope("hi!#", strArray36);
        org.jsoup.parser.ParseErrorList parseErrorList42 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document43 = htmlTreeBuilder15.parse("0: Doctype", "", parseErrorList42);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder44 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document45 = xmlTreeBuilder44.doc;
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int50 = parseErrorList49.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray51 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList52 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList52, parseErrorArray51);
        org.jsoup.parser.ParseError[] parseErrorArray54 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList55 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList55, parseErrorArray54);
        boolean boolean57 = parseErrorList52.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList55);
        org.jsoup.parser.ParseError[] parseErrorArray58 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList59 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59, parseErrorArray58);
        boolean boolean61 = parseErrorList55.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59);
        parseErrorList59.clear();
        boolean boolean63 = parseErrorList49.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor64 = parseErrorList49.iterator();
        org.jsoup.nodes.Document document65 = xmlTreeBuilder44.parse("<hi!>", "0: []", parseErrorList49);
        htmlTreeBuilder15.push((org.jsoup.nodes.Element) document65);
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document65);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder68 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList72 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int73 = parseErrorList72.getMaxSize();
        org.jsoup.nodes.Document document74 = htmlTreeBuilder68.parse("0: Doctype", "hi!", parseErrorList72);
        boolean boolean75 = htmlTreeBuilder68.framesetOk();
        org.jsoup.nodes.Element element76 = htmlTreeBuilder68.currentElement();
        boolean boolean77 = htmlTreeBuilder0.isInActiveFormattingElements(element76);
        org.jsoup.parser.CharacterReader characterReader78 = null;
        org.jsoup.parser.ParseErrorList parseErrorList80 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream81 = parseErrorList80.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor82 = parseErrorList80.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor83 = parseErrorList80.iterator();
        org.jsoup.parser.Tokeniser tokeniser84 = new org.jsoup.parser.Tokeniser(characterReader78, parseErrorList80);
        org.jsoup.parser.Token.Tag tag85 = tokeniser84.tagPending;
        org.jsoup.parser.Token.Tag tag87 = tokeniser84.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype88 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype89 = doctype88.asDoctype();
        java.lang.String str90 = doctype88.tokenType();
        tokeniser84.emit((org.jsoup.parser.Token) doctype88);
        org.jsoup.parser.ITokeniserState iTokeniserState92 = tokeniser84.getState();
        org.jsoup.parser.Token.Comment comment93 = new org.jsoup.parser.Token.Comment();
        java.lang.String str94 = comment93.toString();
        java.lang.StringBuilder stringBuilder95 = comment93.data;
        boolean boolean96 = comment93.isEndTag();
        boolean boolean97 = comment93.isComment();
        tokeniser84.commentPending = comment93;
        htmlTreeBuilder0.currentToken = comment93;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(formElement14);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertNotNull(parseErrorStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertNull(document45);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(parseErrorArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(parseErrorArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(parseErrorItor64);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertNotNull(parseErrorList72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(document74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(element76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(parseErrorList80);
        org.junit.Assert.assertNotNull(parseErrorStream81);
        org.junit.Assert.assertNotNull(parseErrorItor82);
        org.junit.Assert.assertNotNull(parseErrorItor83);
        org.junit.Assert.assertNull(tag85);
        org.junit.Assert.assertNotNull(tag87);
        org.junit.Assert.assertNotNull(doctype89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Doctype" + "'", str90, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState92);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "<!---->" + "'", str94, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder95);
        org.junit.Assert.assertEquals(stringBuilder95.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.Token.Tag tag10 = tokeniser7.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype11 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype12 = doctype11.asDoctype();
        java.lang.String str13 = doctype11.tokenType();
        tokeniser7.emit((org.jsoup.parser.Token) doctype11);
        org.jsoup.parser.Token.Tag tag16 = tokeniser7.createTagPending(true);
        xmlTreeBuilder0.currentToken = tag16;
        org.jsoup.nodes.Attributes attributes18 = tag16.attributes;
        tag16.appendAttributeName('#');
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(tag10);
        org.junit.Assert.assertNotNull(doctype12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Doctype" + "'", str13, "Doctype");
        org.junit.Assert.assertNotNull(tag16);
        org.junit.Assert.assertNotNull(attributes18);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Token token8 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState9 = org.jsoup.parser.HtmlTreeBuilderState.InTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState9);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        java.util.List<org.jsoup.nodes.Node> nodeList16 = org.jsoup.parser.Parser.parseFragment("EndTag", (org.jsoup.nodes.Element) document14, "<hi!>");
        boolean boolean17 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document14);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.parser.Parser parser26 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser28 = parser26.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document31 = parser26.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document34 = parser26.parseInput("<hi!>", "[]");
        htmlTreeBuilder18.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document34);
        org.jsoup.parser.Token.Doctype doctype36 = new org.jsoup.parser.Token.Doctype();
        boolean boolean37 = doctype36.isCharacter();
        boolean boolean38 = doctype36.isEndTag();
        htmlTreeBuilder18.currentToken = doctype36;
        org.jsoup.nodes.Element element40 = htmlTreeBuilder18.pop();
        htmlTreeBuilder0.maybeSetBaseUri(element40);
        org.jsoup.parser.Token token42 = null;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState43 = org.jsoup.parser.HtmlTreeBuilderState.InCaption;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = htmlTreeBuilder0.process(token42, htmlTreeBuilderState43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(token8);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState9);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parser26);
        org.junit.Assert.assertNotNull(parser28);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(element40);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState43);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        org.jsoup.parser.Token.EndTag endTag24 = new org.jsoup.parser.Token.EndTag();
        char[] charArray27 = new char[] { '#', '#' };
        endTag24.appendAttributeValue(charArray27);
        endTag24.finaliseTag();
        boolean boolean30 = endTag24.isSelfClosing();
        org.jsoup.parser.Tag tag32 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean33 = tag32.isFormListed();
        org.jsoup.parser.Tag tag34 = tag32.setSelfClosing();
        boolean boolean35 = tag32.isKnownTag();
        java.lang.Object[] objArray37 = new java.lang.Object[] { boolean30, tag32, "Doctype" };
        org.jsoup.parser.ParseError parseError38 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray37);
        org.jsoup.parser.ParseError parseError39 = new org.jsoup.parser.ParseError((int) (short) -1, "[]", objArray37);
        org.jsoup.parser.ParseError parseError40 = new org.jsoup.parser.ParseError((int) (byte) 10, "", objArray37);
        org.jsoup.parser.ParseError parseError41 = new org.jsoup.parser.ParseError((int) (short) 1, "", objArray37);
        parseErrorList7.add((int) (short) 0, parseError41);
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(tag32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(tag34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[false, hi!, Doctype]");
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        htmlTreeBuilder0.generateImpliedEndTags();
        java.lang.String str10 = htmlTreeBuilder0.toString();
        org.jsoup.nodes.Element element12 = htmlTreeBuilder0.getFromStack("-1: []");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(element12);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype12 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        tokeniser6.emit('\uffff');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = tokeniser6.unescapeEntities(false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNull(doctype12);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes2 = startTag1.getAttributes();
        org.jsoup.parser.Token.StartTag startTag3 = new org.jsoup.parser.Token.StartTag("<!---->", attributes2);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Doctype doctype4 = startTag3.asDoctype();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Doctype");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(attributes2);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        org.jsoup.parser.Token.StartTag startTag23 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes24 = startTag23.getAttributes();
        xmlTreeBuilder3.currentToken = startTag23;
        org.jsoup.parser.Token.EndTag endTag26 = new org.jsoup.parser.Token.EndTag();
        char[] charArray29 = new char[] { '#', '#' };
        endTag26.appendAttributeValue(charArray29);
        endTag26.appendAttributeValue(' ');
        char[] charArray34 = new char[] { '4' };
        endTag26.appendAttributeValue(charArray34);
        startTag23.appendAttributeValue(charArray34);
        startTag23.appendAttributeValue("hi!");
        startTag23.newAttribute();
        startTag23.appendAttributeValue('4');
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(attributes24);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#, #]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[4]");
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.nodes.Document document16 = htmlTreeBuilder0.doc;
        boolean boolean18 = htmlTreeBuilder0.inTableScope("<!---->");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState19 = htmlTreeBuilder0.originalState();
        org.jsoup.nodes.Element element21 = htmlTreeBuilder0.getFromStack("[100: ]");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(htmlTreeBuilderState19);
        org.junit.Assert.assertNull(element21);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitDoctypePending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("<Doctype>");
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        java.lang.String[] strArray10 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str11 = tokenQueue1.consumeToAny(strArray10);
        // The following exception was thrown during execution in test generation
        try {
            char char12 = tokenQueue1.consume();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 6");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        org.jsoup.parser.Token.Tag tag15 = tokeniser6.createTagPending(true);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Character character16 = tag15.asCharacter();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Character");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertNotNull(tag15);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        org.jsoup.nodes.FormElement formElement11 = htmlTreeBuilder3.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.parser.Parser parser20 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser22 = parser20.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document25 = parser20.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document28 = parser20.parseInput("<hi!>", "[]");
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document28);
        boolean boolean30 = htmlTreeBuilder12.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder31 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList38.iterator();
        boolean boolean41 = parseErrorList36.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        xmlTreeBuilder31.initialiseParse("<!---->", "hi!", parseErrorList36);
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document47 = xmlTreeBuilder31.parse("", "[]", parseErrorList46);
        boolean boolean48 = htmlTreeBuilder12.isInActiveFormattingElements((org.jsoup.nodes.Element) document47);
        boolean boolean49 = htmlTreeBuilder3.isInActiveFormattingElements((org.jsoup.nodes.Element) document47);
        boolean boolean50 = htmlTreeBuilder3.framesetOk();
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(formElement11);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parser20);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        org.jsoup.parser.Token.Doctype doctype23 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype24 = doctype23.asDoctype();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = xmlTreeBuilder3.process((org.jsoup.parser.Token) doctype23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(doctype24);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token token1 = xmlTreeBuilder0.currentToken;
        org.jsoup.parser.CharacterReader characterReader2 = null;
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.iterator();
        org.jsoup.parser.Tokeniser tokeniser8 = new org.jsoup.parser.Tokeniser(characterReader2, parseErrorList4);
        org.jsoup.parser.Token.Tag tag9 = tokeniser8.tagPending;
        org.jsoup.parser.Token.Tag tag11 = tokeniser8.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype12 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype13 = doctype12.asDoctype();
        java.lang.String str14 = doctype12.tokenType();
        tokeniser8.emit((org.jsoup.parser.Token) doctype12);
        org.jsoup.parser.Token.Tag tag17 = tokeniser8.createTagPending(true);
        xmlTreeBuilder0.tokeniser = tokeniser8;
        tokeniser8.emit('a');
        org.jsoup.parser.Token.Tag tag21 = tokeniser8.tagPending;
        org.jsoup.parser.TokeniserState tokeniserState22 = org.jsoup.parser.TokeniserState.ScriptDataEscapedDash;
        // The following exception was thrown during execution in test generation
        try {
            tokeniser8.advanceTransition((org.jsoup.parser.ITokeniserState) tokeniserState22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(token1);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNull(tag9);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(doctype13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Doctype" + "'", str14, "Doctype");
        org.junit.Assert.assertNotNull(tag17);
        org.junit.Assert.assertNotNull(tag21);
        org.junit.Assert.assertNotNull(tokeniserState22);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        java.lang.String str16 = startTag11.tagName;
        java.lang.String str17 = startTag11.tagName;
        startTag11.appendTagName("");
        boolean boolean20 = startTag11.isEndTag();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!#" + "'", str16, "hi!#");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!#" + "'", str17, "hi!#");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("[]");
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        java.lang.String str6 = tokenQueue1.consumeAttributeKey();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) 100);
        boolean boolean3 = parser2.isTrackErrors();
        org.jsoup.parser.TreeBuilder treeBuilder4 = parser2.getTreeBuilder();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(treeBuilder4);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        htmlTreeBuilder3.clearStackToTableContext();
        htmlTreeBuilder3.generateImpliedEndTags("hi!#");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder3.getPendingTableCharacters();
        htmlTreeBuilder3.clearStackToTableContext();
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(characterList14);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.CharacterReader characterReader2 = null;
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.iterator();
        org.jsoup.parser.Tokeniser tokeniser8 = new org.jsoup.parser.Tokeniser(characterReader2, parseErrorList4);
        org.jsoup.parser.Token.Tag tag9 = tokeniser8.tagPending;
        tokeniser8.emit("<!---->");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder12 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader13 = null;
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream16 = parseErrorList15.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList15.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList15.iterator();
        org.jsoup.parser.Tokeniser tokeniser19 = new org.jsoup.parser.Tokeniser(characterReader13, parseErrorList15);
        org.jsoup.parser.Token.Tag tag20 = tokeniser19.tagPending;
        org.jsoup.parser.Token.Tag tag22 = tokeniser19.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype23 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype24 = doctype23.asDoctype();
        java.lang.String str25 = doctype23.tokenType();
        tokeniser19.emit((org.jsoup.parser.Token) doctype23);
        org.jsoup.parser.Token.Tag tag28 = tokeniser19.createTagPending(true);
        xmlTreeBuilder12.currentToken = tag28;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder30 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int35 = parseErrorList34.getMaxSize();
        org.jsoup.nodes.Document document36 = htmlTreeBuilder30.parse("0: Doctype", "hi!", parseErrorList34);
        boolean boolean37 = htmlTreeBuilder30.framesetOk();
        org.jsoup.nodes.Document document40 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder30.setHeadElement((org.jsoup.nodes.Element) document40);
        xmlTreeBuilder12.doc = document40;
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream47 = parseErrorList46.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor48 = parseErrorList46.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList46.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList51 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int52 = parseErrorList51.getMaxSize();
        boolean boolean53 = parseErrorList46.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList51);
        xmlTreeBuilder12.initialiseParse("hi!#", "0: []", parseErrorList51);
        org.jsoup.parser.Token.Comment comment55 = new org.jsoup.parser.Token.Comment();
        java.lang.String str56 = comment55.getData();
        xmlTreeBuilder12.insert(comment55);
        java.lang.StringBuilder stringBuilder58 = comment55.data;
        tokeniser8.commentPending = comment55;
        boolean boolean60 = comment55.bogus;
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(comment55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNull(tag9);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(parseErrorStream16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNull(tag20);
        org.junit.Assert.assertNotNull(tag22);
        org.junit.Assert.assertNotNull(doctype24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Doctype" + "'", str25, "Doctype");
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(parseErrorStream47);
        org.junit.Assert.assertNotNull(parseErrorItor48);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertNotNull(parseErrorList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(stringBuilder58);
        org.junit.Assert.assertEquals(stringBuilder58.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.DoctypeName;
        org.jsoup.parser.TokeniserState tokeniserState1 = org.jsoup.parser.TokeniserState.AfterDoctypeSystemIdentifier;
        org.jsoup.parser.CharacterReader characterReader2 = null;
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.iterator();
        org.jsoup.parser.Tokeniser tokeniser8 = new org.jsoup.parser.Tokeniser(characterReader2, parseErrorList4);
        org.jsoup.parser.Token.Tag tag9 = tokeniser8.tagPending;
        tokeniser8.emit("<!---->");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder12 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader13 = null;
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream16 = parseErrorList15.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList15.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList15.iterator();
        org.jsoup.parser.Tokeniser tokeniser19 = new org.jsoup.parser.Tokeniser(characterReader13, parseErrorList15);
        org.jsoup.parser.Token.Tag tag20 = tokeniser19.tagPending;
        org.jsoup.parser.Token.Tag tag22 = tokeniser19.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype23 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype24 = doctype23.asDoctype();
        java.lang.String str25 = doctype23.tokenType();
        tokeniser19.emit((org.jsoup.parser.Token) doctype23);
        org.jsoup.parser.Token.Tag tag28 = tokeniser19.createTagPending(true);
        xmlTreeBuilder12.currentToken = tag28;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder30 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int35 = parseErrorList34.getMaxSize();
        org.jsoup.nodes.Document document36 = htmlTreeBuilder30.parse("0: Doctype", "hi!", parseErrorList34);
        boolean boolean37 = htmlTreeBuilder30.framesetOk();
        org.jsoup.nodes.Document document40 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder30.setHeadElement((org.jsoup.nodes.Element) document40);
        xmlTreeBuilder12.doc = document40;
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream47 = parseErrorList46.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor48 = parseErrorList46.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList46.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList51 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int52 = parseErrorList51.getMaxSize();
        boolean boolean53 = parseErrorList46.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList51);
        xmlTreeBuilder12.initialiseParse("hi!#", "0: []", parseErrorList51);
        org.jsoup.parser.Token.Comment comment55 = new org.jsoup.parser.Token.Comment();
        java.lang.String str56 = comment55.getData();
        xmlTreeBuilder12.insert(comment55);
        java.lang.StringBuilder stringBuilder58 = comment55.data;
        tokeniser8.commentPending = comment55;
        org.jsoup.parser.CharacterReader characterReader61 = new org.jsoup.parser.CharacterReader("StartTag");
        int int63 = characterReader61.nextIndexOf((java.lang.CharSequence) "[]");
        java.lang.String str64 = characterReader61.consumeAsString();
        tokeniserState1.read(tokeniser8, characterReader61);
        org.jsoup.parser.CharacterReader characterReader67 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean69 = characterReader67.matches("[100: ]");
        java.lang.String str71 = characterReader67.consumeTo("hi!");
        // The following exception was thrown during execution in test generation
        try {
            tokeniserState0.read(tokeniser8, characterReader67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(tokeniserState1);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNull(tag9);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(parseErrorStream16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNull(tag20);
        org.junit.Assert.assertNotNull(tag22);
        org.junit.Assert.assertNotNull(doctype24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Doctype" + "'", str25, "Doctype");
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(parseErrorStream47);
        org.junit.Assert.assertNotNull(parseErrorItor48);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertNotNull(parseErrorList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(stringBuilder58);
        org.junit.Assert.assertEquals(stringBuilder58.toString(), "");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "S" + "'", str64, "S");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "StartTag" + "'", str71, "StartTag");
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document5 = parser0.parseInput("Doctype", "[]");
        boolean boolean6 = parser0.isTrackErrors();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder8 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int13 = parseErrorList12.getMaxSize();
        org.jsoup.nodes.Document document14 = htmlTreeBuilder8.parse("0: Doctype", "hi!", parseErrorList12);
        org.jsoup.parser.ParseError[] parseErrorArray15 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList16 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16, parseErrorArray15);
        org.jsoup.parser.ParseError[] parseErrorArray18 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList19 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19, parseErrorArray18);
        boolean boolean21 = parseErrorList16.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        java.lang.Object[] objArray22 = parseErrorList16.toArray();
        parseErrorList16.clear();
        org.jsoup.parser.ParseError[] parseErrorArray24 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList25 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList25, parseErrorArray24);
        org.jsoup.parser.ParseError[] parseErrorArray27 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList28 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList28, parseErrorArray27);
        boolean boolean30 = parseErrorList25.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList28);
        java.lang.Object[] objArray31 = parseErrorList25.toArray();
        parseErrorList25.clear();
        org.jsoup.parser.ParseError[] parseErrorArray33 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList34 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList34, parseErrorArray33);
        boolean boolean36 = parseErrorList25.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList34);
        boolean boolean37 = parseErrorList16.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList34);
        java.lang.Object[] objArray38 = parseErrorList34.toArray();
        boolean boolean39 = parseErrorList12.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList34);
        org.jsoup.parser.ParseError[] parseErrorArray40 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList41 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList41, parseErrorArray40);
        org.jsoup.parser.ParseError[] parseErrorArray43 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList44 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44, parseErrorArray43);
        boolean boolean46 = parseErrorList41.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList44.listIterator();
        int int49 = parseErrorList44.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag53 = new org.jsoup.parser.Token.EndTag();
        char[] charArray56 = new char[] { '#', '#' };
        endTag53.appendAttributeValue(charArray56);
        endTag53.finaliseTag();
        boolean boolean59 = endTag53.isSelfClosing();
        org.jsoup.parser.Tag tag61 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean62 = tag61.isFormListed();
        org.jsoup.parser.Tag tag63 = tag61.setSelfClosing();
        boolean boolean64 = tag61.isKnownTag();
        java.lang.Object[] objArray66 = new java.lang.Object[] { boolean59, tag61, "Doctype" };
        org.jsoup.parser.ParseError parseError67 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray66);
        parseErrorList44.add(0, parseError67);
        boolean boolean69 = parseErrorList12.add(parseError67);
        // The following exception was thrown during execution in test generation
        try {
            parseErrorList1.add((int) '#', parseError67);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parseErrorArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(parseErrorArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(parseErrorArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(parseErrorArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(tag61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(tag63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        tokeniser6.emit('#');
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token token20 = tokeniser6.read();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean4 = characterReader1.matchesDigit();
        int int6 = characterReader1.nextIndexOf('\uffff');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList15 = xmlTreeBuilder0.stack;
        org.jsoup.parser.CharacterReader characterReader16 = null;
        xmlTreeBuilder0.reader = characterReader16;
        org.jsoup.nodes.Document document18 = xmlTreeBuilder0.doc;
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        tokeniser25.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag30 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType31 = startTag30.type;
        startTag30.appendTagName('#');
        tokeniser25.tagPending = startTag30;
        java.lang.String str35 = startTag30.tagName;
        java.lang.String str36 = startTag30.tagName;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element37 = xmlTreeBuilder0.insert(startTag30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(elementList15);
        org.junit.Assert.assertNull(document18);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertTrue("'" + tokenType31 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType31.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!#" + "'", str35, "hi!#");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!#" + "'", str36, "hi!#");
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        tokeniser6.acknowledgeSelfClosingFlag();
        tokeniser6.emit('#');
        org.jsoup.parser.Token token19 = null;
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emit(token19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList(10, (int) '#');
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        org.jsoup.parser.ParseError[] parseErrorArray6 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList7 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7, parseErrorArray6);
        boolean boolean9 = parseErrorList4.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList7.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList7.stream();
        boolean boolean15 = parseErrorList2.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.ParseError[] parseErrorArray16 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList17 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17, parseErrorArray16);
        org.jsoup.parser.ParseError[] parseErrorArray19 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList20 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20, parseErrorArray19);
        boolean boolean22 = parseErrorList17.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20);
        java.lang.Object[] objArray23 = parseErrorList17.toArray();
        parseErrorList17.clear();
        org.jsoup.parser.ParseError[] parseErrorArray25 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList26 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26, parseErrorArray25);
        boolean boolean28 = parseErrorList17.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream29 = parseErrorList26.parallelStream();
        java.lang.Object[] objArray30 = parseErrorList26.toArray();
        org.jsoup.parser.ParseError parseError33 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        boolean boolean34 = parseErrorList26.add(parseError33);
        boolean boolean35 = parseErrorList2.add(parseError33);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder36 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int41 = parseErrorList40.getMaxSize();
        org.jsoup.nodes.Document document42 = htmlTreeBuilder36.parse("0: Doctype", "hi!", parseErrorList40);
        org.jsoup.parser.ParseError[] parseErrorArray43 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList44 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44, parseErrorArray43);
        org.jsoup.parser.ParseError[] parseErrorArray46 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList47 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList47, parseErrorArray46);
        boolean boolean49 = parseErrorList44.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList47);
        java.lang.Object[] objArray50 = parseErrorList44.toArray();
        parseErrorList44.clear();
        org.jsoup.parser.ParseError[] parseErrorArray52 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList53 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList53, parseErrorArray52);
        org.jsoup.parser.ParseError[] parseErrorArray55 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList56 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList56, parseErrorArray55);
        boolean boolean58 = parseErrorList53.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList56);
        java.lang.Object[] objArray59 = parseErrorList53.toArray();
        parseErrorList53.clear();
        org.jsoup.parser.ParseError[] parseErrorArray61 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList62 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList62, parseErrorArray61);
        boolean boolean64 = parseErrorList53.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList62);
        boolean boolean65 = parseErrorList44.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList62);
        java.lang.Object[] objArray66 = parseErrorList62.toArray();
        boolean boolean67 = parseErrorList40.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList62);
        org.jsoup.parser.ParseError[] parseErrorArray68 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList69 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList69, parseErrorArray68);
        org.jsoup.parser.ParseError[] parseErrorArray71 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList72 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList72, parseErrorArray71);
        boolean boolean74 = parseErrorList69.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList72);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor75 = parseErrorList72.listIterator();
        int int77 = parseErrorList72.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag81 = new org.jsoup.parser.Token.EndTag();
        char[] charArray84 = new char[] { '#', '#' };
        endTag81.appendAttributeValue(charArray84);
        endTag81.finaliseTag();
        boolean boolean87 = endTag81.isSelfClosing();
        org.jsoup.parser.Tag tag89 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean90 = tag89.isFormListed();
        org.jsoup.parser.Tag tag91 = tag89.setSelfClosing();
        boolean boolean92 = tag89.isKnownTag();
        java.lang.Object[] objArray94 = new java.lang.Object[] { boolean87, tag89, "Doctype" };
        org.jsoup.parser.ParseError parseError95 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray94);
        parseErrorList72.add(0, parseError95);
        boolean boolean97 = parseErrorList40.add(parseError95);
        int int98 = parseErrorList2.lastIndexOf((java.lang.Object) parseError95);
        int int99 = parseError95.getPosition();
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(parseErrorArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(parseErrorStream29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNotNull(parseErrorArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(parseErrorArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(parseErrorArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(parseErrorArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(parseErrorArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(parseErrorItor75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(tag89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(tag91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(objArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray94), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray94), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        java.lang.Object obj8 = parseErrorList4.clone();
        org.jsoup.parser.ParseError[] parseErrorArray11 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList12 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12, parseErrorArray11);
        org.jsoup.parser.ParseError[] parseErrorArray14 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList15 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15, parseErrorArray14);
        boolean boolean17 = parseErrorList12.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15);
        java.lang.Object[] objArray18 = parseErrorList12.toArray();
        parseErrorList12.clear();
        org.jsoup.parser.ParseError[] parseErrorArray20 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList21 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21, parseErrorArray20);
        org.jsoup.parser.ParseError[] parseErrorArray23 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList24 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24, parseErrorArray23);
        boolean boolean26 = parseErrorList21.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
        java.lang.Object[] objArray27 = parseErrorList21.toArray();
        parseErrorList21.clear();
        org.jsoup.parser.ParseError[] parseErrorArray29 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList30 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30, parseErrorArray29);
        boolean boolean32 = parseErrorList21.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        boolean boolean33 = parseErrorList12.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        java.lang.Object[] objArray34 = parseErrorList30.toArray();
        org.jsoup.parser.ParseError parseError35 = new org.jsoup.parser.ParseError((int) '#', "hi!#", objArray34);
        boolean boolean36 = parseErrorList4.add(parseError35);
        int int37 = parseError35.getPosition();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parseErrorArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(parseErrorArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("<hi!#>");
        boolean boolean3 = tokenQueue1.matches("[100: ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        java.lang.String str2 = characterReader1.consumeToEnd();
        int int4 = characterReader1.nextIndexOf('a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = characterReader1.consumeAsString();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 9");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "StartTag" + "'", str2, "StartTag");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag6 = new org.jsoup.parser.Token.EndTag();
        char[] charArray9 = new char[] { '#', '#' };
        endTag6.appendAttributeValue(charArray9);
        boolean boolean11 = tokenQueue1.matchesAny(charArray9);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.parser.Parser parser20 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser22 = parser20.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document25 = parser20.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document28 = parser20.parseInput("<hi!>", "[]");
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document28);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        boolean boolean31 = htmlTreeBuilder12.inScope(strArray30);
        boolean boolean32 = tokenQueue1.matchesAny(strArray30);
        java.lang.String str34 = tokenQueue1.consumeToIgnoreCase("[100: ]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parser20);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.parser.TokenQueue tokenQueue38 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean39 = tokenQueue38.isEmpty();
        boolean boolean40 = tokenQueue38.consumeWhitespace();
        java.lang.String str41 = tokenQueue38.consumeWord();
        boolean boolean42 = tokenQueue38.matchesWhitespace();
        java.lang.String[] strArray47 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str48 = tokenQueue38.consumeToAny(strArray47);
        boolean boolean49 = htmlTreeBuilder0.inScope(strArray47);
        org.jsoup.parser.CharacterReader characterReader50 = null;
        org.jsoup.parser.ParseErrorList parseErrorList52 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream53 = parseErrorList52.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor54 = parseErrorList52.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList52.iterator();
        org.jsoup.parser.Tokeniser tokeniser56 = new org.jsoup.parser.Tokeniser(characterReader50, parseErrorList52);
        org.jsoup.parser.Token.Tag tag57 = tokeniser56.tagPending;
        tokeniser56.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag61 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType62 = startTag61.type;
        startTag61.appendTagName('#');
        tokeniser56.tagPending = startTag61;
        org.jsoup.parser.TokeniserState tokeniserState66 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser56.transition((org.jsoup.parser.ITokeniserState) tokeniserState66);
        org.jsoup.parser.Token.Doctype doctype68 = new org.jsoup.parser.Token.Doctype();
        boolean boolean69 = doctype68.isCharacter();
        tokeniser56.doctypePending = doctype68;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState71 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype72 = new org.jsoup.parser.Token.Doctype();
        boolean boolean73 = doctype72.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder74 = null;
        boolean boolean75 = htmlTreeBuilderState71.process((org.jsoup.parser.Token) doctype72, htmlTreeBuilder74);
        java.lang.StringBuilder stringBuilder76 = doctype72.name;
        tokeniser56.dataBuffer = stringBuilder76;
        org.jsoup.parser.Token.EndTag endTag78 = new org.jsoup.parser.Token.EndTag();
        char[] charArray81 = new char[] { '#', '#' };
        endTag78.appendAttributeValue(charArray81);
        endTag78.appendAttributeValue(' ');
        char[] charArray86 = new char[] { '4' };
        endTag78.appendAttributeValue(charArray86);
        tokeniser56.emit(charArray86);
        htmlTreeBuilder0.tokeniser = tokeniser56;
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray92 = tokeniser56.consumeCharacterReference((java.lang.Character) 't', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "EndTag" + "'", str41, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(parseErrorList52);
        org.junit.Assert.assertNotNull(parseErrorStream53);
        org.junit.Assert.assertNotNull(parseErrorItor54);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertNull(tag57);
        org.junit.Assert.assertTrue("'" + tokenType62 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType62.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(stringBuilder76);
        org.junit.Assert.assertEquals(stringBuilder76.toString(), "");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[#, #]");
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[4]");
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        boolean boolean7 = tokeniser6.isAppropriateEndTagToken();
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitTagPending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList1.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int7 = parseErrorList6.getMaxSize();
        boolean boolean8 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList6);
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        boolean boolean16 = parseErrorList1.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList1.listIterator((int) '\ufffd');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 65533");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str1 = doctype0.getSystemIdentifier();
        org.jsoup.parser.Token.TokenType tokenType2 = doctype0.type;
        java.lang.String str3 = doctype0.getPublicIdentifier();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + tokenType2 + "' != '" + org.jsoup.parser.Token.TokenType.Doctype + "'", tokenType2.equals(org.jsoup.parser.Token.TokenType.Doctype));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.nodes.Element element4 = htmlTreeBuilder0.getActiveFormattingElement("S");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(element4);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        boolean boolean8 = tokeniser7.isAppropriateEndTagToken();
        org.jsoup.parser.Token.Comment comment9 = new org.jsoup.parser.Token.Comment();
        java.lang.String str10 = comment9.getData();
        tokeniser7.commentPending = comment9;
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(comment9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.StartTag startTag13 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType14 = startTag13.type;
        startTag13.appendTagName('#');
        boolean boolean17 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag13);
        startTag13.appendTagName('4');
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertTrue("'" + tokenType14 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType14.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList15 = xmlTreeBuilder0.stack;
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList18);
        org.jsoup.parser.Token.Tag tag23 = tokeniser22.tagPending;
        org.jsoup.parser.Token.Tag tag25 = tokeniser22.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype26 = tokeniser22.doctypePending;
        xmlTreeBuilder0.tokeniser = tokeniser22;
        org.jsoup.parser.Token.Character character29 = new org.jsoup.parser.Token.Character("100: ");
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(character29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(elementList15);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNull(tag23);
        org.junit.Assert.assertNotNull(tag25);
        org.junit.Assert.assertNull(doctype26);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.CharacterReader characterReader9 = null;
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream12 = parseErrorList11.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor13 = parseErrorList11.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList11.iterator();
        org.jsoup.parser.Tokeniser tokeniser15 = new org.jsoup.parser.Tokeniser(characterReader9, parseErrorList11);
        org.jsoup.parser.Token.Tag tag16 = tokeniser15.tagPending;
        org.jsoup.parser.Token.Tag tag18 = tokeniser15.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype19 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype20 = doctype19.asDoctype();
        java.lang.String str21 = doctype19.tokenType();
        tokeniser15.emit((org.jsoup.parser.Token) doctype19);
        org.jsoup.parser.ITokeniserState iTokeniserState23 = tokeniser15.getState();
        org.jsoup.parser.TokeniserState tokeniserState24 = org.jsoup.parser.TokeniserState.Rawtext;
        tokeniser15.eofError((org.jsoup.parser.ITokeniserState) tokeniserState24);
        tokeniser7.transition((org.jsoup.parser.ITokeniserState) tokeniserState24);
        org.jsoup.parser.Token.Tag tag28 = tokeniser7.createTagPending(true);
        org.jsoup.parser.Token.EndTag endTag29 = new org.jsoup.parser.Token.EndTag();
        boolean boolean30 = endTag29.selfClosing;
        org.jsoup.parser.Token.StartTag startTag32 = new org.jsoup.parser.Token.StartTag();
        startTag32.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag35 = startTag32.asStartTag();
        org.jsoup.parser.Token.Tag tag37 = startTag35.name("");
        startTag35.selfClosing = false;
        org.jsoup.nodes.Attributes attributes40 = startTag35.getAttributes();
        org.jsoup.parser.Token.StartTag startTag41 = new org.jsoup.parser.Token.StartTag("0: []", attributes40);
        endTag29.attributes = attributes40;
        tag28.attributes = attributes40;
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertNotNull(parseErrorStream12);
        org.junit.Assert.assertNotNull(parseErrorItor13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertNull(tag16);
        org.junit.Assert.assertNotNull(tag18);
        org.junit.Assert.assertNotNull(doctype20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Doctype" + "'", str21, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState23);
        org.junit.Assert.assertNotNull(tokeniserState24);
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(startTag35);
        org.junit.Assert.assertNotNull(tag37);
        org.junit.Assert.assertNotNull(attributes40);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        boolean boolean1 = doctype0.isCharacter();
        java.lang.StringBuilder stringBuilder2 = doctype0.systemIdentifier;
        java.lang.StringBuilder stringBuilder3 = doctype0.systemIdentifier;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(stringBuilder2);
        org.junit.Assert.assertEquals(stringBuilder2.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder3);
        org.junit.Assert.assertEquals(stringBuilder3.toString(), "");
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype1 = doctype0.asDoctype();
        boolean boolean2 = doctype0.isEOF();
        boolean boolean3 = doctype0.isForceQuirks();
        boolean boolean4 = doctype0.isEndTag();
        java.lang.StringBuilder stringBuilder5 = doctype0.publicIdentifier;
        org.junit.Assert.assertNotNull(doctype1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(stringBuilder5);
        org.junit.Assert.assertEquals(stringBuilder5.toString(), "");
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Element element13 = htmlTreeBuilder0.getActiveFormattingElement("0: Doctype");
        org.jsoup.nodes.Element element14 = null;
        boolean boolean15 = htmlTreeBuilder0.removeFromStack(element14);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(element13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        tokenQueue1.addFirst((java.lang.Character) 'a');
        tokenQueue1.addFirst("StartTag");
        java.lang.String str11 = tokenQueue1.consumeTo("hi!#");
        boolean boolean13 = tokenQueue1.matchChomp("[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "StartTaga" + "'", str11, "StartTaga");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.preserveWhitespace();
        boolean boolean3 = tag1.isKnownTag();
        boolean boolean4 = tag1.isBlock();
        boolean boolean5 = tag1.isFormSubmittable();
        java.lang.String str6 = tag1.getName();
        boolean boolean7 = tag1.isData();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        tokenQueue1.advance();
        java.lang.String str6 = tokenQueue1.consumeCssIdentifier();
        boolean boolean7 = tokenQueue1.isEmpty();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.listIterator();
        parseErrorList1.clear();
        parseErrorList1.ensureCapacity(1);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError8 = parseErrorList1.get((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean4 = characterReader1.matchesDigit();
        int int6 = characterReader1.nextIndexOf((java.lang.CharSequence) "<hi!#>");
        characterReader1.rewindToMark();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        char char6 = tokenQueue1.peek();
        java.lang.String str9 = tokenQueue1.chompBalanced('a', 'a');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\000' + "'", char6 == '\000');
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.parser.Token token10 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        boolean boolean21 = parseErrorList14.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        org.jsoup.nodes.Document document22 = htmlTreeBuilder0.parse("[]", "hi!", parseErrorList19);
        org.jsoup.nodes.Element element23 = htmlTreeBuilder0.pop();
        boolean boolean25 = htmlTreeBuilder0.inButtonScope("<!---->");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(token10);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.Token.StartTag startTag17 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType18 = startTag17.type;
        java.lang.String str19 = startTag17.toString();
        tokeniser6.emit((org.jsoup.parser.Token) startTag17);
        startTag17.finaliseTag();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + tokenType18 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType18.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<hi!>" + "'", str19, "<hi!>");
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Initial;
        org.jsoup.parser.Token.Doctype doctype1 = new org.jsoup.parser.Token.Doctype();
        boolean boolean2 = doctype1.isCharacter();
        java.lang.StringBuilder stringBuilder3 = doctype1.systemIdentifier;
        org.jsoup.parser.Token.StartTag startTag5 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType6 = startTag5.type;
        doctype1.type = tokenType6;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder8 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int13 = parseErrorList12.getMaxSize();
        org.jsoup.nodes.Document document14 = htmlTreeBuilder8.parse("0: Doctype", "hi!", parseErrorList12);
        htmlTreeBuilder8.newPendingTableCharacters();
        boolean boolean17 = htmlTreeBuilder8.inTableScope("");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState18 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag19 = new org.jsoup.parser.Token.EndTag();
        endTag19.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder21 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int26 = parseErrorList25.getMaxSize();
        org.jsoup.nodes.Document document27 = htmlTreeBuilder21.parse("0: Doctype", "hi!", parseErrorList25);
        boolean boolean28 = htmlTreeBuilderState18.process((org.jsoup.parser.Token) endTag19, htmlTreeBuilder21);
        htmlTreeBuilder21.clearStackToTableContext();
        htmlTreeBuilder21.generateImpliedEndTags("hi!#");
        java.util.List<org.jsoup.parser.Token.Character> characterList32 = htmlTreeBuilder21.getPendingTableCharacters();
        htmlTreeBuilder8.setPendingTableCharacters(characterList32);
        org.jsoup.parser.ParseErrorList parseErrorList34 = null;
        htmlTreeBuilder8.errors = parseErrorList34;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) doctype1, htmlTreeBuilder8);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$StartTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(stringBuilder3);
        org.junit.Assert.assertEquals(stringBuilder3.toString(), "");
        org.junit.Assert.assertTrue("'" + tokenType6 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType6.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState18);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(characterList32);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList(10, (int) '#');
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        org.jsoup.parser.ParseError[] parseErrorArray6 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList7 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7, parseErrorArray6);
        boolean boolean9 = parseErrorList4.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList7.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList7.stream();
        boolean boolean15 = parseErrorList2.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.ParseError[] parseErrorArray16 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList17 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17, parseErrorArray16);
        org.jsoup.parser.ParseError[] parseErrorArray19 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList20 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20, parseErrorArray19);
        boolean boolean22 = parseErrorList17.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20);
        java.lang.Object[] objArray23 = parseErrorList17.toArray();
        parseErrorList17.clear();
        org.jsoup.parser.ParseError[] parseErrorArray25 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList26 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26, parseErrorArray25);
        boolean boolean28 = parseErrorList17.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream29 = parseErrorList26.parallelStream();
        java.lang.Object[] objArray30 = parseErrorList26.toArray();
        org.jsoup.parser.ParseError parseError33 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        boolean boolean34 = parseErrorList26.add(parseError33);
        boolean boolean35 = parseErrorList2.add(parseError33);
        int int36 = parseErrorList2.getMaxSize();
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(parseErrorArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(parseErrorStream29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "<!---->");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.jsoup.parser.Parser parser1 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.nodes.Document document4 = parser1.parseInput("", "hi!");
        org.jsoup.nodes.Document document7 = parser1.parseInput("hi!", "hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList9 = org.jsoup.parser.Parser.parseFragment("EndTag", (org.jsoup.nodes.Element) document7, "</hi![]>");
        org.junit.Assert.assertNotNull(parser1);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertNotNull(nodeList9);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        tokeniser6.emit('#');
        boolean boolean20 = tokeniser6.currentNodeInHtmlNS();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        tokenQueue1.advance();
        boolean boolean6 = tokenQueue1.matchesWord();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        boolean boolean9 = htmlTreeBuilder0.framesetOk();
        htmlTreeBuilder0.generateImpliedEndTags();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.Parser parser19 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.parser.CharacterReader characterReader20 = null;
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream23 = parseErrorList22.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList22.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList22.iterator();
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader20, parseErrorList22);
        org.jsoup.parser.Token.Tag tag27 = tokeniser26.tagPending;
        tokeniser26.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag31 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType32 = startTag31.type;
        startTag31.appendTagName('#');
        tokeniser26.tagPending = startTag31;
        org.jsoup.parser.Token.StartTag startTag37 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType38 = startTag37.type;
        java.lang.String str39 = startTag37.toString();
        tokeniser26.emit((org.jsoup.parser.Token) startTag37);
        org.jsoup.nodes.FormElement formElement42 = htmlTreeBuilder0.insertForm(startTag37, true);
        boolean boolean43 = startTag37.selfClosing;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertNotNull(parseErrorStream23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNull(tag27);
        org.junit.Assert.assertTrue("'" + tokenType32 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType32.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + tokenType38 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType38.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "<hi!>" + "'", str39, "<hi!>");
        org.junit.Assert.assertNotNull(formElement42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.CharacterReader characterReader16 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean18 = characterReader16.matches("[100: ]");
        htmlTreeBuilder0.reader = characterReader16;
        htmlTreeBuilder0.clearStackToTableRowContext();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.isEmpty();
        boolean boolean6 = tag1.isEmpty();
        boolean boolean7 = tag1.canContainBlock();
        boolean boolean8 = tag1.isBlock();
        boolean boolean9 = tag1.formatAsBlock();
        boolean boolean10 = tag1.isEmpty();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.newPendingTableCharacters();
        boolean boolean9 = htmlTreeBuilder0.inTableScope("");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        endTag11.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilderState10.process((org.jsoup.parser.Token) endTag11, htmlTreeBuilder13);
        htmlTreeBuilder13.clearStackToTableContext();
        htmlTreeBuilder13.generateImpliedEndTags("hi!#");
        java.util.List<org.jsoup.parser.Token.Character> characterList24 = htmlTreeBuilder13.getPendingTableCharacters();
        htmlTreeBuilder0.setPendingTableCharacters(characterList24);
        org.jsoup.parser.ParseErrorList parseErrorList26 = null;
        htmlTreeBuilder0.errors = parseErrorList26;
        org.jsoup.parser.CharacterReader characterReader28 = null;
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream31 = parseErrorList30.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList30.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor33 = parseErrorList30.iterator();
        org.jsoup.parser.Tokeniser tokeniser34 = new org.jsoup.parser.Tokeniser(characterReader28, parseErrorList30);
        org.jsoup.parser.Token.Tag tag35 = tokeniser34.tagPending;
        org.jsoup.parser.Token.Tag tag37 = tokeniser34.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype38 = new org.jsoup.parser.Token.Doctype();
        boolean boolean39 = doctype38.isCharacter();
        boolean boolean40 = doctype38.isEndTag();
        boolean boolean41 = doctype38.isCharacter();
        tokeniser34.emit((org.jsoup.parser.Token) doctype38);
        java.lang.String str43 = doctype38.getSystemIdentifier();
        htmlTreeBuilder0.currentToken = doctype38;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.StartTag startTag45 = doctype38.asStartTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$StartTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState10);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(characterList24);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorStream31);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertNotNull(parseErrorItor33);
        org.junit.Assert.assertNull(tag35);
        org.junit.Assert.assertNotNull(tag37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType2 = startTag1.type;
        java.lang.String str3 = startTag1.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Character character4 = startTag1.asCharacter();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Character");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + tokenType2 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType2.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<hi!>" + "'", str3, "<hi!>");
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        java.lang.StringBuilder stringBuilder9 = null;
        tokeniser7.dataBuffer = stringBuilder9;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        tokeniser7.emit(charArray14);
        org.jsoup.parser.Token.Comment comment17 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean20 = characterReader19.matchesLetter();
        miniSoupTokeniserState0.read(tokeniser7, characterReader19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        org.jsoup.parser.Token.Tag tag31 = tokeniser28.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype32 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype33 = doctype32.asDoctype();
        java.lang.String str34 = doctype32.tokenType();
        tokeniser28.emit((org.jsoup.parser.Token) doctype32);
        org.jsoup.parser.ITokeniserState iTokeniserState36 = tokeniser28.getState();
        org.jsoup.parser.Token.Comment comment37 = new org.jsoup.parser.Token.Comment();
        java.lang.String str38 = comment37.toString();
        java.lang.StringBuilder stringBuilder39 = comment37.data;
        boolean boolean40 = comment37.isEndTag();
        boolean boolean41 = comment37.isComment();
        tokeniser28.commentPending = comment37;
        org.jsoup.parser.CharacterReader characterReader44 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean46 = characterReader44.matches('\000');
        characterReader44.mark();
        boolean boolean48 = characterReader44.isEmpty();
        java.lang.String str49 = characterReader44.consumeToEnd();
        miniSoupTokeniserState0.read(tokeniser28, characterReader44);
        org.jsoup.parser.CharacterReader characterReader51 = null;
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream54 = parseErrorList53.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList53.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor56 = parseErrorList53.iterator();
        org.jsoup.parser.Tokeniser tokeniser57 = new org.jsoup.parser.Tokeniser(characterReader51, parseErrorList53);
        org.jsoup.parser.Token.Tag tag58 = tokeniser57.tagPending;
        tokeniser57.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype61 = tokeniser57.doctypePending;
        tokeniser57.createCommentPending();
        org.jsoup.parser.Token.Comment comment63 = tokeniser57.commentPending;
        org.jsoup.parser.TokenQueue tokenQueue65 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean66 = tokenQueue65.isEmpty();
        char[] charArray68 = new char[] { '4' };
        boolean boolean69 = tokenQueue65.matchesAny(charArray68);
        tokeniser57.emit(charArray68);
        org.jsoup.parser.TokeniserState tokeniserState71 = org.jsoup.parser.TokeniserState.DoctypeSystemIdentifier_singleQuoted;
        tokeniser57.error((org.jsoup.parser.ITokeniserState) tokeniserState71);
        // The following exception was thrown during execution in test generation
        try {
            tokeniser28.advanceTransition((org.jsoup.parser.ITokeniserState) tokeniserState71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertNotNull(doctype33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Doctype" + "'", str34, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<!---->" + "'", str38, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder39);
        org.junit.Assert.assertEquals(stringBuilder39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "StartTag" + "'", str49, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertNotNull(parseErrorStream54);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertNotNull(parseErrorItor56);
        org.junit.Assert.assertNull(tag58);
        org.junit.Assert.assertNull(doctype61);
        org.junit.Assert.assertNotNull(comment63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[4]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(tokeniserState71);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.CharacterReader characterReader3 = null;
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream6 = parseErrorList5.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList5.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList5.iterator();
        org.jsoup.parser.Tokeniser tokeniser9 = new org.jsoup.parser.Tokeniser(characterReader3, parseErrorList5);
        org.jsoup.parser.Token.Tag tag10 = tokeniser9.tagPending;
        org.jsoup.parser.Token.Tag tag12 = tokeniser9.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype13 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype14 = doctype13.asDoctype();
        java.lang.String str15 = doctype13.tokenType();
        tokeniser9.emit((org.jsoup.parser.Token) doctype13);
        boolean boolean17 = tag1.equals((java.lang.Object) doctype13);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder18 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        org.jsoup.parser.Token.Tag tag28 = tokeniser25.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype29 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype30 = doctype29.asDoctype();
        java.lang.String str31 = doctype29.tokenType();
        tokeniser25.emit((org.jsoup.parser.Token) doctype29);
        org.jsoup.parser.Token.Tag tag34 = tokeniser25.createTagPending(true);
        xmlTreeBuilder18.currentToken = tag34;
        boolean boolean36 = tag1.equals((java.lang.Object) tag34);
        java.lang.String str37 = tag1.getName();
        boolean boolean38 = tag1.isEmpty();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorStream6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNull(tag10);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertNotNull(doctype14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Doctype" + "'", str15, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(doctype30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Doctype" + "'", str31, "Doctype");
        org.junit.Assert.assertNotNull(tag34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList8.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        java.lang.Object[] objArray14 = parseErrorList8.toArray();
        parseErrorList8.clear();
        org.jsoup.parser.ParseError[] parseErrorArray16 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList17 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17, parseErrorArray16);
        org.jsoup.parser.ParseError[] parseErrorArray19 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList20 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20, parseErrorArray19);
        boolean boolean22 = parseErrorList17.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20);
        java.lang.Object[] objArray23 = parseErrorList17.toArray();
        parseErrorList17.clear();
        org.jsoup.parser.ParseError[] parseErrorArray25 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList26 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26, parseErrorArray25);
        boolean boolean28 = parseErrorList17.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        boolean boolean29 = parseErrorList8.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        java.lang.Object[] objArray30 = parseErrorList26.toArray();
        boolean boolean31 = parseErrorList4.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        org.jsoup.parser.ParseError[] parseErrorArray32 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList33 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33, parseErrorArray32);
        org.jsoup.parser.ParseError[] parseErrorArray35 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList36 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36, parseErrorArray35);
        boolean boolean38 = parseErrorList33.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor39 = parseErrorList36.listIterator();
        int int41 = parseErrorList36.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag45 = new org.jsoup.parser.Token.EndTag();
        char[] charArray48 = new char[] { '#', '#' };
        endTag45.appendAttributeValue(charArray48);
        endTag45.finaliseTag();
        boolean boolean51 = endTag45.isSelfClosing();
        org.jsoup.parser.Tag tag53 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean54 = tag53.isFormListed();
        org.jsoup.parser.Tag tag55 = tag53.setSelfClosing();
        boolean boolean56 = tag53.isKnownTag();
        java.lang.Object[] objArray58 = new java.lang.Object[] { boolean51, tag53, "Doctype" };
        org.jsoup.parser.ParseError parseError59 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray58);
        parseErrorList36.add(0, parseError59);
        boolean boolean61 = parseErrorList4.add(parseError59);
        int int62 = parseErrorList4.getMaxSize();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError64 = parseErrorList4.get((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(parseErrorArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(parseErrorArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parseErrorItor39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(tag53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(tag55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        boolean boolean5 = tokenQueue1.matchChomp("<!---->");
        java.lang.String str6 = tokenQueue1.consumeCssIdentifier();
        java.lang.String str8 = tokenQueue1.chompToIgnoreCase("Doctype");
        java.lang.String str9 = tokenQueue1.consumeAttributeKey();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "EndTag" + "'", str6, "EndTag");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag8 = tokeniser6.tagPending;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(tag8);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        java.lang.String str4 = tag1.getName();
        boolean boolean5 = tag1.preserveWhitespace();
        boolean boolean6 = tag1.isFormSubmittable();
        boolean boolean7 = tag1.isInline();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.Tokeniser tokeniser9 = xmlTreeBuilder0.tokeniser;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList10 = xmlTreeBuilder0.stack;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState11 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype12 = new org.jsoup.parser.Token.Doctype();
        boolean boolean13 = doctype12.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder14 = null;
        boolean boolean15 = htmlTreeBuilderState11.process((org.jsoup.parser.Token) doctype12, htmlTreeBuilder14);
        java.lang.String str16 = doctype12.getName();
        java.lang.String str17 = doctype12.getSystemIdentifier();
        java.lang.StringBuilder stringBuilder18 = doctype12.publicIdentifier;
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(doctype12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(tokeniser9);
        org.junit.Assert.assertNull(elementList10);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(stringBuilder18);
        org.junit.Assert.assertEquals(stringBuilder18.toString(), "");
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        java.lang.Object obj8 = parseErrorList4.clone();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList4.iterator();
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        boolean boolean11 = doctype10.isCharacter();
        boolean boolean12 = doctype10.isEndTag();
        boolean boolean13 = doctype10.isCharacter();
        java.lang.StringBuilder stringBuilder14 = doctype10.publicIdentifier;
        doctype10.forceQuirks = true;
        boolean boolean17 = parseErrorList4.equals((java.lang.Object) true);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "[]");
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(stringBuilder14);
        org.junit.Assert.assertEquals(stringBuilder14.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder17 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        org.jsoup.nodes.Document document23 = htmlTreeBuilder17.parse("0: Doctype", "hi!", parseErrorList21);
        org.jsoup.parser.ParseErrorList parseErrorList27 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream28 = parseErrorList27.stream();
        boolean boolean29 = parseErrorList27.canAddError();
        org.jsoup.nodes.Document document30 = htmlTreeBuilder17.parse("EndTag", "hi!#", parseErrorList27);
        java.lang.String[] strArray38 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean39 = htmlTreeBuilder17.inScope("hi!#", strArray38);
        boolean boolean40 = htmlTreeBuilder0.inScope("hi!#", strArray38);
        org.jsoup.nodes.FormElement formElement41 = htmlTreeBuilder0.getFormElement();
        org.jsoup.parser.CharacterReader characterReader42 = null;
        htmlTreeBuilder0.reader = characterReader42;
        htmlTreeBuilder0.framesetOk(false);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(parseErrorList27);
        org.junit.Assert.assertNotNull(parseErrorStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(formElement41);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        boolean boolean9 = htmlTreeBuilder0.framesetOk();
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        htmlTreeBuilder0.popStackToClose("");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = htmlTreeBuilder0.inScope("[]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Should not be reachable");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList8.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        java.lang.Object[] objArray14 = parseErrorList8.toArray();
        parseErrorList8.clear();
        org.jsoup.parser.ParseError[] parseErrorArray16 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList17 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17, parseErrorArray16);
        org.jsoup.parser.ParseError[] parseErrorArray19 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList20 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20, parseErrorArray19);
        boolean boolean22 = parseErrorList17.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20);
        java.lang.Object[] objArray23 = parseErrorList17.toArray();
        parseErrorList17.clear();
        org.jsoup.parser.ParseError[] parseErrorArray25 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList26 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26, parseErrorArray25);
        boolean boolean28 = parseErrorList17.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        boolean boolean29 = parseErrorList8.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        java.lang.Object[] objArray30 = parseErrorList26.toArray();
        boolean boolean31 = parseErrorList4.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        org.jsoup.parser.ParseError[] parseErrorArray32 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList33 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33, parseErrorArray32);
        org.jsoup.parser.ParseError[] parseErrorArray35 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList36 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36, parseErrorArray35);
        boolean boolean38 = parseErrorList33.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor39 = parseErrorList36.listIterator();
        int int41 = parseErrorList36.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag45 = new org.jsoup.parser.Token.EndTag();
        char[] charArray48 = new char[] { '#', '#' };
        endTag45.appendAttributeValue(charArray48);
        endTag45.finaliseTag();
        boolean boolean51 = endTag45.isSelfClosing();
        org.jsoup.parser.Tag tag53 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean54 = tag53.isFormListed();
        org.jsoup.parser.Tag tag55 = tag53.setSelfClosing();
        boolean boolean56 = tag53.isKnownTag();
        java.lang.Object[] objArray58 = new java.lang.Object[] { boolean51, tag53, "Doctype" };
        org.jsoup.parser.ParseError parseError59 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray58);
        parseErrorList36.add(0, parseError59);
        boolean boolean61 = parseErrorList4.add(parseError59);
        int int62 = parseErrorList4.getMaxSize();
        org.jsoup.parser.ParseError parseError66 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str67 = parseError66.getErrorMessage();
        java.lang.String str68 = parseError66.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError69 = parseErrorList4.set(100, parseError66);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(parseErrorArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(parseErrorArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parseErrorItor39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(tag53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(tag55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "100: " + "'", str68, "100: ");
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("<!---->");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token token10 = tokeniser6.read();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.jsoup.parser.Token.EOF eOF0 = new org.jsoup.parser.Token.EOF();
        java.lang.String str1 = eOF0.tokenType();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "EOF" + "'", str1, "EOF");
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.jsoup.parser.Token.StartTag startTag2 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes3 = startTag2.getAttributes();
        org.jsoup.parser.Token.StartTag startTag4 = new org.jsoup.parser.Token.StartTag("<!---->", attributes3);
        org.jsoup.parser.Token.StartTag startTag5 = new org.jsoup.parser.Token.StartTag("100: ", attributes3);
        org.jsoup.parser.Token.Tag tag7 = startTag5.name("</hi![]>");
        org.junit.Assert.assertNotNull(attributes3);
        org.junit.Assert.assertNotNull(tag7);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder13.setHeadElement((org.jsoup.nodes.Element) document23);
        org.jsoup.nodes.Element element25 = htmlTreeBuilder13.pop();
        htmlTreeBuilder0.push(element25);
        htmlTreeBuilder0.resetInsertionMode();
        boolean boolean28 = htmlTreeBuilder0.isFosterInserts();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype12 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        tokeniser6.emit('\uffff');
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token token16 = tokeniser6.read();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNull(doctype12);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement14 = htmlTreeBuilder0.getFormElement();
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList15 = htmlTreeBuilder0.getStack();
        boolean boolean16 = htmlTreeBuilder0.isFragmentParsing();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(formElement14);
        org.junit.Assert.assertNotNull(elementList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.CharacterReader characterReader16 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean18 = characterReader16.matches("[100: ]");
        htmlTreeBuilder0.reader = characterReader16;
        org.jsoup.parser.Token.Character character21 = new org.jsoup.parser.Token.Character("100: ");
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.insert(character21);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder13.error(htmlTreeBuilderState21);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState23 = null;
        htmlTreeBuilder13.transition(htmlTreeBuilderState23);
        htmlTreeBuilder13.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList27 = htmlTreeBuilder13.getPendingTableCharacters();
        htmlTreeBuilder0.setPendingTableCharacters(characterList27);
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState21);
        org.junit.Assert.assertNotNull(characterList27);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        boolean boolean25 = parseErrorList18.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23);
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList23);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList23.iterator();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("[]", "Doctype", parseErrorList23);
        org.jsoup.parser.CharacterReader characterReader31 = null;
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream34 = parseErrorList33.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList33.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor36 = parseErrorList33.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int39 = parseErrorList38.getMaxSize();
        boolean boolean40 = parseErrorList33.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        org.jsoup.parser.Tokeniser tokeniser41 = new org.jsoup.parser.Tokeniser(characterReader31, parseErrorList38);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        boolean boolean45 = parseErrorList43.canAddError();
        boolean boolean46 = parseErrorList38.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        org.jsoup.nodes.Document document47 = htmlTreeBuilder0.parse("hi!", "<!---->", parseErrorList43);
        org.jsoup.parser.Tokeniser tokeniser48 = htmlTreeBuilder0.tokeniser;
        org.jsoup.parser.Parser parser49 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser51 = parser49.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document54 = parser49.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document57 = parser49.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document57);
        htmlTreeBuilder0.popStackToBefore("<hi!#>");
        org.jsoup.parser.Token.Character character62 = new org.jsoup.parser.Token.Character("-1: []");
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.insert(character62);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertNotNull(parseErrorStream34);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNotNull(parseErrorItor36);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(tokeniser48);
        org.junit.Assert.assertNotNull(parser49);
        org.junit.Assert.assertNotNull(parser51);
        org.junit.Assert.assertNotNull(document54);
        org.junit.Assert.assertNotNull(document57);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        java.lang.String str14 = doctype10.getPublicIdentifier();
        java.lang.StringBuilder stringBuilder15 = doctype10.publicIdentifier;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token token11 = tokeniser6.read();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.preserveWhitespace();
        boolean boolean3 = tag1.isKnownTag();
        boolean boolean4 = tag1.isBlock();
        boolean boolean5 = tag1.isFormSubmittable();
        boolean boolean6 = tag1.isKnownTag();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        htmlTreeBuilder0.newPendingTableCharacters();
        org.jsoup.nodes.Element element5 = htmlTreeBuilder0.getHeadElement();
        java.util.List<org.jsoup.parser.Token.Character> characterList6 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder7 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int12 = parseErrorList11.getMaxSize();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder7.parse("0: Doctype", "hi!", parseErrorList11);
        htmlTreeBuilder7.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray16 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList17 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList17, characterArray16);
        htmlTreeBuilder7.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList17);
        boolean boolean20 = htmlTreeBuilder7.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag22 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement24 = htmlTreeBuilder7.insertForm(startTag22, true);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState25 = org.jsoup.parser.HtmlTreeBuilderState.InCell;
        org.jsoup.parser.Token.StartTag startTag27 = new org.jsoup.parser.Token.StartTag("Doctype");
        org.jsoup.parser.Token.Tag tag29 = startTag27.name("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder30 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int35 = parseErrorList34.getMaxSize();
        org.jsoup.nodes.Document document36 = htmlTreeBuilder30.parse("0: Doctype", "hi!", parseErrorList34);
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream41 = parseErrorList40.stream();
        boolean boolean42 = parseErrorList40.canAddError();
        org.jsoup.nodes.Document document43 = htmlTreeBuilder30.parse("EndTag", "hi!#", parseErrorList40);
        java.lang.String[] strArray51 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean52 = htmlTreeBuilder30.inScope("hi!#", strArray51);
        htmlTreeBuilder30.clearStackToTableContext();
        boolean boolean54 = htmlTreeBuilderState25.process((org.jsoup.parser.Token) startTag27, htmlTreeBuilder30);
        org.jsoup.parser.Parser parser57 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser59 = parser57.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder60 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document61 = xmlTreeBuilder60.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder62 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList67 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList69 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream70 = parseErrorList69.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor71 = parseErrorList69.iterator();
        boolean boolean72 = parseErrorList67.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList69);
        xmlTreeBuilder62.initialiseParse("<!---->", "hi!", parseErrorList67);
        xmlTreeBuilder60.errors = parseErrorList67;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList75 = xmlTreeBuilder60.stack;
        org.jsoup.parser.Parser parser76 = parser59.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder60);
        org.jsoup.parser.ParseErrorList parseErrorList78 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder60.errors = parseErrorList78;
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor80 = parseErrorList78.iterator();
        org.jsoup.nodes.Document document81 = htmlTreeBuilder30.parse("<hi!#>", "-1: []", parseErrorList78);
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.replaceActiveFormattingElement((org.jsoup.nodes.Element) formElement24, (org.jsoup.nodes.Element) document81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(element5);
        org.junit.Assert.assertNotNull(characterList6);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(characterArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(formElement24);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState25);
        org.junit.Assert.assertNotNull(tag29);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertNotNull(parseErrorStream41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(parser57);
        org.junit.Assert.assertNotNull(parser59);
        org.junit.Assert.assertNull(document61);
        org.junit.Assert.assertNotNull(parseErrorList69);
        org.junit.Assert.assertNotNull(parseErrorStream70);
        org.junit.Assert.assertNotNull(parseErrorItor71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(elementList75);
        org.junit.Assert.assertNotNull(parser76);
        org.junit.Assert.assertNotNull(parseErrorList78);
        org.junit.Assert.assertNotNull(parseErrorItor80);
        org.junit.Assert.assertNotNull(document81);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.nodes.Element element38 = htmlTreeBuilder0.insert("<!---->");
        htmlTreeBuilder0.newPendingTableCharacters();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(element38);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList4.stream();
        boolean boolean12 = parseErrorList4.isEmpty();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str1 = doctype0.getSystemIdentifier();
        boolean boolean2 = doctype0.forceQuirks;
        java.lang.String str3 = doctype0.getPublicIdentifier();
        java.lang.StringBuilder stringBuilder4 = doctype0.publicIdentifier;
        java.lang.String str5 = doctype0.getPublicIdentifier();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(stringBuilder4);
        org.junit.Assert.assertEquals(stringBuilder4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        java.lang.String str16 = startTag11.tagName;
        java.lang.String str17 = startTag11.tagName;
        boolean boolean18 = startTag11.isCharacter();
        boolean boolean19 = startTag11.isEOF();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!#" + "'", str16, "hi!#");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!#" + "'", str17, "hi!#");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.Comment comment12 = new org.jsoup.parser.Token.Comment();
        java.lang.String str13 = comment12.toString();
        boolean boolean14 = comment12.isCharacter();
        htmlTreeBuilder0.insert(comment12);
        comment12.bogus = false;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<!---->" + "'", str13, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        htmlTreeBuilder3.clearStackToTableContext();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder12.setHeadElement((org.jsoup.nodes.Element) document22);
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder12.setHeadElement((org.jsoup.nodes.Element) document26);
        htmlTreeBuilder12.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder30 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int35 = parseErrorList34.getMaxSize();
        org.jsoup.nodes.Document document36 = htmlTreeBuilder30.parse("0: Doctype", "hi!", parseErrorList34);
        boolean boolean37 = htmlTreeBuilder30.framesetOk();
        org.jsoup.nodes.Document document40 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder30.setHeadElement((org.jsoup.nodes.Element) document40);
        org.jsoup.nodes.Document document44 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder30.setHeadElement((org.jsoup.nodes.Element) document44);
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document44);
        htmlTreeBuilder3.push((org.jsoup.nodes.Element) document44);
        org.jsoup.parser.Token.Comment comment48 = new org.jsoup.parser.Token.Comment();
        java.lang.String str49 = comment48.toString();
        java.lang.StringBuilder stringBuilder50 = comment48.data;
        boolean boolean51 = comment48.isEndTag();
        boolean boolean52 = comment48.isEOF();
        htmlTreeBuilder3.insert(comment48);
        java.lang.StringBuilder stringBuilder54 = comment48.data;
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "<!---->" + "'", str49, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder50);
        org.junit.Assert.assertEquals(stringBuilder50.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(stringBuilder54);
        org.junit.Assert.assertEquals(stringBuilder54.toString(), "");
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\000');
        java.lang.String str4 = characterReader1.consumeHexSequence();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = characterReader1.containsIgnoreCase("");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.Rawtext;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder1 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document2 = xmlTreeBuilder1.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList8 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor12 = parseErrorList10.iterator();
        boolean boolean13 = parseErrorList8.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        xmlTreeBuilder3.initialiseParse("<!---->", "hi!", parseErrorList8);
        xmlTreeBuilder1.errors = parseErrorList8;
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream20 = parseErrorList19.stream();
        xmlTreeBuilder1.initialiseParse("a", "[]", parseErrorList19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        tokeniser28.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype32 = tokeniser28.doctypePending;
        tokeniser28.createCommentPending();
        org.jsoup.parser.Token.Comment comment34 = tokeniser28.commentPending;
        boolean boolean35 = parseErrorList19.remove((java.lang.Object) tokeniser28);
        org.jsoup.parser.CharacterReader characterReader37 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean39 = characterReader37.matches('\uffff');
        boolean boolean41 = characterReader37.containsIgnoreCase("0: []");
        tokeniserState0.read(tokeniser28, characterReader37);
        characterReader37.rewindToMark();
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNull(document2);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertNotNull(parseErrorItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertNotNull(parseErrorStream20);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNull(doctype32);
        org.junit.Assert.assertNotNull(comment34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        boolean boolean25 = parseErrorList18.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23);
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList23);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList23.iterator();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("[]", "Doctype", parseErrorList23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.parser.ParseError> parseErrorList31 = parseErrorList23.subList((int) 'E', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNotNull(document28);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder1 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int6 = parseErrorList5.getMaxSize();
        org.jsoup.nodes.Document document7 = htmlTreeBuilder1.parse("0: Doctype", "hi!", parseErrorList5);
        boolean boolean8 = htmlTreeBuilder1.framesetOk();
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder1.setHeadElement((org.jsoup.nodes.Element) document11);
        org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder1.setHeadElement((org.jsoup.nodes.Element) document15);
        htmlTreeBuilder1.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder19 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        org.jsoup.nodes.Document document25 = htmlTreeBuilder19.parse("0: Doctype", "hi!", parseErrorList23);
        boolean boolean26 = htmlTreeBuilder19.framesetOk();
        org.jsoup.nodes.Document document29 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder19.setHeadElement((org.jsoup.nodes.Element) document29);
        org.jsoup.nodes.Document document33 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder19.setHeadElement((org.jsoup.nodes.Element) document33);
        htmlTreeBuilder1.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document33);
        org.jsoup.parser.CharacterReader characterReader36 = htmlTreeBuilder1.reader;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder37 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int42 = parseErrorList41.getMaxSize();
        org.jsoup.nodes.Document document43 = htmlTreeBuilder37.parse("0: Doctype", "hi!", parseErrorList41);
        boolean boolean44 = htmlTreeBuilder37.framesetOk();
        org.jsoup.parser.Token token45 = htmlTreeBuilder37.currentToken;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState46 = org.jsoup.parser.HtmlTreeBuilderState.InTable;
        htmlTreeBuilder37.error(htmlTreeBuilderState46);
        org.jsoup.nodes.Document document51 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        java.util.List<org.jsoup.nodes.Node> nodeList53 = org.jsoup.parser.Parser.parseFragment("EndTag", (org.jsoup.nodes.Element) document51, "<hi!>");
        boolean boolean54 = htmlTreeBuilder37.isInActiveFormattingElements((org.jsoup.nodes.Element) document51);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder55 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList59 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int60 = parseErrorList59.getMaxSize();
        org.jsoup.nodes.Document document61 = htmlTreeBuilder55.parse("0: Doctype", "hi!", parseErrorList59);
        boolean boolean62 = htmlTreeBuilder55.framesetOk();
        org.jsoup.parser.Parser parser63 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser65 = parser63.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document68 = parser63.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document71 = parser63.parseInput("<hi!>", "[]");
        htmlTreeBuilder55.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document71);
        org.jsoup.parser.Token.Doctype doctype73 = new org.jsoup.parser.Token.Doctype();
        boolean boolean74 = doctype73.isCharacter();
        boolean boolean75 = doctype73.isEndTag();
        htmlTreeBuilder55.currentToken = doctype73;
        org.jsoup.nodes.Element element77 = htmlTreeBuilder55.pop();
        htmlTreeBuilder37.maybeSetBaseUri(element77);
        boolean boolean79 = htmlTreeBuilder1.isInActiveFormattingElements(element77);
        htmlTreeBuilder0.pushActiveFormattingElements(element77);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList81 = htmlTreeBuilder0.stack;
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(characterReader36);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(token45);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState46);
        org.junit.Assert.assertNotNull(document51);
        org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(parseErrorList59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(document61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(parser63);
        org.junit.Assert.assertNotNull(parser65);
        org.junit.Assert.assertNotNull(document68);
        org.junit.Assert.assertNotNull(document71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(element77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(elementList81);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray16 = tokeniser6.consumeCharacterReference((java.lang.Character) '\uffff', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\uffff');
        java.lang.String str5 = characterReader1.consumeTo("<Doctype>");
        java.lang.String str6 = characterReader1.consumeToEnd();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        java.lang.String str2 = characterReader1.consumeToEnd();
        int int4 = characterReader1.nextIndexOf('a');
        java.lang.String str5 = characterReader1.consumeDigitSequence();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = characterReader1.nextIndexOf((java.lang.CharSequence) "");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "StartTag" + "'", str2, "StartTag");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList18);
        org.jsoup.parser.Token.Tag tag23 = tokeniser22.tagPending;
        tokeniser22.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype26 = tokeniser22.doctypePending;
        tokeniser22.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype28 = tokeniser22.doctypePending;
        htmlTreeBuilder0.tokeniser = tokeniser22;
        boolean boolean30 = tokeniser22.isAppropriateEndTagToken();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNull(tag23);
        org.junit.Assert.assertNull(doctype26);
        org.junit.Assert.assertNull(doctype28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        boolean boolean19 = doctype18.isCharacter();
        tokeniser6.doctypePending = doctype18;
        org.jsoup.parser.Token.Doctype doctype21 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype22 = doctype21.asDoctype();
        java.lang.StringBuilder stringBuilder23 = doctype22.name;
        tokeniser6.dataBuffer = stringBuilder23;
        tokeniser6.emitDoctypePending();
        org.jsoup.parser.TokeniserState tokeniserState26 = org.jsoup.parser.TokeniserState.AttributeValue_doubleQuoted;
        tokeniser6.eofError((org.jsoup.parser.ITokeniserState) tokeniserState26);
        org.jsoup.parser.TokeniserState tokeniserState28 = org.jsoup.parser.TokeniserState.Rawtext;
        tokeniser6.error((org.jsoup.parser.ITokeniserState) tokeniserState28);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doctype22);
        org.junit.Assert.assertNotNull(stringBuilder23);
        org.junit.Assert.assertEquals(stringBuilder23.toString(), "");
        org.junit.Assert.assertNotNull(tokeniserState26);
        org.junit.Assert.assertNotNull(tokeniserState28);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.Parser parser19 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.parser.CharacterReader characterReader20 = null;
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream23 = parseErrorList22.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList22.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList22.iterator();
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader20, parseErrorList22);
        org.jsoup.parser.Token.Tag tag27 = tokeniser26.tagPending;
        tokeniser26.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag31 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType32 = startTag31.type;
        startTag31.appendTagName('#');
        tokeniser26.tagPending = startTag31;
        org.jsoup.parser.Token.StartTag startTag37 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType38 = startTag37.type;
        java.lang.String str39 = startTag37.toString();
        tokeniser26.emit((org.jsoup.parser.Token) startTag37);
        org.jsoup.nodes.FormElement formElement42 = htmlTreeBuilder0.insertForm(startTag37, true);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState43 = htmlTreeBuilder0.state();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertNotNull(parseErrorStream23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNull(tag27);
        org.junit.Assert.assertTrue("'" + tokenType32 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType32.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + tokenType38 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType38.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "<hi!>" + "'", str39, "<hi!>");
        org.junit.Assert.assertNotNull(formElement42);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState43);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor2 = parseErrorList1.listIterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.iterator();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError5 = parseErrorList1.remove(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorItor2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        tokenQueue1.addFirst((java.lang.Character) '\uffff');
        boolean boolean8 = tokenQueue1.matchesWhitespace();
        boolean boolean10 = tokenQueue1.matches("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.jsoup.parser.Token.Comment comment0 = new org.jsoup.parser.Token.Comment();
        java.lang.String str1 = comment0.toString();
        java.lang.String str2 = comment0.getData();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "<!---->" + "'", str1, "<!---->");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        java.lang.String str4 = tag1.getName();
        boolean boolean5 = tag1.preserveWhitespace();
        boolean boolean6 = tag1.formatAsBlock();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        java.lang.String str2 = characterReader1.consumeToEnd();
        int int4 = characterReader1.nextIndexOf('a');
        boolean boolean6 = characterReader1.matchesIgnoreCase("a");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "StartTag" + "'", str2, "StartTag");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        int int9 = parseErrorList4.lastIndexOf((java.lang.Object) 1.0d);
        int int10 = parseErrorList4.size();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError12 = parseErrorList4.get((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader1.advance();
        boolean boolean4 = characterReader1.matchConsume("<hi!>");
        java.lang.String str5 = characterReader1.consumeToEnd();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tartTag" + "'", str5, "tartTag");
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.Rawtext;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        tokeniser7.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype11 = tokeniser7.doctypePending;
        tokeniser7.createCommentPending();
        org.jsoup.parser.Token.Comment comment13 = tokeniser7.commentPending;
        org.jsoup.parser.TokenQueue tokenQueue15 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean16 = tokenQueue15.isEmpty();
        char[] charArray18 = new char[] { '4' };
        boolean boolean19 = tokenQueue15.matchesAny(charArray18);
        tokeniser7.emit(charArray18);
        tokeniser7.createCommentPending();
        org.jsoup.parser.CharacterReader characterReader22 = null;
        // The following exception was thrown during execution in test generation
        try {
            tokeniserState0.read(tokeniser7, characterReader22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNull(doctype11);
        org.junit.Assert.assertNotNull(comment13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.preserveWhitespace();
        boolean boolean3 = tag1.isKnownTag();
        boolean boolean4 = tag1.isBlock();
        boolean boolean5 = tag1.isFormSubmittable();
        java.lang.String str6 = tag1.getName();
        boolean boolean7 = tag1.isEmpty();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType2 = startTag1.type;
        startTag1.tagName = "hi!";
        java.lang.String str5 = startTag1.toString();
        org.junit.Assert.assertTrue("'" + tokenType2 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType2.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<hi!>" + "'", str5, "<hi!>");
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder9 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader11 = new org.jsoup.parser.CharacterReader("StartTag");
        int int13 = characterReader11.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean14 = characterReader11.matchesDigit();
        java.lang.String str15 = characterReader11.toString();
        xmlTreeBuilder9.reader = characterReader11;
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray22 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList23 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23, parseErrorArray22);
        org.jsoup.parser.ParseError[] parseErrorArray25 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList26 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26, parseErrorArray25);
        boolean boolean28 = parseErrorList23.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        org.jsoup.parser.ParseError[] parseErrorArray29 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList30 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30, parseErrorArray29);
        boolean boolean32 = parseErrorList26.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        parseErrorList30.clear();
        boolean boolean34 = parseErrorList20.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        xmlTreeBuilder9.initialiseParse("<Doctype>", "a", parseErrorList20);
        org.jsoup.parser.Token.Character character37 = new org.jsoup.parser.Token.Character("100: ");
        xmlTreeBuilder9.insert(character37);
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(character37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "StartTag" + "'", str15, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(parseErrorArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(parseErrorArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        org.jsoup.nodes.FormElement formElement11 = htmlTreeBuilder3.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.parser.Parser parser20 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser22 = parser20.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document25 = parser20.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document28 = parser20.parseInput("<hi!>", "[]");
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document28);
        boolean boolean30 = htmlTreeBuilder12.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder31 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList38.iterator();
        boolean boolean41 = parseErrorList36.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        xmlTreeBuilder31.initialiseParse("<!---->", "hi!", parseErrorList36);
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document47 = xmlTreeBuilder31.parse("", "[]", parseErrorList46);
        boolean boolean48 = htmlTreeBuilder12.isInActiveFormattingElements((org.jsoup.nodes.Element) document47);
        boolean boolean49 = htmlTreeBuilder3.isInActiveFormattingElements((org.jsoup.nodes.Element) document47);
        java.util.List<org.jsoup.parser.Token.Character> characterList50 = htmlTreeBuilder3.getPendingTableCharacters();
        org.jsoup.parser.Tokeniser tokeniser51 = htmlTreeBuilder3.tokeniser;
        org.jsoup.parser.Token.Tag tag52 = tokeniser51.tagPending;
        char[] charArray55 = tokeniser51.consumeCharacterReference((java.lang.Character) 't', false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(formElement11);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parser20);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(characterList50);
        org.junit.Assert.assertNotNull(tokeniser51);
        org.junit.Assert.assertNull(tag52);
        org.junit.Assert.assertNull(charArray55);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader1.advance();
        characterReader1.advance();
        java.lang.String str5 = characterReader1.consumeTo('E');
        boolean boolean7 = characterReader1.containsIgnoreCase("0: Doctype");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "artTag" + "'", str5, "artTag");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.jsoup.parser.Token.Comment comment0 = new org.jsoup.parser.Token.Comment();
        java.lang.String str1 = comment0.toString();
        java.lang.StringBuilder stringBuilder2 = comment0.data;
        java.lang.String str3 = comment0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "<!---->" + "'", str1, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder2);
        org.junit.Assert.assertEquals(stringBuilder2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<!---->" + "'", str3, "<!---->");
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking((int) (byte) 0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.parallelStream();
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.nodes.Document document16 = htmlTreeBuilder0.doc;
        boolean boolean18 = htmlTreeBuilder0.inTableScope("<!---->");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState19 = htmlTreeBuilder0.originalState();
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.runParser();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(htmlTreeBuilderState19);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        org.jsoup.parser.Token.StartTag startTag19 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes20 = startTag19.getAttributes();
        org.jsoup.parser.Token.StartTag startTag21 = new org.jsoup.parser.Token.StartTag("<!---->", attributes20);
        org.jsoup.nodes.Element element22 = htmlTreeBuilder0.insert(startTag21);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Doctype doctype23 = startTag21.asDoctype();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Doctype");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(attributes20);
        org.junit.Assert.assertNotNull(element22);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        htmlTreeBuilder0.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document32);
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        org.jsoup.parser.CharacterReader characterReader35 = htmlTreeBuilder0.reader;
        java.lang.String str37 = characterReader35.consumeTo('\ufffd');
        boolean boolean39 = characterReader35.matches(' ');
        characterReader35.rewindToMark();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(characterReader35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        parseErrorList8.clear();
        boolean boolean12 = parseErrorList8.isEmpty();
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        boolean boolean16 = parseErrorList14.canAddError();
        org.jsoup.parser.ParseError parseError19 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str20 = parseError19.getErrorMessage();
        boolean boolean21 = parseErrorList14.add(parseError19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        org.jsoup.parser.Token.Tag tag31 = tokeniser28.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype32 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype33 = doctype32.asDoctype();
        java.lang.String str34 = doctype32.tokenType();
        tokeniser28.emit((org.jsoup.parser.Token) doctype32);
        org.jsoup.parser.ITokeniserState iTokeniserState36 = tokeniser28.getState();
        org.jsoup.parser.Token.Comment comment37 = new org.jsoup.parser.Token.Comment();
        java.lang.String str38 = comment37.toString();
        java.lang.StringBuilder stringBuilder39 = comment37.data;
        boolean boolean40 = comment37.isEndTag();
        boolean boolean41 = comment37.isComment();
        tokeniser28.commentPending = comment37;
        int int43 = parseErrorList14.lastIndexOf((java.lang.Object) comment37);
        boolean boolean44 = parseErrorList8.contains((java.lang.Object) comment37);
        java.lang.String str45 = comment37.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Character character46 = comment37.asCharacter();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$Character");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertNotNull(doctype33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Doctype" + "'", str34, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<!---->" + "'", str38, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder39);
        org.junit.Assert.assertEquals(stringBuilder39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        boolean boolean5 = tokenQueue1.matchChomp("<!---->");
        char char6 = tokenQueue1.peek();
        boolean boolean7 = tokenQueue1.isEmpty();
        java.lang.String str8 = tokenQueue1.consumeAttributeKey();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + 'E' + "'", char6 == 'E');
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "EndTag" + "'", str8, "EndTag");
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("<!---->");
        startTag1.appendAttributeValue(' ');
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Character character4 = startTag1.asCharacter();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Character");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype12 = tokeniser6.doctypePending;
        boolean boolean13 = tokeniser6.isAppropriateEndTagToken();
        tokeniser6.emit('\uffff');
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNull(doctype12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList3 = htmlTreeBuilder0.stack;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(elementList3);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        java.lang.StringBuilder stringBuilder1 = doctype0.systemIdentifier;
        java.lang.String str2 = doctype0.tokenType();
        java.lang.StringBuilder stringBuilder3 = doctype0.name;
        org.junit.Assert.assertNotNull(stringBuilder1);
        org.junit.Assert.assertEquals(stringBuilder1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Doctype" + "'", str2, "Doctype");
        org.junit.Assert.assertNotNull(stringBuilder3);
        org.junit.Assert.assertEquals(stringBuilder3.toString(), "");
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        tokeniser6.acknowledgeSelfClosingFlag();
        org.jsoup.parser.TokeniserState tokeniserState17 = org.jsoup.parser.TokeniserState.BeforeDoctypeSystemIdentifier;
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.advanceTransition((org.jsoup.parser.ITokeniserState) tokeniserState17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState17);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        java.lang.String[] strArray21 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean22 = htmlTreeBuilder0.inScope("hi!#", strArray21);
        org.jsoup.parser.ParseErrorList parseErrorList27 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("0: Doctype", "", parseErrorList27);
        org.jsoup.nodes.Element element30 = htmlTreeBuilder0.insert("100: ");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(element30);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        boolean boolean7 = tokeniser6.isAppropriateEndTagToken();
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNull(doctype10);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        parseErrorList4.trimToSize();
        int int9 = parseErrorList4.size();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder10 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader11 = null;
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList13.iterator();
        org.jsoup.parser.Tokeniser tokeniser17 = new org.jsoup.parser.Tokeniser(characterReader11, parseErrorList13);
        org.jsoup.parser.Token.Tag tag18 = tokeniser17.tagPending;
        org.jsoup.parser.Token.Tag tag20 = tokeniser17.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype21 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype22 = doctype21.asDoctype();
        java.lang.String str23 = doctype21.tokenType();
        tokeniser17.emit((org.jsoup.parser.Token) doctype21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser17.createTagPending(true);
        xmlTreeBuilder10.currentToken = tag26;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        boolean boolean35 = htmlTreeBuilder28.framesetOk();
        org.jsoup.nodes.Document document38 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder28.setHeadElement((org.jsoup.nodes.Element) document38);
        xmlTreeBuilder10.doc = document38;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder43 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document44 = xmlTreeBuilder43.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder45 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList50 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList52 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream53 = parseErrorList52.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor54 = parseErrorList52.iterator();
        boolean boolean55 = parseErrorList50.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList52);
        xmlTreeBuilder45.initialiseParse("<!---->", "hi!", parseErrorList50);
        xmlTreeBuilder43.errors = parseErrorList50;
        org.jsoup.parser.ParseErrorList parseErrorList61 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream62 = parseErrorList61.stream();
        xmlTreeBuilder43.initialiseParse("a", "[]", parseErrorList61);
        org.jsoup.parser.CharacterReader characterReader64 = null;
        org.jsoup.parser.ParseErrorList parseErrorList66 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream67 = parseErrorList66.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor68 = parseErrorList66.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor69 = parseErrorList66.iterator();
        org.jsoup.parser.Tokeniser tokeniser70 = new org.jsoup.parser.Tokeniser(characterReader64, parseErrorList66);
        org.jsoup.parser.Token.Tag tag71 = tokeniser70.tagPending;
        tokeniser70.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype74 = tokeniser70.doctypePending;
        tokeniser70.createCommentPending();
        org.jsoup.parser.Token.Comment comment76 = tokeniser70.commentPending;
        boolean boolean77 = parseErrorList61.remove((java.lang.Object) tokeniser70);
        org.jsoup.nodes.Document document78 = xmlTreeBuilder10.parse("<!---->", "[]", parseErrorList61);
        boolean boolean79 = parseErrorList4.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList61);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNull(tag18);
        org.junit.Assert.assertNotNull(tag20);
        org.junit.Assert.assertNotNull(doctype22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Doctype" + "'", str23, "Doctype");
        org.junit.Assert.assertNotNull(tag26);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNull(document44);
        org.junit.Assert.assertNotNull(parseErrorList52);
        org.junit.Assert.assertNotNull(parseErrorStream53);
        org.junit.Assert.assertNotNull(parseErrorItor54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(parseErrorList61);
        org.junit.Assert.assertNotNull(parseErrorStream62);
        org.junit.Assert.assertNotNull(parseErrorList66);
        org.junit.Assert.assertNotNull(parseErrorStream67);
        org.junit.Assert.assertNotNull(parseErrorItor68);
        org.junit.Assert.assertNotNull(parseErrorItor69);
        org.junit.Assert.assertNull(tag71);
        org.junit.Assert.assertNull(doctype74);
        org.junit.Assert.assertNotNull(comment76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(document78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor29 = parseErrorList26.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        boolean boolean33 = parseErrorList26.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        xmlTreeBuilder3.initialiseParse("<!---->", "", parseErrorList26);
        xmlTreeBuilder3.runParser();
        org.jsoup.parser.Tag tag37 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean38 = tag37.isFormListed();
        org.jsoup.parser.CharacterReader characterReader39 = null;
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream42 = parseErrorList41.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList41.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor44 = parseErrorList41.iterator();
        org.jsoup.parser.Tokeniser tokeniser45 = new org.jsoup.parser.Tokeniser(characterReader39, parseErrorList41);
        org.jsoup.parser.Token.Tag tag46 = tokeniser45.tagPending;
        org.jsoup.parser.Token.Tag tag48 = tokeniser45.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype49 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype50 = doctype49.asDoctype();
        java.lang.String str51 = doctype49.tokenType();
        tokeniser45.emit((org.jsoup.parser.Token) doctype49);
        boolean boolean53 = tag37.equals((java.lang.Object) doctype49);
        java.lang.String str54 = doctype49.getName();
        doctype49.forceQuirks = true;
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder3.insert(doctype49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertNotNull(parseErrorItor29);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(tag37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertNotNull(parseErrorStream42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNotNull(parseErrorItor44);
        org.junit.Assert.assertNull(tag46);
        org.junit.Assert.assertNotNull(tag48);
        org.junit.Assert.assertNotNull(doctype50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Doctype" + "'", str51, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        htmlTreeBuilder0.newPendingTableCharacters();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        org.jsoup.parser.Tokeniser tokeniser6 = htmlTreeBuilder0.tokeniser;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(tokeniser6);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token token1 = xmlTreeBuilder0.currentToken;
        org.jsoup.parser.CharacterReader characterReader2 = null;
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.iterator();
        org.jsoup.parser.Tokeniser tokeniser8 = new org.jsoup.parser.Tokeniser(characterReader2, parseErrorList4);
        org.jsoup.parser.Token.Tag tag9 = tokeniser8.tagPending;
        org.jsoup.parser.Token.Tag tag11 = tokeniser8.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype12 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype13 = doctype12.asDoctype();
        java.lang.String str14 = doctype12.tokenType();
        tokeniser8.emit((org.jsoup.parser.Token) doctype12);
        org.jsoup.parser.Token.Tag tag17 = tokeniser8.createTagPending(true);
        xmlTreeBuilder0.tokeniser = tokeniser8;
        tokeniser8.emit('a');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray23 = tokeniser8.consumeCharacterReference((java.lang.Character) 'E', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(token1);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNull(tag9);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(doctype13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Doctype" + "'", str14, "Doctype");
        org.junit.Assert.assertNotNull(tag17);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        startTag0.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag4 = startTag0.name("hi!#");
        org.jsoup.nodes.Attributes attributes5 = tag4.getAttributes();
        org.junit.Assert.assertNotNull(tag4);
        org.junit.Assert.assertNotNull(attributes5);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.Tokeniser tokeniser9 = xmlTreeBuilder0.tokeniser;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder10 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int15 = parseErrorList14.getMaxSize();
        org.jsoup.nodes.Document document16 = htmlTreeBuilder10.parse("0: Doctype", "hi!", parseErrorList14);
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream21 = parseErrorList20.stream();
        boolean boolean22 = parseErrorList20.canAddError();
        org.jsoup.nodes.Document document23 = htmlTreeBuilder10.parse("EndTag", "hi!#", parseErrorList20);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState24 = null;
        htmlTreeBuilder10.transition(htmlTreeBuilderState24);
        org.jsoup.parser.CharacterReader characterReader26 = null;
        org.jsoup.parser.ParseErrorList parseErrorList28 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream29 = parseErrorList28.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor30 = parseErrorList28.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor31 = parseErrorList28.iterator();
        org.jsoup.parser.Tokeniser tokeniser32 = new org.jsoup.parser.Tokeniser(characterReader26, parseErrorList28);
        org.jsoup.parser.Token.Tag tag33 = tokeniser32.tagPending;
        tokeniser32.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype36 = tokeniser32.doctypePending;
        tokeniser32.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype38 = tokeniser32.doctypePending;
        htmlTreeBuilder10.tokeniser = tokeniser32;
        org.jsoup.parser.Token.Comment comment40 = tokeniser32.commentPending;
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(comment40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(tokeniser9);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertNotNull(parseErrorStream21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(parseErrorList28);
        org.junit.Assert.assertNotNull(parseErrorStream29);
        org.junit.Assert.assertNotNull(parseErrorItor30);
        org.junit.Assert.assertNotNull(parseErrorItor31);
        org.junit.Assert.assertNull(tag33);
        org.junit.Assert.assertNull(doctype36);
        org.junit.Assert.assertNull(doctype38);
        org.junit.Assert.assertNotNull(comment40);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        boolean boolean9 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList7);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        boolean boolean14 = parseErrorList12.canAddError();
        boolean boolean15 = parseErrorList7.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        org.jsoup.parser.ParseError[] parseErrorArray17 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList18 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList18, parseErrorArray17);
        org.jsoup.parser.ParseError[] parseErrorArray20 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList21 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21, parseErrorArray20);
        boolean boolean23 = parseErrorList18.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        java.lang.Object[] objArray24 = parseErrorList18.toArray();
        parseErrorList18.clear();
        org.jsoup.parser.ParseError[] parseErrorArray26 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList27 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList27, parseErrorArray26);
        boolean boolean29 = parseErrorList18.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList27);
        java.lang.String str30 = parseErrorList18.toString();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream31 = parseErrorList18.stream();
        org.jsoup.parser.Token.EndTag endTag34 = new org.jsoup.parser.Token.EndTag();
        char[] charArray37 = new char[] { '#', '#' };
        endTag34.appendAttributeValue(charArray37);
        endTag34.finaliseTag();
        boolean boolean40 = endTag34.isSelfClosing();
        org.jsoup.parser.Tag tag42 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean43 = tag42.isFormListed();
        org.jsoup.parser.Tag tag44 = tag42.setSelfClosing();
        boolean boolean45 = tag42.isKnownTag();
        java.lang.Object[] objArray47 = new java.lang.Object[] { boolean40, tag42, "Doctype" };
        org.jsoup.parser.ParseError parseError48 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray47);
        int int49 = parseError48.getPosition();
        java.lang.String str50 = parseError48.toString();
        boolean boolean51 = parseErrorList18.add(parseError48);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError52 = parseErrorList7.set((int) 'a', parseError48);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(parseErrorStream31);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(tag42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(tag44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0: []" + "'", str50, "0: []");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        boolean boolean1 = doctype0.isCharacter();
        boolean boolean2 = doctype0.isEndTag();
        boolean boolean3 = doctype0.isCharacter();
        java.lang.StringBuilder stringBuilder4 = doctype0.publicIdentifier;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Character character5 = doctype0.asCharacter();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$Character");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(stringBuilder4);
        org.junit.Assert.assertEquals(stringBuilder4.toString(), "");
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.Token.StartTag startTag17 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType18 = startTag17.type;
        java.lang.String str19 = startTag17.toString();
        tokeniser6.emit((org.jsoup.parser.Token) startTag17);
        java.lang.String str21 = startTag17.name();
        java.lang.String str22 = startTag17.tokenType();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + tokenType18 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType18.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<hi!>" + "'", str19, "<hi!>");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "StartTag" + "'", str22, "StartTag");
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean4 = characterReader1.matchesDigit();
        java.lang.String str5 = characterReader1.toString();
        boolean boolean6 = characterReader1.matchesDigit();
        char char7 = characterReader1.consume();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + 'S' + "'", char7 == 'S');
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor2 = parseErrorList1.listIterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList1.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError5 = parseErrorList1.remove((int) '\ufffd');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 65533, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorItor2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int2 = parseErrorList1.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        org.jsoup.parser.ParseError[] parseErrorArray6 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList7 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7, parseErrorArray6);
        boolean boolean9 = parseErrorList4.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList7.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        parseErrorList11.clear();
        boolean boolean15 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList1.iterator();
        parseErrorList1.trimToSize();
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(parseErrorArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorItor16);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        org.jsoup.parser.ITokeniserState iTokeniserState14 = tokeniser6.getState();
        org.jsoup.parser.Token.Comment comment15 = new org.jsoup.parser.Token.Comment();
        java.lang.String str16 = comment15.toString();
        java.lang.StringBuilder stringBuilder17 = comment15.data;
        boolean boolean18 = comment15.isEndTag();
        boolean boolean19 = comment15.isComment();
        tokeniser6.commentPending = comment15;
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray23 = tokeniser6.consumeCharacterReference((java.lang.Character) '#', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<!---->" + "'", str16, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder17);
        org.junit.Assert.assertEquals(stringBuilder17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Element element13 = htmlTreeBuilder0.getActiveFormattingElement("0: Doctype");
        htmlTreeBuilder0.runParser();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder17 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader18 = null;
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream21 = parseErrorList20.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor22 = parseErrorList20.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList20.iterator();
        org.jsoup.parser.Tokeniser tokeniser24 = new org.jsoup.parser.Tokeniser(characterReader18, parseErrorList20);
        org.jsoup.parser.Token.Tag tag25 = tokeniser24.tagPending;
        org.jsoup.parser.Token.Tag tag27 = tokeniser24.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype28 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype29 = doctype28.asDoctype();
        java.lang.String str30 = doctype28.tokenType();
        tokeniser24.emit((org.jsoup.parser.Token) doctype28);
        org.jsoup.parser.Token.Tag tag33 = tokeniser24.createTagPending(true);
        xmlTreeBuilder17.currentToken = tag33;
        org.jsoup.nodes.Attributes attributes35 = tag33.attributes;
        org.jsoup.parser.Token.StartTag startTag36 = new org.jsoup.parser.Token.StartTag("", attributes35);
        org.jsoup.parser.Token.StartTag startTag37 = new org.jsoup.parser.Token.StartTag("0: Doctype", attributes35);
        startTag37.appendAttributeName('\uffff');
        org.jsoup.nodes.FormElement formElement41 = htmlTreeBuilder0.insertForm(startTag37, true);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder42 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int47 = parseErrorList46.getMaxSize();
        org.jsoup.nodes.Document document48 = htmlTreeBuilder42.parse("0: Doctype", "hi!", parseErrorList46);
        boolean boolean49 = htmlTreeBuilder42.framesetOk();
        org.jsoup.parser.Parser parser50 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser52 = parser50.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document55 = parser50.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document58 = parser50.parseInput("<hi!>", "[]");
        htmlTreeBuilder42.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document58);
        java.lang.String[] strArray60 = new java.lang.String[] {};
        boolean boolean61 = htmlTreeBuilder42.inScope(strArray60);
        boolean boolean62 = htmlTreeBuilder0.inScope(strArray60);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(element13);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertNotNull(parseErrorStream21);
        org.junit.Assert.assertNotNull(parseErrorItor22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNull(tag25);
        org.junit.Assert.assertNotNull(tag27);
        org.junit.Assert.assertNotNull(doctype29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Doctype" + "'", str30, "Doctype");
        org.junit.Assert.assertNotNull(tag33);
        org.junit.Assert.assertNotNull(attributes35);
        org.junit.Assert.assertNotNull(formElement41);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(parser50);
        org.junit.Assert.assertNotNull(parser52);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNotNull(document58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        htmlTreeBuilder0.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document32);
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        org.jsoup.parser.CharacterReader characterReader35 = htmlTreeBuilder0.reader;
        org.jsoup.parser.TokenQueue tokenQueue37 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean38 = tokenQueue37.isEmpty();
        boolean boolean39 = tokenQueue37.consumeWhitespace();
        java.lang.String str40 = tokenQueue37.consumeWord();
        char char41 = tokenQueue37.peek();
        org.jsoup.parser.CharacterReader characterReader42 = null;
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList44.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList44.iterator();
        org.jsoup.parser.Tokeniser tokeniser48 = new org.jsoup.parser.Tokeniser(characterReader42, parseErrorList44);
        org.jsoup.parser.Token.Tag tag49 = tokeniser48.tagPending;
        org.jsoup.parser.Token.Tag tag51 = tokeniser48.createTagPending(true);
        java.lang.StringBuilder stringBuilder52 = tokeniser48.dataBuffer;
        org.jsoup.parser.Token.EndTag endTag53 = new org.jsoup.parser.Token.EndTag();
        char[] charArray56 = new char[] { '#', '#' };
        endTag53.appendAttributeValue(charArray56);
        tokeniser48.emit(charArray56);
        boolean boolean59 = tokenQueue37.matchesAny(charArray56);
        java.lang.String str60 = characterReader35.consumeToAny(charArray56);
        java.lang.String str61 = characterReader35.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = characterReader35.consumeAsString();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 11");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(characterReader35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "EndTag" + "'", str40, "EndTag");
        org.junit.Assert.assertTrue("'" + char41 + "' != '" + '\000' + "'", char41 == '\000');
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNull(tag49);
        org.junit.Assert.assertNotNull(tag51);
        org.junit.Assert.assertNull(stringBuilder52);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        boolean boolean7 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        parseErrorList12.ensureCapacity((int) (short) 1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder18 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document19 = xmlTreeBuilder18.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder20 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList25 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList27 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream28 = parseErrorList27.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor29 = parseErrorList27.iterator();
        boolean boolean30 = parseErrorList25.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList27);
        xmlTreeBuilder20.initialiseParse("<!---->", "hi!", parseErrorList25);
        xmlTreeBuilder18.errors = parseErrorList25;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList33 = xmlTreeBuilder18.stack;
        boolean boolean34 = parseErrorList12.equals((java.lang.Object) elementList33);
        org.jsoup.parser.ParseError[] parseErrorArray35 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList36 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36, parseErrorArray35);
        org.jsoup.parser.ParseError[] parseErrorArray38 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList39 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList39, parseErrorArray38);
        boolean boolean41 = parseErrorList36.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList39);
        java.lang.Object[] objArray42 = parseErrorList36.toArray();
        parseErrorList36.clear();
        org.jsoup.parser.ParseError[] parseErrorArray44 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList45 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList45, parseErrorArray44);
        boolean boolean47 = parseErrorList36.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList45);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream48 = parseErrorList45.parallelStream();
        java.lang.Object[] objArray49 = parseErrorList45.toArray();
        org.jsoup.parser.ParseError parseError52 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        boolean boolean53 = parseErrorList45.add(parseError52);
        boolean boolean54 = parseErrorList12.add(parseError52);
        boolean boolean55 = parseErrorList2.add(parseError52);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(document19);
        org.junit.Assert.assertNotNull(parseErrorList27);
        org.junit.Assert.assertNotNull(parseErrorStream28);
        org.junit.Assert.assertNotNull(parseErrorItor29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(elementList33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(parseErrorArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(parseErrorArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(parseErrorStream48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.preserveWhitespace();
        boolean boolean3 = tag1.isData();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList1.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int7 = parseErrorList6.getMaxSize();
        boolean boolean8 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList6);
        org.jsoup.parser.TokeniserState tokeniserState9 = org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted;
        int int10 = parseErrorList1.lastIndexOf((java.lang.Object) tokeniserState9);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.listIterator();
        parseErrorList12.clear();
        int int16 = parseErrorList1.indexOf((java.lang.Object) parseErrorList12);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError18 = parseErrorList12.remove((int) 'E');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 69, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(tokeniserState9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str5 = tokenQueue1.consumeToIgnoreCase("StartTag");
        // The following exception was thrown during execution in test generation
        try {
            char char6 = tokenQueue1.consume();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 6");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "EndTag" + "'", str5, "EndTag");
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.Tokeniser tokeniser9 = xmlTreeBuilder0.tokeniser;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder13 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader14 = null;
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList16.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList16.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList16.iterator();
        org.jsoup.parser.Tokeniser tokeniser20 = new org.jsoup.parser.Tokeniser(characterReader14, parseErrorList16);
        org.jsoup.parser.Token.Tag tag21 = tokeniser20.tagPending;
        org.jsoup.parser.Token.Tag tag23 = tokeniser20.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype24 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype25 = doctype24.asDoctype();
        java.lang.String str26 = doctype24.tokenType();
        tokeniser20.emit((org.jsoup.parser.Token) doctype24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser20.createTagPending(true);
        xmlTreeBuilder13.currentToken = tag29;
        org.jsoup.nodes.Attributes attributes31 = tag29.attributes;
        org.jsoup.parser.Token.StartTag startTag32 = new org.jsoup.parser.Token.StartTag("", attributes31);
        org.jsoup.parser.Token.StartTag startTag33 = new org.jsoup.parser.Token.StartTag("0: Doctype", attributes31);
        org.jsoup.parser.Token.StartTag startTag34 = new org.jsoup.parser.Token.StartTag("", attributes31);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element35 = xmlTreeBuilder0.insert(startTag34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be false");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(tokeniser9);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertNull(tag21);
        org.junit.Assert.assertNotNull(tag23);
        org.junit.Assert.assertNotNull(doctype25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Doctype" + "'", str26, "Doctype");
        org.junit.Assert.assertNotNull(tag29);
        org.junit.Assert.assertNotNull(attributes31);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.InCell;
        org.jsoup.parser.Token.StartTag startTag2 = new org.jsoup.parser.Token.StartTag("Doctype");
        org.jsoup.parser.Token.Tag tag4 = startTag2.name("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder5 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int10 = parseErrorList9.getMaxSize();
        org.jsoup.nodes.Document document11 = htmlTreeBuilder5.parse("0: Doctype", "hi!", parseErrorList9);
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream16 = parseErrorList15.stream();
        boolean boolean17 = parseErrorList15.canAddError();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder5.parse("EndTag", "hi!#", parseErrorList15);
        java.lang.String[] strArray26 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean27 = htmlTreeBuilder5.inScope("hi!#", strArray26);
        htmlTreeBuilder5.clearStackToTableContext();
        boolean boolean29 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) startTag2, htmlTreeBuilder5);
        org.jsoup.parser.Parser parser32 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser34 = parser32.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder35 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document36 = xmlTreeBuilder35.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder37 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList42 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList44.iterator();
        boolean boolean47 = parseErrorList42.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        xmlTreeBuilder37.initialiseParse("<!---->", "hi!", parseErrorList42);
        xmlTreeBuilder35.errors = parseErrorList42;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList50 = xmlTreeBuilder35.stack;
        org.jsoup.parser.Parser parser51 = parser34.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder35);
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder35.errors = parseErrorList53;
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList53.iterator();
        org.jsoup.nodes.Document document56 = htmlTreeBuilder5.parse("<hi!#>", "-1: []", parseErrorList53);
        htmlTreeBuilder5.newPendingTableCharacters();
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(tag4);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(parseErrorStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(parser32);
        org.junit.Assert.assertNotNull(parser34);
        org.junit.Assert.assertNull(document36);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(elementList50);
        org.junit.Assert.assertNotNull(parser51);
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertNotNull(document56);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        boolean boolean11 = doctype10.isCharacter();
        boolean boolean12 = doctype10.isEndTag();
        boolean boolean13 = doctype10.isCharacter();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        boolean boolean15 = doctype10.isForceQuirks();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("", "EndTag");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean4 = characterReader1.matchesDigit();
        int int6 = characterReader1.nextIndexOf((java.lang.CharSequence) "<hi!#>");
        boolean boolean7 = characterReader1.matchesDigit();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.parser.TokenQueue tokenQueue38 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean39 = tokenQueue38.isEmpty();
        boolean boolean40 = tokenQueue38.consumeWhitespace();
        java.lang.String str41 = tokenQueue38.consumeWord();
        boolean boolean42 = tokenQueue38.matchesWhitespace();
        java.lang.String[] strArray47 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str48 = tokenQueue38.consumeToAny(strArray47);
        boolean boolean49 = htmlTreeBuilder0.inScope(strArray47);
        org.jsoup.parser.CharacterReader characterReader50 = null;
        org.jsoup.parser.ParseErrorList parseErrorList52 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream53 = parseErrorList52.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor54 = parseErrorList52.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList52.iterator();
        org.jsoup.parser.Tokeniser tokeniser56 = new org.jsoup.parser.Tokeniser(characterReader50, parseErrorList52);
        org.jsoup.parser.Token.Tag tag57 = tokeniser56.tagPending;
        tokeniser56.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag61 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType62 = startTag61.type;
        startTag61.appendTagName('#');
        tokeniser56.tagPending = startTag61;
        org.jsoup.parser.TokeniserState tokeniserState66 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser56.transition((org.jsoup.parser.ITokeniserState) tokeniserState66);
        org.jsoup.parser.Token.Doctype doctype68 = new org.jsoup.parser.Token.Doctype();
        boolean boolean69 = doctype68.isCharacter();
        tokeniser56.doctypePending = doctype68;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState71 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype72 = new org.jsoup.parser.Token.Doctype();
        boolean boolean73 = doctype72.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder74 = null;
        boolean boolean75 = htmlTreeBuilderState71.process((org.jsoup.parser.Token) doctype72, htmlTreeBuilder74);
        java.lang.StringBuilder stringBuilder76 = doctype72.name;
        tokeniser56.dataBuffer = stringBuilder76;
        org.jsoup.parser.Token.EndTag endTag78 = new org.jsoup.parser.Token.EndTag();
        char[] charArray81 = new char[] { '#', '#' };
        endTag78.appendAttributeValue(charArray81);
        endTag78.appendAttributeValue(' ');
        char[] charArray86 = new char[] { '4' };
        endTag78.appendAttributeValue(charArray86);
        tokeniser56.emit(charArray86);
        htmlTreeBuilder0.tokeniser = tokeniser56;
        tokeniser56.createDoctypePending();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "EndTag" + "'", str41, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(parseErrorList52);
        org.junit.Assert.assertNotNull(parseErrorStream53);
        org.junit.Assert.assertNotNull(parseErrorItor54);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertNull(tag57);
        org.junit.Assert.assertTrue("'" + tokenType62 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType62.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(stringBuilder76);
        org.junit.Assert.assertEquals(stringBuilder76.toString(), "");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[#, #]");
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[4]");
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.markInsertionMode();
        boolean boolean22 = htmlTreeBuilder0.inScope("StartTag");
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document26);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        htmlTreeBuilder28.generateImpliedEndTags("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder37 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int42 = parseErrorList41.getMaxSize();
        org.jsoup.nodes.Document document43 = htmlTreeBuilder37.parse("0: Doctype", "hi!", parseErrorList41);
        boolean boolean44 = htmlTreeBuilder37.framesetOk();
        org.jsoup.nodes.Document document47 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder37.setHeadElement((org.jsoup.nodes.Element) document47);
        org.jsoup.nodes.Document document51 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder37.setHeadElement((org.jsoup.nodes.Element) document51);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder54 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList58 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int59 = parseErrorList58.getMaxSize();
        org.jsoup.nodes.Document document60 = htmlTreeBuilder54.parse("0: Doctype", "hi!", parseErrorList58);
        org.jsoup.parser.ParseErrorList parseErrorList64 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream65 = parseErrorList64.stream();
        boolean boolean66 = parseErrorList64.canAddError();
        org.jsoup.nodes.Document document67 = htmlTreeBuilder54.parse("EndTag", "hi!#", parseErrorList64);
        java.lang.String[] strArray75 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean76 = htmlTreeBuilder54.inScope("hi!#", strArray75);
        boolean boolean77 = htmlTreeBuilder37.inScope("hi!#", strArray75);
        htmlTreeBuilder28.popStackToClose(strArray75);
        boolean boolean79 = htmlTreeBuilder0.inScope(strArray75);
        htmlTreeBuilder0.popStackToBefore("\ufffd>");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(document51);
        org.junit.Assert.assertNotNull(parseErrorList58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(document60);
        org.junit.Assert.assertNotNull(parseErrorList64);
        org.junit.Assert.assertNotNull(parseErrorStream65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(document67);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        boolean boolean19 = doctype18.isCharacter();
        boolean boolean20 = doctype18.isEndTag();
        htmlTreeBuilder0.currentToken = doctype18;
        org.jsoup.nodes.Element element22 = htmlTreeBuilder0.pop();
        htmlTreeBuilder0.newPendingTableCharacters();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(element22);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList18);
        org.jsoup.parser.Token.Tag tag23 = tokeniser22.tagPending;
        tokeniser22.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype26 = tokeniser22.doctypePending;
        tokeniser22.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype28 = tokeniser22.doctypePending;
        htmlTreeBuilder0.tokeniser = tokeniser22;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token token30 = tokeniser22.read();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNull(tag23);
        org.junit.Assert.assertNull(doctype26);
        org.junit.Assert.assertNull(doctype28);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        java.lang.StringBuilder stringBuilder1 = doctype0.systemIdentifier;
        java.lang.String str2 = doctype0.tokenType();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Character character3 = doctype0.asCharacter();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$Character");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(stringBuilder1);
        org.junit.Assert.assertEquals(stringBuilder1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Doctype" + "'", str2, "Doctype");
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "StartTaga");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        org.jsoup.parser.Token.Doctype doctype23 = new org.jsoup.parser.Token.Doctype();
        boolean boolean24 = doctype23.isCharacter();
        org.jsoup.parser.Token.TokenType tokenType25 = org.jsoup.parser.Token.TokenType.StartTag;
        doctype23.type = tokenType25;
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder3.insert(doctype23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + tokenType25 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType25.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        boolean boolean8 = tokenQueue1.matchesCS("StartTag");
        java.lang.String str9 = tokenQueue1.consumeTagName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        org.jsoup.parser.TokeniserState tokeniserState11 = org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedDashDash;
        tokeniser6.eofError((org.jsoup.parser.ITokeniserState) tokeniserState11);
        java.lang.StringBuilder stringBuilder13 = tokeniser6.dataBuffer;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNotNull(tokeniserState11);
        org.junit.Assert.assertNull(stringBuilder13);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("<hi!>");
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        boolean boolean7 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder8 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int13 = parseErrorList12.getMaxSize();
        org.jsoup.nodes.Document document14 = htmlTreeBuilder8.parse("0: Doctype", "hi!", parseErrorList12);
        boolean boolean15 = htmlTreeBuilder8.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState16 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder8.error(htmlTreeBuilderState16);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState18 = null;
        htmlTreeBuilder8.transition(htmlTreeBuilderState18);
        htmlTreeBuilder8.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader24 = null;
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor29 = parseErrorList26.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        boolean boolean33 = parseErrorList26.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        org.jsoup.parser.Tokeniser tokeniser34 = new org.jsoup.parser.Tokeniser(characterReader24, parseErrorList31);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList31.iterator();
        org.jsoup.nodes.Document document36 = htmlTreeBuilder8.parse("[]", "Doctype", parseErrorList31);
        org.jsoup.parser.CharacterReader characterReader39 = null;
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream42 = parseErrorList41.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList41.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor44 = parseErrorList41.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int47 = parseErrorList46.getMaxSize();
        boolean boolean48 = parseErrorList41.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList46);
        org.jsoup.parser.Tokeniser tokeniser49 = new org.jsoup.parser.Tokeniser(characterReader39, parseErrorList46);
        org.jsoup.parser.ParseErrorList parseErrorList51 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream52 = parseErrorList51.stream();
        boolean boolean53 = parseErrorList51.canAddError();
        boolean boolean54 = parseErrorList46.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList51);
        org.jsoup.nodes.Document document55 = htmlTreeBuilder8.parse("hi!", "<!---->", parseErrorList51);
        org.jsoup.parser.Tokeniser tokeniser56 = htmlTreeBuilder8.tokeniser;
        int int57 = parseErrorList2.lastIndexOf((java.lang.Object) htmlTreeBuilder8);
        htmlTreeBuilder8.popStackToBefore("ndTag");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState16);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertNotNull(parseErrorItor29);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertNotNull(parseErrorStream42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNotNull(parseErrorItor44);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(parseErrorList51);
        org.junit.Assert.assertNotNull(parseErrorStream52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNotNull(tokeniser56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.CharacterReader characterReader3 = null;
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream6 = parseErrorList5.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList5.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList5.iterator();
        org.jsoup.parser.Tokeniser tokeniser9 = new org.jsoup.parser.Tokeniser(characterReader3, parseErrorList5);
        org.jsoup.parser.Token.Tag tag10 = tokeniser9.tagPending;
        org.jsoup.parser.Token.Tag tag12 = tokeniser9.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype13 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype14 = doctype13.asDoctype();
        java.lang.String str15 = doctype13.tokenType();
        tokeniser9.emit((org.jsoup.parser.Token) doctype13);
        boolean boolean17 = tag1.equals((java.lang.Object) doctype13);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.EndTag endTag18 = doctype13.asEndTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$EndTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorStream6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNull(tag10);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertNotNull(doctype14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Doctype" + "'", str15, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder13.setHeadElement((org.jsoup.nodes.Element) document23);
        org.jsoup.nodes.Element element25 = htmlTreeBuilder13.pop();
        htmlTreeBuilder0.push(element25);
        htmlTreeBuilder0.resetInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        boolean boolean35 = htmlTreeBuilder28.framesetOk();
        org.jsoup.parser.Parser parser36 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser38 = parser36.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document41 = parser36.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document44 = parser36.parseInput("<hi!>", "[]");
        htmlTreeBuilder28.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document44);
        org.jsoup.parser.Token.StartTag startTag47 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes48 = startTag47.getAttributes();
        org.jsoup.parser.Token.StartTag startTag49 = new org.jsoup.parser.Token.StartTag("<!---->", attributes48);
        org.jsoup.nodes.Element element50 = htmlTreeBuilder28.insert(startTag49);
        boolean boolean51 = htmlTreeBuilder0.isInActiveFormattingElements(element50);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(parser36);
        org.junit.Assert.assertNotNull(parser38);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertNotNull(attributes48);
        org.junit.Assert.assertNotNull(element50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        org.jsoup.parser.Token.StartTag startTag23 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes24 = startTag23.getAttributes();
        xmlTreeBuilder3.currentToken = startTag23;
        boolean boolean26 = startTag23.isEndTag();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(attributes24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        boolean boolean13 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.ParseErrorList parseErrorList18 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        htmlTreeBuilder0.initialiseParse("</hi![]>", "0: []", parseErrorList18);
        htmlTreeBuilder0.resetInsertionMode();
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.generateImpliedEndTags("tartTag");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.nodes.Element element38 = htmlTreeBuilder0.insert("<!---->");
        org.jsoup.parser.Token.StartTag startTag40 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag40.appendTagName("hi!");
        startTag40.appendAttributeName('4');
        boolean boolean45 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag40);
        htmlTreeBuilder0.setFosterInserts(true);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(element38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        boolean boolean2 = startTag1.isCharacter();
        startTag1.selfClosing = false;
        org.jsoup.parser.Token.StartTag startTag5 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes6 = startTag5.getAttributes();
        startTag1.attributes = attributes6;
        java.lang.String str8 = startTag1.tokenType();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Comment comment9 = startTag1.asComment();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Comment");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(attributes6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "StartTag" + "'", str8, "StartTag");
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.matchesStartTag();
        char[] charArray9 = new char[] { ' ', '4', '\000', ' ', '\uffff', 'a' };
        boolean boolean10 = tokenQueue1.matchesAny(charArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = tokenQueue1.consumeToIgnoreCase("");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray9);
// flaky:         org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " 4\000\uffffa");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " 4\000\uffffa");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , 4, \000\uffff, a]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList9 = xmlTreeBuilder0.stack;
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        boolean boolean21 = parseErrorList14.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList19);
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        boolean boolean26 = parseErrorList24.canAddError();
        boolean boolean27 = parseErrorList19.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
        java.util.List<org.jsoup.nodes.Node> nodeList28 = xmlTreeBuilder0.parseFragment("StartTag", "<!---->", parseErrorList24);
        org.jsoup.parser.Token.Doctype doctype29 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str30 = doctype29.getSystemIdentifier();
        boolean boolean31 = doctype29.forceQuirks;
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(doctype29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(elementList9);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList(100, 0);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        boolean boolean13 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.ParseErrorList parseErrorList18 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        htmlTreeBuilder0.initialiseParse("</hi![]>", "0: []", parseErrorList18);
        htmlTreeBuilder0.resetInsertionMode();
        org.jsoup.parser.Token.Character character22 = new org.jsoup.parser.Token.Character("100: ");
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.insert(character22);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        java.lang.String[] strArray10 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str11 = tokenQueue1.consumeToAny(strArray10);
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.Tokeniser tokeniser18 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList14);
        org.jsoup.parser.Token.Tag tag19 = tokeniser18.tagPending;
        java.lang.StringBuilder stringBuilder20 = null;
        tokeniser18.dataBuffer = stringBuilder20;
        org.jsoup.parser.Token.EndTag endTag22 = new org.jsoup.parser.Token.EndTag();
        char[] charArray25 = new char[] { '#', '#' };
        endTag22.appendAttributeValue(charArray25);
        tokeniser18.emit(charArray25);
        boolean boolean28 = tokenQueue1.matchesAny(charArray25);
        java.lang.String str29 = tokenQueue1.consumeCssIdentifier();
        java.lang.String str30 = tokenQueue1.consumeCssIdentifier();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNull(tag19);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.InCell;
        org.jsoup.parser.Token.StartTag startTag2 = new org.jsoup.parser.Token.StartTag("Doctype");
        org.jsoup.parser.Token.Tag tag4 = startTag2.name("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder5 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int10 = parseErrorList9.getMaxSize();
        org.jsoup.nodes.Document document11 = htmlTreeBuilder5.parse("0: Doctype", "hi!", parseErrorList9);
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream16 = parseErrorList15.stream();
        boolean boolean17 = parseErrorList15.canAddError();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder5.parse("EndTag", "hi!#", parseErrorList15);
        java.lang.String[] strArray26 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean27 = htmlTreeBuilder5.inScope("hi!#", strArray26);
        htmlTreeBuilder5.clearStackToTableContext();
        boolean boolean29 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) startTag2, htmlTreeBuilder5);
        java.lang.String str30 = startTag2.tagName;
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(tag4);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(parseErrorStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!#" + "'", str30, "hi!#");
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("<!---->");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder10 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader11 = null;
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList13.iterator();
        org.jsoup.parser.Tokeniser tokeniser17 = new org.jsoup.parser.Tokeniser(characterReader11, parseErrorList13);
        org.jsoup.parser.Token.Tag tag18 = tokeniser17.tagPending;
        org.jsoup.parser.Token.Tag tag20 = tokeniser17.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype21 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype22 = doctype21.asDoctype();
        java.lang.String str23 = doctype21.tokenType();
        tokeniser17.emit((org.jsoup.parser.Token) doctype21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser17.createTagPending(true);
        xmlTreeBuilder10.currentToken = tag26;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        boolean boolean35 = htmlTreeBuilder28.framesetOk();
        org.jsoup.nodes.Document document38 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder28.setHeadElement((org.jsoup.nodes.Element) document38);
        xmlTreeBuilder10.doc = document38;
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList44.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList44.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int50 = parseErrorList49.getMaxSize();
        boolean boolean51 = parseErrorList44.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList49);
        xmlTreeBuilder10.initialiseParse("hi!#", "0: []", parseErrorList49);
        org.jsoup.parser.Token.Comment comment53 = new org.jsoup.parser.Token.Comment();
        java.lang.String str54 = comment53.getData();
        xmlTreeBuilder10.insert(comment53);
        java.lang.StringBuilder stringBuilder56 = comment53.data;
        tokeniser6.commentPending = comment53;
        tokeniser6.emit('#');
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNull(tag18);
        org.junit.Assert.assertNotNull(tag20);
        org.junit.Assert.assertNotNull(doctype22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Doctype" + "'", str23, "Doctype");
        org.junit.Assert.assertNotNull(tag26);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(stringBuilder56);
        org.junit.Assert.assertEquals(stringBuilder56.toString(), "");
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.resetInsertionMode();
        org.jsoup.nodes.Element element8 = htmlTreeBuilder0.currentElement();
        boolean boolean10 = htmlTreeBuilder0.inButtonScope("-1: []");
        htmlTreeBuilder0.setFosterInserts(false);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        java.lang.StringBuilder stringBuilder9 = null;
        tokeniser7.dataBuffer = stringBuilder9;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        tokeniser7.emit(charArray14);
        org.jsoup.parser.Token.Comment comment17 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean20 = characterReader19.matchesLetter();
        miniSoupTokeniserState0.read(tokeniser7, characterReader19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        org.jsoup.parser.Token.Tag tag31 = tokeniser28.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype32 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype33 = doctype32.asDoctype();
        java.lang.String str34 = doctype32.tokenType();
        tokeniser28.emit((org.jsoup.parser.Token) doctype32);
        org.jsoup.parser.ITokeniserState iTokeniserState36 = tokeniser28.getState();
        org.jsoup.parser.Token.Comment comment37 = new org.jsoup.parser.Token.Comment();
        java.lang.String str38 = comment37.toString();
        java.lang.StringBuilder stringBuilder39 = comment37.data;
        boolean boolean40 = comment37.isEndTag();
        boolean boolean41 = comment37.isComment();
        tokeniser28.commentPending = comment37;
        org.jsoup.parser.CharacterReader characterReader44 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean46 = characterReader44.matches('\000');
        characterReader44.mark();
        boolean boolean48 = characterReader44.isEmpty();
        java.lang.String str49 = characterReader44.consumeToEnd();
        miniSoupTokeniserState0.read(tokeniser28, characterReader44);
        java.lang.String str51 = characterReader44.consumeDigitSequence();
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertNotNull(doctype33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Doctype" + "'", str34, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<!---->" + "'", str38, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder39);
        org.junit.Assert.assertEquals(stringBuilder39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "StartTag" + "'", str49, "StartTag");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        boolean boolean1 = org.jsoup.parser.Tag.isKnownTag("t");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        char[] charArray3 = new char[] { '#', '#' };
        endTag0.appendAttributeValue(charArray3);
        endTag0.appendAttributeValue(' ');
        char[] charArray8 = new char[] { '4' };
        endTag0.appendAttributeValue(charArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Character character10 = endTag0.asCharacter();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Character");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#, #]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4]");
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList9 = xmlTreeBuilder0.stack;
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        boolean boolean21 = parseErrorList14.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList19);
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        boolean boolean26 = parseErrorList24.canAddError();
        boolean boolean27 = parseErrorList19.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
        java.util.List<org.jsoup.nodes.Node> nodeList28 = xmlTreeBuilder0.parseFragment("StartTag", "<!---->", parseErrorList24);
        org.jsoup.parser.ParseError[] parseErrorArray29 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList30 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30, parseErrorArray29);
        org.jsoup.parser.ParseError[] parseErrorArray32 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList33 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33, parseErrorArray32);
        boolean boolean35 = parseErrorList30.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33);
        boolean boolean36 = parseErrorList24.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        parseErrorList30.ensureCapacity((int) (short) -1);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(elementList9);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertNotNull(parseErrorArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(parseErrorArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        boolean boolean1 = doctype0.isCharacter();
        java.lang.String str2 = doctype0.getSystemIdentifier();
        boolean boolean3 = doctype0.isEOF();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token token1 = xmlTreeBuilder0.currentToken;
        org.jsoup.parser.CharacterReader characterReader2 = null;
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.iterator();
        org.jsoup.parser.Tokeniser tokeniser8 = new org.jsoup.parser.Tokeniser(characterReader2, parseErrorList4);
        org.jsoup.parser.Token.Tag tag9 = tokeniser8.tagPending;
        org.jsoup.parser.Token.Tag tag11 = tokeniser8.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype12 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype13 = doctype12.asDoctype();
        java.lang.String str14 = doctype12.tokenType();
        tokeniser8.emit((org.jsoup.parser.Token) doctype12);
        org.jsoup.parser.Token.Tag tag17 = tokeniser8.createTagPending(true);
        xmlTreeBuilder0.tokeniser = tokeniser8;
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        java.lang.StringBuilder stringBuilder27 = null;
        tokeniser25.dataBuffer = stringBuilder27;
        org.jsoup.parser.Token.Tag tag30 = tokeniser25.createTagPending(false);
        org.jsoup.parser.Token.Tag tag32 = tag30.name("hi!#");
        tokeniser8.tagPending = tag30;
        tag30.appendAttributeName("[]");
        org.junit.Assert.assertNull(token1);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNull(tag9);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(doctype13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Doctype" + "'", str14, "Doctype");
        org.junit.Assert.assertNotNull(tag17);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag30);
        org.junit.Assert.assertNotNull(tag32);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        boolean boolean9 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList7);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList7.iterator();
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        org.jsoup.parser.ParseError[] parseErrorArray15 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList16 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16, parseErrorArray15);
        boolean boolean18 = parseErrorList13.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16);
        int int20 = parseErrorList16.lastIndexOf((java.lang.Object) (byte) -1);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.noTracking();
        boolean boolean22 = parseErrorList16.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream23 = parseErrorList16.parallelStream();
        boolean boolean24 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16);
        org.jsoup.parser.ParseError[] parseErrorArray26 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList27 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList27, parseErrorArray26);
        org.jsoup.parser.ParseError[] parseErrorArray29 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList30 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30, parseErrorArray29);
        boolean boolean32 = parseErrorList27.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        java.lang.Object[] objArray33 = parseErrorList27.toArray();
        parseErrorList27.clear();
        org.jsoup.parser.ParseError[] parseErrorArray35 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList36 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36, parseErrorArray35);
        boolean boolean38 = parseErrorList27.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36);
        java.lang.String str39 = parseErrorList27.toString();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream40 = parseErrorList27.stream();
        java.lang.Object[] objArray41 = parseErrorList27.toArray();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder42 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int47 = parseErrorList46.getMaxSize();
        org.jsoup.nodes.Document document48 = htmlTreeBuilder42.parse("0: Doctype", "hi!", parseErrorList46);
        boolean boolean49 = htmlTreeBuilder42.framesetOk();
        org.jsoup.parser.Parser parser50 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser52 = parser50.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document55 = parser50.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document58 = parser50.parseInput("<hi!>", "[]");
        htmlTreeBuilder42.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document58);
        boolean boolean60 = htmlTreeBuilder42.isFragmentParsing();
        htmlTreeBuilder42.clearStackToTableContext();
        int int62 = parseErrorList27.indexOf((java.lang.Object) htmlTreeBuilder42);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = parseErrorList16.addAll((int) ' ', (java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList27);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(parseErrorStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(parseErrorArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(parseErrorArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertNotNull(parseErrorStream40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(parser50);
        org.junit.Assert.assertNotNull(parser52);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNotNull(document58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        boolean boolean1 = doctype0.isCharacter();
        boolean boolean2 = doctype0.isEndTag();
        boolean boolean3 = doctype0.isCharacter();
        java.lang.StringBuilder stringBuilder4 = doctype0.name;
        java.lang.String str5 = doctype0.getName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(stringBuilder4);
        org.junit.Assert.assertEquals(stringBuilder4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isSelfClosing();
        java.lang.String str5 = tag1.toString();
        boolean boolean6 = tag1.isKnownTag();
        boolean boolean7 = tag1.canContainBlock();
        boolean boolean8 = tag1.isFormListed();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        boolean boolean19 = doctype18.isCharacter();
        tokeniser6.doctypePending = doctype18;
        org.jsoup.parser.Token.Doctype doctype21 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype22 = doctype21.asDoctype();
        java.lang.StringBuilder stringBuilder23 = doctype22.name;
        tokeniser6.dataBuffer = stringBuilder23;
        tokeniser6.emitDoctypePending();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = tokeniser6.unescapeEntities(false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doctype22);
        org.junit.Assert.assertNotNull(stringBuilder23);
        org.junit.Assert.assertEquals(stringBuilder23.toString(), "");
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Comment comment12 = tokeniser6.commentPending;
        org.jsoup.parser.TokenQueue tokenQueue14 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean15 = tokenQueue14.isEmpty();
        char[] charArray17 = new char[] { '4' };
        boolean boolean18 = tokenQueue14.matchesAny(charArray17);
        tokeniser6.emit(charArray17);
        org.jsoup.parser.TokeniserState tokeniserState20 = org.jsoup.parser.TokeniserState.DoctypeSystemIdentifier_singleQuoted;
        tokeniser6.error((org.jsoup.parser.ITokeniserState) tokeniserState20);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token token22 = tokeniser6.read();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNotNull(comment12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(tokeniserState20);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        htmlTreeBuilder0.newPendingTableCharacters();
        org.jsoup.nodes.Element element5 = htmlTreeBuilder0.getHeadElement();
        java.util.List<org.jsoup.parser.Token.Character> characterList6 = htmlTreeBuilder0.getPendingTableCharacters();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(element5);
        org.junit.Assert.assertNotNull(characterList6);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        org.jsoup.nodes.FormElement formElement11 = htmlTreeBuilder3.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.parser.Parser parser20 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser22 = parser20.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document25 = parser20.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document28 = parser20.parseInput("<hi!>", "[]");
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document28);
        boolean boolean30 = htmlTreeBuilder12.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder31 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList38.iterator();
        boolean boolean41 = parseErrorList36.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        xmlTreeBuilder31.initialiseParse("<!---->", "hi!", parseErrorList36);
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document47 = xmlTreeBuilder31.parse("", "[]", parseErrorList46);
        boolean boolean48 = htmlTreeBuilder12.isInActiveFormattingElements((org.jsoup.nodes.Element) document47);
        boolean boolean49 = htmlTreeBuilder3.isInActiveFormattingElements((org.jsoup.nodes.Element) document47);
        java.util.List<org.jsoup.parser.Token.Character> characterList50 = htmlTreeBuilder3.getPendingTableCharacters();
        org.jsoup.parser.Parser parser51 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder3);
        org.jsoup.parser.TreeBuilder treeBuilder52 = parser51.getTreeBuilder();
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(formElement11);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parser20);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(characterList50);
        org.junit.Assert.assertNotNull(treeBuilder52);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
        org.jsoup.parser.TreeBuilder treeBuilder2 = null;
        org.jsoup.parser.Parser parser3 = parser1.setTreeBuilder(treeBuilder2);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder4 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document5 = xmlTreeBuilder4.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder6 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        boolean boolean16 = parseErrorList11.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        xmlTreeBuilder6.initialiseParse("<!---->", "hi!", parseErrorList11);
        xmlTreeBuilder4.errors = parseErrorList11;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList19 = xmlTreeBuilder4.stack;
        org.jsoup.parser.CharacterReader characterReader20 = null;
        xmlTreeBuilder4.reader = characterReader20;
        org.jsoup.parser.Parser parser22 = parser1.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder4);
        java.util.List<org.jsoup.parser.ParseError> parseErrorList23 = parser22.getErrors();
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNull(document5);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(elementList19);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNull(parseErrorList23);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("</hi![]>");
        boolean boolean2 = characterReader1.matchesLetter();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList15 = htmlTreeBuilder0.getStack();
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertNotNull(elementList15);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder2 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int7 = parseErrorList6.getMaxSize();
        org.jsoup.nodes.Document document8 = htmlTreeBuilder2.parse("0: Doctype", "hi!", parseErrorList6);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        boolean boolean14 = parseErrorList12.canAddError();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder2.parse("EndTag", "hi!#", parseErrorList12);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState16 = null;
        htmlTreeBuilder2.transition(htmlTreeBuilderState16);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder19 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        org.jsoup.nodes.Document document25 = htmlTreeBuilder19.parse("0: Doctype", "hi!", parseErrorList23);
        boolean boolean26 = htmlTreeBuilder19.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState27 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder19.error(htmlTreeBuilderState27);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder29 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int34 = parseErrorList33.getMaxSize();
        org.jsoup.nodes.Document document35 = htmlTreeBuilder29.parse("0: Doctype", "hi!", parseErrorList33);
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream40 = parseErrorList39.stream();
        boolean boolean41 = parseErrorList39.canAddError();
        org.jsoup.nodes.Document document42 = htmlTreeBuilder29.parse("EndTag", "hi!#", parseErrorList39);
        java.lang.String[] strArray50 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean51 = htmlTreeBuilder29.inScope("hi!#", strArray50);
        boolean boolean52 = htmlTreeBuilder19.inScope(strArray50);
        boolean boolean53 = htmlTreeBuilder2.inScope("t", strArray50);
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.popStackToClose(strArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState27);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertNotNull(parseErrorStream40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse(" EndTag", "<Doctype>");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        htmlTreeBuilder0.newPendingTableCharacters();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState6 = htmlTreeBuilder0.originalState();
        org.jsoup.nodes.Document document7 = htmlTreeBuilder0.doc;
        htmlTreeBuilder0.reconstructFormattingElements();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(htmlTreeBuilderState6);
        org.junit.Assert.assertNull(document7);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        boolean boolean25 = parseErrorList18.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23);
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList23);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList23.iterator();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("[]", "Doctype", parseErrorList23);
        org.jsoup.parser.CharacterReader characterReader31 = null;
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream34 = parseErrorList33.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList33.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor36 = parseErrorList33.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int39 = parseErrorList38.getMaxSize();
        boolean boolean40 = parseErrorList33.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        org.jsoup.parser.Tokeniser tokeniser41 = new org.jsoup.parser.Tokeniser(characterReader31, parseErrorList38);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        boolean boolean45 = parseErrorList43.canAddError();
        boolean boolean46 = parseErrorList38.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        org.jsoup.nodes.Document document47 = htmlTreeBuilder0.parse("hi!", "<!---->", parseErrorList43);
        org.jsoup.parser.Tokeniser tokeniser48 = htmlTreeBuilder0.tokeniser;
        org.jsoup.parser.Parser parser49 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser51 = parser49.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document54 = parser49.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document57 = parser49.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document57);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder59 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList63 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int64 = parseErrorList63.getMaxSize();
        org.jsoup.nodes.Document document65 = htmlTreeBuilder59.parse("0: Doctype", "hi!", parseErrorList63);
        org.jsoup.parser.ParseErrorList parseErrorList69 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream70 = parseErrorList69.stream();
        boolean boolean71 = parseErrorList69.canAddError();
        org.jsoup.nodes.Document document72 = htmlTreeBuilder59.parse("EndTag", "hi!#", parseErrorList69);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState73 = null;
        htmlTreeBuilder59.transition(htmlTreeBuilderState73);
        org.jsoup.parser.Token token75 = htmlTreeBuilder59.currentToken;
        org.jsoup.nodes.Element element77 = htmlTreeBuilder59.insert("[100: ]");
        boolean boolean78 = htmlTreeBuilder0.isInActiveFormattingElements(element77);
        org.jsoup.parser.CharacterReader characterReader79 = null;
        org.jsoup.parser.ParseErrorList parseErrorList81 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream82 = parseErrorList81.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor83 = parseErrorList81.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor84 = parseErrorList81.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList86 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int87 = parseErrorList86.getMaxSize();
        boolean boolean88 = parseErrorList81.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList86);
        org.jsoup.parser.Tokeniser tokeniser89 = new org.jsoup.parser.Tokeniser(characterReader79, parseErrorList86);
        org.jsoup.parser.ParseErrorList parseErrorList91 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream92 = parseErrorList91.stream();
        boolean boolean93 = parseErrorList91.canAddError();
        boolean boolean94 = parseErrorList86.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList91);
        parseErrorList86.clear();
        htmlTreeBuilder0.errors = parseErrorList86;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertNotNull(parseErrorStream34);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNotNull(parseErrorItor36);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(tokeniser48);
        org.junit.Assert.assertNotNull(parser49);
        org.junit.Assert.assertNotNull(parser51);
        org.junit.Assert.assertNotNull(document54);
        org.junit.Assert.assertNotNull(document57);
        org.junit.Assert.assertNotNull(parseErrorList63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertNotNull(parseErrorList69);
        org.junit.Assert.assertNotNull(parseErrorStream70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(document72);
        org.junit.Assert.assertNotNull(token75);
        org.junit.Assert.assertNotNull(element77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(parseErrorList81);
        org.junit.Assert.assertNotNull(parseErrorStream82);
        org.junit.Assert.assertNotNull(parseErrorItor83);
        org.junit.Assert.assertNotNull(parseErrorItor84);
        org.junit.Assert.assertNotNull(parseErrorList86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(parseErrorList91);
        org.junit.Assert.assertNotNull(parseErrorStream92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches("[100: ]");
        java.lang.String str5 = characterReader1.consumeTo("hi!");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder6 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int11 = parseErrorList10.getMaxSize();
        org.jsoup.nodes.Document document12 = htmlTreeBuilder6.parse("0: Doctype", "hi!", parseErrorList10);
        boolean boolean13 = htmlTreeBuilder6.framesetOk();
        org.jsoup.parser.Parser parser14 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser16 = parser14.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document19 = parser14.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document22 = parser14.parseInput("<hi!>", "[]");
        htmlTreeBuilder6.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document22);
        org.jsoup.parser.Token.Doctype doctype24 = new org.jsoup.parser.Token.Doctype();
        boolean boolean25 = doctype24.isCharacter();
        boolean boolean26 = doctype24.isEndTag();
        htmlTreeBuilder6.currentToken = doctype24;
        java.lang.StringBuilder stringBuilder28 = doctype24.name;
        // The following exception was thrown during execution in test generation
        try {
            int int29 = characterReader1.nextIndexOf((java.lang.CharSequence) stringBuilder28);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parser14);
        org.junit.Assert.assertNotNull(parser16);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(stringBuilder28);
        org.junit.Assert.assertEquals(stringBuilder28.toString(), "");
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        java.lang.StringBuilder stringBuilder9 = null;
        tokeniser7.dataBuffer = stringBuilder9;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        tokeniser7.emit(charArray14);
        org.jsoup.parser.Token.Comment comment17 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean20 = characterReader19.matchesLetter();
        miniSoupTokeniserState0.read(tokeniser7, characterReader19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        org.jsoup.parser.Token.Tag tag31 = tokeniser28.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype32 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype33 = doctype32.asDoctype();
        java.lang.String str34 = doctype32.tokenType();
        tokeniser28.emit((org.jsoup.parser.Token) doctype32);
        org.jsoup.parser.ITokeniserState iTokeniserState36 = tokeniser28.getState();
        org.jsoup.parser.Token.Comment comment37 = new org.jsoup.parser.Token.Comment();
        java.lang.String str38 = comment37.toString();
        java.lang.StringBuilder stringBuilder39 = comment37.data;
        boolean boolean40 = comment37.isEndTag();
        boolean boolean41 = comment37.isComment();
        tokeniser28.commentPending = comment37;
        org.jsoup.parser.CharacterReader characterReader44 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean46 = characterReader44.matches('\000');
        characterReader44.mark();
        boolean boolean48 = characterReader44.isEmpty();
        java.lang.String str49 = characterReader44.consumeToEnd();
        miniSoupTokeniserState0.read(tokeniser28, characterReader44);
        characterReader44.mark();
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertNotNull(doctype33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Doctype" + "'", str34, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<!---->" + "'", str38, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder39);
        org.junit.Assert.assertEquals(stringBuilder39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "StartTag" + "'", str49, "StartTag");
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder7 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int12 = parseErrorList11.getMaxSize();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder7.parse("0: Doctype", "hi!", parseErrorList11);
        boolean boolean14 = htmlTreeBuilder7.framesetOk();
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder7.setHeadElement((org.jsoup.nodes.Element) document17);
        org.jsoup.nodes.Element element19 = htmlTreeBuilder7.pop();
        htmlTreeBuilder0.pushActiveFormattingElements(element19);
        org.jsoup.nodes.Element element22 = htmlTreeBuilder0.insert("[100: ]");
        htmlTreeBuilder0.generateImpliedEndTags("[100: ]");
        boolean boolean26 = htmlTreeBuilder0.inScope("tartTag");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        java.util.List<org.jsoup.nodes.Node> nodeList2 = org.jsoup.parser.Parser.parseXmlFragment("", "<hi!>");
        org.junit.Assert.assertNotNull(nodeList2);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        htmlTreeBuilder0.generateImpliedEndTags("EndTag");
        htmlTreeBuilder0.reconstructFormattingElements();
        htmlTreeBuilder0.resetInsertionMode();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }
}
