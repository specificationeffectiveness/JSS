package org.jsoup.parser;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        boolean boolean1 = doctype0.isCharacter();
        boolean boolean2 = doctype0.isEndTag();
        boolean boolean3 = doctype0.isCharacter();
        java.lang.StringBuilder stringBuilder4 = doctype0.publicIdentifier;
        java.lang.String str5 = doctype0.tokenType();
        java.lang.String str6 = doctype0.getPublicIdentifier();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(stringBuilder4);
        org.junit.Assert.assertEquals(stringBuilder4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Doctype" + "'", str5, "Doctype");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        java.lang.String str20 = htmlTreeBuilder0.toString();
        org.jsoup.parser.Tokeniser tokeniser21 = htmlTreeBuilder0.tokeniser;
        java.util.List<org.jsoup.parser.Token.Character> characterList22 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder23 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList27 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int28 = parseErrorList27.getMaxSize();
        org.jsoup.nodes.Document document29 = htmlTreeBuilder23.parse("0: Doctype", "hi!", parseErrorList27);
        boolean boolean30 = htmlTreeBuilder23.framesetOk();
        org.jsoup.parser.Parser parser31 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser33 = parser31.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document36 = parser31.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document39 = parser31.parseInput("<hi!>", "[]");
        htmlTreeBuilder23.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document39);
        boolean boolean41 = htmlTreeBuilder23.isFragmentParsing();
        org.jsoup.parser.Parser parser42 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder23);
        org.jsoup.parser.Token.StartTag startTag43 = new org.jsoup.parser.Token.StartTag();
        startTag43.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag47 = startTag43.name("hi!#");
        boolean boolean48 = startTag43.selfClosing;
        java.lang.String str49 = startTag43.toString();
        org.jsoup.nodes.Element element50 = htmlTreeBuilder23.insertEmpty(startTag43);
        htmlTreeBuilder0.setHeadElement(element50);
        htmlTreeBuilder0.reconstructFormattingElements();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(tokeniser21);
        org.junit.Assert.assertNotNull(characterList22);
        org.junit.Assert.assertNotNull(parseErrorList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parser31);
        org.junit.Assert.assertNotNull(parser33);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(tag47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "<hi!#>" + "'", str49, "<hi!#>");
        org.junit.Assert.assertNotNull(element50);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        xmlTreeBuilder0.initialiseParse("a", "[]", parseErrorList18);
        org.jsoup.parser.Token.StartTag startTag21 = new org.jsoup.parser.Token.StartTag();
        startTag21.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag25 = startTag21.name("hi!#");
        boolean boolean26 = startTag21.isStartTag();
        startTag21.appendTagName("<hi!#>");
        org.jsoup.nodes.Element element29 = xmlTreeBuilder0.insert(startTag21);
        org.jsoup.parser.Token.Doctype doctype30 = null;
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(doctype30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(tag25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(element29);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.Comment comment12 = new org.jsoup.parser.Token.Comment();
        java.lang.String str13 = comment12.toString();
        boolean boolean14 = comment12.isCharacter();
        htmlTreeBuilder0.insert(comment12);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder16 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.nodes.Document document22 = htmlTreeBuilder16.parse("0: Doctype", "hi!", parseErrorList20);
        boolean boolean23 = htmlTreeBuilder16.framesetOk();
        org.jsoup.parser.Parser parser24 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser26 = parser24.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document29 = parser24.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document32 = parser24.parseInput("<hi!>", "[]");
        htmlTreeBuilder16.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        boolean boolean34 = htmlTreeBuilder16.isFragmentParsing();
        htmlTreeBuilder16.clearStackToTableContext();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder36 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int41 = parseErrorList40.getMaxSize();
        org.jsoup.nodes.Document document42 = htmlTreeBuilder36.parse("0: Doctype", "hi!", parseErrorList40);
        htmlTreeBuilder36.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray45 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList46 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList46, characterArray45);
        htmlTreeBuilder36.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList46);
        boolean boolean49 = htmlTreeBuilder36.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag51 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement53 = htmlTreeBuilder36.insertForm(startTag51, true);
        org.jsoup.nodes.Element element54 = htmlTreeBuilder16.insert(startTag51);
        boolean boolean55 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag51);
        boolean boolean56 = startTag51.isCharacter();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<!---->" + "'", str13, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parser24);
        org.junit.Assert.assertNotNull(parser26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNotNull(characterArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(formElement53);
        org.junit.Assert.assertNotNull(element54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        tokeniser6.createTempBuffer();
        tokeniser6.emitTagPending();
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.Tokeniser tokeniser18 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList14);
        org.jsoup.parser.Token.Tag tag19 = tokeniser18.tagPending;
        java.lang.StringBuilder stringBuilder20 = null;
        tokeniser18.dataBuffer = stringBuilder20;
        org.jsoup.parser.Token.Tag tag23 = tokeniser18.createTagPending(false);
        org.jsoup.parser.Token.Tag tag25 = tag23.name("hi!#");
        org.jsoup.parser.Token.TokenType tokenType26 = tag23.type;
        tokeniser6.tagPending = tag23;
        boolean boolean28 = tag23.selfClosing;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNull(tag19);
        org.junit.Assert.assertNotNull(tag23);
        org.junit.Assert.assertNotNull(tag25);
        org.junit.Assert.assertTrue("'" + tokenType26 + "' != '" + org.jsoup.parser.Token.TokenType.EndTag + "'", tokenType26.equals(org.jsoup.parser.Token.TokenType.EndTag));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        java.lang.StringBuilder stringBuilder9 = null;
        tokeniser7.dataBuffer = stringBuilder9;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        tokeniser7.emit(charArray14);
        org.jsoup.parser.Token.Comment comment17 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean20 = characterReader19.matchesLetter();
        miniSoupTokeniserState0.read(tokeniser7, characterReader19);
        org.jsoup.parser.TokenQueue tokenQueue23 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean24 = tokenQueue23.isEmpty();
        boolean boolean25 = tokenQueue23.consumeWhitespace();
        java.lang.String str26 = tokenQueue23.consumeWord();
        boolean boolean27 = tokenQueue23.matchesWhitespace();
        java.lang.String[] strArray32 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str33 = tokenQueue23.consumeToAny(strArray32);
        org.jsoup.parser.CharacterReader characterReader34 = null;
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream37 = parseErrorList36.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor38 = parseErrorList36.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor39 = parseErrorList36.iterator();
        org.jsoup.parser.Tokeniser tokeniser40 = new org.jsoup.parser.Tokeniser(characterReader34, parseErrorList36);
        org.jsoup.parser.Token.Tag tag41 = tokeniser40.tagPending;
        java.lang.StringBuilder stringBuilder42 = null;
        tokeniser40.dataBuffer = stringBuilder42;
        org.jsoup.parser.Token.EndTag endTag44 = new org.jsoup.parser.Token.EndTag();
        char[] charArray47 = new char[] { '#', '#' };
        endTag44.appendAttributeValue(charArray47);
        tokeniser40.emit(charArray47);
        boolean boolean50 = tokenQueue23.matchesAny(charArray47);
        tokeniser7.emit(charArray47);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray54 = tokeniser7.consumeCharacterReference((java.lang.Character) '\ufffd', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "EndTag" + "'", str26, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertNotNull(parseErrorStream37);
        org.junit.Assert.assertNotNull(parseErrorItor38);
        org.junit.Assert.assertNotNull(parseErrorItor39);
        org.junit.Assert.assertNull(tag41);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        htmlTreeBuilder0.newPendingTableCharacters();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder13.error(htmlTreeBuilderState21);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState23 = null;
        htmlTreeBuilder13.transition(htmlTreeBuilderState23);
        htmlTreeBuilder13.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement27 = htmlTreeBuilder13.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        boolean boolean40 = parseErrorList38.canAddError();
        org.jsoup.nodes.Document document41 = htmlTreeBuilder28.parse("EndTag", "hi!#", parseErrorList38);
        java.lang.String[] strArray49 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean50 = htmlTreeBuilder28.inScope("hi!#", strArray49);
        org.jsoup.parser.ParseErrorList parseErrorList55 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document56 = htmlTreeBuilder28.parse("0: Doctype", "", parseErrorList55);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder57 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document58 = xmlTreeBuilder57.doc;
        org.jsoup.parser.ParseErrorList parseErrorList62 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int63 = parseErrorList62.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray64 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList65 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList65, parseErrorArray64);
        org.jsoup.parser.ParseError[] parseErrorArray67 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList68 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList68, parseErrorArray67);
        boolean boolean70 = parseErrorList65.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList68);
        org.jsoup.parser.ParseError[] parseErrorArray71 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList72 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList72, parseErrorArray71);
        boolean boolean74 = parseErrorList68.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList72);
        parseErrorList72.clear();
        boolean boolean76 = parseErrorList62.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList72);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor77 = parseErrorList62.iterator();
        org.jsoup.nodes.Document document78 = xmlTreeBuilder57.parse("<hi!>", "0: []", parseErrorList62);
        htmlTreeBuilder28.push((org.jsoup.nodes.Element) document78);
        htmlTreeBuilder13.setHeadElement((org.jsoup.nodes.Element) document78);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder81 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList85 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int86 = parseErrorList85.getMaxSize();
        org.jsoup.nodes.Document document87 = htmlTreeBuilder81.parse("0: Doctype", "hi!", parseErrorList85);
        boolean boolean88 = htmlTreeBuilder81.framesetOk();
        org.jsoup.nodes.Element element89 = htmlTreeBuilder81.currentElement();
        boolean boolean90 = htmlTreeBuilder13.isInActiveFormattingElements(element89);
        htmlTreeBuilder0.maybeSetBaseUri(element89);
        org.jsoup.nodes.Element element93 = htmlTreeBuilder0.getActiveFormattingElement("\uffff>");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState21);
        org.junit.Assert.assertNull(formElement27);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(document56);
        org.junit.Assert.assertNull(document58);
        org.junit.Assert.assertNotNull(parseErrorList62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(parseErrorArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(parseErrorArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(parseErrorItor77);
        org.junit.Assert.assertNotNull(document78);
        org.junit.Assert.assertNotNull(parseErrorList85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(document87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(element89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(element93);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.newPendingTableCharacters();
        boolean boolean9 = htmlTreeBuilder0.inTableScope("");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        endTag11.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilderState10.process((org.jsoup.parser.Token) endTag11, htmlTreeBuilder13);
        htmlTreeBuilder13.clearStackToTableContext();
        htmlTreeBuilder13.generateImpliedEndTags("hi!#");
        java.util.List<org.jsoup.parser.Token.Character> characterList24 = htmlTreeBuilder13.getPendingTableCharacters();
        htmlTreeBuilder0.setPendingTableCharacters(characterList24);
        org.jsoup.parser.ParseErrorList parseErrorList26 = null;
        htmlTreeBuilder0.errors = parseErrorList26;
        org.jsoup.parser.CharacterReader characterReader28 = null;
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream31 = parseErrorList30.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList30.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor33 = parseErrorList30.iterator();
        org.jsoup.parser.Tokeniser tokeniser34 = new org.jsoup.parser.Tokeniser(characterReader28, parseErrorList30);
        org.jsoup.parser.Token.Tag tag35 = tokeniser34.tagPending;
        org.jsoup.parser.Token.Tag tag37 = tokeniser34.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype38 = new org.jsoup.parser.Token.Doctype();
        boolean boolean39 = doctype38.isCharacter();
        boolean boolean40 = doctype38.isEndTag();
        boolean boolean41 = doctype38.isCharacter();
        tokeniser34.emit((org.jsoup.parser.Token) doctype38);
        java.lang.String str43 = doctype38.getSystemIdentifier();
        htmlTreeBuilder0.currentToken = doctype38;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder46 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int51 = parseErrorList50.getMaxSize();
        org.jsoup.nodes.Document document52 = htmlTreeBuilder46.parse("0: Doctype", "hi!", parseErrorList50);
        boolean boolean53 = htmlTreeBuilder46.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState54 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder46.error(htmlTreeBuilderState54);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState56 = null;
        htmlTreeBuilder46.transition(htmlTreeBuilderState56);
        htmlTreeBuilder46.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList60 = htmlTreeBuilder46.getPendingTableCharacters();
        org.jsoup.parser.CharacterReader characterReader62 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean64 = characterReader62.matches("[100: ]");
        htmlTreeBuilder46.reader = characterReader62;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder66 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList70 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int71 = parseErrorList70.getMaxSize();
        org.jsoup.nodes.Document document72 = htmlTreeBuilder66.parse("0: Doctype", "hi!", parseErrorList70);
        htmlTreeBuilder66.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray75 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList76 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList76, characterArray75);
        htmlTreeBuilder66.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList76);
        boolean boolean79 = htmlTreeBuilder66.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag81 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement83 = htmlTreeBuilder66.insertForm(startTag81, true);
        htmlTreeBuilder46.setFormElement(formElement83);
        org.jsoup.nodes.FormElement formElement85 = htmlTreeBuilder46.getFormElement();
        java.util.List<org.jsoup.nodes.Node> nodeList87 = org.jsoup.parser.Parser.parseFragment("[100: ]", (org.jsoup.nodes.Element) formElement85, " EndTag");
        htmlTreeBuilder0.setFormElement(formElement85);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState10);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(characterList24);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorStream31);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertNotNull(parseErrorItor33);
        org.junit.Assert.assertNull(tag35);
        org.junit.Assert.assertNotNull(tag37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState54);
        org.junit.Assert.assertNotNull(characterList60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(parseErrorList70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(document72);
        org.junit.Assert.assertNotNull(characterArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(formElement83);
        org.junit.Assert.assertNotNull(formElement85);
        org.junit.Assert.assertNotNull(nodeList87);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean4 = characterReader1.matchesDigit();
        java.lang.String str5 = characterReader1.toString();
        boolean boolean7 = characterReader1.matches(' ');
        boolean boolean9 = characterReader1.matchConsumeIgnoreCase("S");
        char char10 = characterReader1.current();
        java.lang.String str11 = characterReader1.consumeAsString();
        boolean boolean12 = characterReader1.isEmpty();
        java.lang.String str13 = characterReader1.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + 't' + "'", char10 == 't');
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "t" + "'", str11, "t");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "artTag" + "'", str13, "artTag");
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList15 = xmlTreeBuilder0.stack;
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList18);
        org.jsoup.parser.Token.Tag tag23 = tokeniser22.tagPending;
        org.jsoup.parser.Token.Tag tag25 = tokeniser22.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype26 = tokeniser22.doctypePending;
        xmlTreeBuilder0.tokeniser = tokeniser22;
        org.jsoup.parser.CharacterReader characterReader28 = null;
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream31 = parseErrorList30.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList30.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor33 = parseErrorList30.iterator();
        org.jsoup.parser.Tokeniser tokeniser34 = new org.jsoup.parser.Tokeniser(characterReader28, parseErrorList30);
        tokeniser34.createTempBuffer();
        xmlTreeBuilder0.tokeniser = tokeniser34;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder39 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader40 = null;
        org.jsoup.parser.ParseErrorList parseErrorList42 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream43 = parseErrorList42.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor44 = parseErrorList42.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor45 = parseErrorList42.iterator();
        org.jsoup.parser.Tokeniser tokeniser46 = new org.jsoup.parser.Tokeniser(characterReader40, parseErrorList42);
        org.jsoup.parser.Token.Tag tag47 = tokeniser46.tagPending;
        org.jsoup.parser.Token.Tag tag49 = tokeniser46.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype50 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype51 = doctype50.asDoctype();
        java.lang.String str52 = doctype50.tokenType();
        tokeniser46.emit((org.jsoup.parser.Token) doctype50);
        org.jsoup.parser.Token.Tag tag55 = tokeniser46.createTagPending(true);
        xmlTreeBuilder39.currentToken = tag55;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder57 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList61 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int62 = parseErrorList61.getMaxSize();
        org.jsoup.nodes.Document document63 = htmlTreeBuilder57.parse("0: Doctype", "hi!", parseErrorList61);
        boolean boolean64 = htmlTreeBuilder57.framesetOk();
        org.jsoup.nodes.Document document67 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder57.setHeadElement((org.jsoup.nodes.Element) document67);
        xmlTreeBuilder39.doc = document67;
        org.jsoup.parser.ParseErrorList parseErrorList73 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream74 = parseErrorList73.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor75 = parseErrorList73.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor76 = parseErrorList73.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList78 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int79 = parseErrorList78.getMaxSize();
        boolean boolean80 = parseErrorList73.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList78);
        xmlTreeBuilder39.initialiseParse("hi!#", "0: []", parseErrorList78);
        org.jsoup.parser.ParseErrorList parseErrorList82 = xmlTreeBuilder39.errors;
        xmlTreeBuilder0.initialiseParse("<hi!>", "t", parseErrorList82);
        java.util.function.UnaryOperator<org.jsoup.parser.ParseError> parseErrorUnaryOperator84 = null;
        // The following exception was thrown during execution in test generation
        try {
            parseErrorList82.replaceAll(parseErrorUnaryOperator84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(elementList15);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNull(tag23);
        org.junit.Assert.assertNotNull(tag25);
        org.junit.Assert.assertNull(doctype26);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorStream31);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertNotNull(parseErrorItor33);
        org.junit.Assert.assertNotNull(parseErrorList42);
        org.junit.Assert.assertNotNull(parseErrorStream43);
        org.junit.Assert.assertNotNull(parseErrorItor44);
        org.junit.Assert.assertNotNull(parseErrorItor45);
        org.junit.Assert.assertNull(tag47);
        org.junit.Assert.assertNotNull(tag49);
        org.junit.Assert.assertNotNull(doctype51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Doctype" + "'", str52, "Doctype");
        org.junit.Assert.assertNotNull(tag55);
        org.junit.Assert.assertNotNull(parseErrorList61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(document63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(document67);
        org.junit.Assert.assertNotNull(parseErrorList73);
        org.junit.Assert.assertNotNull(parseErrorStream74);
        org.junit.Assert.assertNotNull(parseErrorItor75);
        org.junit.Assert.assertNotNull(parseErrorItor76);
        org.junit.Assert.assertNotNull(parseErrorList78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(parseErrorList82);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        boolean boolean7 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        int int8 = parseErrorList4.getMaxSize();
        java.util.function.UnaryOperator<org.jsoup.parser.ParseError> parseErrorUnaryOperator9 = null;
        // The following exception was thrown during execution in test generation
        try {
            parseErrorList4.replaceAll(parseErrorUnaryOperator9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\000');
        java.lang.String str4 = characterReader1.consumeHexSequence();
        char char5 = characterReader1.current();
        boolean boolean6 = characterReader1.matchesLetter();
        org.jsoup.parser.CharacterReader characterReader7 = null;
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor12 = parseErrorList9.iterator();
        org.jsoup.parser.Tokeniser tokeniser13 = new org.jsoup.parser.Tokeniser(characterReader7, parseErrorList9);
        org.jsoup.parser.Token.EndTag endTag14 = new org.jsoup.parser.Token.EndTag();
        char[] charArray17 = new char[] { '#', '#' };
        endTag14.appendAttributeValue(charArray17);
        endTag14.appendAttributeValue(' ');
        char[] charArray22 = new char[] { '4' };
        endTag14.appendAttributeValue(charArray22);
        tokeniser13.emit(charArray22);
        java.lang.String str25 = characterReader1.consumeToAny(charArray22);
        characterReader1.advance();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + 'S' + "'", char5 == 'S');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertNotNull(parseErrorItor12);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#, #]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "StartTag" + "'", str25, "StartTag");
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        boolean boolean12 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.parser.Parser parser21 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser23 = parser21.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document26 = parser21.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document29 = parser21.parseInput("<hi!>", "[]");
        htmlTreeBuilder13.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document29);
        boolean boolean31 = htmlTreeBuilder13.isFragmentParsing();
        java.lang.String str32 = htmlTreeBuilder13.toString();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState33 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag34 = new org.jsoup.parser.Token.EndTag();
        endTag34.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder36 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int41 = parseErrorList40.getMaxSize();
        org.jsoup.nodes.Document document42 = htmlTreeBuilder36.parse("0: Doctype", "hi!", parseErrorList40);
        boolean boolean43 = htmlTreeBuilderState33.process((org.jsoup.parser.Token) endTag34, htmlTreeBuilder36);
        org.jsoup.nodes.FormElement formElement44 = htmlTreeBuilder36.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder45 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int50 = parseErrorList49.getMaxSize();
        org.jsoup.nodes.Document document51 = htmlTreeBuilder45.parse("0: Doctype", "hi!", parseErrorList49);
        boolean boolean52 = htmlTreeBuilder45.framesetOk();
        org.jsoup.parser.Parser parser53 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser55 = parser53.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document58 = parser53.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document61 = parser53.parseInput("<hi!>", "[]");
        htmlTreeBuilder45.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document61);
        boolean boolean63 = htmlTreeBuilder45.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder64 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList69 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList71 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream72 = parseErrorList71.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor73 = parseErrorList71.iterator();
        boolean boolean74 = parseErrorList69.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList71);
        xmlTreeBuilder64.initialiseParse("<!---->", "hi!", parseErrorList69);
        org.jsoup.parser.ParseErrorList parseErrorList79 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document80 = xmlTreeBuilder64.parse("", "[]", parseErrorList79);
        boolean boolean81 = htmlTreeBuilder45.isInActiveFormattingElements((org.jsoup.nodes.Element) document80);
        boolean boolean82 = htmlTreeBuilder36.isInActiveFormattingElements((org.jsoup.nodes.Element) document80);
        java.util.List<org.jsoup.parser.Token.Character> characterList83 = htmlTreeBuilder36.getPendingTableCharacters();
        org.jsoup.parser.Tokeniser tokeniser84 = htmlTreeBuilder36.tokeniser;
        org.jsoup.nodes.Element element86 = htmlTreeBuilder36.getActiveFormattingElement("</hi![]>");
        org.jsoup.nodes.Element element88 = htmlTreeBuilder36.insert("EOF");
        htmlTreeBuilder13.removeFromActiveFormattingElements(element88);
        boolean boolean90 = parseErrorList10.equals((java.lang.Object) htmlTreeBuilder13);
        java.util.function.UnaryOperator<org.jsoup.parser.ParseError> parseErrorUnaryOperator91 = null;
        // The following exception was thrown during execution in test generation
        try {
            parseErrorList10.replaceAll(parseErrorUnaryOperator91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(parser21);
        org.junit.Assert.assertNotNull(parser23);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState33);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(formElement44);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(document51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(parser53);
        org.junit.Assert.assertNotNull(parser55);
        org.junit.Assert.assertNotNull(document58);
        org.junit.Assert.assertNotNull(document61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(parseErrorList71);
        org.junit.Assert.assertNotNull(parseErrorStream72);
        org.junit.Assert.assertNotNull(parseErrorItor73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(parseErrorList79);
        org.junit.Assert.assertNotNull(document80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(characterList83);
        org.junit.Assert.assertNotNull(tokeniser84);
        org.junit.Assert.assertNull(element86);
        org.junit.Assert.assertNotNull(element88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Comment comment12 = tokeniser6.commentPending;
        org.jsoup.parser.TokenQueue tokenQueue14 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean15 = tokenQueue14.isEmpty();
        char[] charArray17 = new char[] { '4' };
        boolean boolean18 = tokenQueue14.matchesAny(charArray17);
        tokeniser6.emit(charArray17);
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState20 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader21 = null;
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream24 = parseErrorList23.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList23.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList23.iterator();
        org.jsoup.parser.Tokeniser tokeniser27 = new org.jsoup.parser.Tokeniser(characterReader21, parseErrorList23);
        org.jsoup.parser.Token.Tag tag28 = tokeniser27.tagPending;
        java.lang.StringBuilder stringBuilder29 = null;
        tokeniser27.dataBuffer = stringBuilder29;
        org.jsoup.parser.Token.EndTag endTag31 = new org.jsoup.parser.Token.EndTag();
        char[] charArray34 = new char[] { '#', '#' };
        endTag31.appendAttributeValue(charArray34);
        tokeniser27.emit(charArray34);
        org.jsoup.parser.Token.Comment comment37 = tokeniser27.commentPending;
        org.jsoup.parser.CharacterReader characterReader39 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean40 = characterReader39.matchesLetter();
        miniSoupTokeniserState20.read(tokeniser27, characterReader39);
        org.jsoup.parser.CharacterReader characterReader42 = null;
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList44.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList44.iterator();
        org.jsoup.parser.Tokeniser tokeniser48 = new org.jsoup.parser.Tokeniser(characterReader42, parseErrorList44);
        org.jsoup.parser.Token.Tag tag49 = tokeniser48.tagPending;
        org.jsoup.parser.Token.Tag tag51 = tokeniser48.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype52 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype53 = doctype52.asDoctype();
        java.lang.String str54 = doctype52.tokenType();
        tokeniser48.emit((org.jsoup.parser.Token) doctype52);
        org.jsoup.parser.ITokeniserState iTokeniserState56 = tokeniser48.getState();
        org.jsoup.parser.Token.Comment comment57 = new org.jsoup.parser.Token.Comment();
        java.lang.String str58 = comment57.toString();
        java.lang.StringBuilder stringBuilder59 = comment57.data;
        boolean boolean60 = comment57.isEndTag();
        boolean boolean61 = comment57.isComment();
        tokeniser48.commentPending = comment57;
        org.jsoup.parser.CharacterReader characterReader64 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean66 = characterReader64.matches('\000');
        characterReader64.mark();
        boolean boolean68 = characterReader64.isEmpty();
        java.lang.String str69 = characterReader64.consumeToEnd();
        miniSoupTokeniserState20.read(tokeniser48, characterReader64);
        tokeniser6.eofError((org.jsoup.parser.ITokeniserState) miniSoupTokeniserState20);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNotNull(comment12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(miniSoupTokeniserState20);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertNotNull(parseErrorStream24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNull(tag28);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, #]");
        org.junit.Assert.assertNull(comment37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNull(tag49);
        org.junit.Assert.assertNotNull(tag51);
        org.junit.Assert.assertNotNull(doctype53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Doctype" + "'", str54, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "<!---->" + "'", str58, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder59);
        org.junit.Assert.assertEquals(stringBuilder59.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "StartTag" + "'", str69, "StartTag");
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.Comment comment12 = new org.jsoup.parser.Token.Comment();
        java.lang.String str13 = comment12.toString();
        boolean boolean14 = comment12.isCharacter();
        htmlTreeBuilder0.insert(comment12);
        boolean boolean16 = comment12.isStartTag();
        comment12.bogus = false;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<!---->" + "'", str13, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.nodes.Element element38 = htmlTreeBuilder0.insert("<!---->");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder39 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int44 = parseErrorList43.getMaxSize();
        org.jsoup.nodes.Document document45 = htmlTreeBuilder39.parse("0: Doctype", "hi!", parseErrorList43);
        boolean boolean46 = htmlTreeBuilder39.framesetOk();
        org.jsoup.parser.Parser parser47 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser49 = parser47.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document52 = parser47.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document55 = parser47.parseInput("<hi!>", "[]");
        htmlTreeBuilder39.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document55);
        java.lang.String[] strArray57 = new java.lang.String[] {};
        boolean boolean58 = htmlTreeBuilder39.inScope(strArray57);
        htmlTreeBuilder39.markInsertionMode();
        boolean boolean61 = htmlTreeBuilder39.inScope("StartTag");
        org.jsoup.parser.Parser parser62 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder39);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList63 = htmlTreeBuilder39.stack;
        htmlTreeBuilder0.stack = elementList63;
        boolean boolean66 = htmlTreeBuilder0.inSelectScope("0: []");
        htmlTreeBuilder0.framesetOk(false);
        htmlTreeBuilder0.clearStackToTableRowContext();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(element38);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(parser47);
        org.junit.Assert.assertNotNull(parser49);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(elementList63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        boolean boolean7 = tokenQueue1.matches("S");
        // The following exception was thrown during execution in test generation
        try {
            char char8 = tokenQueue1.consume();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 6");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        boolean boolean19 = doctype18.isCharacter();
        tokeniser6.doctypePending = doctype18;
        org.jsoup.parser.Token.Comment comment21 = new org.jsoup.parser.Token.Comment();
        java.lang.String str22 = comment21.toString();
        java.lang.StringBuilder stringBuilder23 = comment21.data;
        tokeniser6.commentPending = comment21;
        boolean boolean25 = comment21.bogus;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<!---->" + "'", str22, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder23);
        org.junit.Assert.assertEquals(stringBuilder23.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        htmlTreeBuilder0.clearStackToTableContext();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder20 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int25 = parseErrorList24.getMaxSize();
        org.jsoup.nodes.Document document26 = htmlTreeBuilder20.parse("0: Doctype", "hi!", parseErrorList24);
        htmlTreeBuilder20.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray29 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList30 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList30, characterArray29);
        htmlTreeBuilder20.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList30);
        boolean boolean33 = htmlTreeBuilder20.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag35 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement37 = htmlTreeBuilder20.insertForm(startTag35, true);
        org.jsoup.nodes.Element element38 = htmlTreeBuilder0.insert(startTag35);
        startTag35.appendAttributeName('\000');
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(characterArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(formElement37);
        org.junit.Assert.assertNotNull(element38);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        java.lang.String str2 = characterReader1.consumeToEnd();
        int int4 = characterReader1.nextIndexOf('a');
        java.lang.String str5 = characterReader1.consumeDigitSequence();
        char char6 = characterReader1.current();
        boolean boolean7 = characterReader1.matchesDigit();
        boolean boolean8 = characterReader1.matchesDigit();
        boolean boolean9 = characterReader1.isEmpty();
        boolean boolean11 = characterReader1.containsIgnoreCase("\uffff>");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "StartTag" + "'", str2, "StartTag");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\uffff' + "'", char6 == '\uffff');
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.resetInsertionMode();
        org.jsoup.nodes.Element element8 = htmlTreeBuilder0.currentElement();
        boolean boolean10 = htmlTreeBuilder0.inButtonScope("-1: []");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState11 = htmlTreeBuilder0.state();
        org.jsoup.parser.TokenQueue tokenQueue13 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean14 = tokenQueue13.isEmpty();
        boolean boolean15 = tokenQueue13.consumeWhitespace();
        boolean boolean17 = tokenQueue13.matchChomp("<!---->");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.parser.Parser parser26 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser28 = parser26.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document31 = parser26.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document34 = parser26.parseInput("<hi!>", "[]");
        htmlTreeBuilder18.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document34);
        boolean boolean36 = htmlTreeBuilder18.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder37 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList42 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList44.iterator();
        boolean boolean47 = parseErrorList42.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        xmlTreeBuilder37.initialiseParse("<!---->", "hi!", parseErrorList42);
        org.jsoup.parser.ParseErrorList parseErrorList52 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document53 = xmlTreeBuilder37.parse("", "[]", parseErrorList52);
        boolean boolean54 = htmlTreeBuilder18.isInActiveFormattingElements((org.jsoup.nodes.Element) document53);
        org.jsoup.parser.TokenQueue tokenQueue56 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean57 = tokenQueue56.isEmpty();
        boolean boolean58 = tokenQueue56.consumeWhitespace();
        java.lang.String str59 = tokenQueue56.consumeWord();
        boolean boolean60 = tokenQueue56.matchesWhitespace();
        java.lang.String[] strArray65 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str66 = tokenQueue56.consumeToAny(strArray65);
        boolean boolean67 = htmlTreeBuilder18.inScope(strArray65);
        boolean boolean68 = tokenQueue13.matchesAny(strArray65);
        boolean boolean69 = htmlTreeBuilder0.inScope(strArray65);
        org.jsoup.nodes.Document document72 = htmlTreeBuilder0.parse("hi!#", "10: ");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parser26);
        org.junit.Assert.assertNotNull(parser28);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(parseErrorList52);
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "EndTag" + "'", str59, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(document72);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList((int) '\uffff', (int) (byte) 1);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Token token8 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState9 = org.jsoup.parser.HtmlTreeBuilderState.InTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState9);
        org.jsoup.parser.Token.Comment comment11 = new org.jsoup.parser.Token.Comment();
        java.lang.String str12 = comment11.toString();
        java.lang.StringBuilder stringBuilder13 = comment11.data;
        boolean boolean14 = comment11.isEndTag();
        boolean boolean15 = comment11.isComment();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState16 = org.jsoup.parser.HtmlTreeBuilderState.Initial;
        boolean boolean17 = htmlTreeBuilder0.process((org.jsoup.parser.Token) comment11, htmlTreeBuilderState16);
        boolean boolean19 = htmlTreeBuilder0.inSelectScope("artTag");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder20 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int25 = parseErrorList24.getMaxSize();
        org.jsoup.nodes.Document document26 = htmlTreeBuilder20.parse("0: Doctype", "hi!", parseErrorList24);
        org.jsoup.nodes.Document document29 = org.jsoup.parser.Parser.parseBodyFragment("Doctype", "<hi!>");
        htmlTreeBuilder20.maybeSetBaseUri((org.jsoup.nodes.Element) document29);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState31 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag32 = new org.jsoup.parser.Token.EndTag();
        endTag32.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder34 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int39 = parseErrorList38.getMaxSize();
        org.jsoup.nodes.Document document40 = htmlTreeBuilder34.parse("0: Doctype", "hi!", parseErrorList38);
        boolean boolean41 = htmlTreeBuilderState31.process((org.jsoup.parser.Token) endTag32, htmlTreeBuilder34);
        htmlTreeBuilder20.error(htmlTreeBuilderState31);
        org.jsoup.parser.CharacterReader characterReader43 = null;
        org.jsoup.parser.ParseErrorList parseErrorList45 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream46 = parseErrorList45.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList45.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor48 = parseErrorList45.iterator();
        org.jsoup.parser.Tokeniser tokeniser49 = new org.jsoup.parser.Tokeniser(characterReader43, parseErrorList45);
        org.jsoup.parser.Token.Tag tag50 = tokeniser49.tagPending;
        tokeniser49.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag54 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType55 = startTag54.type;
        startTag54.appendTagName('#');
        tokeniser49.tagPending = startTag54;
        org.jsoup.parser.TokeniserState tokeniserState59 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser49.transition((org.jsoup.parser.ITokeniserState) tokeniserState59);
        org.jsoup.parser.Token.Doctype doctype61 = new org.jsoup.parser.Token.Doctype();
        boolean boolean62 = doctype61.isCharacter();
        tokeniser49.doctypePending = doctype61;
        boolean boolean64 = doctype61.isEndTag();
        java.lang.StringBuilder stringBuilder65 = doctype61.publicIdentifier;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder66 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList70 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int71 = parseErrorList70.getMaxSize();
        org.jsoup.nodes.Document document72 = htmlTreeBuilder66.parse("0: Doctype", "hi!", parseErrorList70);
        htmlTreeBuilder66.newPendingTableCharacters();
        boolean boolean75 = htmlTreeBuilder66.inTableScope("");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState76 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag77 = new org.jsoup.parser.Token.EndTag();
        endTag77.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder79 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList83 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int84 = parseErrorList83.getMaxSize();
        org.jsoup.nodes.Document document85 = htmlTreeBuilder79.parse("0: Doctype", "hi!", parseErrorList83);
        boolean boolean86 = htmlTreeBuilderState76.process((org.jsoup.parser.Token) endTag77, htmlTreeBuilder79);
        htmlTreeBuilder79.clearStackToTableContext();
        htmlTreeBuilder79.generateImpliedEndTags("hi!#");
        java.util.List<org.jsoup.parser.Token.Character> characterList90 = htmlTreeBuilder79.getPendingTableCharacters();
        htmlTreeBuilder66.setPendingTableCharacters(characterList90);
        boolean boolean92 = htmlTreeBuilderState31.process((org.jsoup.parser.Token) doctype61, htmlTreeBuilder66);
        htmlTreeBuilder0.error(htmlTreeBuilderState31);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(token8);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<!---->" + "'", str12, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder13);
        org.junit.Assert.assertEquals(stringBuilder13.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState31);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(parseErrorList45);
        org.junit.Assert.assertNotNull(parseErrorStream46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNotNull(parseErrorItor48);
        org.junit.Assert.assertNull(tag50);
        org.junit.Assert.assertTrue("'" + tokenType55 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType55.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(stringBuilder65);
        org.junit.Assert.assertEquals(stringBuilder65.toString(), "");
        org.junit.Assert.assertNotNull(parseErrorList70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(document72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState76);
        org.junit.Assert.assertNotNull(parseErrorList83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(document85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(characterList90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("Comment", "hi!#");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        htmlTreeBuilder0.setFosterInserts(false);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder18 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        org.jsoup.parser.Token.Tag tag28 = tokeniser25.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype29 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype30 = doctype29.asDoctype();
        java.lang.String str31 = doctype29.tokenType();
        tokeniser25.emit((org.jsoup.parser.Token) doctype29);
        org.jsoup.parser.Token.Tag tag34 = tokeniser25.createTagPending(true);
        xmlTreeBuilder18.currentToken = tag34;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder36 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int41 = parseErrorList40.getMaxSize();
        org.jsoup.nodes.Document document42 = htmlTreeBuilder36.parse("0: Doctype", "hi!", parseErrorList40);
        boolean boolean43 = htmlTreeBuilder36.framesetOk();
        org.jsoup.nodes.Document document46 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder36.setHeadElement((org.jsoup.nodes.Element) document46);
        xmlTreeBuilder18.doc = document46;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder51 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document52 = xmlTreeBuilder51.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder53 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList58 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList60 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream61 = parseErrorList60.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor62 = parseErrorList60.iterator();
        boolean boolean63 = parseErrorList58.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList60);
        xmlTreeBuilder53.initialiseParse("<!---->", "hi!", parseErrorList58);
        xmlTreeBuilder51.errors = parseErrorList58;
        org.jsoup.parser.ParseErrorList parseErrorList69 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream70 = parseErrorList69.stream();
        xmlTreeBuilder51.initialiseParse("a", "[]", parseErrorList69);
        org.jsoup.parser.CharacterReader characterReader72 = null;
        org.jsoup.parser.ParseErrorList parseErrorList74 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream75 = parseErrorList74.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor76 = parseErrorList74.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor77 = parseErrorList74.iterator();
        org.jsoup.parser.Tokeniser tokeniser78 = new org.jsoup.parser.Tokeniser(characterReader72, parseErrorList74);
        org.jsoup.parser.Token.Tag tag79 = tokeniser78.tagPending;
        tokeniser78.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype82 = tokeniser78.doctypePending;
        tokeniser78.createCommentPending();
        org.jsoup.parser.Token.Comment comment84 = tokeniser78.commentPending;
        boolean boolean85 = parseErrorList69.remove((java.lang.Object) tokeniser78);
        org.jsoup.nodes.Document document86 = xmlTreeBuilder18.parse("<!---->", "[]", parseErrorList69);
        org.jsoup.parser.Token.StartTag startTag88 = new org.jsoup.parser.Token.StartTag("<!---->");
        startTag88.tagName = "Doctype";
        startTag88.finaliseTag();
        org.jsoup.nodes.Element element92 = xmlTreeBuilder18.insert(startTag88);
        org.jsoup.nodes.FormElement formElement94 = htmlTreeBuilder0.insertForm(startTag88, true);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState95 = htmlTreeBuilder0.originalState();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(doctype30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Doctype" + "'", str31, "Doctype");
        org.junit.Assert.assertNotNull(tag34);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(document46);
        org.junit.Assert.assertNull(document52);
        org.junit.Assert.assertNotNull(parseErrorList60);
        org.junit.Assert.assertNotNull(parseErrorStream61);
        org.junit.Assert.assertNotNull(parseErrorItor62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(parseErrorList69);
        org.junit.Assert.assertNotNull(parseErrorStream70);
        org.junit.Assert.assertNotNull(parseErrorList74);
        org.junit.Assert.assertNotNull(parseErrorStream75);
        org.junit.Assert.assertNotNull(parseErrorItor76);
        org.junit.Assert.assertNotNull(parseErrorItor77);
        org.junit.Assert.assertNull(tag79);
        org.junit.Assert.assertNull(doctype82);
        org.junit.Assert.assertNotNull(comment84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(document86);
        org.junit.Assert.assertNotNull(element92);
        org.junit.Assert.assertNotNull(formElement94);
        org.junit.Assert.assertNull(htmlTreeBuilderState95);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        boolean boolean1 = doctype0.isCharacter();
        java.lang.StringBuilder stringBuilder2 = doctype0.systemIdentifier;
        org.jsoup.parser.Token.StartTag startTag4 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType5 = startTag4.type;
        doctype0.type = tokenType5;
        java.lang.StringBuilder stringBuilder7 = doctype0.publicIdentifier;
        java.lang.StringBuilder stringBuilder8 = doctype0.systemIdentifier;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(stringBuilder2);
        org.junit.Assert.assertEquals(stringBuilder2.toString(), "");
        org.junit.Assert.assertTrue("'" + tokenType5 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType5.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(stringBuilder7);
        org.junit.Assert.assertEquals(stringBuilder7.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder8);
        org.junit.Assert.assertEquals(stringBuilder8.toString(), "");
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        boolean boolean10 = parseErrorList5.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        xmlTreeBuilder0.initialiseParse("<!---->", "hi!", parseErrorList5);
        org.jsoup.parser.CharacterReader characterReader13 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean15 = characterReader13.matches('\000');
        characterReader13.mark();
        int int17 = parseErrorList5.indexOf((java.lang.Object) characterReader13);
        parseErrorList5.trimToSize();
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder1 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int6 = parseErrorList5.getMaxSize();
        org.jsoup.nodes.Document document7 = htmlTreeBuilder1.parse("0: Doctype", "hi!", parseErrorList5);
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream12 = parseErrorList11.stream();
        boolean boolean13 = parseErrorList11.canAddError();
        org.jsoup.nodes.Document document14 = htmlTreeBuilder1.parse("EndTag", "hi!#", parseErrorList11);
        java.lang.String[] strArray22 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean23 = htmlTreeBuilder1.inScope("hi!#", strArray22);
        org.jsoup.parser.ParseErrorList parseErrorList28 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document29 = htmlTreeBuilder1.parse("0: Doctype", "", parseErrorList28);
        java.lang.String str30 = htmlTreeBuilder1.getBaseUri();
        org.jsoup.nodes.Element element31 = htmlTreeBuilder1.pop();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder32 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int37 = parseErrorList36.getMaxSize();
        org.jsoup.nodes.Document document38 = htmlTreeBuilder32.parse("0: Doctype", "hi!", parseErrorList36);
        boolean boolean39 = htmlTreeBuilder32.framesetOk();
        org.jsoup.nodes.Document document42 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder32.setHeadElement((org.jsoup.nodes.Element) document42);
        org.jsoup.parser.Token.StartTag startTag45 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType46 = startTag45.type;
        startTag45.appendTagName('#');
        boolean boolean49 = htmlTreeBuilder32.process((org.jsoup.parser.Token) startTag45);
        org.jsoup.nodes.Element element50 = htmlTreeBuilder1.insert(startTag45);
        org.jsoup.parser.Token.StartTag startTag51 = new org.jsoup.parser.Token.StartTag();
        startTag51.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag54 = startTag51.asStartTag();
        org.jsoup.parser.Token.Tag tag56 = startTag54.name("");
        org.jsoup.parser.Token.StartTag startTag57 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes58 = startTag57.getAttributes();
        tag56.attributes = attributes58;
        startTag45.attributes = attributes58;
        org.jsoup.parser.Token.StartTag startTag61 = new org.jsoup.parser.Token.StartTag("10: ", attributes58);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertNotNull(parseErrorStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertTrue("'" + tokenType46 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType46.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(element50);
        org.junit.Assert.assertNotNull(startTag54);
        org.junit.Assert.assertNotNull(tag56);
        org.junit.Assert.assertNotNull(attributes58);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.isInline();
        org.jsoup.parser.Tag tag6 = tag1.setSelfClosing();
        org.jsoup.parser.Tag tag7 = tag6.setSelfClosing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder8 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader9 = null;
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream12 = parseErrorList11.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor13 = parseErrorList11.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList11.iterator();
        org.jsoup.parser.Tokeniser tokeniser15 = new org.jsoup.parser.Tokeniser(characterReader9, parseErrorList11);
        org.jsoup.parser.Token.Tag tag16 = tokeniser15.tagPending;
        org.jsoup.parser.Token.Tag tag18 = tokeniser15.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype19 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype20 = doctype19.asDoctype();
        java.lang.String str21 = doctype19.tokenType();
        tokeniser15.emit((org.jsoup.parser.Token) doctype19);
        org.jsoup.parser.Token.Tag tag24 = tokeniser15.createTagPending(true);
        xmlTreeBuilder8.currentToken = tag24;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder26 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int31 = parseErrorList30.getMaxSize();
        org.jsoup.nodes.Document document32 = htmlTreeBuilder26.parse("0: Doctype", "hi!", parseErrorList30);
        boolean boolean33 = htmlTreeBuilder26.framesetOk();
        org.jsoup.nodes.Document document36 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder26.setHeadElement((org.jsoup.nodes.Element) document36);
        xmlTreeBuilder8.doc = document36;
        org.jsoup.parser.ParseErrorList parseErrorList42 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream43 = parseErrorList42.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor44 = parseErrorList42.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor45 = parseErrorList42.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList47 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int48 = parseErrorList47.getMaxSize();
        boolean boolean49 = parseErrorList42.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList47);
        xmlTreeBuilder8.initialiseParse("hi!#", "0: []", parseErrorList47);
        parseErrorList47.clear();
        boolean boolean52 = tag7.equals((java.lang.Object) parseErrorList47);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder53 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document54 = xmlTreeBuilder53.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder55 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList60 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList62 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream63 = parseErrorList62.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor64 = parseErrorList62.iterator();
        boolean boolean65 = parseErrorList60.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList62);
        xmlTreeBuilder55.initialiseParse("<!---->", "hi!", parseErrorList60);
        xmlTreeBuilder53.errors = parseErrorList60;
        org.jsoup.parser.ParseErrorList parseErrorList71 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream72 = parseErrorList71.stream();
        xmlTreeBuilder53.initialiseParse("a", "[]", parseErrorList71);
        org.jsoup.parser.CharacterReader characterReader74 = null;
        org.jsoup.parser.ParseErrorList parseErrorList76 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream77 = parseErrorList76.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor78 = parseErrorList76.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor79 = parseErrorList76.iterator();
        org.jsoup.parser.Tokeniser tokeniser80 = new org.jsoup.parser.Tokeniser(characterReader74, parseErrorList76);
        org.jsoup.parser.Token.Tag tag81 = tokeniser80.tagPending;
        tokeniser80.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype84 = tokeniser80.doctypePending;
        tokeniser80.createCommentPending();
        org.jsoup.parser.Token.Comment comment86 = tokeniser80.commentPending;
        boolean boolean87 = parseErrorList71.remove((java.lang.Object) tokeniser80);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream88 = parseErrorList71.parallelStream();
        boolean boolean89 = parseErrorList47.contains((java.lang.Object) parseErrorList71);
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(tag6);
        org.junit.Assert.assertNotNull(tag7);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertNotNull(parseErrorStream12);
        org.junit.Assert.assertNotNull(parseErrorItor13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertNull(tag16);
        org.junit.Assert.assertNotNull(tag18);
        org.junit.Assert.assertNotNull(doctype20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Doctype" + "'", str21, "Doctype");
        org.junit.Assert.assertNotNull(tag24);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNotNull(parseErrorList42);
        org.junit.Assert.assertNotNull(parseErrorStream43);
        org.junit.Assert.assertNotNull(parseErrorItor44);
        org.junit.Assert.assertNotNull(parseErrorItor45);
        org.junit.Assert.assertNotNull(parseErrorList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(document54);
        org.junit.Assert.assertNotNull(parseErrorList62);
        org.junit.Assert.assertNotNull(parseErrorStream63);
        org.junit.Assert.assertNotNull(parseErrorItor64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(parseErrorList71);
        org.junit.Assert.assertNotNull(parseErrorStream72);
        org.junit.Assert.assertNotNull(parseErrorList76);
        org.junit.Assert.assertNotNull(parseErrorStream77);
        org.junit.Assert.assertNotNull(parseErrorItor78);
        org.junit.Assert.assertNotNull(parseErrorItor79);
        org.junit.Assert.assertNull(tag81);
        org.junit.Assert.assertNull(doctype84);
        org.junit.Assert.assertNotNull(comment86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(parseErrorStream88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("<Doctype>");
        org.junit.Assert.assertNotNull(tag1);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        boolean boolean9 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList7);
        org.jsoup.parser.Token.Tag tag12 = tokeniser10.createTagPending(true);
        tag12.appendAttributeName("Doctype");
        java.lang.String str15 = tag12.tagName;
        tag12.appendTagName("hi!");
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.jsoup.parser.Token.Character character1 = new org.jsoup.parser.Token.Character("100: ");
        boolean boolean2 = character1.isComment();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        java.lang.String str14 = doctype10.getPublicIdentifier();
        boolean boolean15 = doctype10.forceQuirks;
        java.lang.String str16 = doctype10.getSystemIdentifier();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder1 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int6 = parseErrorList5.getMaxSize();
        org.jsoup.nodes.Document document7 = htmlTreeBuilder1.parse("0: Doctype", "hi!", parseErrorList5);
        htmlTreeBuilder1.resetInsertionMode();
        org.jsoup.nodes.Element element9 = htmlTreeBuilder1.currentElement();
        boolean boolean11 = htmlTreeBuilder1.inButtonScope("-1: []");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream23 = parseErrorList22.stream();
        boolean boolean24 = parseErrorList22.canAddError();
        org.jsoup.nodes.Document document25 = htmlTreeBuilder12.parse("EndTag", "hi!#", parseErrorList22);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState26 = null;
        htmlTreeBuilder12.transition(htmlTreeBuilderState26);
        org.jsoup.nodes.Document document28 = htmlTreeBuilder12.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder29 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document30 = xmlTreeBuilder29.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder31 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList38.iterator();
        boolean boolean41 = parseErrorList36.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        xmlTreeBuilder31.initialiseParse("<!---->", "hi!", parseErrorList36);
        xmlTreeBuilder29.errors = parseErrorList36;
        org.jsoup.parser.ParseErrorList parseErrorList47 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream48 = parseErrorList47.stream();
        xmlTreeBuilder29.initialiseParse("a", "[]", parseErrorList47);
        org.jsoup.parser.Token.Character character51 = new org.jsoup.parser.Token.Character("-1: []");
        xmlTreeBuilder29.insert(character51);
        java.lang.String str53 = character51.toString();
        htmlTreeBuilder12.insert(character51);
        htmlTreeBuilder1.insert(character51);
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(character51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertNotNull(element9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertNotNull(parseErrorStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNull(document30);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(parseErrorList47);
        org.junit.Assert.assertNotNull(parseErrorStream48);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1: []" + "'", str53, "-1: []");
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.Comment comment12 = new org.jsoup.parser.Token.Comment();
        java.lang.String str13 = comment12.toString();
        boolean boolean14 = comment12.isCharacter();
        htmlTreeBuilder0.insert(comment12);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder16 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.nodes.Document document22 = htmlTreeBuilder16.parse("0: Doctype", "hi!", parseErrorList20);
        boolean boolean23 = htmlTreeBuilder16.framesetOk();
        org.jsoup.parser.Parser parser24 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser26 = parser24.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document29 = parser24.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document32 = parser24.parseInput("<hi!>", "[]");
        htmlTreeBuilder16.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        boolean boolean34 = htmlTreeBuilder16.isFragmentParsing();
        htmlTreeBuilder16.clearStackToTableContext();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder36 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int41 = parseErrorList40.getMaxSize();
        org.jsoup.nodes.Document document42 = htmlTreeBuilder36.parse("0: Doctype", "hi!", parseErrorList40);
        htmlTreeBuilder36.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray45 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList46 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList46, characterArray45);
        htmlTreeBuilder36.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList46);
        boolean boolean49 = htmlTreeBuilder36.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag51 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement53 = htmlTreeBuilder36.insertForm(startTag51, true);
        org.jsoup.nodes.Element element54 = htmlTreeBuilder16.insert(startTag51);
        boolean boolean55 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag51);
        htmlTreeBuilder0.clearStackToTableRowContext();
        htmlTreeBuilder0.markInsertionMode();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<!---->" + "'", str13, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parser24);
        org.junit.Assert.assertNotNull(parser26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNotNull(characterArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(formElement53);
        org.junit.Assert.assertNotNull(element54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.nodes.Document document16 = htmlTreeBuilder0.doc;
        boolean boolean18 = htmlTreeBuilder0.inTableScope("<!---->");
        htmlTreeBuilder0.clearStackToTableBodyContext();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder20 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader21 = null;
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream24 = parseErrorList23.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList23.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList23.iterator();
        org.jsoup.parser.Tokeniser tokeniser27 = new org.jsoup.parser.Tokeniser(characterReader21, parseErrorList23);
        xmlTreeBuilder20.tokeniser = tokeniser27;
        org.jsoup.parser.Tokeniser tokeniser29 = xmlTreeBuilder20.tokeniser;
        org.jsoup.parser.ITokeniserState iTokeniserState30 = tokeniser29.getState();
        org.jsoup.parser.Token.Comment comment31 = new org.jsoup.parser.Token.Comment();
        java.lang.String str32 = comment31.toString();
        boolean boolean33 = comment31.isCharacter();
        boolean boolean34 = comment31.bogus;
        tokeniser29.commentPending = comment31;
        htmlTreeBuilder0.insert(comment31);
        boolean boolean37 = comment31.bogus;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertNotNull(parseErrorStream24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(tokeniser29);
        org.junit.Assert.assertNotNull(iTokeniserState30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<!---->" + "'", str32, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("<!---->", "\uffff>");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.Token.Tag tag10 = tokeniser7.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype11 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype12 = doctype11.asDoctype();
        java.lang.String str13 = doctype11.tokenType();
        tokeniser7.emit((org.jsoup.parser.Token) doctype11);
        org.jsoup.parser.Token.Tag tag16 = tokeniser7.createTagPending(true);
        xmlTreeBuilder0.currentToken = tag16;
        org.jsoup.nodes.Attributes attributes18 = tag16.attributes;
        tag16.newAttribute();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.EndTag endTag20 = tag16.asEndTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$EndTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(tag10);
        org.junit.Assert.assertNotNull(doctype12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Doctype" + "'", str13, "Doctype");
        org.junit.Assert.assertNotNull(tag16);
        org.junit.Assert.assertNotNull(attributes18);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        boolean boolean11 = doctype10.isCharacter();
        boolean boolean12 = doctype10.isEndTag();
        boolean boolean13 = doctype10.isCharacter();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        java.lang.String str15 = doctype10.getSystemIdentifier();
        java.lang.String str16 = doctype10.getPublicIdentifier();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches("[100: ]");
        characterReader1.advance();
        java.lang.String str5 = characterReader1.consumeAsString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "t" + "'", str5, "t");
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        java.lang.String str2 = characterReader1.consumeToEnd();
        int int4 = characterReader1.nextIndexOf('a');
        java.lang.String str5 = characterReader1.consumeDigitSequence();
        boolean boolean7 = characterReader1.matchesIgnoreCase("0: []");
        characterReader1.mark();
        java.lang.String str9 = characterReader1.consumeToEnd();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "StartTag" + "'", str2, "StartTag");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder13.setHeadElement((org.jsoup.nodes.Element) document23);
        org.jsoup.nodes.Element element25 = htmlTreeBuilder13.pop();
        htmlTreeBuilder0.push(element25);
        org.jsoup.parser.Token token27 = htmlTreeBuilder0.currentToken;
        org.jsoup.nodes.FormElement formElement28 = htmlTreeBuilder0.getFormElement();
        org.jsoup.nodes.Document document31 = htmlTreeBuilder0.parse("\uffff>", "Doctype");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(token27);
        org.junit.Assert.assertNull(formElement28);
        org.junit.Assert.assertNotNull(document31);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement14 = htmlTreeBuilder0.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder15 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        org.jsoup.nodes.Document document21 = htmlTreeBuilder15.parse("0: Doctype", "hi!", parseErrorList19);
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream26 = parseErrorList25.stream();
        boolean boolean27 = parseErrorList25.canAddError();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder15.parse("EndTag", "hi!#", parseErrorList25);
        java.lang.String[] strArray36 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean37 = htmlTreeBuilder15.inScope("hi!#", strArray36);
        org.jsoup.parser.ParseErrorList parseErrorList42 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document43 = htmlTreeBuilder15.parse("0: Doctype", "", parseErrorList42);
        boolean boolean44 = htmlTreeBuilder0.onStack((org.jsoup.nodes.Element) document43);
        htmlTreeBuilder0.clearStackToTableBodyContext();
        htmlTreeBuilder0.clearStackToTableBodyContext();
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(formElement14);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertNotNull(parseErrorStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.markInsertionMode();
        boolean boolean22 = htmlTreeBuilder0.inScope("StartTag");
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document26);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        htmlTreeBuilder28.generateImpliedEndTags("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder37 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int42 = parseErrorList41.getMaxSize();
        org.jsoup.nodes.Document document43 = htmlTreeBuilder37.parse("0: Doctype", "hi!", parseErrorList41);
        boolean boolean44 = htmlTreeBuilder37.framesetOk();
        org.jsoup.nodes.Document document47 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder37.setHeadElement((org.jsoup.nodes.Element) document47);
        org.jsoup.nodes.Document document51 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder37.setHeadElement((org.jsoup.nodes.Element) document51);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder54 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList58 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int59 = parseErrorList58.getMaxSize();
        org.jsoup.nodes.Document document60 = htmlTreeBuilder54.parse("0: Doctype", "hi!", parseErrorList58);
        org.jsoup.parser.ParseErrorList parseErrorList64 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream65 = parseErrorList64.stream();
        boolean boolean66 = parseErrorList64.canAddError();
        org.jsoup.nodes.Document document67 = htmlTreeBuilder54.parse("EndTag", "hi!#", parseErrorList64);
        java.lang.String[] strArray75 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean76 = htmlTreeBuilder54.inScope("hi!#", strArray75);
        boolean boolean77 = htmlTreeBuilder37.inScope("hi!#", strArray75);
        htmlTreeBuilder28.popStackToClose(strArray75);
        boolean boolean79 = htmlTreeBuilder0.inScope(strArray75);
        org.jsoup.parser.Token.Doctype doctype80 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str81 = doctype80.getSystemIdentifier();
        boolean boolean82 = doctype80.forceQuirks;
        java.lang.String str83 = doctype80.getPublicIdentifier();
        java.lang.StringBuilder stringBuilder84 = doctype80.systemIdentifier;
        boolean boolean85 = htmlTreeBuilder0.process((org.jsoup.parser.Token) doctype80);
        java.lang.StringBuilder stringBuilder86 = doctype80.name;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(document51);
        org.junit.Assert.assertNotNull(parseErrorList58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(document60);
        org.junit.Assert.assertNotNull(parseErrorList64);
        org.junit.Assert.assertNotNull(parseErrorStream65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(document67);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(stringBuilder84);
        org.junit.Assert.assertEquals(stringBuilder84.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(stringBuilder86);
        org.junit.Assert.assertEquals(stringBuilder86.toString(), "");
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList9 = xmlTreeBuilder0.stack;
        org.jsoup.parser.Parser parser10 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) xmlTreeBuilder0);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder11 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int16 = parseErrorList15.getMaxSize();
        org.jsoup.nodes.Document document17 = htmlTreeBuilder11.parse("0: Doctype", "hi!", parseErrorList15);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState18 = null;
        htmlTreeBuilder11.transition(htmlTreeBuilderState18);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder22 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int27 = parseErrorList26.getMaxSize();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder22.parse("0: Doctype", "hi!", parseErrorList26);
        htmlTreeBuilder22.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray31 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList32 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList32, characterArray31);
        htmlTreeBuilder22.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList32);
        boolean boolean35 = htmlTreeBuilder22.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag37 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement39 = htmlTreeBuilder22.insertForm(startTag37, true);
        htmlTreeBuilder22.baseUri = "[]";
        org.jsoup.parser.CharacterReader characterReader44 = null;
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream47 = parseErrorList46.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor48 = parseErrorList46.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList46.iterator();
        org.jsoup.parser.Tokeniser tokeniser50 = new org.jsoup.parser.Tokeniser(characterReader44, parseErrorList46);
        htmlTreeBuilder22.initialiseParse("St", "<Doctype>", parseErrorList46);
        org.jsoup.nodes.Document document52 = htmlTreeBuilder11.parse("\uffff", "<hi!#>", parseErrorList46);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder53 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList57 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int58 = parseErrorList57.getMaxSize();
        org.jsoup.nodes.Document document59 = htmlTreeBuilder53.parse("0: Doctype", "hi!", parseErrorList57);
        boolean boolean60 = htmlTreeBuilder53.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState61 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder53.error(htmlTreeBuilderState61);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState63 = null;
        htmlTreeBuilder53.transition(htmlTreeBuilderState63);
        htmlTreeBuilder53.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList67 = htmlTreeBuilder53.getPendingTableCharacters();
        htmlTreeBuilder11.setPendingTableCharacters(characterList67);
        org.jsoup.parser.Parser parser69 = parser10.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder11);
        boolean boolean70 = parser10.isTrackErrors();
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(elementList9);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(characterArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(formElement39);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(parseErrorStream47);
        org.junit.Assert.assertNotNull(parseErrorItor48);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertNotNull(parseErrorList57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState61);
        org.junit.Assert.assertNotNull(characterList67);
        org.junit.Assert.assertNotNull(parser69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        int int9 = parseErrorList1.indexOf((java.lang.Object) 10.0f);
        java.lang.Object obj10 = parseErrorList1.clone();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "[]");
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.nodes.Document document16 = htmlTreeBuilder0.doc;
        boolean boolean18 = htmlTreeBuilder0.inTableScope("<!---->");
        boolean boolean19 = htmlTreeBuilder0.isFragmentParsing();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("Comment");
        startTag1.newAttribute();
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\uffff');
        boolean boolean5 = characterReader1.containsIgnoreCase("0: []");
        boolean boolean7 = characterReader1.matchesIgnoreCase("Comment");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("EndTag");
        boolean boolean2 = startTag1.isEndTag();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor29 = parseErrorList26.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        boolean boolean33 = parseErrorList26.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        xmlTreeBuilder3.initialiseParse("<!---->", "", parseErrorList26);
        int int35 = parseErrorList26.size();
        org.jsoup.parser.CharacterReader characterReader37 = new org.jsoup.parser.CharacterReader("StartTag");
        java.lang.String str38 = characterReader37.consumeToEnd();
        int int40 = characterReader37.nextIndexOf((java.lang.CharSequence) "StartTag");
        char char41 = characterReader37.current();
        int int42 = parseErrorList26.lastIndexOf((java.lang.Object) char41);
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertNotNull(parseErrorItor29);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "StartTag" + "'", str38, "StartTag");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + char41 + "' != '" + '\uffff' + "'", char41 == '\uffff');
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.isInline();
        org.jsoup.parser.Tag tag6 = tag1.setSelfClosing();
        org.jsoup.parser.Tag tag7 = tag6.setSelfClosing();
        boolean boolean8 = tag7.isData();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(tag6);
        org.junit.Assert.assertNotNull(tag7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = htmlTreeBuilder0.originalState();
        org.jsoup.nodes.Element element15 = htmlTreeBuilder0.pop();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        org.jsoup.parser.Token.Comment comment30 = new org.jsoup.parser.Token.Comment();
        java.lang.String str31 = comment30.toString();
        boolean boolean32 = comment30.isCharacter();
        htmlTreeBuilder18.insert(comment30);
        org.jsoup.parser.Parser parser34 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder18);
        org.jsoup.nodes.Document document37 = parser34.parseInput("hi!", "[]");
        java.util.List<org.jsoup.nodes.Node> nodeList39 = org.jsoup.parser.Parser.parseFragment("-1: []", (org.jsoup.nodes.Element) document37, "");
        org.jsoup.parser.CharacterReader characterReader41 = null;
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor45 = parseErrorList43.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList43.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList48 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int49 = parseErrorList48.getMaxSize();
        boolean boolean50 = parseErrorList43.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList48);
        org.jsoup.parser.Tokeniser tokeniser51 = new org.jsoup.parser.Tokeniser(characterReader41, parseErrorList48);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor52 = parseErrorList48.iterator();
        java.util.List<org.jsoup.nodes.Node> nodeList53 = htmlTreeBuilder0.parseFragment("0: []", (org.jsoup.nodes.Element) document37, "0: []", parseErrorList48);
        org.jsoup.parser.ParseError parseError57 = new org.jsoup.parser.ParseError((int) '4', "ndTag");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError58 = parseErrorList48.set((int) (short) 0, parseError57);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(htmlTreeBuilderState14);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<!---->" + "'", str31, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertNotNull(nodeList39);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertNotNull(parseErrorItor45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertNotNull(parseErrorList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(parseErrorItor52);
        org.junit.Assert.assertNotNull(nodeList53);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        java.lang.StringBuilder stringBuilder9 = null;
        tokeniser7.dataBuffer = stringBuilder9;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        tokeniser7.emit(charArray14);
        org.jsoup.parser.Token.Comment comment17 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean20 = characterReader19.matchesLetter();
        miniSoupTokeniserState0.read(tokeniser7, characterReader19);
        org.jsoup.parser.TokenQueue tokenQueue23 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean24 = tokenQueue23.isEmpty();
        boolean boolean25 = tokenQueue23.consumeWhitespace();
        java.lang.String str26 = tokenQueue23.consumeWord();
        boolean boolean27 = tokenQueue23.matchesWhitespace();
        java.lang.String[] strArray32 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str33 = tokenQueue23.consumeToAny(strArray32);
        org.jsoup.parser.CharacterReader characterReader34 = null;
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream37 = parseErrorList36.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor38 = parseErrorList36.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor39 = parseErrorList36.iterator();
        org.jsoup.parser.Tokeniser tokeniser40 = new org.jsoup.parser.Tokeniser(characterReader34, parseErrorList36);
        org.jsoup.parser.Token.Tag tag41 = tokeniser40.tagPending;
        java.lang.StringBuilder stringBuilder42 = null;
        tokeniser40.dataBuffer = stringBuilder42;
        org.jsoup.parser.Token.EndTag endTag44 = new org.jsoup.parser.Token.EndTag();
        char[] charArray47 = new char[] { '#', '#' };
        endTag44.appendAttributeValue(charArray47);
        tokeniser40.emit(charArray47);
        boolean boolean50 = tokenQueue23.matchesAny(charArray47);
        tokeniser7.emit(charArray47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = tokeniser7.appropriateEndTagName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "EndTag" + "'", str26, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertNotNull(parseErrorStream37);
        org.junit.Assert.assertNotNull(parseErrorItor38);
        org.junit.Assert.assertNotNull(parseErrorItor39);
        org.junit.Assert.assertNull(tag41);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.Tag tag11 = tokeniser6.createTagPending(false);
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.Tokeniser tokeniser18 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList14);
        org.jsoup.parser.Token.Tag tag19 = tokeniser18.tagPending;
        tokeniser18.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype22 = tokeniser18.doctypePending;
        tokeniser18.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype24 = tokeniser18.doctypePending;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState25 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype26 = new org.jsoup.parser.Token.Doctype();
        boolean boolean27 = doctype26.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = null;
        boolean boolean29 = htmlTreeBuilderState25.process((org.jsoup.parser.Token) doctype26, htmlTreeBuilder28);
        tokeniser18.doctypePending = doctype26;
        tokeniser6.doctypePending = doctype26;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = tokeniser6.unescapeEntities(false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNull(tag19);
        org.junit.Assert.assertNull(doctype22);
        org.junit.Assert.assertNull(doctype24);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList1.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int7 = parseErrorList6.getMaxSize();
        boolean boolean8 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.parser.ParseError> parseErrorList11 = parseErrorList6.subList(10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement14 = htmlTreeBuilder0.getFormElement();
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList15 = htmlTreeBuilder0.getStack();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder16 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.nodes.Document document22 = htmlTreeBuilder16.parse("0: Doctype", "hi!", parseErrorList20);
        boolean boolean23 = htmlTreeBuilder16.framesetOk();
        org.jsoup.parser.Parser parser24 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser26 = parser24.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document29 = parser24.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document32 = parser24.parseInput("<hi!>", "[]");
        htmlTreeBuilder16.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        java.lang.String[] strArray34 = new java.lang.String[] {};
        boolean boolean35 = htmlTreeBuilder16.inScope(strArray34);
        htmlTreeBuilder16.markInsertionMode();
        boolean boolean38 = htmlTreeBuilder16.inScope("StartTag");
        htmlTreeBuilder16.markInsertionMode();
        org.jsoup.nodes.Document document42 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder16.setHeadElement((org.jsoup.nodes.Element) document42);
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document42);
        org.jsoup.parser.Token.EndTag endTag45 = new org.jsoup.parser.Token.EndTag();
        java.lang.String str46 = endTag45.tagName;
        htmlTreeBuilder0.currentToken = endTag45;
        endTag45.appendTagName("<[100: ]>");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(formElement14);
        org.junit.Assert.assertNotNull(elementList15);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parser24);
        org.junit.Assert.assertNotNull(parser26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
        org.jsoup.parser.TreeBuilder treeBuilder2 = null;
        org.jsoup.parser.Parser parser3 = parser1.setTreeBuilder(treeBuilder2);
        java.util.List<org.jsoup.parser.ParseError> parseErrorList4 = parser3.getErrors();
        org.jsoup.parser.Parser parser6 = parser3.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.TreeBuilder treeBuilder7 = parser6.getTreeBuilder();
        org.jsoup.parser.TreeBuilder treeBuilder8 = parser6.getTreeBuilder();
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parser6);
        org.junit.Assert.assertNull(treeBuilder7);
        org.junit.Assert.assertNull(treeBuilder8);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isKnownTag();
        boolean boolean5 = tag1.isKnownTag();
        boolean boolean6 = tag1.isBlock();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.resetInsertionMode();
        htmlTreeBuilder0.popStackToBefore("EndTag");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = htmlTreeBuilder0.inSelectScope("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Should not be reachable");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList18);
        org.jsoup.parser.Token.Tag tag23 = tokeniser22.tagPending;
        tokeniser22.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype26 = tokeniser22.doctypePending;
        tokeniser22.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype28 = tokeniser22.doctypePending;
        htmlTreeBuilder0.tokeniser = tokeniser22;
        tokeniser22.createTempBuffer();
        boolean boolean31 = tokeniser22.isAppropriateEndTagToken();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNull(tag23);
        org.junit.Assert.assertNull(doctype26);
        org.junit.Assert.assertNull(doctype28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("65533: <hi!#>", "StartTag");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.isEmpty();
        boolean boolean6 = tag1.isEmpty();
        boolean boolean7 = tag1.canContainBlock();
        boolean boolean8 = tag1.isBlock();
        boolean boolean9 = tag1.formatAsBlock();
        boolean boolean10 = tag1.isBlock();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        htmlTreeBuilder0.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        org.jsoup.nodes.Element element31 = htmlTreeBuilder18.getActiveFormattingElement("0: Doctype");
        htmlTreeBuilder18.runParser();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder35 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader36 = null;
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList38.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor41 = parseErrorList38.iterator();
        org.jsoup.parser.Tokeniser tokeniser42 = new org.jsoup.parser.Tokeniser(characterReader36, parseErrorList38);
        org.jsoup.parser.Token.Tag tag43 = tokeniser42.tagPending;
        org.jsoup.parser.Token.Tag tag45 = tokeniser42.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype46 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype47 = doctype46.asDoctype();
        java.lang.String str48 = doctype46.tokenType();
        tokeniser42.emit((org.jsoup.parser.Token) doctype46);
        org.jsoup.parser.Token.Tag tag51 = tokeniser42.createTagPending(true);
        xmlTreeBuilder35.currentToken = tag51;
        org.jsoup.nodes.Attributes attributes53 = tag51.attributes;
        org.jsoup.parser.Token.StartTag startTag54 = new org.jsoup.parser.Token.StartTag("", attributes53);
        org.jsoup.parser.Token.StartTag startTag55 = new org.jsoup.parser.Token.StartTag("0: Doctype", attributes53);
        startTag55.appendAttributeName('\uffff');
        org.jsoup.nodes.FormElement formElement59 = htmlTreeBuilder18.insertForm(startTag55, true);
        htmlTreeBuilder0.setFormElement(formElement59);
        org.jsoup.parser.Token.EndTag endTag62 = new org.jsoup.parser.Token.EndTag("Doctype");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder63 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList67 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int68 = parseErrorList67.getMaxSize();
        org.jsoup.nodes.Document document69 = htmlTreeBuilder63.parse("0: Doctype", "hi!", parseErrorList67);
        boolean boolean70 = htmlTreeBuilder63.framesetOk();
        org.jsoup.nodes.Document document73 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder63.setHeadElement((org.jsoup.nodes.Element) document73);
        org.jsoup.parser.Token.StartTag startTag76 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType77 = startTag76.type;
        startTag76.appendTagName('#');
        boolean boolean80 = htmlTreeBuilder63.process((org.jsoup.parser.Token) startTag76);
        org.jsoup.parser.CharacterReader characterReader82 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader82.advance();
        boolean boolean85 = characterReader82.matchConsume("<hi!>");
        htmlTreeBuilder63.reader = characterReader82;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState87 = htmlTreeBuilder63.state();
        boolean boolean88 = htmlTreeBuilder0.process((org.jsoup.parser.Token) endTag62, htmlTreeBuilderState87);
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        boolean boolean90 = htmlTreeBuilder0.isFosterInserts();
        java.lang.String str91 = htmlTreeBuilder0.toString();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNull(element31);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
        org.junit.Assert.assertNotNull(parseErrorItor41);
        org.junit.Assert.assertNull(tag43);
        org.junit.Assert.assertNotNull(tag45);
        org.junit.Assert.assertNotNull(doctype47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Doctype" + "'", str48, "Doctype");
        org.junit.Assert.assertNotNull(tag51);
        org.junit.Assert.assertNotNull(attributes53);
        org.junit.Assert.assertNotNull(formElement59);
        org.junit.Assert.assertNotNull(parseErrorList67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(document69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(document73);
        org.junit.Assert.assertTrue("'" + tokenType77 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType77.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "TreeBuilder{currentToken=</Doctype>, state=InBody, currentElement=<body>\n 0: Doctype\n</body>}" + "'", str91, "TreeBuilder{currentToken=</Doctype>, state=InBody, currentElement=<body>\n 0: Doctype\n</body>}");
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        org.jsoup.parser.ParseError parseError2 = new org.jsoup.parser.ParseError((int) '\000', "artTag");
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        parseErrorList7.trimToSize();
        int int16 = parseErrorList7.size();
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        org.jsoup.parser.Token.Comment comment0 = new org.jsoup.parser.Token.Comment();
        java.lang.String str1 = comment0.toString();
        java.lang.StringBuilder stringBuilder2 = comment0.data;
        boolean boolean3 = comment0.isEndTag();
        boolean boolean4 = comment0.isComment();
        java.lang.String str5 = comment0.getData();
        org.jsoup.parser.Token.TokenType tokenType6 = org.jsoup.parser.Token.TokenType.StartTag;
        comment0.type = tokenType6;
        org.jsoup.parser.Token.TokenType tokenType8 = comment0.type;
        java.lang.String str9 = comment0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "<!---->" + "'", str1, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder2);
        org.junit.Assert.assertEquals(stringBuilder2.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + tokenType6 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType6.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + tokenType8 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType8.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "<!---->" + "'", str9, "<!---->");
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        java.util.List<org.jsoup.nodes.Node> nodeList2 = org.jsoup.parser.Parser.parseXmlFragment("", "[100: ]");
        org.junit.Assert.assertNotNull(nodeList2);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag("hi!");
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        java.lang.StringBuilder stringBuilder9 = null;
        tokeniser7.dataBuffer = stringBuilder9;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        tokeniser7.emit(charArray14);
        org.jsoup.parser.Token.Comment comment17 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean20 = characterReader19.matchesLetter();
        miniSoupTokeniserState0.read(tokeniser7, characterReader19);
        tokeniser7.acknowledgeSelfClosingFlag();
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList9 = xmlTreeBuilder0.stack;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder10 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int15 = parseErrorList14.getMaxSize();
        org.jsoup.nodes.Document document16 = htmlTreeBuilder10.parse("0: Doctype", "hi!", parseErrorList14);
        boolean boolean17 = htmlTreeBuilder10.framesetOk();
        org.jsoup.parser.Parser parser18 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser20 = parser18.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document23 = parser18.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document26 = parser18.parseInput("<hi!>", "[]");
        htmlTreeBuilder10.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document26);
        boolean boolean28 = htmlTreeBuilder10.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder29 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList34 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream37 = parseErrorList36.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor38 = parseErrorList36.iterator();
        boolean boolean39 = parseErrorList34.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36);
        xmlTreeBuilder29.initialiseParse("<!---->", "hi!", parseErrorList34);
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document45 = xmlTreeBuilder29.parse("", "[]", parseErrorList44);
        boolean boolean46 = htmlTreeBuilder10.isInActiveFormattingElements((org.jsoup.nodes.Element) document45);
        org.jsoup.nodes.Element element48 = htmlTreeBuilder10.insert("<!---->");
        org.jsoup.parser.Token.StartTag startTag50 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag50.appendTagName("hi!");
        startTag50.appendAttributeName('4');
        boolean boolean55 = htmlTreeBuilder10.process((org.jsoup.parser.Token) startTag50);
        org.jsoup.parser.Token.Tag tag57 = startTag50.name("</hi![]>");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element58 = xmlTreeBuilder0.insert(startTag50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(elementList9);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parser18);
        org.junit.Assert.assertNotNull(parser20);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertNotNull(parseErrorStream37);
        org.junit.Assert.assertNotNull(parseErrorItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(element48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(tag57);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        org.jsoup.parser.ITokeniserState iTokeniserState14 = tokeniser6.getState();
        org.jsoup.parser.Token.Comment comment15 = new org.jsoup.parser.Token.Comment();
        java.lang.String str16 = comment15.toString();
        java.lang.StringBuilder stringBuilder17 = comment15.data;
        boolean boolean18 = comment15.isEndTag();
        boolean boolean19 = comment15.isComment();
        tokeniser6.commentPending = comment15;
        tokeniser6.emit('a');
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<!---->" + "'", str16, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder17);
        org.junit.Assert.assertEquals(stringBuilder17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        startTag0.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag3 = startTag0.asStartTag();
        org.jsoup.parser.Token.Tag tag5 = startTag3.name("");
        org.jsoup.parser.Token.Tag tag7 = tag5.name("-1: []");
        boolean boolean8 = tag7.isEOF();
        tag7.tagName = "<Doctype>";
        tag7.appendAttributeName('\uffff');
        org.junit.Assert.assertNotNull(startTag3);
        org.junit.Assert.assertNotNull(tag5);
        org.junit.Assert.assertNotNull(tag7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList1.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int7 = parseErrorList6.getMaxSize();
        boolean boolean8 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList6);
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        boolean boolean16 = parseErrorList1.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        org.jsoup.parser.ParseError parseError19 = new org.jsoup.parser.ParseError((int) (short) 10, "<hi!>");
        boolean boolean20 = parseErrorList10.add(parseError19);
        parseErrorList10.ensureCapacity((int) (byte) 0);
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.nodes.Document document22 = parser19.parseInput("hi!", "[]");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder23 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList27 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int28 = parseErrorList27.getMaxSize();
        org.jsoup.nodes.Document document29 = htmlTreeBuilder23.parse("0: Doctype", "hi!", parseErrorList27);
        htmlTreeBuilder23.resetInsertionMode();
        htmlTreeBuilder23.popStackToBefore("EndTag");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState33 = htmlTreeBuilder23.state();
        htmlTreeBuilder23.runParser();
        org.jsoup.parser.Parser parser35 = parser19.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder23);
        org.jsoup.parser.CharacterReader characterReader36 = htmlTreeBuilder23.reader;
        characterReader36.unconsume();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(parseErrorList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState33);
        org.junit.Assert.assertNotNull(parser35);
        org.junit.Assert.assertNotNull(characterReader36);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("t");
        java.lang.String str2 = characterReader1.toString();
        org.jsoup.parser.TokenQueue tokenQueue4 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean5 = tokenQueue4.isEmpty();
        boolean boolean6 = tokenQueue4.consumeWhitespace();
        java.lang.String str7 = tokenQueue4.consumeWord();
        boolean boolean8 = tokenQueue4.matchesWhitespace();
        java.lang.String[] strArray13 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str14 = tokenQueue4.consumeToAny(strArray13);
        org.jsoup.parser.CharacterReader characterReader15 = null;
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream18 = parseErrorList17.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList17.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList17.iterator();
        org.jsoup.parser.Tokeniser tokeniser21 = new org.jsoup.parser.Tokeniser(characterReader15, parseErrorList17);
        org.jsoup.parser.Token.Tag tag22 = tokeniser21.tagPending;
        java.lang.StringBuilder stringBuilder23 = null;
        tokeniser21.dataBuffer = stringBuilder23;
        org.jsoup.parser.Token.EndTag endTag25 = new org.jsoup.parser.Token.EndTag();
        char[] charArray28 = new char[] { '#', '#' };
        endTag25.appendAttributeValue(charArray28);
        tokeniser21.emit(charArray28);
        boolean boolean31 = tokenQueue4.matchesAny(charArray28);
        java.lang.String str32 = characterReader1.consumeToAny(charArray28);
        java.lang.String str33 = characterReader1.consumeToEnd();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "t" + "'", str2, "t");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "EndTag" + "'", str7, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertNotNull(parseErrorStream18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNull(tag22);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "t" + "'", str32, "t");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        boolean boolean13 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag15 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement17 = htmlTreeBuilder0.insertForm(startTag15, true);
        org.jsoup.parser.Parser parser18 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.nodes.Document document21 = parser18.parseInput("", "hi!");
        org.jsoup.nodes.Document document24 = parser18.parseInput("hi!", "hi!");
        htmlTreeBuilder0.doc = document24;
        java.lang.String str26 = htmlTreeBuilder0.toString();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(formElement17);
        org.junit.Assert.assertNotNull(parser18);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(document24);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean4 = characterReader1.matchesDigit();
        java.lang.String str5 = characterReader1.toString();
        boolean boolean7 = characterReader1.matchesIgnoreCase("[100: ]");
        org.jsoup.parser.TokenQueue tokenQueue9 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean10 = tokenQueue9.matchesStartTag();
        char[] charArray17 = new char[] { ' ', '4', '\000', ' ', '\uffff', 'a' };
        boolean boolean18 = tokenQueue9.matchesAny(charArray17);
        java.lang.String str19 = characterReader1.consumeToAny(charArray17);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charArray17);
// flaky:         org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " 4\000\uffffa");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " 4\000\uffffa");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ , 4, \000\uffff, a]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "St" + "'", str19, "St");
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        boolean boolean1 = org.jsoup.parser.Tag.isKnownTag("\ufffd>");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag();
        startTag1.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag4 = startTag1.asStartTag();
        org.jsoup.parser.Token.Tag tag6 = startTag4.name("");
        org.jsoup.parser.Token.StartTag startTag7 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes8 = startTag7.getAttributes();
        tag6.attributes = attributes8;
        org.jsoup.parser.Token.StartTag startTag10 = new org.jsoup.parser.Token.StartTag("-1: []", attributes8);
        startTag10.appendTagName('E');
        java.lang.String str13 = startTag10.name();
        org.junit.Assert.assertNotNull(startTag4);
        org.junit.Assert.assertNotNull(tag6);
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1: []E" + "'", str13, "-1: []E");
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        tokenQueue1.advance();
        boolean boolean6 = tokenQueue1.isEmpty();
        boolean boolean7 = tokenQueue1.matchesWord();
        boolean boolean8 = tokenQueue1.matchesWhitespace();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str1 = doctype0.getSystemIdentifier();
        boolean boolean2 = doctype0.forceQuirks;
        java.lang.StringBuilder stringBuilder3 = doctype0.name;
        java.lang.StringBuilder stringBuilder4 = doctype0.name;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(stringBuilder3);
        org.junit.Assert.assertEquals(stringBuilder3.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder4);
        org.junit.Assert.assertEquals(stringBuilder4.toString(), "");
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        htmlTreeBuilder0.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        org.jsoup.nodes.Element element31 = htmlTreeBuilder18.getActiveFormattingElement("0: Doctype");
        htmlTreeBuilder18.runParser();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder35 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader36 = null;
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList38.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor41 = parseErrorList38.iterator();
        org.jsoup.parser.Tokeniser tokeniser42 = new org.jsoup.parser.Tokeniser(characterReader36, parseErrorList38);
        org.jsoup.parser.Token.Tag tag43 = tokeniser42.tagPending;
        org.jsoup.parser.Token.Tag tag45 = tokeniser42.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype46 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype47 = doctype46.asDoctype();
        java.lang.String str48 = doctype46.tokenType();
        tokeniser42.emit((org.jsoup.parser.Token) doctype46);
        org.jsoup.parser.Token.Tag tag51 = tokeniser42.createTagPending(true);
        xmlTreeBuilder35.currentToken = tag51;
        org.jsoup.nodes.Attributes attributes53 = tag51.attributes;
        org.jsoup.parser.Token.StartTag startTag54 = new org.jsoup.parser.Token.StartTag("", attributes53);
        org.jsoup.parser.Token.StartTag startTag55 = new org.jsoup.parser.Token.StartTag("0: Doctype", attributes53);
        startTag55.appendAttributeName('\uffff');
        org.jsoup.nodes.FormElement formElement59 = htmlTreeBuilder18.insertForm(startTag55, true);
        htmlTreeBuilder0.setFormElement(formElement59);
        org.jsoup.nodes.FormElement formElement61 = htmlTreeBuilder0.getFormElement();
        java.lang.String str62 = htmlTreeBuilder0.toString();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNull(element31);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
        org.junit.Assert.assertNotNull(parseErrorItor41);
        org.junit.Assert.assertNull(tag43);
        org.junit.Assert.assertNotNull(tag45);
        org.junit.Assert.assertNotNull(doctype47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Doctype" + "'", str48, "Doctype");
        org.junit.Assert.assertNotNull(tag51);
        org.junit.Assert.assertNotNull(attributes53);
        org.junit.Assert.assertNotNull(formElement59);
        org.junit.Assert.assertNotNull(formElement61);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        xmlTreeBuilder0.initialiseParse("a", "[]", parseErrorList18);
        org.jsoup.parser.Token.Character character22 = new org.jsoup.parser.Token.Character("-1: []");
        xmlTreeBuilder0.insert(character22);
        java.lang.String str24 = character22.getData();
        boolean boolean25 = character22.isCharacter();
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1: []" + "'", str24, "-1: []");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList15 = xmlTreeBuilder0.stack;
        org.jsoup.parser.CharacterReader characterReader16 = null;
        xmlTreeBuilder0.reader = characterReader16;
        java.lang.String str18 = xmlTreeBuilder0.baseUri;
        org.jsoup.parser.Token.Doctype doctype19 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype20 = doctype19.asDoctype();
        boolean boolean21 = doctype19.isEndTag();
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(doctype19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(elementList15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(doctype20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("\uffff>");
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.resetInsertionMode();
        org.jsoup.parser.Tokeniser tokeniser8 = htmlTreeBuilder0.tokeniser;
        char[] charArray11 = tokeniser8.consumeCharacterReference((java.lang.Character) '\000', true);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(tokeniser8);
        org.junit.Assert.assertNull(charArray11);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.jsoup.parser.Token.Comment comment0 = new org.jsoup.parser.Token.Comment();
        java.lang.String str1 = comment0.toString();
        boolean boolean2 = comment0.isCharacter();
        java.lang.String str3 = comment0.getData();
        java.lang.StringBuilder stringBuilder4 = comment0.data;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "<!---->" + "'", str1, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(stringBuilder4);
        org.junit.Assert.assertEquals(stringBuilder4.toString(), "");
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("\ufffd>");
        boolean boolean2 = characterReader1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        java.lang.String str2 = org.jsoup.parser.Parser.unescapeEntities("</hi!#>", false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "</hi!#>" + "'", str2, "</hi!#>");
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        boolean boolean9 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList7);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList7.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.listIterator();
        parseErrorList13.clear();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList13.parallelStream();
        boolean boolean18 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        org.jsoup.parser.ParseErrorList parseErrorList22 = new org.jsoup.parser.ParseErrorList(10, (int) '#');
        org.jsoup.parser.ParseError[] parseErrorArray23 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList24 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24, parseErrorArray23);
        org.jsoup.parser.ParseError[] parseErrorArray26 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList27 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList27, parseErrorArray26);
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList27);
        org.jsoup.parser.ParseError[] parseErrorArray30 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList31 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31, parseErrorArray30);
        boolean boolean33 = parseErrorList27.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream34 = parseErrorList27.stream();
        boolean boolean35 = parseErrorList22.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList27);
        org.jsoup.parser.ParseError[] parseErrorArray36 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList37 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList37, parseErrorArray36);
        org.jsoup.parser.ParseError[] parseErrorArray39 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList40 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40, parseErrorArray39);
        boolean boolean42 = parseErrorList37.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40);
        java.lang.Object[] objArray43 = parseErrorList37.toArray();
        parseErrorList37.clear();
        org.jsoup.parser.ParseError[] parseErrorArray45 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList46 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList46, parseErrorArray45);
        boolean boolean48 = parseErrorList37.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList46);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream49 = parseErrorList46.parallelStream();
        java.lang.Object[] objArray50 = parseErrorList46.toArray();
        org.jsoup.parser.ParseError parseError53 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        boolean boolean54 = parseErrorList46.add(parseError53);
        boolean boolean55 = parseErrorList22.add(parseError53);
        parseErrorList22.clear();
        boolean boolean57 = parseErrorList7.addAll(0, (java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList22);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(parseErrorStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(parseErrorArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parseErrorArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(parseErrorStream49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("EndTag");
        org.junit.Assert.assertNotNull(tag1);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.framesetOk(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder22 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int27 = parseErrorList26.getMaxSize();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder22.parse("0: Doctype", "hi!", parseErrorList26);
        boolean boolean30 = htmlTreeBuilder22.inListItemScope("100: ");
        boolean boolean31 = htmlTreeBuilder22.isFosterInserts();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState32 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag33 = new org.jsoup.parser.Token.EndTag();
        endTag33.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder35 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int40 = parseErrorList39.getMaxSize();
        org.jsoup.nodes.Document document41 = htmlTreeBuilder35.parse("0: Doctype", "hi!", parseErrorList39);
        boolean boolean42 = htmlTreeBuilderState32.process((org.jsoup.parser.Token) endTag33, htmlTreeBuilder35);
        org.jsoup.nodes.FormElement formElement43 = htmlTreeBuilder35.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder44 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList48 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int49 = parseErrorList48.getMaxSize();
        org.jsoup.nodes.Document document50 = htmlTreeBuilder44.parse("0: Doctype", "hi!", parseErrorList48);
        boolean boolean51 = htmlTreeBuilder44.framesetOk();
        org.jsoup.parser.Parser parser52 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser54 = parser52.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document57 = parser52.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document60 = parser52.parseInput("<hi!>", "[]");
        htmlTreeBuilder44.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document60);
        boolean boolean62 = htmlTreeBuilder44.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder63 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList68 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList70 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream71 = parseErrorList70.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor72 = parseErrorList70.iterator();
        boolean boolean73 = parseErrorList68.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList70);
        xmlTreeBuilder63.initialiseParse("<!---->", "hi!", parseErrorList68);
        org.jsoup.parser.ParseErrorList parseErrorList78 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document79 = xmlTreeBuilder63.parse("", "[]", parseErrorList78);
        boolean boolean80 = htmlTreeBuilder44.isInActiveFormattingElements((org.jsoup.nodes.Element) document79);
        boolean boolean81 = htmlTreeBuilder35.isInActiveFormattingElements((org.jsoup.nodes.Element) document79);
        java.util.List<org.jsoup.parser.Token.Character> characterList82 = htmlTreeBuilder35.getPendingTableCharacters();
        org.jsoup.nodes.Element element83 = htmlTreeBuilder35.getHeadElement();
        htmlTreeBuilder22.insert(element83);
        boolean boolean85 = htmlTreeBuilder0.onStack(element83);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState32);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(formElement43);
        org.junit.Assert.assertNotNull(parseErrorList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(parser52);
        org.junit.Assert.assertNotNull(parser54);
        org.junit.Assert.assertNotNull(document57);
        org.junit.Assert.assertNotNull(document60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(parseErrorList70);
        org.junit.Assert.assertNotNull(parseErrorStream71);
        org.junit.Assert.assertNotNull(parseErrorItor72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(parseErrorList78);
        org.junit.Assert.assertNotNull(document79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(characterList82);
        org.junit.Assert.assertNotNull(element83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.StartTag startTag13 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType14 = startTag13.type;
        startTag13.appendTagName('#');
        boolean boolean17 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag13);
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader19.advance();
        boolean boolean22 = characterReader19.matchConsume("<hi!>");
        htmlTreeBuilder0.reader = characterReader19;
        boolean boolean24 = characterReader19.matchesLetter();
        boolean boolean25 = characterReader19.matchesDigit();
        boolean boolean27 = characterReader19.matches('#');
        characterReader19.advance();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertTrue("'" + tokenType14 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType14.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token token1 = xmlTreeBuilder0.currentToken;
        org.jsoup.parser.CharacterReader characterReader2 = null;
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.iterator();
        org.jsoup.parser.Tokeniser tokeniser8 = new org.jsoup.parser.Tokeniser(characterReader2, parseErrorList4);
        org.jsoup.parser.Token.Tag tag9 = tokeniser8.tagPending;
        org.jsoup.parser.Token.Tag tag11 = tokeniser8.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype12 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype13 = doctype12.asDoctype();
        java.lang.String str14 = doctype12.tokenType();
        tokeniser8.emit((org.jsoup.parser.Token) doctype12);
        org.jsoup.parser.Token.Tag tag17 = tokeniser8.createTagPending(true);
        xmlTreeBuilder0.tokeniser = tokeniser8;
        org.jsoup.parser.Token token19 = xmlTreeBuilder0.currentToken;
        org.junit.Assert.assertNull(token1);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNull(tag9);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(doctype13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Doctype" + "'", str14, "Doctype");
        org.junit.Assert.assertNotNull(tag17);
        org.junit.Assert.assertNull(token19);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        boolean boolean12 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList10.parallelStream();
        java.lang.Object[] objArray14 = parseErrorList10.toArray();
        org.jsoup.parser.ParseError parseError17 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        boolean boolean18 = parseErrorList10.add(parseError17);
        java.lang.String str19 = parseErrorList10.toString();
        boolean boolean20 = parseErrorList10.isEmpty();
        java.util.Collection<org.jsoup.parser.ParseError> parseErrorCollection22 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = parseErrorList10.addAll((int) (short) 0, parseErrorCollection22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100: ]" + "'", str19, "[100: ]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        boolean boolean25 = parseErrorList18.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23);
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList23);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList23.iterator();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("[]", "Doctype", parseErrorList23);
        org.jsoup.parser.CharacterReader characterReader31 = null;
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream34 = parseErrorList33.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList33.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor36 = parseErrorList33.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int39 = parseErrorList38.getMaxSize();
        boolean boolean40 = parseErrorList33.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        org.jsoup.parser.Tokeniser tokeniser41 = new org.jsoup.parser.Tokeniser(characterReader31, parseErrorList38);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        boolean boolean45 = parseErrorList43.canAddError();
        boolean boolean46 = parseErrorList38.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        org.jsoup.nodes.Document document47 = htmlTreeBuilder0.parse("hi!", "<!---->", parseErrorList43);
        org.jsoup.parser.Tokeniser tokeniser48 = htmlTreeBuilder0.tokeniser;
        java.lang.StringBuilder stringBuilder49 = tokeniser48.dataBuffer;
        org.jsoup.parser.Token.Doctype doctype50 = tokeniser48.doctypePending;
        org.jsoup.parser.Token.Doctype doctype51 = tokeniser48.doctypePending;
        org.jsoup.parser.Token.Tag tag53 = tokeniser48.createTagPending(false);
        boolean boolean54 = tag53.isComment();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertNotNull(parseErrorStream34);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNotNull(parseErrorItor36);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(tokeniser48);
        org.junit.Assert.assertNull(stringBuilder49);
        org.junit.Assert.assertNull(doctype50);
        org.junit.Assert.assertNull(doctype51);
        org.junit.Assert.assertNotNull(tag53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        htmlTreeBuilder0.newPendingTableCharacters();
        org.jsoup.nodes.Document document5 = htmlTreeBuilder0.doc;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(document5);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader1.advance();
        boolean boolean4 = characterReader1.matchConsume("<hi!>");
        java.lang.String str6 = characterReader1.consumeTo('a');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "t" + "'", str6, "t");
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement14 = htmlTreeBuilder0.getFormElement();
        org.jsoup.parser.ParseErrorList parseErrorList19 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        htmlTreeBuilder0.initialiseParse("StartTaga", "a", parseErrorList19);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = htmlTreeBuilder0.inTableScope("StartTag");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Should not be reachable");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(formElement14);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.Tokeniser tokeniser9 = xmlTreeBuilder0.tokeniser;
        org.jsoup.parser.ITokeniserState iTokeniserState10 = tokeniser9.getState();
        org.jsoup.parser.Token.Comment comment11 = new org.jsoup.parser.Token.Comment();
        java.lang.String str12 = comment11.toString();
        boolean boolean13 = comment11.isCharacter();
        boolean boolean14 = comment11.bogus;
        tokeniser9.commentPending = comment11;
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList18);
        org.jsoup.parser.Token.Tag tag23 = tokeniser22.tagPending;
        java.lang.StringBuilder stringBuilder24 = null;
        tokeniser22.dataBuffer = stringBuilder24;
        org.jsoup.parser.Token.Tag tag27 = tokeniser22.createTagPending(false);
        org.jsoup.parser.Token.Comment comment28 = new org.jsoup.parser.Token.Comment();
        java.lang.String str29 = comment28.toString();
        java.lang.StringBuilder stringBuilder30 = comment28.data;
        boolean boolean31 = comment28.isEndTag();
        java.lang.String str32 = comment28.toString();
        java.lang.StringBuilder stringBuilder33 = comment28.data;
        tokeniser22.commentPending = comment28;
        tokeniser9.commentPending = comment28;
        java.lang.String str36 = comment28.getData();
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(tokeniser9);
        org.junit.Assert.assertNotNull(iTokeniserState10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<!---->" + "'", str12, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNull(tag23);
        org.junit.Assert.assertNotNull(tag27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<!---->" + "'", str29, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder30);
        org.junit.Assert.assertEquals(stringBuilder30.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<!---->" + "'", str32, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder33);
        org.junit.Assert.assertEquals(stringBuilder33.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        htmlTreeBuilder0.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document32);
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState35 = org.jsoup.parser.HtmlTreeBuilderState.BeforeHtml;
        org.jsoup.parser.Token.Comment comment36 = new org.jsoup.parser.Token.Comment();
        org.jsoup.parser.Token.TokenType tokenType37 = comment36.type;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder38 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList42 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int43 = parseErrorList42.getMaxSize();
        org.jsoup.nodes.Document document44 = htmlTreeBuilder38.parse("0: Doctype", "hi!", parseErrorList42);
        boolean boolean45 = htmlTreeBuilder38.framesetOk();
        org.jsoup.parser.Parser parser46 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser48 = parser46.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document51 = parser46.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document54 = parser46.parseInput("<hi!>", "[]");
        htmlTreeBuilder38.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document54);
        boolean boolean56 = htmlTreeBuilder38.isFragmentParsing();
        org.jsoup.parser.Parser parser57 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder38);
        org.jsoup.parser.CharacterReader characterReader58 = null;
        org.jsoup.parser.ParseErrorList parseErrorList60 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream61 = parseErrorList60.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor62 = parseErrorList60.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor63 = parseErrorList60.iterator();
        org.jsoup.parser.Tokeniser tokeniser64 = new org.jsoup.parser.Tokeniser(characterReader58, parseErrorList60);
        org.jsoup.parser.Token.Tag tag65 = tokeniser64.tagPending;
        tokeniser64.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag69 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType70 = startTag69.type;
        startTag69.appendTagName('#');
        tokeniser64.tagPending = startTag69;
        org.jsoup.parser.Token.StartTag startTag75 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType76 = startTag75.type;
        java.lang.String str77 = startTag75.toString();
        tokeniser64.emit((org.jsoup.parser.Token) startTag75);
        org.jsoup.nodes.FormElement formElement80 = htmlTreeBuilder38.insertForm(startTag75, true);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder81 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList85 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int86 = parseErrorList85.getMaxSize();
        org.jsoup.nodes.Document document87 = htmlTreeBuilder81.parse("0: Doctype", "hi!", parseErrorList85);
        boolean boolean88 = htmlTreeBuilder81.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState89 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder81.error(htmlTreeBuilderState89);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState91 = null;
        htmlTreeBuilder81.transition(htmlTreeBuilderState91);
        htmlTreeBuilder81.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList95 = htmlTreeBuilder81.getPendingTableCharacters();
        htmlTreeBuilder38.setPendingTableCharacters(characterList95);
        boolean boolean97 = htmlTreeBuilderState35.process((org.jsoup.parser.Token) comment36, htmlTreeBuilder38);
        boolean boolean98 = htmlTreeBuilder0.process((org.jsoup.parser.Token) comment36);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState35);
        org.junit.Assert.assertTrue("'" + tokenType37 + "' != '" + org.jsoup.parser.Token.TokenType.Comment + "'", tokenType37.equals(org.jsoup.parser.Token.TokenType.Comment));
        org.junit.Assert.assertNotNull(parseErrorList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(parser46);
        org.junit.Assert.assertNotNull(parser48);
        org.junit.Assert.assertNotNull(document51);
        org.junit.Assert.assertNotNull(document54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(parseErrorList60);
        org.junit.Assert.assertNotNull(parseErrorStream61);
        org.junit.Assert.assertNotNull(parseErrorItor62);
        org.junit.Assert.assertNotNull(parseErrorItor63);
        org.junit.Assert.assertNull(tag65);
        org.junit.Assert.assertTrue("'" + tokenType70 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType70.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + tokenType76 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType76.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "<hi!>" + "'", str77, "<hi!>");
        org.junit.Assert.assertNotNull(formElement80);
        org.junit.Assert.assertNotNull(parseErrorList85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(document87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState89);
        org.junit.Assert.assertNotNull(characterList95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        int int9 = parseErrorList4.lastIndexOf((java.lang.Object) 1.0d);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor10 = parseErrorList4.iterator();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList4.listIterator();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.parser.Parser parser20 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser22 = parser20.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document25 = parser20.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document28 = parser20.parseInput("<hi!>", "[]");
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document28);
        org.jsoup.parser.ParseErrorList parseErrorList30 = htmlTreeBuilder12.errors;
        parseErrorList30.ensureCapacity((int) (short) 10);
        java.lang.Object[] objArray33 = parseErrorList30.toArray();
        boolean boolean34 = parseErrorList4.equals((java.lang.Object) parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(parseErrorItor10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parser20);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor2 = parseErrorList1.listIterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.iterator();
        org.jsoup.parser.TokenQueue tokenQueue5 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean6 = tokenQueue5.isEmpty();
        java.lang.String str8 = tokenQueue5.consumeToIgnoreCase("<hi!>");
        java.lang.String str9 = tokenQueue5.consumeTagName();
        boolean boolean10 = tokenQueue5.matchesWord();
        boolean boolean12 = tokenQueue5.matchesCS("StartTag");
        boolean boolean13 = tokenQueue5.consumeWhitespace();
        char char14 = tokenQueue5.peek();
        int int15 = parseErrorList1.indexOf((java.lang.Object) char14);
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorItor2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "EndTag" + "'", str8, "EndTag");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList(0, 10);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        boolean boolean2 = startTag1.isCharacter();
        startTag1.selfClosing = false;
        org.jsoup.parser.Token.StartTag startTag5 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes6 = startTag5.getAttributes();
        startTag1.attributes = attributes6;
        org.jsoup.parser.Token.Tag tag9 = startTag1.name(" EndTag");
        tag9.newAttribute();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(attributes6);
        org.junit.Assert.assertNotNull(tag9);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        htmlTreeBuilder0.newPendingTableCharacters();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList16.listIterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList16.iterator();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder0.parse("StartTag", "[100: ]", parseErrorList16);
        org.jsoup.nodes.Element element21 = htmlTreeBuilder0.getActiveFormattingElement("-1: []");
        org.jsoup.nodes.Element element23 = htmlTreeBuilder0.insert("Comment");
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("<hi!#>", "hi!");
        boolean boolean27 = htmlTreeBuilder0.removeFromStack((org.jsoup.nodes.Element) document26);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNull(element21);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.newPendingTableCharacters();
        org.jsoup.nodes.Document document8 = htmlTreeBuilder0.getDocument();
        org.jsoup.parser.Token.StartTag startTag10 = new org.jsoup.parser.Token.StartTag("EndTag");
        org.jsoup.nodes.Element element11 = htmlTreeBuilder0.insert(startTag10);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNotNull(element11);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("<!---->");
        boolean boolean3 = characterReader1.matches("<!---->");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        boolean boolean37 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.CharacterReader characterReader38 = null;
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream41 = parseErrorList40.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList40.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList40.iterator();
        org.jsoup.parser.Tokeniser tokeniser44 = new org.jsoup.parser.Tokeniser(characterReader38, parseErrorList40);
        org.jsoup.parser.Token.Tag tag45 = tokeniser44.tagPending;
        org.jsoup.parser.Token.Tag tag47 = tokeniser44.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype48 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype49 = doctype48.asDoctype();
        java.lang.String str50 = doctype48.tokenType();
        tokeniser44.emit((org.jsoup.parser.Token) doctype48);
        org.jsoup.parser.ITokeniserState iTokeniserState52 = tokeniser44.getState();
        org.jsoup.parser.Token token53 = tokeniser44.read();
        htmlTreeBuilder0.tokeniser = tokeniser44;
        htmlTreeBuilder0.clearStackToTableBodyContext();
        org.jsoup.parser.Parser parser56 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser58 = parser56.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.Parser parser60 = parser58.setTrackErrors((int) ' ');
        org.jsoup.nodes.Document document63 = parser58.parseInput("", "[100: ]");
        htmlTreeBuilder0.pushActiveFormattingElements((org.jsoup.nodes.Element) document63);
        htmlTreeBuilder0.generateImpliedEndTags();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertNotNull(parseErrorStream41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNull(tag45);
        org.junit.Assert.assertNotNull(tag47);
        org.junit.Assert.assertNotNull(doctype49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Doctype" + "'", str50, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState52);
        org.junit.Assert.assertNotNull(token53);
        org.junit.Assert.assertNotNull(parser56);
        org.junit.Assert.assertNotNull(parser58);
        org.junit.Assert.assertNotNull(parser60);
        org.junit.Assert.assertNotNull(document63);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("<hi!>");
        startTag1.finaliseTag();
        startTag1.appendTagName('\uffff');
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Doctype doctype5 = startTag1.asDoctype();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Doctype");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList2 = htmlTreeBuilder0.getStack();
        org.junit.Assert.assertNull(elementList2);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype12 = tokeniser6.doctypePending;
        org.jsoup.parser.Token.Comment comment13 = new org.jsoup.parser.Token.Comment();
        java.lang.String str14 = comment13.toString();
        java.lang.StringBuilder stringBuilder15 = comment13.data;
        boolean boolean16 = comment13.isEndTag();
        java.lang.String str17 = comment13.toString();
        tokeniser6.commentPending = comment13;
        tokeniser6.createCommentPending();
        org.jsoup.parser.ITokeniserState iTokeniserState20 = tokeniser6.getState();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder21 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int26 = parseErrorList25.getMaxSize();
        org.jsoup.nodes.Document document27 = htmlTreeBuilder21.parse("0: Doctype", "hi!", parseErrorList25);
        boolean boolean28 = htmlTreeBuilder21.framesetOk();
        org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder21.setHeadElement((org.jsoup.nodes.Element) document31);
        org.jsoup.nodes.Element element34 = htmlTreeBuilder21.getActiveFormattingElement("0: Doctype");
        htmlTreeBuilder21.runParser();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder38 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader39 = null;
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream42 = parseErrorList41.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList41.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor44 = parseErrorList41.iterator();
        org.jsoup.parser.Tokeniser tokeniser45 = new org.jsoup.parser.Tokeniser(characterReader39, parseErrorList41);
        org.jsoup.parser.Token.Tag tag46 = tokeniser45.tagPending;
        org.jsoup.parser.Token.Tag tag48 = tokeniser45.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype49 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype50 = doctype49.asDoctype();
        java.lang.String str51 = doctype49.tokenType();
        tokeniser45.emit((org.jsoup.parser.Token) doctype49);
        org.jsoup.parser.Token.Tag tag54 = tokeniser45.createTagPending(true);
        xmlTreeBuilder38.currentToken = tag54;
        org.jsoup.nodes.Attributes attributes56 = tag54.attributes;
        org.jsoup.parser.Token.StartTag startTag57 = new org.jsoup.parser.Token.StartTag("", attributes56);
        org.jsoup.parser.Token.StartTag startTag58 = new org.jsoup.parser.Token.StartTag("0: Doctype", attributes56);
        startTag58.appendAttributeName('\uffff');
        org.jsoup.nodes.FormElement formElement62 = htmlTreeBuilder21.insertForm(startTag58, true);
        startTag58.selfClosing = true;
        startTag58.appendAttributeName('\000');
        tokeniser6.emit((org.jsoup.parser.Token) startTag58);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNull(doctype12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "<!---->" + "'", str14, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<!---->" + "'", str17, "<!---->");
        org.junit.Assert.assertNotNull(iTokeniserState20);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertNull(element34);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertNotNull(parseErrorStream42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNotNull(parseErrorItor44);
        org.junit.Assert.assertNull(tag46);
        org.junit.Assert.assertNotNull(tag48);
        org.junit.Assert.assertNotNull(doctype50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Doctype" + "'", str51, "Doctype");
        org.junit.Assert.assertNotNull(tag54);
        org.junit.Assert.assertNotNull(attributes56);
        org.junit.Assert.assertNotNull(formElement62);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState7 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState7);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder11 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int16 = parseErrorList15.getMaxSize();
        org.jsoup.nodes.Document document17 = htmlTreeBuilder11.parse("0: Doctype", "hi!", parseErrorList15);
        htmlTreeBuilder11.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray20 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList21 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList21, characterArray20);
        htmlTreeBuilder11.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList21);
        boolean boolean24 = htmlTreeBuilder11.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag26 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement28 = htmlTreeBuilder11.insertForm(startTag26, true);
        htmlTreeBuilder11.baseUri = "[]";
        org.jsoup.parser.CharacterReader characterReader33 = null;
        org.jsoup.parser.ParseErrorList parseErrorList35 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream36 = parseErrorList35.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor37 = parseErrorList35.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor38 = parseErrorList35.iterator();
        org.jsoup.parser.Tokeniser tokeniser39 = new org.jsoup.parser.Tokeniser(characterReader33, parseErrorList35);
        htmlTreeBuilder11.initialiseParse("St", "<Doctype>", parseErrorList35);
        org.jsoup.nodes.Document document41 = htmlTreeBuilder0.parse("\uffff", "<hi!#>", parseErrorList35);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder42 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int47 = parseErrorList46.getMaxSize();
        org.jsoup.nodes.Document document48 = htmlTreeBuilder42.parse("0: Doctype", "hi!", parseErrorList46);
        boolean boolean49 = htmlTreeBuilder42.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState50 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder42.error(htmlTreeBuilderState50);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState52 = null;
        htmlTreeBuilder42.transition(htmlTreeBuilderState52);
        htmlTreeBuilder42.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList56 = htmlTreeBuilder42.getPendingTableCharacters();
        htmlTreeBuilder0.setPendingTableCharacters(characterList56);
        org.jsoup.parser.Token.StartTag startTag58 = new org.jsoup.parser.Token.StartTag();
        startTag58.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag61 = startTag58.asStartTag();
        org.jsoup.parser.Token.Tag tag63 = startTag61.name("");
        startTag61.selfClosing = false;
        org.jsoup.nodes.Attributes attributes66 = startTag61.getAttributes();
        htmlTreeBuilder0.currentToken = startTag61;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNotNull(characterArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(formElement28);
        org.junit.Assert.assertNotNull(parseErrorList35);
        org.junit.Assert.assertNotNull(parseErrorStream36);
        org.junit.Assert.assertNotNull(parseErrorItor37);
        org.junit.Assert.assertNotNull(parseErrorItor38);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState50);
        org.junit.Assert.assertNotNull(characterList56);
        org.junit.Assert.assertNotNull(startTag61);
        org.junit.Assert.assertNotNull(tag63);
        org.junit.Assert.assertNotNull(attributes66);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        tokeniser6.emit('#');
        org.jsoup.parser.Token.Doctype doctype20 = tokeniser6.doctypePending;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertNull(doctype20);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("0: []");
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag3 = new org.jsoup.parser.Token.StartTag();
        startTag3.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag7 = startTag3.name("hi!#");
        boolean boolean8 = startTag3.selfClosing;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.FormElement formElement10 = htmlTreeBuilder0.insertForm(startTag3, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        boolean boolean7 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder8 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int13 = parseErrorList12.getMaxSize();
        org.jsoup.nodes.Document document14 = htmlTreeBuilder8.parse("0: Doctype", "hi!", parseErrorList12);
        boolean boolean15 = htmlTreeBuilder8.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState16 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder8.error(htmlTreeBuilderState16);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState18 = null;
        htmlTreeBuilder8.transition(htmlTreeBuilderState18);
        htmlTreeBuilder8.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader24 = null;
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor29 = parseErrorList26.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        boolean boolean33 = parseErrorList26.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        org.jsoup.parser.Tokeniser tokeniser34 = new org.jsoup.parser.Tokeniser(characterReader24, parseErrorList31);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList31.iterator();
        org.jsoup.nodes.Document document36 = htmlTreeBuilder8.parse("[]", "Doctype", parseErrorList31);
        org.jsoup.parser.CharacterReader characterReader39 = null;
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream42 = parseErrorList41.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList41.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor44 = parseErrorList41.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int47 = parseErrorList46.getMaxSize();
        boolean boolean48 = parseErrorList41.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList46);
        org.jsoup.parser.Tokeniser tokeniser49 = new org.jsoup.parser.Tokeniser(characterReader39, parseErrorList46);
        org.jsoup.parser.ParseErrorList parseErrorList51 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream52 = parseErrorList51.stream();
        boolean boolean53 = parseErrorList51.canAddError();
        boolean boolean54 = parseErrorList46.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList51);
        org.jsoup.nodes.Document document55 = htmlTreeBuilder8.parse("hi!", "<!---->", parseErrorList51);
        org.jsoup.parser.Tokeniser tokeniser56 = htmlTreeBuilder8.tokeniser;
        int int57 = parseErrorList2.lastIndexOf((java.lang.Object) htmlTreeBuilder8);
        org.jsoup.parser.Token.StartTag startTag59 = new org.jsoup.parser.Token.StartTag("<hi!>");
        startTag59.tagName = "ndTag";
        org.jsoup.nodes.FormElement formElement63 = htmlTreeBuilder8.insertForm(startTag59, false);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.EndTag endTag64 = startTag59.asEndTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$EndTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState16);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertNotNull(parseErrorItor29);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertNotNull(parseErrorStream42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNotNull(parseErrorItor44);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(parseErrorList51);
        org.junit.Assert.assertNotNull(parseErrorStream52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNotNull(tokeniser56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(formElement63);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        tokenQueue1.advance();
        boolean boolean6 = tokenQueue1.matchesWhitespace();
        java.lang.String str9 = tokenQueue1.chompBalanced('\uffff', 't');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("<!---->");
        java.lang.String str2 = tag1.getName();
        boolean boolean3 = tag1.preserveWhitespace();
        boolean boolean4 = tag1.isFormSubmittable();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "<!---->" + "'", str2, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        org.jsoup.parser.Token.EndTag endTag4 = new org.jsoup.parser.Token.EndTag();
        char[] charArray7 = new char[] { '#', '#' };
        endTag4.appendAttributeValue(charArray7);
        endTag4.finaliseTag();
        boolean boolean10 = endTag4.isSelfClosing();
        org.jsoup.parser.Tag tag12 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean13 = tag12.isFormListed();
        org.jsoup.parser.Tag tag14 = tag12.setSelfClosing();
        boolean boolean15 = tag12.isKnownTag();
        java.lang.Object[] objArray17 = new java.lang.Object[] { boolean10, tag12, "Doctype" };
        org.jsoup.parser.ParseError parseError18 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray17);
        org.jsoup.parser.ParseError parseError19 = new org.jsoup.parser.ParseError((int) (byte) 0, "Doctype", objArray17);
        int int20 = parseError19.getPosition();
        java.lang.String str21 = parseError19.getErrorMessage();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(tag14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Doctype" + "'", str21, "Doctype");
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        char char6 = tokenQueue1.peek();
        java.lang.String str7 = tokenQueue1.consumeElementSelector();
        java.lang.String str9 = tokenQueue1.consumeTo("35: hi!#");
        boolean boolean11 = tokenQueue1.matches("ndTag");
        org.jsoup.parser.TokenQueue tokenQueue13 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean14 = tokenQueue13.isEmpty();
        java.lang.String str16 = tokenQueue13.consumeToIgnoreCase("<hi!>");
        java.lang.String str17 = tokenQueue13.consumeTagName();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        org.jsoup.parser.ParseErrorList parseErrorList28 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream29 = parseErrorList28.stream();
        boolean boolean30 = parseErrorList28.canAddError();
        org.jsoup.nodes.Document document31 = htmlTreeBuilder18.parse("EndTag", "hi!#", parseErrorList28);
        java.lang.String[] strArray39 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean40 = htmlTreeBuilder18.inScope("hi!#", strArray39);
        java.lang.String str41 = tokenQueue13.consumeToAny(strArray39);
        java.lang.String str42 = tokenQueue1.consumeToAny(strArray39);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\000' + "'", char6 == '\000');
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "EndTag" + "'", str16, "EndTag");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNotNull(parseErrorList28);
        org.junit.Assert.assertNotNull(parseErrorStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.CharacterReader characterReader20 = null;
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream23 = parseErrorList22.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList22.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList22.iterator();
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader20, parseErrorList22);
        org.jsoup.parser.Token.Tag tag27 = tokeniser26.tagPending;
        org.jsoup.parser.Token.Tag tag29 = tokeniser26.createTagPending(true);
        java.lang.StringBuilder stringBuilder30 = tokeniser26.dataBuffer;
        tokeniser26.createTempBuffer();
        xmlTreeBuilder3.tokeniser = tokeniser26;
        org.jsoup.parser.Token.Tag tag33 = tokeniser26.tagPending;
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertNotNull(parseErrorStream23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNull(tag27);
        org.junit.Assert.assertNotNull(tag29);
        org.junit.Assert.assertNull(stringBuilder30);
        org.junit.Assert.assertNotNull(tag33);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.resetInsertionMode();
        htmlTreeBuilder0.popStackToBefore("EndTag");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = htmlTreeBuilder0.state();
        htmlTreeBuilder0.runParser();
        java.lang.String str12 = htmlTreeBuilder0.getBaseUri();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        startTag0.appendAttributeValue("hi!");
        boolean boolean3 = startTag0.selfClosing;
        java.lang.String str4 = startTag0.tokenType();
        org.jsoup.parser.CharacterReader characterReader6 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean8 = characterReader6.matches('\000');
        java.lang.String str9 = characterReader6.consumeHexSequence();
        char char10 = characterReader6.current();
        boolean boolean11 = characterReader6.matchesLetter();
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.Tokeniser tokeniser18 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList14);
        org.jsoup.parser.Token.EndTag endTag19 = new org.jsoup.parser.Token.EndTag();
        char[] charArray22 = new char[] { '#', '#' };
        endTag19.appendAttributeValue(charArray22);
        endTag19.appendAttributeValue(' ');
        char[] charArray27 = new char[] { '4' };
        endTag19.appendAttributeValue(charArray27);
        tokeniser18.emit(charArray27);
        java.lang.String str30 = characterReader6.consumeToAny(charArray27);
        startTag0.appendAttributeValue(charArray27);
        startTag0.tagName = "\uffff";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "StartTag" + "'", str4, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + 'S' + "'", char10 == 'S');
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "StartTag" + "'", str30, "StartTag");
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        org.jsoup.parser.Token.Tag tag15 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.EndTag endTag16 = new org.jsoup.parser.Token.EndTag();
        endTag16.newAttribute();
        tokeniser6.tagPending = endTag16;
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        tokeniser25.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag30 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType31 = startTag30.type;
        startTag30.appendTagName('#');
        tokeniser25.tagPending = startTag30;
        org.jsoup.parser.TokeniserState tokeniserState35 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser25.transition((org.jsoup.parser.ITokeniserState) tokeniserState35);
        org.jsoup.parser.Token.Doctype doctype37 = new org.jsoup.parser.Token.Doctype();
        boolean boolean38 = doctype37.isCharacter();
        tokeniser25.doctypePending = doctype37;
        org.jsoup.parser.Token.Doctype doctype40 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype41 = doctype40.asDoctype();
        java.lang.StringBuilder stringBuilder42 = doctype41.name;
        tokeniser25.dataBuffer = stringBuilder42;
        tokeniser25.emitDoctypePending();
        org.jsoup.parser.TokeniserState tokeniserState45 = org.jsoup.parser.TokeniserState.AttributeValue_doubleQuoted;
        tokeniser25.eofError((org.jsoup.parser.ITokeniserState) tokeniserState45);
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState45);
        org.jsoup.parser.CharacterReader characterReader48 = null;
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream51 = parseErrorList50.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor52 = parseErrorList50.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor53 = parseErrorList50.iterator();
        org.jsoup.parser.Tokeniser tokeniser54 = new org.jsoup.parser.Tokeniser(characterReader48, parseErrorList50);
        org.jsoup.parser.Token.Tag tag55 = tokeniser54.tagPending;
        org.jsoup.parser.Token.Tag tag57 = tokeniser54.createTagPending(true);
        java.lang.StringBuilder stringBuilder58 = tokeniser54.dataBuffer;
        org.jsoup.parser.Token.EndTag endTag59 = new org.jsoup.parser.Token.EndTag();
        char[] charArray62 = new char[] { '#', '#' };
        endTag59.appendAttributeValue(charArray62);
        tokeniser54.emit(charArray62);
        org.jsoup.parser.Token.StartTag startTag66 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType67 = startTag66.type;
        java.lang.String str68 = startTag66.toString();
        tokeniser54.tagPending = startTag66;
        org.jsoup.parser.CharacterReader characterReader71 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean73 = characterReader71.matches('\000');
        characterReader71.mark();
        boolean boolean76 = characterReader71.containsIgnoreCase("a");
        java.lang.String str77 = characterReader71.toString();
        java.lang.String str78 = characterReader71.consumeToEnd();
        boolean boolean79 = characterReader71.matchesLetter();
        tokeniserState45.read(tokeniser54, characterReader71);
        int int81 = characterReader71.pos();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertNotNull(tag15);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertTrue("'" + tokenType31 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType31.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doctype41);
        org.junit.Assert.assertNotNull(stringBuilder42);
        org.junit.Assert.assertEquals(stringBuilder42.toString(), "");
        org.junit.Assert.assertNotNull(tokeniserState45);
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertNotNull(parseErrorStream51);
        org.junit.Assert.assertNotNull(parseErrorItor52);
        org.junit.Assert.assertNotNull(parseErrorItor53);
        org.junit.Assert.assertNull(tag55);
        org.junit.Assert.assertNotNull(tag57);
        org.junit.Assert.assertNull(stringBuilder58);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[#, #]");
        org.junit.Assert.assertTrue("'" + tokenType67 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType67.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "<hi!>" + "'", str68, "<hi!>");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "StartTag" + "'", str77, "StartTag");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "StartTag" + "'", str78, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 9 + "'", int81 == 9);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.Token.StartTag startTag16 = new org.jsoup.parser.Token.StartTag("Doctype");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState17 = org.jsoup.parser.HtmlTreeBuilderState.AfterBody;
        boolean boolean18 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag16, htmlTreeBuilderState17);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState19 = htmlTreeBuilder0.state();
        org.jsoup.parser.Token token20 = htmlTreeBuilder0.currentToken;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState19);
        org.junit.Assert.assertNotNull(token20);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean4 = characterReader1.matchesDigit();
        java.lang.String str5 = characterReader1.toString();
        boolean boolean7 = characterReader1.matches(' ');
        boolean boolean9 = characterReader1.matchConsume("");
        java.lang.String str10 = characterReader1.consumeDigitSequence();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean4 = characterReader1.matchesDigit();
        boolean boolean6 = characterReader1.matchesIgnoreCase("a");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.Tokeniser tokeniser9 = xmlTreeBuilder0.tokeniser;
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray12 = tokeniser9.consumeCharacterReference((java.lang.Character) ' ', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(tokeniser9);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder14 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int19 = parseErrorList18.getMaxSize();
        org.jsoup.nodes.Document document20 = htmlTreeBuilder14.parse("0: Doctype", "hi!", parseErrorList18);
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parseBodyFragment("Doctype", "<hi!>");
        htmlTreeBuilder14.maybeSetBaseUri((org.jsoup.nodes.Element) document23);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState25 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag26 = new org.jsoup.parser.Token.EndTag();
        endTag26.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        boolean boolean35 = htmlTreeBuilderState25.process((org.jsoup.parser.Token) endTag26, htmlTreeBuilder28);
        htmlTreeBuilder14.error(htmlTreeBuilderState25);
        htmlTreeBuilder0.transition(htmlTreeBuilderState25);
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState25);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        boolean boolean7 = tokenQueue1.matches("S");
        java.lang.String str8 = tokenQueue1.consumeCssIdentifier();
        org.jsoup.parser.TokenQueue tokenQueue10 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean11 = tokenQueue10.isEmpty();
        java.lang.String str13 = tokenQueue10.consumeToIgnoreCase("<hi!>");
        java.lang.String str14 = tokenQueue10.consumeTagName();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder15 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        org.jsoup.nodes.Document document21 = htmlTreeBuilder15.parse("0: Doctype", "hi!", parseErrorList19);
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream26 = parseErrorList25.stream();
        boolean boolean27 = parseErrorList25.canAddError();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder15.parse("EndTag", "hi!#", parseErrorList25);
        java.lang.String[] strArray36 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean37 = htmlTreeBuilder15.inScope("hi!#", strArray36);
        java.lang.String str38 = tokenQueue10.consumeToAny(strArray36);
        java.lang.String str39 = tokenQueue1.consumeToAny(strArray36);
        org.jsoup.parser.TokenQueue tokenQueue41 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str43 = tokenQueue41.chompTo("Doctype");
        java.lang.String str44 = tokenQueue41.consumeWord();
        tokenQueue41.advance();
        boolean boolean47 = tokenQueue41.matchChomp("0: Doctype");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder48 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList52 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int53 = parseErrorList52.getMaxSize();
        org.jsoup.nodes.Document document54 = htmlTreeBuilder48.parse("0: Doctype", "hi!", parseErrorList52);
        boolean boolean55 = htmlTreeBuilder48.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState56 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder48.error(htmlTreeBuilderState56);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState58 = null;
        htmlTreeBuilder48.transition(htmlTreeBuilderState58);
        htmlTreeBuilder48.clearStackToTableContext();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder61 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList65 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int66 = parseErrorList65.getMaxSize();
        org.jsoup.nodes.Document document67 = htmlTreeBuilder61.parse("0: Doctype", "hi!", parseErrorList65);
        boolean boolean68 = htmlTreeBuilder61.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState69 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder61.error(htmlTreeBuilderState69);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder71 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList75 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int76 = parseErrorList75.getMaxSize();
        org.jsoup.nodes.Document document77 = htmlTreeBuilder71.parse("0: Doctype", "hi!", parseErrorList75);
        org.jsoup.parser.ParseErrorList parseErrorList81 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream82 = parseErrorList81.stream();
        boolean boolean83 = parseErrorList81.canAddError();
        org.jsoup.nodes.Document document84 = htmlTreeBuilder71.parse("EndTag", "hi!#", parseErrorList81);
        java.lang.String[] strArray92 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean93 = htmlTreeBuilder71.inScope("hi!#", strArray92);
        boolean boolean94 = htmlTreeBuilder61.inScope(strArray92);
        htmlTreeBuilder48.popStackToClose(strArray92);
        boolean boolean96 = tokenQueue41.matchesAny(strArray92);
        boolean boolean97 = tokenQueue1.matchesAny(strArray92);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "EndTag" + "'", str13, "EndTag");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertNotNull(parseErrorStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "EndTag" + "'", str43, "EndTag");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(parseErrorList52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(document54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState56);
        org.junit.Assert.assertNotNull(parseErrorList65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(document67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState69);
        org.junit.Assert.assertNotNull(parseErrorList75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(document77);
        org.junit.Assert.assertNotNull(parseErrorList81);
        org.junit.Assert.assertNotNull(parseErrorStream82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(document84);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        java.lang.String str2 = org.jsoup.parser.Parser.unescapeEntities("EndTag", true);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "EndTag" + "'", str2, "EndTag");
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        java.lang.StringBuilder stringBuilder14 = doctype10.publicIdentifier;
        doctype10.forceQuirks = true;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertNotNull(stringBuilder14);
        org.junit.Assert.assertEquals(stringBuilder14.toString(), "");
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        tokenQueue1.addFirst((java.lang.Character) '#');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.framesetOk(false);
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        org.jsoup.nodes.Element element23 = htmlTreeBuilder0.currentElement();
        htmlTreeBuilder0.clearStackToTableContext();
        org.jsoup.parser.Token token25 = htmlTreeBuilder0.currentToken;
        java.util.List<org.jsoup.parser.Token.Character> characterList26 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.Token.Character character28 = new org.jsoup.parser.Token.Character("\ufffd>");
        java.lang.String str29 = character28.getData();
        htmlTreeBuilder0.insert(character28);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(token25);
        org.junit.Assert.assertNotNull(characterList26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ufffd>" + "'", str29, "\ufffd>");
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        startTag0.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag3 = startTag0.asStartTag();
        org.jsoup.parser.Token.Tag tag5 = startTag3.name("");
        boolean boolean6 = startTag3.isEOF();
        org.junit.Assert.assertNotNull(startTag3);
        org.junit.Assert.assertNotNull(tag5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.parser.Token token16 = htmlTreeBuilder0.currentToken;
        java.lang.String[] strArray23 = new java.lang.String[] { "Doctype", "</hi![]>", "<!---->", "100: ", "EOF", "a" };
        boolean boolean24 = htmlTreeBuilder0.inScope(strArray23);
        htmlTreeBuilder0.popStackToClose("\ufffd>");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder27 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        org.jsoup.nodes.Document document33 = htmlTreeBuilder27.parse("0: Doctype", "hi!", parseErrorList31);
        boolean boolean34 = htmlTreeBuilder27.framesetOk();
        org.jsoup.parser.Token token35 = htmlTreeBuilder27.currentToken;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState36 = org.jsoup.parser.HtmlTreeBuilderState.InTable;
        htmlTreeBuilder27.error(htmlTreeBuilderState36);
        org.jsoup.nodes.Document document41 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        java.util.List<org.jsoup.nodes.Node> nodeList43 = org.jsoup.parser.Parser.parseFragment("EndTag", (org.jsoup.nodes.Element) document41, "<hi!>");
        boolean boolean44 = htmlTreeBuilder27.isInActiveFormattingElements((org.jsoup.nodes.Element) document41);
        htmlTreeBuilder0.doc = document41;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = htmlTreeBuilder0.inListItemScope("<Doctype>");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Should not be reachable");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(token16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(token35);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState36);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState7 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState7);
        boolean boolean10 = htmlTreeBuilder0.inScope("[0: []]");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("<!---->");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder10 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader11 = null;
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList13.iterator();
        org.jsoup.parser.Tokeniser tokeniser17 = new org.jsoup.parser.Tokeniser(characterReader11, parseErrorList13);
        org.jsoup.parser.Token.Tag tag18 = tokeniser17.tagPending;
        org.jsoup.parser.Token.Tag tag20 = tokeniser17.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype21 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype22 = doctype21.asDoctype();
        java.lang.String str23 = doctype21.tokenType();
        tokeniser17.emit((org.jsoup.parser.Token) doctype21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser17.createTagPending(true);
        xmlTreeBuilder10.currentToken = tag26;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        boolean boolean35 = htmlTreeBuilder28.framesetOk();
        org.jsoup.nodes.Document document38 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder28.setHeadElement((org.jsoup.nodes.Element) document38);
        xmlTreeBuilder10.doc = document38;
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList44.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList44.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int50 = parseErrorList49.getMaxSize();
        boolean boolean51 = parseErrorList44.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList49);
        xmlTreeBuilder10.initialiseParse("hi!#", "0: []", parseErrorList49);
        org.jsoup.parser.Token.Comment comment53 = new org.jsoup.parser.Token.Comment();
        java.lang.String str54 = comment53.getData();
        xmlTreeBuilder10.insert(comment53);
        java.lang.StringBuilder stringBuilder56 = comment53.data;
        tokeniser6.commentPending = comment53;
        tokeniser6.emitCommentPending();
        org.jsoup.parser.Token token59 = null;
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emit(token59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: There is an unread token pending!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNull(tag18);
        org.junit.Assert.assertNotNull(tag20);
        org.junit.Assert.assertNotNull(doctype22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Doctype" + "'", str23, "Doctype");
        org.junit.Assert.assertNotNull(tag26);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(stringBuilder56);
        org.junit.Assert.assertEquals(stringBuilder56.toString(), "");
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.nodes.Document document16 = htmlTreeBuilder0.doc;
        boolean boolean18 = htmlTreeBuilder0.inTableScope("<!---->");
        htmlTreeBuilder0.clearStackToTableBodyContext();
        org.jsoup.nodes.Document document20 = htmlTreeBuilder0.doc;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(document20);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype12 = tokeniser6.doctypePending;
        org.jsoup.parser.Token.Comment comment13 = new org.jsoup.parser.Token.Comment();
        java.lang.String str14 = comment13.toString();
        java.lang.StringBuilder stringBuilder15 = comment13.data;
        boolean boolean16 = comment13.isEndTag();
        java.lang.String str17 = comment13.toString();
        tokeniser6.commentPending = comment13;
        org.jsoup.parser.TokeniserState tokeniserState19 = org.jsoup.parser.TokeniserState.AttributeValue_doubleQuoted;
        tokeniser6.eofError((org.jsoup.parser.ITokeniserState) tokeniserState19);
        tokeniser6.emit('\uffff');
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNull(doctype12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "<!---->" + "'", str14, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<!---->" + "'", str17, "<!---->");
        org.junit.Assert.assertNotNull(tokeniserState19);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.Tokeniser tokeniser9 = xmlTreeBuilder0.tokeniser;
        org.jsoup.nodes.Document document12 = xmlTreeBuilder0.parse("100: ", "\uffff");
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(tokeniser9);
        org.junit.Assert.assertNotNull(document12);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        startTag0.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag3 = startTag0.asStartTag();
        org.jsoup.parser.Token.Tag tag5 = startTag3.name("");
        startTag3.selfClosing = false;
        org.jsoup.nodes.Attributes attributes8 = startTag3.getAttributes();
        org.jsoup.parser.Token.Tag tag10 = startTag3.name("StartTag");
        org.junit.Assert.assertNotNull(startTag3);
        org.junit.Assert.assertNotNull(tag5);
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertNotNull(tag10);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        char char5 = tokenQueue1.peek();
        org.jsoup.parser.CharacterReader characterReader6 = null;
        org.jsoup.parser.ParseErrorList parseErrorList8 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream9 = parseErrorList8.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor10 = parseErrorList8.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList8.iterator();
        org.jsoup.parser.Tokeniser tokeniser12 = new org.jsoup.parser.Tokeniser(characterReader6, parseErrorList8);
        org.jsoup.parser.Token.Tag tag13 = tokeniser12.tagPending;
        org.jsoup.parser.Token.Tag tag15 = tokeniser12.createTagPending(true);
        java.lang.StringBuilder stringBuilder16 = tokeniser12.dataBuffer;
        org.jsoup.parser.Token.EndTag endTag17 = new org.jsoup.parser.Token.EndTag();
        char[] charArray20 = new char[] { '#', '#' };
        endTag17.appendAttributeValue(charArray20);
        tokeniser12.emit(charArray20);
        boolean boolean23 = tokenQueue1.matchesAny(charArray20);
        java.lang.String str24 = tokenQueue1.consumeElementSelector();
        java.lang.String str26 = tokenQueue1.consumeToIgnoreCase("hi!");
        java.lang.String str28 = tokenQueue1.consumeToIgnoreCase(" ");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\000' + "'", char5 == '\000');
        org.junit.Assert.assertNotNull(parseErrorList8);
        org.junit.Assert.assertNotNull(parseErrorStream9);
        org.junit.Assert.assertNotNull(parseErrorItor10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertNull(tag13);
        org.junit.Assert.assertNotNull(tag15);
        org.junit.Assert.assertNull(stringBuilder16);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        char[] charArray3 = new char[] { '#', '#' };
        endTag0.appendAttributeValue(charArray3);
        endTag0.finaliseTag();
        org.jsoup.parser.Token.Tag tag7 = endTag0.name("Doctype");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#, #]");
        org.junit.Assert.assertNotNull(tag7);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        java.lang.String str2 = characterReader1.consumeToEnd();
        int int4 = characterReader1.nextIndexOf('a');
        java.lang.String str5 = characterReader1.consumeDigitSequence();
        char char6 = characterReader1.current();
        int int8 = characterReader1.nextIndexOf('\uffff');
        characterReader1.unconsume();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "StartTag" + "'", str2, "StartTag");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\uffff' + "'", char6 == '\uffff');
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("Comment");
        java.lang.String str2 = tokenQueue1.consumeWord();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Comment" + "'", str2, "Comment");
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        boolean boolean5 = tokenQueue1.matchChomp("<!---->");
        boolean boolean7 = tokenQueue1.matchesCS("EndTag");
        tokenQueue1.addFirst("hi!#");
        java.lang.String str10 = tokenQueue1.consumeElementSelector();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi" + "'", str10, "hi");
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        java.lang.StringBuilder stringBuilder9 = null;
        tokeniser7.dataBuffer = stringBuilder9;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        tokeniser7.emit(charArray14);
        org.jsoup.parser.Token.Comment comment17 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean20 = characterReader19.matchesLetter();
        miniSoupTokeniserState0.read(tokeniser7, characterReader19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        org.jsoup.parser.Token.Tag tag31 = tokeniser28.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype32 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype33 = doctype32.asDoctype();
        java.lang.String str34 = doctype32.tokenType();
        tokeniser28.emit((org.jsoup.parser.Token) doctype32);
        org.jsoup.parser.ITokeniserState iTokeniserState36 = tokeniser28.getState();
        org.jsoup.parser.Token.Comment comment37 = new org.jsoup.parser.Token.Comment();
        java.lang.String str38 = comment37.toString();
        java.lang.StringBuilder stringBuilder39 = comment37.data;
        boolean boolean40 = comment37.isEndTag();
        boolean boolean41 = comment37.isComment();
        tokeniser28.commentPending = comment37;
        org.jsoup.parser.CharacterReader characterReader44 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean46 = characterReader44.matches('\000');
        characterReader44.mark();
        boolean boolean48 = characterReader44.isEmpty();
        java.lang.String str49 = characterReader44.consumeToEnd();
        miniSoupTokeniserState0.read(tokeniser28, characterReader44);
        org.jsoup.parser.CharacterReader characterReader51 = null;
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream54 = parseErrorList53.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList53.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor56 = parseErrorList53.iterator();
        org.jsoup.parser.Tokeniser tokeniser57 = new org.jsoup.parser.Tokeniser(characterReader51, parseErrorList53);
        org.jsoup.parser.Token.Tag tag58 = tokeniser57.tagPending;
        tokeniser57.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag62 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType63 = startTag62.type;
        startTag62.appendTagName('#');
        tokeniser57.tagPending = startTag62;
        tokeniser57.acknowledgeSelfClosingFlag();
        org.jsoup.parser.CharacterReader characterReader69 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean71 = characterReader69.matches('\uffff');
        miniSoupTokeniserState0.read(tokeniser57, characterReader69);
        java.lang.String str73 = characterReader69.consumeDigitSequence();
        int int75 = characterReader69.nextIndexOf('a');
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertNotNull(doctype33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Doctype" + "'", str34, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<!---->" + "'", str38, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder39);
        org.junit.Assert.assertEquals(stringBuilder39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "StartTag" + "'", str49, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertNotNull(parseErrorStream54);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertNotNull(parseErrorItor56);
        org.junit.Assert.assertNull(tag58);
        org.junit.Assert.assertTrue("'" + tokenType63 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType63.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        java.lang.String[] strArray13 = null;
        boolean boolean14 = htmlTreeBuilder0.inScope("EndTag", strArray13);
        org.jsoup.parser.ParseErrorList parseErrorList15 = htmlTreeBuilder0.errors;
        org.jsoup.nodes.Element element16 = htmlTreeBuilder0.currentElement();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(element16);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        boolean boolean8 = tokenQueue1.matchesCS("StartTag");
        char char9 = tokenQueue1.peek();
        java.lang.String str11 = tokenQueue1.chompTo("");
        java.lang.String str12 = tokenQueue1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + '\000' + "'", char9 == '\000');
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("<!---->");
        java.lang.String str2 = tag1.getName();
        boolean boolean3 = tag1.preserveWhitespace();
        boolean boolean4 = tag1.isBlock();
        boolean boolean5 = tag1.isSelfClosing();
        org.jsoup.parser.Tag tag6 = tag1.setSelfClosing();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "<!---->" + "'", str2, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(tag6);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        htmlTreeBuilder0.generateImpliedEndTags("EndTag");
        htmlTreeBuilder0.reconstructFormattingElements();
        htmlTreeBuilder0.baseUri = "St";
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = htmlTreeBuilder0.originalState();
        org.jsoup.nodes.Element element15 = htmlTreeBuilder0.pop();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        org.jsoup.parser.Token.Comment comment30 = new org.jsoup.parser.Token.Comment();
        java.lang.String str31 = comment30.toString();
        boolean boolean32 = comment30.isCharacter();
        htmlTreeBuilder18.insert(comment30);
        org.jsoup.parser.Parser parser34 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder18);
        org.jsoup.nodes.Document document37 = parser34.parseInput("hi!", "[]");
        java.util.List<org.jsoup.nodes.Node> nodeList39 = org.jsoup.parser.Parser.parseFragment("-1: []", (org.jsoup.nodes.Element) document37, "");
        org.jsoup.parser.CharacterReader characterReader41 = null;
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor45 = parseErrorList43.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList43.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList48 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int49 = parseErrorList48.getMaxSize();
        boolean boolean50 = parseErrorList43.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList48);
        org.jsoup.parser.Tokeniser tokeniser51 = new org.jsoup.parser.Tokeniser(characterReader41, parseErrorList48);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor52 = parseErrorList48.iterator();
        java.util.List<org.jsoup.nodes.Node> nodeList53 = htmlTreeBuilder0.parseFragment("0: []", (org.jsoup.nodes.Element) document37, "0: []", parseErrorList48);
        java.lang.String str54 = parseErrorList48.toString();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(htmlTreeBuilderState14);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<!---->" + "'", str31, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertNotNull(nodeList39);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertNotNull(parseErrorItor45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertNotNull(parseErrorList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(parseErrorItor52);
        org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\000');
        char char4 = characterReader1.current();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'S' + "'", char4 == 'S');
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor29 = parseErrorList26.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        boolean boolean33 = parseErrorList26.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        xmlTreeBuilder3.initialiseParse("<!---->", "", parseErrorList26);
        org.jsoup.parser.ParseErrorList parseErrorList35 = null;
        xmlTreeBuilder3.errors = parseErrorList35;
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream41 = parseErrorList40.stream();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList40.listIterator();
        parseErrorList40.clear();
        java.util.List<org.jsoup.nodes.Node> nodeList44 = xmlTreeBuilder3.parseFragment("TreeBuilder{currentToken=</Doctype>, state=InBody, currentElement=<body>\n 0: Doctype\n</body>}", "\uffff>", parseErrorList40);
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertNotNull(parseErrorItor29);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertNotNull(parseErrorStream41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(nodeList44);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        htmlTreeBuilder0.setFosterInserts(false);
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState22 = htmlTreeBuilder0.state();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState22);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader2 = new org.jsoup.parser.CharacterReader("StartTag");
        int int4 = characterReader2.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean5 = characterReader2.matchesDigit();
        java.lang.String str6 = characterReader2.toString();
        xmlTreeBuilder0.reader = characterReader2;
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int12 = parseErrorList11.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray13 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList14 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList14, parseErrorArray13);
        org.jsoup.parser.ParseError[] parseErrorArray16 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList17 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17, parseErrorArray16);
        boolean boolean19 = parseErrorList14.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17);
        org.jsoup.parser.ParseError[] parseErrorArray20 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList21 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21, parseErrorArray20);
        boolean boolean23 = parseErrorList17.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        parseErrorList21.clear();
        boolean boolean25 = parseErrorList11.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        xmlTreeBuilder0.initialiseParse("<Doctype>", "a", parseErrorList11);
        org.jsoup.parser.Token.Character character28 = new org.jsoup.parser.Token.Character("100: ");
        xmlTreeBuilder0.insert(character28);
        org.jsoup.parser.Parser parser32 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser34 = parser32.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder35 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document36 = xmlTreeBuilder35.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder37 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList42 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList44.iterator();
        boolean boolean47 = parseErrorList42.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        xmlTreeBuilder37.initialiseParse("<!---->", "hi!", parseErrorList42);
        xmlTreeBuilder35.errors = parseErrorList42;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList50 = xmlTreeBuilder35.stack;
        org.jsoup.parser.Parser parser51 = parser34.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder35);
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder35.errors = parseErrorList53;
        org.jsoup.parser.ParseErrorList parseErrorList57 = new org.jsoup.parser.ParseErrorList(10, (int) '#');
        org.jsoup.parser.ParseError[] parseErrorArray58 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList59 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59, parseErrorArray58);
        org.jsoup.parser.ParseError[] parseErrorArray61 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList62 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList62, parseErrorArray61);
        boolean boolean64 = parseErrorList59.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList62);
        org.jsoup.parser.ParseError[] parseErrorArray65 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList66 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList66, parseErrorArray65);
        boolean boolean68 = parseErrorList62.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList66);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream69 = parseErrorList62.stream();
        boolean boolean70 = parseErrorList57.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList62);
        org.jsoup.parser.ParseError[] parseErrorArray71 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList72 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList72, parseErrorArray71);
        org.jsoup.parser.ParseError[] parseErrorArray74 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList75 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList75, parseErrorArray74);
        boolean boolean77 = parseErrorList72.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList75);
        java.lang.Object[] objArray78 = parseErrorList72.toArray();
        parseErrorList72.clear();
        org.jsoup.parser.ParseError[] parseErrorArray80 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList81 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList81, parseErrorArray80);
        boolean boolean83 = parseErrorList72.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList81);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream84 = parseErrorList81.parallelStream();
        java.lang.Object[] objArray85 = parseErrorList81.toArray();
        org.jsoup.parser.ParseError parseError88 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        boolean boolean89 = parseErrorList81.add(parseError88);
        boolean boolean90 = parseErrorList57.add(parseError88);
        int int91 = parseErrorList53.lastIndexOf((java.lang.Object) boolean90);
        xmlTreeBuilder0.initialiseParse("", "hi!#", parseErrorList53);
        org.jsoup.parser.Token.Character character93 = null;
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(character93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "StartTag" + "'", str6, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parser32);
        org.junit.Assert.assertNotNull(parser34);
        org.junit.Assert.assertNull(document36);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(elementList50);
        org.junit.Assert.assertNotNull(parser51);
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertNotNull(parseErrorArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(parseErrorArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(parseErrorArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(parseErrorStream69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(parseErrorArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(parseErrorArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(parseErrorStream84);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        tokeniser6.createTempBuffer();
        boolean boolean8 = tokeniser6.currentNodeInHtmlNS();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token token9 = tokeniser6.read();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("Doctype");
        boolean boolean2 = startTag1.isDoctype();
        org.jsoup.parser.CharacterReader characterReader3 = null;
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream6 = parseErrorList5.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList5.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList5.iterator();
        org.jsoup.parser.Tokeniser tokeniser9 = new org.jsoup.parser.Tokeniser(characterReader3, parseErrorList5);
        org.jsoup.parser.Token.Tag tag10 = tokeniser9.tagPending;
        tokeniser9.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag14 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType15 = startTag14.type;
        startTag14.appendTagName('#');
        tokeniser9.tagPending = startTag14;
        org.jsoup.parser.TokeniserState tokeniserState19 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser9.transition((org.jsoup.parser.ITokeniserState) tokeniserState19);
        org.jsoup.parser.Token.Doctype doctype21 = new org.jsoup.parser.Token.Doctype();
        boolean boolean22 = doctype21.isCharacter();
        tokeniser9.doctypePending = doctype21;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState24 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype25 = new org.jsoup.parser.Token.Doctype();
        boolean boolean26 = doctype25.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder27 = null;
        boolean boolean28 = htmlTreeBuilderState24.process((org.jsoup.parser.Token) doctype25, htmlTreeBuilder27);
        java.lang.StringBuilder stringBuilder29 = doctype25.name;
        tokeniser9.dataBuffer = stringBuilder29;
        org.jsoup.parser.Token.EndTag endTag31 = new org.jsoup.parser.Token.EndTag();
        char[] charArray34 = new char[] { '#', '#' };
        endTag31.appendAttributeValue(charArray34);
        endTag31.appendAttributeValue(' ');
        char[] charArray39 = new char[] { '4' };
        endTag31.appendAttributeValue(charArray39);
        tokeniser9.emit(charArray39);
        startTag1.appendAttributeValue(charArray39);
        java.lang.String str43 = startTag1.toString();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder47 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader48 = null;
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream51 = parseErrorList50.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor52 = parseErrorList50.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor53 = parseErrorList50.iterator();
        org.jsoup.parser.Tokeniser tokeniser54 = new org.jsoup.parser.Tokeniser(characterReader48, parseErrorList50);
        org.jsoup.parser.Token.Tag tag55 = tokeniser54.tagPending;
        org.jsoup.parser.Token.Tag tag57 = tokeniser54.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype58 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype59 = doctype58.asDoctype();
        java.lang.String str60 = doctype58.tokenType();
        tokeniser54.emit((org.jsoup.parser.Token) doctype58);
        org.jsoup.parser.Token.Tag tag63 = tokeniser54.createTagPending(true);
        xmlTreeBuilder47.currentToken = tag63;
        org.jsoup.nodes.Attributes attributes65 = tag63.attributes;
        org.jsoup.parser.Token.StartTag startTag66 = new org.jsoup.parser.Token.StartTag("", attributes65);
        org.jsoup.parser.Token.StartTag startTag67 = new org.jsoup.parser.Token.StartTag("0: Doctype", attributes65);
        org.jsoup.parser.Token.StartTag startTag68 = new org.jsoup.parser.Token.StartTag("", attributes65);
        org.jsoup.nodes.Attributes attributes69 = startTag68.getAttributes();
        startTag1.attributes = attributes69;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorStream6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNull(tag10);
        org.junit.Assert.assertTrue("'" + tokenType15 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType15.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(stringBuilder29);
        org.junit.Assert.assertEquals(stringBuilder29.toString(), "");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, #]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[4]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "<Doctype>" + "'", str43, "<Doctype>");
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertNotNull(parseErrorStream51);
        org.junit.Assert.assertNotNull(parseErrorItor52);
        org.junit.Assert.assertNotNull(parseErrorItor53);
        org.junit.Assert.assertNull(tag55);
        org.junit.Assert.assertNotNull(tag57);
        org.junit.Assert.assertNotNull(doctype59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Doctype" + "'", str60, "Doctype");
        org.junit.Assert.assertNotNull(tag63);
        org.junit.Assert.assertNotNull(attributes65);
        org.junit.Assert.assertNotNull(attributes69);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        htmlTreeBuilder0.markInsertionMode();
        htmlTreeBuilder0.framesetOk(true);
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState4 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader5 = null;
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor10 = parseErrorList7.iterator();
        org.jsoup.parser.Tokeniser tokeniser11 = new org.jsoup.parser.Tokeniser(characterReader5, parseErrorList7);
        org.jsoup.parser.Token.Tag tag12 = tokeniser11.tagPending;
        java.lang.StringBuilder stringBuilder13 = null;
        tokeniser11.dataBuffer = stringBuilder13;
        org.jsoup.parser.Token.EndTag endTag15 = new org.jsoup.parser.Token.EndTag();
        char[] charArray18 = new char[] { '#', '#' };
        endTag15.appendAttributeValue(charArray18);
        tokeniser11.emit(charArray18);
        org.jsoup.parser.Token.Comment comment21 = tokeniser11.commentPending;
        org.jsoup.parser.CharacterReader characterReader23 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean24 = characterReader23.matchesLetter();
        miniSoupTokeniserState4.read(tokeniser11, characterReader23);
        htmlTreeBuilder0.tokeniser = tokeniser11;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder27 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        org.jsoup.nodes.Document document33 = htmlTreeBuilder27.parse("0: Doctype", "hi!", parseErrorList31);
        boolean boolean34 = htmlTreeBuilder27.framesetOk();
        org.jsoup.parser.Parser parser35 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser37 = parser35.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document40 = parser35.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document43 = parser35.parseInput("<hi!>", "[]");
        htmlTreeBuilder27.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document43);
        boolean boolean45 = htmlTreeBuilder27.isFragmentParsing();
        org.jsoup.parser.Parser parser46 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder27);
        org.jsoup.parser.CharacterReader characterReader47 = null;
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream50 = parseErrorList49.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor51 = parseErrorList49.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor52 = parseErrorList49.iterator();
        org.jsoup.parser.Tokeniser tokeniser53 = new org.jsoup.parser.Tokeniser(characterReader47, parseErrorList49);
        org.jsoup.parser.Token.Tag tag54 = tokeniser53.tagPending;
        tokeniser53.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag58 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType59 = startTag58.type;
        startTag58.appendTagName('#');
        tokeniser53.tagPending = startTag58;
        org.jsoup.parser.Token.StartTag startTag64 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType65 = startTag64.type;
        java.lang.String str66 = startTag64.toString();
        tokeniser53.emit((org.jsoup.parser.Token) startTag64);
        org.jsoup.nodes.FormElement formElement69 = htmlTreeBuilder27.insertForm(startTag64, true);
        htmlTreeBuilder0.setFormElement(formElement69);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder71 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList75 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int76 = parseErrorList75.getMaxSize();
        org.jsoup.nodes.Document document77 = htmlTreeBuilder71.parse("0: Doctype", "hi!", parseErrorList75);
        boolean boolean78 = htmlTreeBuilder71.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState79 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder71.error(htmlTreeBuilderState79);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState81 = null;
        htmlTreeBuilder71.transition(htmlTreeBuilderState81);
        org.jsoup.parser.Parser parser83 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.nodes.Document document86 = parser83.parseInput("", "hi!");
        htmlTreeBuilder71.maybeSetBaseUri((org.jsoup.nodes.Element) document86);
        boolean boolean88 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document86);
        org.junit.Assert.assertNotNull(miniSoupTokeniserState4);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertNotNull(parseErrorItor10);
        org.junit.Assert.assertNull(tag12);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#, #]");
        org.junit.Assert.assertNull(comment21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(parser35);
        org.junit.Assert.assertNotNull(parser37);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertNotNull(parseErrorStream50);
        org.junit.Assert.assertNotNull(parseErrorItor51);
        org.junit.Assert.assertNotNull(parseErrorItor52);
        org.junit.Assert.assertNull(tag54);
        org.junit.Assert.assertTrue("'" + tokenType59 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType59.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + tokenType65 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType65.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "<hi!>" + "'", str66, "<hi!>");
        org.junit.Assert.assertNotNull(formElement69);
        org.junit.Assert.assertNotNull(parseErrorList75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(document77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState79);
        org.junit.Assert.assertNotNull(parser83);
        org.junit.Assert.assertNotNull(document86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype12 = tokeniser6.doctypePending;
        org.jsoup.parser.Token.Comment comment13 = new org.jsoup.parser.Token.Comment();
        java.lang.String str14 = comment13.toString();
        java.lang.StringBuilder stringBuilder15 = comment13.data;
        boolean boolean16 = comment13.isEndTag();
        java.lang.String str17 = comment13.toString();
        tokeniser6.commentPending = comment13;
        tokeniser6.createCommentPending();
        tokeniser6.createCommentPending();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = tokeniser6.unescapeEntities(false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNull(doctype12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "<!---->" + "'", str14, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<!---->" + "'", str17, "<!---->");
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        java.lang.String str8 = tokenQueue1.consumeTo("[]");
        boolean boolean10 = tokenQueue1.matches("hi!#");
        boolean boolean11 = tokenQueue1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean8 = htmlTreeBuilder0.inButtonScope("hi!#");
        org.jsoup.nodes.Element element9 = htmlTreeBuilder0.currentElement();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(element9);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        char char6 = tokenQueue1.peek();
        java.lang.String str7 = tokenQueue1.consumeElementSelector();
        java.lang.String str9 = tokenQueue1.consumeTo("35: hi!#");
        // The following exception was thrown during execution in test generation
        try {
            tokenQueue1.consume("\uffff>");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Queue did not match expected sequence");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\000' + "'", char6 == '\000');
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList12 = htmlTreeBuilder0.stack;
        org.jsoup.parser.Token.StartTag startTag14 = new org.jsoup.parser.Token.StartTag("<!---->");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState15 = org.jsoup.parser.HtmlTreeBuilderState.AfterFrameset;
        boolean boolean16 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag14, htmlTreeBuilderState15);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder17 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        org.jsoup.nodes.Document document23 = htmlTreeBuilder17.parse("0: Doctype", "hi!", parseErrorList21);
        boolean boolean24 = htmlTreeBuilder17.framesetOk();
        org.jsoup.parser.Parser parser25 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser27 = parser25.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document30 = parser25.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document33 = parser25.parseInput("<hi!>", "[]");
        htmlTreeBuilder17.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document33);
        java.lang.String[] strArray35 = new java.lang.String[] {};
        boolean boolean36 = htmlTreeBuilder17.inScope(strArray35);
        htmlTreeBuilder17.markInsertionMode();
        boolean boolean39 = htmlTreeBuilder17.inScope("StartTag");
        org.jsoup.parser.Token.StartTag startTag40 = new org.jsoup.parser.Token.StartTag();
        startTag40.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag44 = startTag40.name("hi!#");
        boolean boolean45 = startTag40.isStartTag();
        startTag40.appendTagName('a');
        org.jsoup.nodes.Element element48 = htmlTreeBuilder17.insertEmpty(startTag40);
        htmlTreeBuilder0.removeFromActiveFormattingElements(element48);
        htmlTreeBuilder0.reconstructFormattingElements();
        htmlTreeBuilder0.clearStackToTableContext();
        org.jsoup.parser.CharacterReader characterReader52 = htmlTreeBuilder0.reader;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder53 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList57 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int58 = parseErrorList57.getMaxSize();
        org.jsoup.nodes.Document document59 = htmlTreeBuilder53.parse("0: Doctype", "hi!", parseErrorList57);
        boolean boolean60 = htmlTreeBuilder53.framesetOk();
        org.jsoup.parser.Parser parser61 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser63 = parser61.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document66 = parser61.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document69 = parser61.parseInput("<hi!>", "[]");
        htmlTreeBuilder53.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document69);
        java.lang.String[] strArray71 = new java.lang.String[] {};
        boolean boolean72 = htmlTreeBuilder53.inScope(strArray71);
        htmlTreeBuilder53.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder74 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList78 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int79 = parseErrorList78.getMaxSize();
        org.jsoup.nodes.Document document80 = htmlTreeBuilder74.parse("0: Doctype", "hi!", parseErrorList78);
        htmlTreeBuilder53.setHeadElement((org.jsoup.nodes.Element) document80);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder82 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList86 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int87 = parseErrorList86.getMaxSize();
        org.jsoup.nodes.Document document88 = htmlTreeBuilder82.parse("0: Doctype", "hi!", parseErrorList86);
        htmlTreeBuilder82.resetInsertionMode();
        org.jsoup.nodes.Element element90 = htmlTreeBuilder82.currentElement();
        boolean boolean92 = htmlTreeBuilder82.inButtonScope("-1: []");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState93 = htmlTreeBuilder82.state();
        htmlTreeBuilder53.error(htmlTreeBuilderState93);
        htmlTreeBuilder0.transition(htmlTreeBuilderState93);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(elementList12);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(parser25);
        org.junit.Assert.assertNotNull(parser27);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(tag44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(element48);
        org.junit.Assert.assertNotNull(characterReader52);
        org.junit.Assert.assertNotNull(parseErrorList57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(parser61);
        org.junit.Assert.assertNotNull(parser63);
        org.junit.Assert.assertNotNull(document66);
        org.junit.Assert.assertNotNull(document69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(parseErrorList78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(document80);
        org.junit.Assert.assertNotNull(parseErrorList86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(document88);
        org.junit.Assert.assertNotNull(element90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState93);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        boolean boolean25 = parseErrorList18.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23);
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList23);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList23.iterator();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("[]", "Doctype", parseErrorList23);
        org.jsoup.parser.CharacterReader characterReader31 = null;
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream34 = parseErrorList33.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList33.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor36 = parseErrorList33.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int39 = parseErrorList38.getMaxSize();
        boolean boolean40 = parseErrorList33.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        org.jsoup.parser.Tokeniser tokeniser41 = new org.jsoup.parser.Tokeniser(characterReader31, parseErrorList38);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        boolean boolean45 = parseErrorList43.canAddError();
        boolean boolean46 = parseErrorList38.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        org.jsoup.nodes.Document document47 = htmlTreeBuilder0.parse("hi!", "<!---->", parseErrorList43);
        org.jsoup.parser.Tokeniser tokeniser48 = htmlTreeBuilder0.tokeniser;
        java.lang.StringBuilder stringBuilder49 = tokeniser48.dataBuffer;
        tokeniser48.createTempBuffer();
        org.jsoup.parser.Token.Doctype doctype51 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype52 = doctype51.asDoctype();
        boolean boolean53 = doctype51.isEOF();
        java.lang.StringBuilder stringBuilder54 = doctype51.name;
        tokeniser48.dataBuffer = stringBuilder54;
        org.jsoup.parser.CharacterReader characterReader56 = null;
        org.jsoup.parser.ParseErrorList parseErrorList58 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream59 = parseErrorList58.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor60 = parseErrorList58.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor61 = parseErrorList58.iterator();
        org.jsoup.parser.Tokeniser tokeniser62 = new org.jsoup.parser.Tokeniser(characterReader56, parseErrorList58);
        org.jsoup.parser.Token.EndTag endTag63 = new org.jsoup.parser.Token.EndTag();
        char[] charArray66 = new char[] { '#', '#' };
        endTag63.appendAttributeValue(charArray66);
        endTag63.appendAttributeValue(' ');
        char[] charArray71 = new char[] { '4' };
        endTag63.appendAttributeValue(charArray71);
        tokeniser62.emit(charArray71);
        org.jsoup.parser.Token.Tag tag74 = tokeniser62.tagPending;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder75 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList79 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int80 = parseErrorList79.getMaxSize();
        org.jsoup.nodes.Document document81 = htmlTreeBuilder75.parse("0: Doctype", "hi!", parseErrorList79);
        boolean boolean82 = htmlTreeBuilder75.framesetOk();
        org.jsoup.parser.Parser parser83 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser85 = parser83.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document88 = parser83.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document91 = parser83.parseInput("<hi!>", "[]");
        htmlTreeBuilder75.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document91);
        org.jsoup.parser.Token.Doctype doctype93 = new org.jsoup.parser.Token.Doctype();
        boolean boolean94 = doctype93.isCharacter();
        boolean boolean95 = doctype93.isEndTag();
        htmlTreeBuilder75.currentToken = doctype93;
        tokeniser62.emit((org.jsoup.parser.Token) doctype93);
        tokeniser48.doctypePending = doctype93;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertNotNull(parseErrorStream34);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNotNull(parseErrorItor36);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(tokeniser48);
        org.junit.Assert.assertNull(stringBuilder49);
        org.junit.Assert.assertNotNull(doctype52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(stringBuilder54);
        org.junit.Assert.assertEquals(stringBuilder54.toString(), "");
        org.junit.Assert.assertNotNull(parseErrorList58);
        org.junit.Assert.assertNotNull(parseErrorStream59);
        org.junit.Assert.assertNotNull(parseErrorItor60);
        org.junit.Assert.assertNotNull(parseErrorItor61);
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[#, #]");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[4]");
        org.junit.Assert.assertNull(tag74);
        org.junit.Assert.assertNotNull(parseErrorList79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(document81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(parser83);
        org.junit.Assert.assertNotNull(parser85);
        org.junit.Assert.assertNotNull(document88);
        org.junit.Assert.assertNotNull(document91);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.parser.Token token10 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        boolean boolean21 = parseErrorList14.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        org.jsoup.nodes.Document document22 = htmlTreeBuilder0.parse("[]", "hi!", parseErrorList19);
        org.jsoup.nodes.Element element23 = null;
        boolean boolean24 = htmlTreeBuilder0.removeFromStack(element23);
        org.jsoup.parser.CharacterReader characterReader25 = htmlTreeBuilder0.reader;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(token10);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(characterReader25);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement14 = htmlTreeBuilder0.getFormElement();
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList15 = htmlTreeBuilder0.getStack();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder16 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.nodes.Document document22 = htmlTreeBuilder16.parse("0: Doctype", "hi!", parseErrorList20);
        boolean boolean23 = htmlTreeBuilder16.framesetOk();
        org.jsoup.parser.Parser parser24 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser26 = parser24.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document29 = parser24.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document32 = parser24.parseInput("<hi!>", "[]");
        htmlTreeBuilder16.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        java.lang.String[] strArray34 = new java.lang.String[] {};
        boolean boolean35 = htmlTreeBuilder16.inScope(strArray34);
        htmlTreeBuilder16.markInsertionMode();
        boolean boolean38 = htmlTreeBuilder16.inScope("StartTag");
        htmlTreeBuilder16.markInsertionMode();
        org.jsoup.nodes.Document document42 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder16.setHeadElement((org.jsoup.nodes.Element) document42);
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document42);
        org.jsoup.parser.Token.EndTag endTag45 = new org.jsoup.parser.Token.EndTag();
        java.lang.String str46 = endTag45.tagName;
        htmlTreeBuilder0.currentToken = endTag45;
        htmlTreeBuilder0.popStackToClose("Doctype");
        org.jsoup.parser.Tokeniser tokeniser50 = htmlTreeBuilder0.tokeniser;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(formElement14);
        org.junit.Assert.assertNotNull(elementList15);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parser24);
        org.junit.Assert.assertNotNull(parser26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(tokeniser50);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader4 = null;
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream7 = parseErrorList6.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList6.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList6.iterator();
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader4, parseErrorList6);
        org.jsoup.parser.Token.Tag tag11 = tokeniser10.tagPending;
        org.jsoup.parser.Token.Tag tag13 = tokeniser10.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype14 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype15 = doctype14.asDoctype();
        java.lang.String str16 = doctype14.tokenType();
        tokeniser10.emit((org.jsoup.parser.Token) doctype14);
        org.jsoup.parser.Token.Tag tag19 = tokeniser10.createTagPending(true);
        xmlTreeBuilder3.currentToken = tag19;
        org.jsoup.nodes.Attributes attributes21 = tag19.attributes;
        org.jsoup.parser.Token.StartTag startTag22 = new org.jsoup.parser.Token.StartTag("", attributes21);
        org.jsoup.parser.Token.StartTag startTag23 = new org.jsoup.parser.Token.StartTag("0: Doctype", attributes21);
        org.jsoup.parser.Token.StartTag startTag24 = new org.jsoup.parser.Token.StartTag("artTag", attributes21);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertNotNull(parseErrorStream7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertNull(tag11);
        org.junit.Assert.assertNotNull(tag13);
        org.junit.Assert.assertNotNull(doctype15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Doctype" + "'", str16, "Doctype");
        org.junit.Assert.assertNotNull(tag19);
        org.junit.Assert.assertNotNull(attributes21);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        boolean boolean3 = parseErrorList1.canAddError();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState4 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag5 = new org.jsoup.parser.Token.EndTag();
        endTag5.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder7 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int12 = parseErrorList11.getMaxSize();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder7.parse("0: Doctype", "hi!", parseErrorList11);
        boolean boolean14 = htmlTreeBuilderState4.process((org.jsoup.parser.Token) endTag5, htmlTreeBuilder7);
        htmlTreeBuilder7.baseUri = "</hi![]>";
        boolean boolean17 = parseErrorList1.equals((java.lang.Object) htmlTreeBuilder7);
        org.jsoup.parser.Tag tag19 = org.jsoup.parser.Tag.valueOf("hi!");
        java.lang.String str20 = tag19.getName();
        org.jsoup.parser.CharacterReader characterReader21 = null;
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream24 = parseErrorList23.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList23.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList23.iterator();
        org.jsoup.parser.Tokeniser tokeniser27 = new org.jsoup.parser.Tokeniser(characterReader21, parseErrorList23);
        org.jsoup.parser.Token.Tag tag28 = tokeniser27.tagPending;
        org.jsoup.parser.Token.Tag tag30 = tokeniser27.createTagPending(true);
        java.lang.StringBuilder stringBuilder31 = tokeniser27.dataBuffer;
        org.jsoup.parser.Token.EndTag endTag32 = new org.jsoup.parser.Token.EndTag();
        char[] charArray35 = new char[] { '#', '#' };
        endTag32.appendAttributeValue(charArray35);
        tokeniser27.emit(charArray35);
        org.jsoup.parser.ITokeniserState iTokeniserState38 = tokeniser27.getState();
        boolean boolean39 = tag19.equals((java.lang.Object) tokeniser27);
        boolean boolean40 = parseErrorList1.equals((java.lang.Object) boolean39);
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState4);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(tag19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertNotNull(parseErrorStream24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNull(tag28);
        org.junit.Assert.assertNotNull(tag30);
        org.junit.Assert.assertNull(stringBuilder31);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#, #]");
        org.junit.Assert.assertNotNull(iTokeniserState38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        tokenQueue1.addFirst((java.lang.Character) 'a');
        java.lang.String str9 = tokenQueue1.chompToIgnoreCase("Doctype");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder10 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int15 = parseErrorList14.getMaxSize();
        org.jsoup.nodes.Document document16 = htmlTreeBuilder10.parse("0: Doctype", "hi!", parseErrorList14);
        htmlTreeBuilder10.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray19 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList20 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList20, characterArray19);
        htmlTreeBuilder10.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList20);
        boolean boolean23 = htmlTreeBuilder10.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag25 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement27 = htmlTreeBuilder10.insertForm(startTag25, true);
        org.jsoup.parser.TokenQueue tokenQueue30 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean31 = tokenQueue30.matchesStartTag();
        boolean boolean32 = tokenQueue30.consumeWhitespace();
        boolean boolean33 = tokenQueue30.matchesWhitespace();
        org.jsoup.parser.TokenQueue tokenQueue35 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str37 = tokenQueue35.chompTo("Doctype");
        java.lang.String str38 = tokenQueue35.consumeWord();
        boolean boolean39 = tokenQueue35.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag40 = new org.jsoup.parser.Token.EndTag();
        char[] charArray43 = new char[] { '#', '#' };
        endTag40.appendAttributeValue(charArray43);
        boolean boolean45 = tokenQueue35.matchesAny(charArray43);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder46 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int51 = parseErrorList50.getMaxSize();
        org.jsoup.nodes.Document document52 = htmlTreeBuilder46.parse("0: Doctype", "hi!", parseErrorList50);
        boolean boolean53 = htmlTreeBuilder46.framesetOk();
        org.jsoup.parser.Parser parser54 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser56 = parser54.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document59 = parser54.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document62 = parser54.parseInput("<hi!>", "[]");
        htmlTreeBuilder46.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document62);
        java.lang.String[] strArray64 = new java.lang.String[] {};
        boolean boolean65 = htmlTreeBuilder46.inScope(strArray64);
        boolean boolean66 = tokenQueue35.matchesAny(strArray64);
        java.lang.String str67 = tokenQueue30.consumeToAny(strArray64);
        boolean boolean68 = htmlTreeBuilder10.inScope("[0: []]", strArray64);
        boolean boolean69 = tokenQueue1.matchesAny(strArray64);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "a" + "'", str9, "a");
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(characterArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(formElement27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "EndTag" + "'", str37, "EndTag");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(parser54);
        org.junit.Assert.assertNotNull(parser56);
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertNotNull(document62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "EndTag" + "'", str67, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag("hi!#");
        endTag1.tagName = "<0: Doctype>";
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        tokeniser7.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype11 = tokeniser7.doctypePending;
        tokeniser7.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype13 = tokeniser7.doctypePending;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype15 = new org.jsoup.parser.Token.Doctype();
        boolean boolean16 = doctype15.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder17 = null;
        boolean boolean18 = htmlTreeBuilderState14.process((org.jsoup.parser.Token) doctype15, htmlTreeBuilder17);
        tokeniser7.doctypePending = doctype15;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder20 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int25 = parseErrorList24.getMaxSize();
        org.jsoup.nodes.Document document26 = htmlTreeBuilder20.parse("0: Doctype", "hi!", parseErrorList24);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder27 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        org.jsoup.nodes.Document document33 = htmlTreeBuilder27.parse("0: Doctype", "hi!", parseErrorList31);
        boolean boolean34 = htmlTreeBuilder27.framesetOk();
        org.jsoup.nodes.Document document37 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder27.setHeadElement((org.jsoup.nodes.Element) document37);
        org.jsoup.nodes.Element element39 = htmlTreeBuilder27.pop();
        htmlTreeBuilder20.pushActiveFormattingElements(element39);
        org.jsoup.nodes.Element element42 = htmlTreeBuilder20.insert("[100: ]");
        htmlTreeBuilder20.generateImpliedEndTags("[100: ]");
        boolean boolean45 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) doctype15, htmlTreeBuilder20);
        java.lang.String str46 = doctype15.getPublicIdentifier();
        boolean boolean47 = doctype15.isCharacter();
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNull(doctype11);
        org.junit.Assert.assertNull(doctype13);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNotNull(element42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        org.jsoup.parser.Token.StartTag startTag2 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes3 = startTag2.getAttributes();
        org.jsoup.parser.Token.StartTag startTag4 = new org.jsoup.parser.Token.StartTag("<!---->", attributes3);
        org.jsoup.parser.Token.StartTag startTag5 = new org.jsoup.parser.Token.StartTag("100: ", attributes3);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Comment comment6 = startTag5.asComment();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Comment");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(attributes3);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement14 = htmlTreeBuilder0.getFormElement();
        org.jsoup.parser.ParseErrorList parseErrorList19 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        htmlTreeBuilder0.initialiseParse("StartTaga", "a", parseErrorList19);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder21 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int26 = parseErrorList25.getMaxSize();
        org.jsoup.nodes.Document document27 = htmlTreeBuilder21.parse("0: Doctype", "hi!", parseErrorList25);
        boolean boolean28 = htmlTreeBuilder21.framesetOk();
        org.jsoup.parser.Parser parser29 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser31 = parser29.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document34 = parser29.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document37 = parser29.parseInput("<hi!>", "[]");
        htmlTreeBuilder21.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document37);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        boolean boolean40 = htmlTreeBuilder21.inScope(strArray39);
        htmlTreeBuilder21.markInsertionMode();
        boolean boolean43 = htmlTreeBuilder21.inScope("StartTag");
        htmlTreeBuilder21.markInsertionMode();
        org.jsoup.nodes.Document document47 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder21.setHeadElement((org.jsoup.nodes.Element) document47);
        boolean boolean49 = htmlTreeBuilder0.isSpecial((org.jsoup.nodes.Element) document47);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(formElement14);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(parser29);
        org.junit.Assert.assertNotNull(parser31);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int2 = parseErrorList1.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        org.jsoup.parser.ParseError[] parseErrorArray6 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList7 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7, parseErrorArray6);
        boolean boolean9 = parseErrorList4.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList7.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        parseErrorList11.clear();
        boolean boolean15 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList1.iterator();
        org.jsoup.parser.CharacterReader characterReader17 = null;
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream20 = parseErrorList19.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList19.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor22 = parseErrorList19.iterator();
        org.jsoup.parser.Tokeniser tokeniser23 = new org.jsoup.parser.Tokeniser(characterReader17, parseErrorList19);
        tokeniser23.createTempBuffer();
        boolean boolean25 = parseErrorList1.contains((java.lang.Object) tokeniser23);
        org.jsoup.parser.Token.Comment comment26 = tokeniser23.commentPending;
        org.jsoup.parser.CharacterReader characterReader27 = null;
        org.jsoup.parser.ParseErrorList parseErrorList29 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream30 = parseErrorList29.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor31 = parseErrorList29.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList29.iterator();
        org.jsoup.parser.Tokeniser tokeniser33 = new org.jsoup.parser.Tokeniser(characterReader27, parseErrorList29);
        org.jsoup.parser.Token.Tag tag34 = tokeniser33.tagPending;
        org.jsoup.parser.Token.Tag tag36 = tokeniser33.createTagPending(true);
        tokeniser33.createTempBuffer();
        tokeniser33.emitTagPending();
        tokeniser33.createDoctypePending();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState40 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype41 = new org.jsoup.parser.Token.Doctype();
        boolean boolean42 = doctype41.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder43 = null;
        boolean boolean44 = htmlTreeBuilderState40.process((org.jsoup.parser.Token) doctype41, htmlTreeBuilder43);
        java.lang.StringBuilder stringBuilder45 = doctype41.name;
        java.lang.StringBuilder stringBuilder46 = doctype41.name;
        tokeniser33.dataBuffer = stringBuilder46;
        tokeniser23.dataBuffer = stringBuilder46;
        org.jsoup.parser.CharacterReader characterReader49 = null;
        org.jsoup.parser.ParseErrorList parseErrorList51 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream52 = parseErrorList51.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor53 = parseErrorList51.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor54 = parseErrorList51.iterator();
        org.jsoup.parser.Tokeniser tokeniser55 = new org.jsoup.parser.Tokeniser(characterReader49, parseErrorList51);
        org.jsoup.parser.Token.Tag tag56 = tokeniser55.tagPending;
        tokeniser55.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype59 = tokeniser55.doctypePending;
        tokeniser55.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype61 = tokeniser55.doctypePending;
        org.jsoup.parser.Token.Comment comment62 = new org.jsoup.parser.Token.Comment();
        java.lang.String str63 = comment62.toString();
        java.lang.StringBuilder stringBuilder64 = comment62.data;
        boolean boolean65 = comment62.isEndTag();
        java.lang.String str66 = comment62.toString();
        tokeniser55.commentPending = comment62;
        java.lang.StringBuilder stringBuilder68 = comment62.data;
        tokeniser23.commentPending = comment62;
        org.jsoup.parser.Token.Tag tag71 = tokeniser23.createTagPending(true);
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(parseErrorArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertNotNull(parseErrorStream20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorItor22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(comment26);
        org.junit.Assert.assertNotNull(parseErrorList29);
        org.junit.Assert.assertNotNull(parseErrorStream30);
        org.junit.Assert.assertNotNull(parseErrorItor31);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertNull(tag34);
        org.junit.Assert.assertNotNull(tag36);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(stringBuilder45);
        org.junit.Assert.assertEquals(stringBuilder45.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder46);
        org.junit.Assert.assertEquals(stringBuilder46.toString(), "");
        org.junit.Assert.assertNotNull(parseErrorList51);
        org.junit.Assert.assertNotNull(parseErrorStream52);
        org.junit.Assert.assertNotNull(parseErrorItor53);
        org.junit.Assert.assertNotNull(parseErrorItor54);
        org.junit.Assert.assertNull(tag56);
        org.junit.Assert.assertNull(doctype59);
        org.junit.Assert.assertNull(doctype61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "<!---->" + "'", str63, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder64);
        org.junit.Assert.assertEquals(stringBuilder64.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "<!---->" + "'", str66, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder68);
        org.junit.Assert.assertEquals(stringBuilder68.toString(), "");
        org.junit.Assert.assertNotNull(tag71);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("Doctype");
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.EndTag endTag10 = new org.jsoup.parser.Token.EndTag();
        char[] charArray13 = new char[] { '#', '#' };
        endTag10.appendAttributeValue(charArray13);
        tokeniser6.emit(charArray13);
        org.jsoup.parser.Token.Comment comment16 = tokeniser6.commentPending;
        tokeniser6.createDoctypePending();
        org.jsoup.parser.Token.Tag tag19 = tokeniser6.createTagPending(false);
        org.jsoup.parser.Token.TokenType tokenType20 = tag19.type;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, #]");
        org.junit.Assert.assertNull(comment16);
        org.junit.Assert.assertNotNull(tag19);
        org.junit.Assert.assertTrue("'" + tokenType20 + "' != '" + org.jsoup.parser.Token.TokenType.EndTag + "'", tokenType20.equals(org.jsoup.parser.Token.TokenType.EndTag));
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        java.lang.String str13 = htmlTreeBuilder0.toString();
        java.lang.String str14 = htmlTreeBuilder0.getBaseUri();
        htmlTreeBuilder0.clearStackToTableBodyContext();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\uffff');
        java.lang.String str5 = characterReader1.consumeTo("<Doctype>");
        characterReader1.rewindToMark();
        java.lang.String str7 = characterReader1.consumeHexSequence();
        java.lang.String str8 = characterReader1.consumeHexSequence();
        java.lang.String str9 = characterReader1.consumeAsString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "S" + "'", str9, "S");
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState25 = null;
        htmlTreeBuilder18.transition(htmlTreeBuilderState25);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder29 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int34 = parseErrorList33.getMaxSize();
        org.jsoup.nodes.Document document35 = htmlTreeBuilder29.parse("0: Doctype", "hi!", parseErrorList33);
        htmlTreeBuilder29.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray38 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList39 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList39, characterArray38);
        htmlTreeBuilder29.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList39);
        boolean boolean42 = htmlTreeBuilder29.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag44 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement46 = htmlTreeBuilder29.insertForm(startTag44, true);
        htmlTreeBuilder29.baseUri = "[]";
        org.jsoup.parser.CharacterReader characterReader51 = null;
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream54 = parseErrorList53.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList53.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor56 = parseErrorList53.iterator();
        org.jsoup.parser.Tokeniser tokeniser57 = new org.jsoup.parser.Tokeniser(characterReader51, parseErrorList53);
        htmlTreeBuilder29.initialiseParse("St", "<Doctype>", parseErrorList53);
        org.jsoup.nodes.Document document59 = htmlTreeBuilder18.parse("\uffff", "<hi!#>", parseErrorList53);
        java.lang.Object[] objArray60 = parseErrorList53.toArray();
        org.jsoup.nodes.Document document61 = htmlTreeBuilder0.parse("\ufffd>", "0: Doctype", parseErrorList53);
        int int62 = parseErrorList53.getMaxSize();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNotNull(characterArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(formElement46);
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertNotNull(parseErrorStream54);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertNotNull(parseErrorItor56);
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(document61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.nodes.Document document22 = parser19.parseInput("hi!", "[]");
        org.jsoup.parser.TreeBuilder treeBuilder23 = parser19.getTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader24 = null;
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor29 = parseErrorList26.iterator();
        org.jsoup.parser.Tokeniser tokeniser30 = new org.jsoup.parser.Tokeniser(characterReader24, parseErrorList26);
        org.jsoup.parser.Token.Tag tag31 = tokeniser30.tagPending;
        org.jsoup.parser.Token.Tag tag33 = tokeniser30.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype34 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype35 = doctype34.asDoctype();
        java.lang.String str36 = doctype34.tokenType();
        tokeniser30.emit((org.jsoup.parser.Token) doctype34);
        org.jsoup.parser.ITokeniserState iTokeniserState38 = tokeniser30.getState();
        org.jsoup.parser.Token.Comment comment39 = new org.jsoup.parser.Token.Comment();
        java.lang.String str40 = comment39.toString();
        java.lang.StringBuilder stringBuilder41 = comment39.data;
        boolean boolean42 = comment39.isEndTag();
        boolean boolean43 = comment39.isComment();
        tokeniser30.commentPending = comment39;
        treeBuilder23.tokeniser = tokeniser30;
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(treeBuilder23);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertNotNull(parseErrorItor29);
        org.junit.Assert.assertNull(tag31);
        org.junit.Assert.assertNotNull(tag33);
        org.junit.Assert.assertNotNull(doctype35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Doctype" + "'", str36, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "<!---->" + "'", str40, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder41);
        org.junit.Assert.assertEquals(stringBuilder41.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype12 = tokeniser6.doctypePending;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState13 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype14 = new org.jsoup.parser.Token.Doctype();
        boolean boolean15 = doctype14.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder16 = null;
        boolean boolean17 = htmlTreeBuilderState13.process((org.jsoup.parser.Token) doctype14, htmlTreeBuilder16);
        tokeniser6.doctypePending = doctype14;
        doctype14.forceQuirks = true;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNull(doctype12);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        java.lang.StringBuilder stringBuilder9 = null;
        tokeniser7.dataBuffer = stringBuilder9;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        tokeniser7.emit(charArray14);
        org.jsoup.parser.Token.Comment comment17 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean20 = characterReader19.matchesLetter();
        miniSoupTokeniserState0.read(tokeniser7, characterReader19);
        org.jsoup.parser.TokenQueue tokenQueue23 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean24 = tokenQueue23.isEmpty();
        boolean boolean25 = tokenQueue23.consumeWhitespace();
        java.lang.String str26 = tokenQueue23.consumeWord();
        boolean boolean27 = tokenQueue23.matchesWhitespace();
        java.lang.String[] strArray32 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str33 = tokenQueue23.consumeToAny(strArray32);
        org.jsoup.parser.CharacterReader characterReader34 = null;
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream37 = parseErrorList36.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor38 = parseErrorList36.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor39 = parseErrorList36.iterator();
        org.jsoup.parser.Tokeniser tokeniser40 = new org.jsoup.parser.Tokeniser(characterReader34, parseErrorList36);
        org.jsoup.parser.Token.Tag tag41 = tokeniser40.tagPending;
        java.lang.StringBuilder stringBuilder42 = null;
        tokeniser40.dataBuffer = stringBuilder42;
        org.jsoup.parser.Token.EndTag endTag44 = new org.jsoup.parser.Token.EndTag();
        char[] charArray47 = new char[] { '#', '#' };
        endTag44.appendAttributeValue(charArray47);
        tokeniser40.emit(charArray47);
        boolean boolean50 = tokenQueue23.matchesAny(charArray47);
        tokeniser7.emit(charArray47);
        tokeniser7.acknowledgeSelfClosingFlag();
        tokeniser7.createDoctypePending();
        org.jsoup.parser.Token.Doctype doctype54 = tokeniser7.doctypePending;
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "EndTag" + "'", str26, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertNotNull(parseErrorStream37);
        org.junit.Assert.assertNotNull(parseErrorItor38);
        org.junit.Assert.assertNotNull(parseErrorItor39);
        org.junit.Assert.assertNull(tag41);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doctype54);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        boolean boolean5 = tokenQueue1.matchChomp("<!---->");
        boolean boolean7 = tokenQueue1.matchesCS("EndTag");
        java.lang.String str9 = tokenQueue1.consumeTo("-1: []");
        tokenQueue1.addFirst((java.lang.Character) 'a');
        boolean boolean12 = tokenQueue1.consumeWhitespace();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "EndTag" + "'", str9, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        org.jsoup.parser.Token.StartTag startTag23 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes24 = startTag23.getAttributes();
        xmlTreeBuilder3.currentToken = startTag23;
        org.jsoup.parser.Token.EndTag endTag26 = new org.jsoup.parser.Token.EndTag();
        char[] charArray29 = new char[] { '#', '#' };
        endTag26.appendAttributeValue(charArray29);
        endTag26.appendAttributeValue(' ');
        char[] charArray34 = new char[] { '4' };
        endTag26.appendAttributeValue(charArray34);
        startTag23.appendAttributeValue(charArray34);
        startTag23.appendAttributeValue("hi!");
        org.jsoup.nodes.Attributes attributes39 = startTag23.attributes;
        org.jsoup.parser.Token.TokenType tokenType40 = startTag23.type;
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(attributes24);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#, #]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[4]");
        org.junit.Assert.assertNotNull(attributes39);
        org.junit.Assert.assertTrue("'" + tokenType40 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType40.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        org.jsoup.parser.Token.Character character1 = new org.jsoup.parser.Token.Character("hi!#");
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        java.util.List<org.jsoup.nodes.Node> nodeList2 = org.jsoup.parser.Parser.parseXmlFragment("</hi!#>", "65533: <hi!#>");
        org.junit.Assert.assertNotNull(nodeList2);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList9 = xmlTreeBuilder0.stack;
        org.jsoup.parser.Parser parser10 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) xmlTreeBuilder0);
        org.jsoup.parser.Tag tag12 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean13 = tag12.isFormListed();
        org.jsoup.parser.CharacterReader characterReader14 = null;
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList16.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList16.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList16.iterator();
        org.jsoup.parser.Tokeniser tokeniser20 = new org.jsoup.parser.Tokeniser(characterReader14, parseErrorList16);
        org.jsoup.parser.Token.Tag tag21 = tokeniser20.tagPending;
        org.jsoup.parser.Token.Tag tag23 = tokeniser20.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype24 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype25 = doctype24.asDoctype();
        java.lang.String str26 = doctype24.tokenType();
        tokeniser20.emit((org.jsoup.parser.Token) doctype24);
        boolean boolean28 = tag12.equals((java.lang.Object) doctype24);
        java.lang.StringBuilder stringBuilder29 = doctype24.systemIdentifier;
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(doctype24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(elementList9);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertNull(tag21);
        org.junit.Assert.assertNotNull(tag23);
        org.junit.Assert.assertNotNull(doctype25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Doctype" + "'", str26, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(stringBuilder29);
        org.junit.Assert.assertEquals(stringBuilder29.toString(), "");
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.parser.ParseErrorList parseErrorList41 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor45 = parseErrorList43.iterator();
        boolean boolean46 = parseErrorList41.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        boolean boolean47 = parseErrorList41.canAddError();
        org.jsoup.parser.CharacterReader characterReader48 = null;
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream51 = parseErrorList50.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor52 = parseErrorList50.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor53 = parseErrorList50.iterator();
        org.jsoup.parser.Tokeniser tokeniser54 = new org.jsoup.parser.Tokeniser(characterReader48, parseErrorList50);
        org.jsoup.parser.Token.Tag tag55 = tokeniser54.tagPending;
        java.lang.StringBuilder stringBuilder56 = null;
        tokeniser54.dataBuffer = stringBuilder56;
        org.jsoup.parser.Token.EndTag endTag58 = new org.jsoup.parser.Token.EndTag();
        char[] charArray61 = new char[] { '#', '#' };
        endTag58.appendAttributeValue(charArray61);
        tokeniser54.emit(charArray61);
        boolean boolean64 = parseErrorList41.remove((java.lang.Object) tokeniser54);
        org.jsoup.nodes.Document document65 = htmlTreeBuilder0.parse("<!---->", "\uffff", parseErrorList41);
        htmlTreeBuilder0.clearStackToTableBodyContext();
        java.lang.String str67 = htmlTreeBuilder0.getBaseUri();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertNotNull(parseErrorItor45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertNotNull(parseErrorStream51);
        org.junit.Assert.assertNotNull(parseErrorItor52);
        org.junit.Assert.assertNotNull(parseErrorItor53);
        org.junit.Assert.assertNull(tag55);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\uffff" + "'", str67, "\uffff");
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        char char6 = tokenQueue1.peek();
        boolean boolean8 = tokenQueue1.matchesCS("-1: []");
        java.lang.String str9 = tokenQueue1.remainder();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\000' + "'", char6 == '\000');
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking((int) (byte) 1);
        org.junit.Assert.assertNotNull(parseErrorList1);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        htmlTreeBuilder0.markInsertionMode();
        htmlTreeBuilder0.framesetOk(true);
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState4 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader5 = null;
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor10 = parseErrorList7.iterator();
        org.jsoup.parser.Tokeniser tokeniser11 = new org.jsoup.parser.Tokeniser(characterReader5, parseErrorList7);
        org.jsoup.parser.Token.Tag tag12 = tokeniser11.tagPending;
        java.lang.StringBuilder stringBuilder13 = null;
        tokeniser11.dataBuffer = stringBuilder13;
        org.jsoup.parser.Token.EndTag endTag15 = new org.jsoup.parser.Token.EndTag();
        char[] charArray18 = new char[] { '#', '#' };
        endTag15.appendAttributeValue(charArray18);
        tokeniser11.emit(charArray18);
        org.jsoup.parser.Token.Comment comment21 = tokeniser11.commentPending;
        org.jsoup.parser.CharacterReader characterReader23 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean24 = characterReader23.matchesLetter();
        miniSoupTokeniserState4.read(tokeniser11, characterReader23);
        htmlTreeBuilder0.tokeniser = tokeniser11;
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.popStackToClose("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(miniSoupTokeniserState4);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertNotNull(parseErrorItor10);
        org.junit.Assert.assertNull(tag12);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#, #]");
        org.junit.Assert.assertNull(comment21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.CharacterReader characterReader3 = null;
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream6 = parseErrorList5.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList5.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList5.iterator();
        org.jsoup.parser.Tokeniser tokeniser9 = new org.jsoup.parser.Tokeniser(characterReader3, parseErrorList5);
        org.jsoup.parser.Token.Tag tag10 = tokeniser9.tagPending;
        org.jsoup.parser.Token.Tag tag12 = tokeniser9.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype13 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype14 = doctype13.asDoctype();
        java.lang.String str15 = doctype13.tokenType();
        tokeniser9.emit((org.jsoup.parser.Token) doctype13);
        boolean boolean17 = tag1.equals((java.lang.Object) doctype13);
        java.lang.String str18 = doctype13.getName();
        doctype13.forceQuirks = true;
        java.lang.String str21 = doctype13.getPublicIdentifier();
        boolean boolean22 = doctype13.isEndTag();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorStream6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNull(tag10);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertNotNull(doctype14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Doctype" + "'", str15, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        java.lang.String str6 = tokenQueue1.consumeElementSelector();
        org.jsoup.parser.TokenQueue tokenQueue8 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean9 = tokenQueue8.isEmpty();
        boolean boolean10 = tokenQueue8.consumeWhitespace();
        java.lang.String str11 = tokenQueue8.consumeWord();
        boolean boolean12 = tokenQueue8.matchesWhitespace();
        java.lang.String[] strArray17 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str18 = tokenQueue8.consumeToAny(strArray17);
        boolean boolean19 = tokenQueue1.matchesAny(strArray17);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder20 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int25 = parseErrorList24.getMaxSize();
        org.jsoup.nodes.Document document26 = htmlTreeBuilder20.parse("0: Doctype", "hi!", parseErrorList24);
        boolean boolean27 = htmlTreeBuilder20.framesetOk();
        org.jsoup.parser.Parser parser28 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser30 = parser28.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document33 = parser28.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document36 = parser28.parseInput("<hi!>", "[]");
        htmlTreeBuilder20.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document36);
        boolean boolean38 = htmlTreeBuilder20.isFragmentParsing();
        org.jsoup.parser.TokenQueue tokenQueue40 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean41 = tokenQueue40.isEmpty();
        boolean boolean42 = tokenQueue40.consumeWhitespace();
        java.lang.String str43 = tokenQueue40.consumeWord();
        boolean boolean44 = tokenQueue40.matchesWhitespace();
        java.lang.String[] strArray49 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str50 = tokenQueue40.consumeToAny(strArray49);
        boolean boolean51 = htmlTreeBuilder20.inScope(strArray49);
        boolean boolean52 = tokenQueue1.matchesAny(strArray49);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "EndTag" + "'", str11, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(parser28);
        org.junit.Assert.assertNotNull(parser30);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "EndTag" + "'", str43, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.Rawtext;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder1 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document2 = xmlTreeBuilder1.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList8 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor12 = parseErrorList10.iterator();
        boolean boolean13 = parseErrorList8.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        xmlTreeBuilder3.initialiseParse("<!---->", "hi!", parseErrorList8);
        xmlTreeBuilder1.errors = parseErrorList8;
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream20 = parseErrorList19.stream();
        xmlTreeBuilder1.initialiseParse("a", "[]", parseErrorList19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        tokeniser28.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype32 = tokeniser28.doctypePending;
        tokeniser28.createCommentPending();
        org.jsoup.parser.Token.Comment comment34 = tokeniser28.commentPending;
        boolean boolean35 = parseErrorList19.remove((java.lang.Object) tokeniser28);
        org.jsoup.parser.CharacterReader characterReader37 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean39 = characterReader37.matches('\uffff');
        boolean boolean41 = characterReader37.containsIgnoreCase("0: []");
        tokeniserState0.read(tokeniser28, characterReader37);
        org.jsoup.parser.CharacterReader characterReader43 = null;
        org.jsoup.parser.ParseErrorList parseErrorList45 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream46 = parseErrorList45.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList45.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor48 = parseErrorList45.iterator();
        org.jsoup.parser.Tokeniser tokeniser49 = new org.jsoup.parser.Tokeniser(characterReader43, parseErrorList45);
        org.jsoup.parser.Token.Tag tag50 = tokeniser49.tagPending;
        tokeniser49.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype53 = tokeniser49.doctypePending;
        tokeniser49.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype55 = tokeniser49.doctypePending;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState56 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype57 = new org.jsoup.parser.Token.Doctype();
        boolean boolean58 = doctype57.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder59 = null;
        boolean boolean60 = htmlTreeBuilderState56.process((org.jsoup.parser.Token) doctype57, htmlTreeBuilder59);
        tokeniser49.doctypePending = doctype57;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder62 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList66 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int67 = parseErrorList66.getMaxSize();
        org.jsoup.nodes.Document document68 = htmlTreeBuilder62.parse("0: Doctype", "hi!", parseErrorList66);
        boolean boolean69 = htmlTreeBuilder62.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState70 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder62.error(htmlTreeBuilderState70);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState72 = null;
        htmlTreeBuilder62.transition(htmlTreeBuilderState72);
        htmlTreeBuilder62.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList76 = htmlTreeBuilder62.getPendingTableCharacters();
        org.jsoup.parser.CharacterReader characterReader78 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean80 = characterReader78.matches("[100: ]");
        htmlTreeBuilder62.reader = characterReader78;
        htmlTreeBuilder62.insertMarkerToFormattingElements();
        org.jsoup.parser.CharacterReader characterReader84 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader84.advance();
        characterReader84.advance();
        java.lang.String str88 = characterReader84.consumeTo('E');
        htmlTreeBuilder62.reader = characterReader84;
        characterReader84.mark();
        tokeniserState0.read(tokeniser49, characterReader84);
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNull(document2);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertNotNull(parseErrorItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertNotNull(parseErrorStream20);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNull(doctype32);
        org.junit.Assert.assertNotNull(comment34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(parseErrorList45);
        org.junit.Assert.assertNotNull(parseErrorStream46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNotNull(parseErrorItor48);
        org.junit.Assert.assertNull(tag50);
        org.junit.Assert.assertNull(doctype53);
        org.junit.Assert.assertNull(doctype55);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(parseErrorList66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(document68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState70);
        org.junit.Assert.assertNotNull(characterList76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "artTag" + "'", str88, "artTag");
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        boolean boolean10 = parseErrorList5.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        xmlTreeBuilder0.initialiseParse("<!---->", "hi!", parseErrorList5);
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document16 = xmlTreeBuilder0.parse("", "[]", parseErrorList15);
        org.jsoup.parser.Token.StartTag startTag18 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType19 = startTag18.type;
        java.lang.String str20 = startTag18.toString();
        boolean boolean21 = xmlTreeBuilder0.process((org.jsoup.parser.Token) startTag18);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder22 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int27 = parseErrorList26.getMaxSize();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder22.parse("0: Doctype", "hi!", parseErrorList26);
        boolean boolean29 = htmlTreeBuilder22.framesetOk();
        org.jsoup.parser.Parser parser30 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser32 = parser30.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document35 = parser30.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document38 = parser30.parseInput("<hi!>", "[]");
        htmlTreeBuilder22.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document38);
        java.lang.String[] strArray40 = new java.lang.String[] {};
        boolean boolean41 = htmlTreeBuilder22.inScope(strArray40);
        htmlTreeBuilder22.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder43 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList47 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int48 = parseErrorList47.getMaxSize();
        org.jsoup.nodes.Document document49 = htmlTreeBuilder43.parse("0: Doctype", "hi!", parseErrorList47);
        htmlTreeBuilder22.setHeadElement((org.jsoup.nodes.Element) document49);
        org.jsoup.parser.CharacterReader characterReader51 = null;
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream54 = parseErrorList53.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList53.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor56 = parseErrorList53.iterator();
        org.jsoup.parser.Tokeniser tokeniser57 = new org.jsoup.parser.Tokeniser(characterReader51, parseErrorList53);
        org.jsoup.parser.Token.Tag tag58 = tokeniser57.tagPending;
        org.jsoup.parser.Token.Tag tag60 = tokeniser57.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype61 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype62 = doctype61.asDoctype();
        java.lang.String str63 = doctype61.tokenType();
        tokeniser57.emit((org.jsoup.parser.Token) doctype61);
        org.jsoup.parser.ITokeniserState iTokeniserState65 = tokeniser57.getState();
        org.jsoup.parser.Token.Comment comment66 = new org.jsoup.parser.Token.Comment();
        java.lang.String str67 = comment66.toString();
        java.lang.StringBuilder stringBuilder68 = comment66.data;
        boolean boolean69 = comment66.isEndTag();
        boolean boolean70 = comment66.isComment();
        tokeniser57.commentPending = comment66;
        htmlTreeBuilder22.insert(comment66);
        xmlTreeBuilder0.insert(comment66);
        org.jsoup.parser.Token.Doctype doctype74 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype75 = doctype74.asDoctype();
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(doctype75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + tokenType19 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType19.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<hi!>" + "'", str20, "<hi!>");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parser30);
        org.junit.Assert.assertNotNull(parser32);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(parseErrorList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertNotNull(parseErrorStream54);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertNotNull(parseErrorItor56);
        org.junit.Assert.assertNull(tag58);
        org.junit.Assert.assertNotNull(tag60);
        org.junit.Assert.assertNotNull(doctype62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Doctype" + "'", str63, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "<!---->" + "'", str67, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder68);
        org.junit.Assert.assertEquals(stringBuilder68.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(doctype75);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.ParseErrorList parseErrorList3 = htmlTreeBuilder0.errors;
        htmlTreeBuilder0.reconstructFormattingElements();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder5 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int10 = parseErrorList9.getMaxSize();
        org.jsoup.nodes.Document document11 = htmlTreeBuilder5.parse("0: Doctype", "hi!", parseErrorList9);
        boolean boolean12 = htmlTreeBuilder5.framesetOk();
        org.jsoup.parser.Parser parser13 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser15 = parser13.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document18 = parser13.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document21 = parser13.parseInput("<hi!>", "[]");
        htmlTreeBuilder5.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document21);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        boolean boolean24 = htmlTreeBuilder5.inScope(strArray23);
        java.lang.String str25 = htmlTreeBuilder5.toString();
        org.jsoup.parser.Tokeniser tokeniser26 = htmlTreeBuilder5.tokeniser;
        java.util.List<org.jsoup.parser.Token.Character> characterList27 = htmlTreeBuilder5.getPendingTableCharacters();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        boolean boolean35 = htmlTreeBuilder28.framesetOk();
        org.jsoup.parser.Parser parser36 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser38 = parser36.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document41 = parser36.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document44 = parser36.parseInput("<hi!>", "[]");
        htmlTreeBuilder28.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document44);
        boolean boolean46 = htmlTreeBuilder28.isFragmentParsing();
        org.jsoup.parser.Parser parser47 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder28);
        org.jsoup.parser.Token.StartTag startTag48 = new org.jsoup.parser.Token.StartTag();
        startTag48.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag52 = startTag48.name("hi!#");
        boolean boolean53 = startTag48.selfClosing;
        java.lang.String str54 = startTag48.toString();
        org.jsoup.nodes.Element element55 = htmlTreeBuilder28.insertEmpty(startTag48);
        htmlTreeBuilder5.setHeadElement(element55);
        boolean boolean57 = htmlTreeBuilder0.isSpecial(element55);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parser13);
        org.junit.Assert.assertNotNull(parser15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(tokeniser26);
        org.junit.Assert.assertNotNull(characterList27);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(parser36);
        org.junit.Assert.assertNotNull(parser38);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(tag52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<hi!#>" + "'", str54, "<hi!#>");
        org.junit.Assert.assertNotNull(element55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.framesetOk(false);
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        org.jsoup.nodes.Element element23 = htmlTreeBuilder0.currentElement();
        htmlTreeBuilder0.clearStackToTableRowContext();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(element23);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.CharacterReader characterReader14 = null;
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList16.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList16.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList16.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        boolean boolean23 = parseErrorList16.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        org.jsoup.parser.Tokeniser tokeniser24 = new org.jsoup.parser.Tokeniser(characterReader14, parseErrorList21);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList21.iterator();
        htmlTreeBuilder0.initialiseParse("hi!", "hi!#", parseErrorList21);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.parser.ParseError> parseErrorList29 = parseErrorList21.subList(0, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 8");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parseErrorItor25);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList12 = htmlTreeBuilder0.stack;
        org.jsoup.parser.Token.StartTag startTag14 = new org.jsoup.parser.Token.StartTag("<!---->");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState15 = org.jsoup.parser.HtmlTreeBuilderState.AfterFrameset;
        boolean boolean16 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag14, htmlTreeBuilderState15);
        startTag14.appendTagName('\ufffd');
        startTag14.tagName = "\uffff";
        startTag14.newAttribute();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(elementList12);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement14 = htmlTreeBuilder0.getFormElement();
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList15 = htmlTreeBuilder0.getStack();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder16 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.nodes.Document document22 = htmlTreeBuilder16.parse("0: Doctype", "hi!", parseErrorList20);
        boolean boolean23 = htmlTreeBuilder16.framesetOk();
        org.jsoup.parser.Parser parser24 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser26 = parser24.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document29 = parser24.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document32 = parser24.parseInput("<hi!>", "[]");
        htmlTreeBuilder16.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        java.lang.String[] strArray34 = new java.lang.String[] {};
        boolean boolean35 = htmlTreeBuilder16.inScope(strArray34);
        htmlTreeBuilder16.markInsertionMode();
        boolean boolean38 = htmlTreeBuilder16.inScope("StartTag");
        htmlTreeBuilder16.markInsertionMode();
        org.jsoup.nodes.Document document42 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder16.setHeadElement((org.jsoup.nodes.Element) document42);
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document42);
        org.jsoup.parser.Token.EndTag endTag45 = new org.jsoup.parser.Token.EndTag();
        java.lang.String str46 = endTag45.tagName;
        htmlTreeBuilder0.currentToken = endTag45;
        htmlTreeBuilder0.popStackToClose("Doctype");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder50 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList54 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int55 = parseErrorList54.getMaxSize();
        org.jsoup.nodes.Document document56 = htmlTreeBuilder50.parse("0: Doctype", "hi!", parseErrorList54);
        boolean boolean57 = htmlTreeBuilder50.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState58 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder50.error(htmlTreeBuilderState58);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState60 = null;
        htmlTreeBuilder50.transition(htmlTreeBuilderState60);
        htmlTreeBuilder50.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList64 = htmlTreeBuilder50.getPendingTableCharacters();
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList65 = htmlTreeBuilder50.getStack();
        htmlTreeBuilder0.stack = elementList65;
        org.jsoup.parser.CharacterReader characterReader68 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean70 = characterReader68.matches('\000');
        characterReader68.mark();
        boolean boolean72 = characterReader68.isEmpty();
        org.jsoup.parser.TokenQueue tokenQueue74 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str76 = tokenQueue74.chompTo("Doctype");
        java.lang.String str77 = tokenQueue74.consumeWord();
        boolean boolean78 = tokenQueue74.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag79 = new org.jsoup.parser.Token.EndTag();
        char[] charArray82 = new char[] { '#', '#' };
        endTag79.appendAttributeValue(charArray82);
        boolean boolean84 = tokenQueue74.matchesAny(charArray82);
        boolean boolean85 = characterReader68.matchesAny(charArray82);
        java.lang.String str86 = characterReader68.consumeLetterThenDigitSequence();
        htmlTreeBuilder0.reader = characterReader68;
        org.jsoup.nodes.Document document90 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("StartTag", "St");
        htmlTreeBuilder0.insert((org.jsoup.nodes.Element) document90);
        htmlTreeBuilder0.framesetOk(false);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(formElement14);
        org.junit.Assert.assertNotNull(elementList15);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parser24);
        org.junit.Assert.assertNotNull(parser26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(parseErrorList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(document56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState58);
        org.junit.Assert.assertNotNull(characterList64);
        org.junit.Assert.assertNotNull(elementList65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "EndTag" + "'", str76, "EndTag");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "StartTag" + "'", str86, "StartTag");
        org.junit.Assert.assertNotNull(document90);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList18);
        org.jsoup.parser.Token.Tag tag23 = tokeniser22.tagPending;
        tokeniser22.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype26 = tokeniser22.doctypePending;
        tokeniser22.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype28 = tokeniser22.doctypePending;
        htmlTreeBuilder0.tokeniser = tokeniser22;
        org.jsoup.parser.Token.Tag tag30 = tokeniser22.tagPending;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = tokeniser22.unescapeEntities(false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNull(tag23);
        org.junit.Assert.assertNull(doctype26);
        org.junit.Assert.assertNull(doctype28);
        org.junit.Assert.assertNull(tag30);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.CharacterReader characterReader14 = null;
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList16.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList16.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList16.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        boolean boolean23 = parseErrorList16.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        org.jsoup.parser.Tokeniser tokeniser24 = new org.jsoup.parser.Tokeniser(characterReader14, parseErrorList21);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList21.iterator();
        htmlTreeBuilder0.initialiseParse("hi!", "hi!#", parseErrorList21);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState27 = org.jsoup.parser.HtmlTreeBuilderState.InCell;
        org.jsoup.parser.Token.StartTag startTag29 = new org.jsoup.parser.Token.StartTag("Doctype");
        org.jsoup.parser.Token.Tag tag31 = startTag29.name("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder32 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int37 = parseErrorList36.getMaxSize();
        org.jsoup.nodes.Document document38 = htmlTreeBuilder32.parse("0: Doctype", "hi!", parseErrorList36);
        org.jsoup.parser.ParseErrorList parseErrorList42 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream43 = parseErrorList42.stream();
        boolean boolean44 = parseErrorList42.canAddError();
        org.jsoup.nodes.Document document45 = htmlTreeBuilder32.parse("EndTag", "hi!#", parseErrorList42);
        java.lang.String[] strArray53 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean54 = htmlTreeBuilder32.inScope("hi!#", strArray53);
        htmlTreeBuilder32.clearStackToTableContext();
        boolean boolean56 = htmlTreeBuilderState27.process((org.jsoup.parser.Token) startTag29, htmlTreeBuilder32);
        boolean boolean57 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag29);
        org.jsoup.nodes.Element element59 = htmlTreeBuilder0.getFromStack("hi!");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState27);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNotNull(parseErrorList42);
        org.junit.Assert.assertNotNull(parseErrorStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(element59);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.AfterDoctypeSystemIdentifier;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        tokeniser7.emit("<!---->");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder11 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.Tokeniser tokeniser18 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList14);
        org.jsoup.parser.Token.Tag tag19 = tokeniser18.tagPending;
        org.jsoup.parser.Token.Tag tag21 = tokeniser18.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype22 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype23 = doctype22.asDoctype();
        java.lang.String str24 = doctype22.tokenType();
        tokeniser18.emit((org.jsoup.parser.Token) doctype22);
        org.jsoup.parser.Token.Tag tag27 = tokeniser18.createTagPending(true);
        xmlTreeBuilder11.currentToken = tag27;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder29 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int34 = parseErrorList33.getMaxSize();
        org.jsoup.nodes.Document document35 = htmlTreeBuilder29.parse("0: Doctype", "hi!", parseErrorList33);
        boolean boolean36 = htmlTreeBuilder29.framesetOk();
        org.jsoup.nodes.Document document39 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder29.setHeadElement((org.jsoup.nodes.Element) document39);
        xmlTreeBuilder11.doc = document39;
        org.jsoup.parser.ParseErrorList parseErrorList45 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream46 = parseErrorList45.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList45.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor48 = parseErrorList45.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int51 = parseErrorList50.getMaxSize();
        boolean boolean52 = parseErrorList45.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList50);
        xmlTreeBuilder11.initialiseParse("hi!#", "0: []", parseErrorList50);
        org.jsoup.parser.Token.Comment comment54 = new org.jsoup.parser.Token.Comment();
        java.lang.String str55 = comment54.getData();
        xmlTreeBuilder11.insert(comment54);
        java.lang.StringBuilder stringBuilder57 = comment54.data;
        tokeniser7.commentPending = comment54;
        org.jsoup.parser.CharacterReader characterReader60 = new org.jsoup.parser.CharacterReader("StartTag");
        int int62 = characterReader60.nextIndexOf((java.lang.CharSequence) "[]");
        java.lang.String str63 = characterReader60.consumeAsString();
        tokeniserState0.read(tokeniser7, characterReader60);
        int int66 = characterReader60.nextIndexOf('\ufffd');
        java.lang.String str67 = characterReader60.consumeLetterThenDigitSequence();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str68 = characterReader60.consumeAsString();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 9");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNull(tag19);
        org.junit.Assert.assertNotNull(tag21);
        org.junit.Assert.assertNotNull(doctype23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Doctype" + "'", str24, "Doctype");
        org.junit.Assert.assertNotNull(tag27);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(parseErrorList45);
        org.junit.Assert.assertNotNull(parseErrorStream46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNotNull(parseErrorItor48);
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(stringBuilder57);
        org.junit.Assert.assertEquals(stringBuilder57.toString(), "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "S" + "'", str63, "S");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "artTag" + "'", str67, "artTag");
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        htmlTreeBuilder0.newPendingTableCharacters();
        org.jsoup.nodes.Element element5 = htmlTreeBuilder0.getHeadElement();
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList6 = htmlTreeBuilder0.getStack();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(element5);
        org.junit.Assert.assertNull(elementList6);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.Comment comment12 = new org.jsoup.parser.Token.Comment();
        java.lang.String str13 = comment12.toString();
        boolean boolean14 = comment12.isCharacter();
        htmlTreeBuilder0.insert(comment12);
        org.jsoup.parser.Parser parser16 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.nodes.Element element18 = htmlTreeBuilder0.insert("StartTag");
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList(10, (int) '#');
        org.jsoup.parser.ParseError[] parseErrorArray25 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList26 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26, parseErrorArray25);
        org.jsoup.parser.ParseError[] parseErrorArray28 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList29 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList29, parseErrorArray28);
        boolean boolean31 = parseErrorList26.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList29);
        org.jsoup.parser.ParseError[] parseErrorArray32 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList33 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33, parseErrorArray32);
        boolean boolean35 = parseErrorList29.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream36 = parseErrorList29.stream();
        boolean boolean37 = parseErrorList24.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList29);
        htmlTreeBuilder0.initialiseParse(" ", "tartTag", parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<!---->" + "'", str13, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(parseErrorArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(parseErrorArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(parseErrorArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(parseErrorStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        htmlTreeBuilder0.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document32);
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        org.jsoup.parser.CharacterReader characterReader35 = htmlTreeBuilder0.reader;
        java.lang.String str37 = characterReader35.consumeTo('\ufffd');
        int int39 = characterReader35.nextIndexOf((java.lang.CharSequence) "[100: ]");
        java.lang.String str40 = characterReader35.consumeToEnd();
        boolean boolean41 = characterReader35.isEmpty();
        org.jsoup.parser.TokenQueue tokenQueue43 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str45 = tokenQueue43.chompTo("Doctype");
        java.lang.String str46 = tokenQueue43.consumeWord();
        boolean boolean47 = tokenQueue43.matchesWhitespace();
        char char48 = tokenQueue43.peek();
        java.lang.String str49 = tokenQueue43.consumeElementSelector();
        boolean boolean50 = tokenQueue43.matchesWhitespace();
        java.lang.String str52 = tokenQueue43.chompToIgnoreCase("tartTag");
        org.jsoup.parser.CharacterReader characterReader53 = null;
        org.jsoup.parser.ParseErrorList parseErrorList55 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream56 = parseErrorList55.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor57 = parseErrorList55.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor58 = parseErrorList55.iterator();
        org.jsoup.parser.Tokeniser tokeniser59 = new org.jsoup.parser.Tokeniser(characterReader53, parseErrorList55);
        org.jsoup.parser.Token.Tag tag60 = tokeniser59.tagPending;
        tokeniser59.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype63 = tokeniser59.doctypePending;
        tokeniser59.createCommentPending();
        org.jsoup.parser.Token.Comment comment65 = tokeniser59.commentPending;
        org.jsoup.parser.TokenQueue tokenQueue67 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean68 = tokenQueue67.isEmpty();
        char[] charArray70 = new char[] { '4' };
        boolean boolean71 = tokenQueue67.matchesAny(charArray70);
        tokeniser59.emit(charArray70);
        boolean boolean73 = tokenQueue43.matchesAny(charArray70);
        boolean boolean74 = characterReader35.matchesAny(charArray70);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(characterReader35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "EndTag" + "'", str45, "EndTag");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + char48 + "' != '" + '\000' + "'", char48 == '\000');
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(parseErrorList55);
        org.junit.Assert.assertNotNull(parseErrorStream56);
        org.junit.Assert.assertNotNull(parseErrorItor57);
        org.junit.Assert.assertNotNull(parseErrorItor58);
        org.junit.Assert.assertNull(tag60);
        org.junit.Assert.assertNull(doctype63);
        org.junit.Assert.assertNotNull(comment65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[4]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.newPendingTableCharacters();
        org.jsoup.nodes.Document document10 = htmlTreeBuilder0.parse("[100: ]", "");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(document10);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList18);
        org.jsoup.parser.Token.Tag tag23 = tokeniser22.tagPending;
        tokeniser22.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype26 = tokeniser22.doctypePending;
        tokeniser22.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype28 = tokeniser22.doctypePending;
        htmlTreeBuilder0.tokeniser = tokeniser22;
        org.jsoup.parser.Token.Comment comment30 = tokeniser22.commentPending;
        java.lang.String str31 = comment30.getData();
        java.lang.String str32 = comment30.toString();
        java.lang.String str33 = comment30.getData();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNull(tag23);
        org.junit.Assert.assertNull(doctype26);
        org.junit.Assert.assertNull(doctype28);
        org.junit.Assert.assertNotNull(comment30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<!---->" + "'", str32, "<!---->");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype12 = tokeniser6.doctypePending;
        org.jsoup.parser.Token.Comment comment13 = new org.jsoup.parser.Token.Comment();
        java.lang.String str14 = comment13.toString();
        java.lang.StringBuilder stringBuilder15 = comment13.data;
        boolean boolean16 = comment13.isEndTag();
        java.lang.String str17 = comment13.toString();
        tokeniser6.commentPending = comment13;
        tokeniser6.createCommentPending();
        org.jsoup.parser.ITokeniserState iTokeniserState20 = tokeniser6.getState();
        boolean boolean21 = tokeniser6.currentNodeInHtmlNS();
        tokeniser6.emitCommentPending();
        org.jsoup.parser.TokeniserState tokeniserState23 = org.jsoup.parser.TokeniserState.AfterDoctypeSystemKeyword;
        tokeniser6.eofError((org.jsoup.parser.ITokeniserState) tokeniserState23);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNull(doctype12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "<!---->" + "'", str14, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<!---->" + "'", str17, "<!---->");
        org.junit.Assert.assertNotNull(iTokeniserState20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(tokeniserState23);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.parser.TokenQueue tokenQueue38 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean39 = tokenQueue38.isEmpty();
        boolean boolean40 = tokenQueue38.consumeWhitespace();
        java.lang.String str41 = tokenQueue38.consumeWord();
        boolean boolean42 = tokenQueue38.matchesWhitespace();
        java.lang.String[] strArray47 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str48 = tokenQueue38.consumeToAny(strArray47);
        boolean boolean49 = htmlTreeBuilder0.inScope(strArray47);
        org.jsoup.nodes.Document document52 = org.jsoup.parser.Parser.parse("", "<hi!>");
        htmlTreeBuilder0.pushActiveFormattingElements((org.jsoup.nodes.Element) document52);
        htmlTreeBuilder0.setFosterInserts(false);
        boolean boolean56 = htmlTreeBuilder0.framesetOk();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "EndTag" + "'", str41, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader1.advance();
        characterReader1.advance();
        java.lang.String str5 = characterReader1.consumeTo('E');
        boolean boolean7 = characterReader1.matches('t');
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "artTag" + "'", str5, "artTag");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        org.jsoup.parser.Token.Character character1 = new org.jsoup.parser.Token.Character("1: Doctype");
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        boolean boolean13 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag15 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement17 = htmlTreeBuilder0.insertForm(startTag15, true);
        boolean boolean18 = startTag15.isDoctype();
        startTag15.appendAttributeName('S');
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(formElement17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.resetInsertionMode();
        org.jsoup.nodes.Element element8 = htmlTreeBuilder0.currentElement();
        boolean boolean10 = htmlTreeBuilder0.inButtonScope("-1: []");
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList12 = htmlTreeBuilder0.getStack();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(elementList12);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches("[100: ]");
        java.lang.String str4 = characterReader1.toString();
        java.lang.String str5 = characterReader1.consumeLetterThenDigitSequence();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "StartTag" + "'", str4, "StartTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        java.lang.String str5 = tag1.toString();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder13.error(htmlTreeBuilderState21);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState23 = null;
        htmlTreeBuilder13.transition(htmlTreeBuilderState23);
        htmlTreeBuilder13.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList27 = htmlTreeBuilder13.getPendingTableCharacters();
        htmlTreeBuilder0.setPendingTableCharacters(characterList27);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder29 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int34 = parseErrorList33.getMaxSize();
        org.jsoup.nodes.Document document35 = htmlTreeBuilder29.parse("0: Doctype", "hi!", parseErrorList33);
        htmlTreeBuilder29.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray38 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList39 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList39, characterArray38);
        htmlTreeBuilder29.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList39);
        boolean boolean42 = htmlTreeBuilder29.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag44 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement46 = htmlTreeBuilder29.insertForm(startTag44, true);
        htmlTreeBuilder29.baseUri = "[]";
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState49 = org.jsoup.parser.HtmlTreeBuilderState.InTableText;
        htmlTreeBuilder29.error(htmlTreeBuilderState49);
        htmlTreeBuilder0.error(htmlTreeBuilderState49);
        org.jsoup.parser.ParseErrorList parseErrorList52 = htmlTreeBuilder0.errors;
        boolean boolean53 = htmlTreeBuilder0.framesetOk();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState21);
        org.junit.Assert.assertNotNull(characterList27);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNotNull(characterArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(formElement46);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState49);
        org.junit.Assert.assertNotNull(parseErrorList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader2 = new org.jsoup.parser.CharacterReader("StartTag");
        int int4 = characterReader2.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean5 = characterReader2.matchesDigit();
        java.lang.String str6 = characterReader2.toString();
        xmlTreeBuilder0.reader = characterReader2;
        int int9 = characterReader2.nextIndexOf((java.lang.CharSequence) "-1: []E");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "StartTag" + "'", str6, "StartTag");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.EndTagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.Token.Tag tag10 = tokeniser7.createTagPending(true);
        tokeniser7.createTempBuffer();
        tokeniser7.emitTagPending();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder13.error(htmlTreeBuilderState21);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState23 = null;
        htmlTreeBuilder13.transition(htmlTreeBuilderState23);
        htmlTreeBuilder13.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList27 = htmlTreeBuilder13.getPendingTableCharacters();
        org.jsoup.parser.CharacterReader characterReader29 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean31 = characterReader29.matches("[100: ]");
        htmlTreeBuilder13.reader = characterReader29;
        htmlTreeBuilder13.insertMarkerToFormattingElements();
        org.jsoup.parser.CharacterReader characterReader35 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader35.advance();
        characterReader35.advance();
        java.lang.String str39 = characterReader35.consumeTo('E');
        htmlTreeBuilder13.reader = characterReader35;
        miniSoupTokeniserState0.read(tokeniser7, characterReader35);
        boolean boolean43 = characterReader35.matchesIgnoreCase("EOF");
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(tag10);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState21);
        org.junit.Assert.assertNotNull(characterList27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "artTag" + "'", str39, "artTag");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        java.lang.String[] strArray10 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str11 = tokenQueue1.consumeToAny(strArray10);
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.Tokeniser tokeniser18 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList14);
        org.jsoup.parser.Token.Tag tag19 = tokeniser18.tagPending;
        java.lang.StringBuilder stringBuilder20 = null;
        tokeniser18.dataBuffer = stringBuilder20;
        org.jsoup.parser.Token.EndTag endTag22 = new org.jsoup.parser.Token.EndTag();
        char[] charArray25 = new char[] { '#', '#' };
        endTag22.appendAttributeValue(charArray25);
        tokeniser18.emit(charArray25);
        boolean boolean28 = tokenQueue1.matchesAny(charArray25);
        java.lang.String str29 = tokenQueue1.consumeCssIdentifier();
        java.lang.String str31 = tokenQueue1.chompTo("a");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder32 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int37 = parseErrorList36.getMaxSize();
        org.jsoup.nodes.Document document38 = htmlTreeBuilder32.parse("0: Doctype", "hi!", parseErrorList36);
        boolean boolean39 = htmlTreeBuilder32.framesetOk();
        org.jsoup.parser.Parser parser40 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser42 = parser40.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document45 = parser40.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document48 = parser40.parseInput("<hi!>", "[]");
        htmlTreeBuilder32.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document48);
        boolean boolean50 = htmlTreeBuilder32.isFragmentParsing();
        org.jsoup.parser.TokenQueue tokenQueue52 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean53 = tokenQueue52.isEmpty();
        boolean boolean54 = tokenQueue52.consumeWhitespace();
        java.lang.String str55 = tokenQueue52.consumeWord();
        boolean boolean56 = tokenQueue52.matchesWhitespace();
        java.lang.String[] strArray61 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str62 = tokenQueue52.consumeToAny(strArray61);
        boolean boolean63 = htmlTreeBuilder32.inScope(strArray61);
        java.lang.String str64 = tokenQueue1.consumeToAny(strArray61);
        boolean boolean65 = tokenQueue1.consumeWhitespace();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNull(tag19);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(parser40);
        org.junit.Assert.assertNotNull(parser42);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "EndTag" + "'", str55, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag3.isKnownTag();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.EndTag endTag10 = new org.jsoup.parser.Token.EndTag();
        char[] charArray13 = new char[] { '#', '#' };
        endTag10.appendAttributeValue(charArray13);
        tokeniser6.emit(charArray13);
        org.jsoup.parser.Token.Doctype doctype16 = tokeniser6.doctypePending;
        org.jsoup.parser.Token.Doctype doctype17 = new org.jsoup.parser.Token.Doctype();
        boolean boolean18 = doctype17.isCharacter();
        org.jsoup.parser.Token.TokenType tokenType19 = org.jsoup.parser.Token.TokenType.StartTag;
        doctype17.type = tokenType19;
        java.lang.String str21 = doctype17.getSystemIdentifier();
        java.lang.String str22 = doctype17.getSystemIdentifier();
        tokeniser6.doctypePending = doctype17;
        java.lang.String str24 = doctype17.getSystemIdentifier();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, #]");
        org.junit.Assert.assertNull(doctype16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + tokenType19 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType19.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        java.lang.String str4 = tag1.getName();
        boolean boolean5 = tag1.preserveWhitespace();
        boolean boolean6 = tag1.isFormSubmittable();
        boolean boolean7 = tag1.isFormSubmittable();
        boolean boolean8 = tag1.isData();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        htmlTreeBuilder0.newPendingTableCharacters();
        org.jsoup.parser.Parser parser13 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.nodes.Element element14 = htmlTreeBuilder0.pop();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(element14);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        htmlTreeBuilder0.newPendingTableCharacters();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState6 = htmlTreeBuilder0.originalState();
        org.jsoup.nodes.Document document7 = htmlTreeBuilder0.doc;
        java.util.List<org.jsoup.parser.Token.Character> characterList8 = htmlTreeBuilder0.getPendingTableCharacters();
        boolean boolean9 = htmlTreeBuilder0.isFosterInserts();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(htmlTreeBuilderState6);
        org.junit.Assert.assertNull(document7);
        org.junit.Assert.assertNotNull(characterList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("St", "TreeBuilder{currentToken=</Doctype>, state=InBody, currentElement=<body>\n 0: Doctype\n</body>}");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.preserveWhitespace();
        boolean boolean3 = tag1.isKnownTag();
        boolean boolean4 = tag1.isBlock();
        org.jsoup.parser.Tag tag6 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean7 = tag6.isFormListed();
        org.jsoup.parser.Tag tag8 = tag6.setSelfClosing();
        boolean boolean9 = tag6.isKnownTag();
        boolean boolean10 = tag6.isKnownTag();
        boolean boolean11 = tag1.equals((java.lang.Object) boolean10);
        java.lang.String str12 = tag1.toString();
        org.jsoup.parser.Tag tag13 = tag1.setSelfClosing();
        boolean boolean14 = tag1.formatAsBlock();
        boolean boolean15 = tag1.isBlock();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(tag6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(tag8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(tag13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.CharacterReader characterReader16 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean18 = characterReader16.matches("[100: ]");
        htmlTreeBuilder0.reader = characterReader16;
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        org.jsoup.parser.CharacterReader characterReader22 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader22.advance();
        characterReader22.advance();
        java.lang.String str26 = characterReader22.consumeTo('E');
        htmlTreeBuilder0.reader = characterReader22;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder28 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader29 = null;
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream32 = parseErrorList31.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor33 = parseErrorList31.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor34 = parseErrorList31.iterator();
        org.jsoup.parser.Tokeniser tokeniser35 = new org.jsoup.parser.Tokeniser(characterReader29, parseErrorList31);
        xmlTreeBuilder28.tokeniser = tokeniser35;
        org.jsoup.parser.CharacterReader characterReader37 = null;
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream40 = parseErrorList39.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor41 = parseErrorList39.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList39.iterator();
        org.jsoup.parser.Tokeniser tokeniser43 = new org.jsoup.parser.Tokeniser(characterReader37, parseErrorList39);
        org.jsoup.parser.Token.Tag tag44 = tokeniser43.tagPending;
        org.jsoup.parser.Token.Tag tag46 = tokeniser43.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype47 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype48 = doctype47.asDoctype();
        java.lang.String str49 = doctype47.tokenType();
        tokeniser43.emit((org.jsoup.parser.Token) doctype47);
        org.jsoup.parser.ITokeniserState iTokeniserState51 = tokeniser43.getState();
        org.jsoup.parser.TokeniserState tokeniserState52 = org.jsoup.parser.TokeniserState.Rawtext;
        tokeniser43.eofError((org.jsoup.parser.ITokeniserState) tokeniserState52);
        tokeniser35.transition((org.jsoup.parser.ITokeniserState) tokeniserState52);
        org.jsoup.parser.Token.Tag tag56 = tokeniser35.createTagPending(true);
        org.jsoup.parser.Token.EndTag endTag58 = new org.jsoup.parser.Token.EndTag("<hi!>");
        org.jsoup.parser.CharacterReader characterReader59 = null;
        org.jsoup.parser.ParseErrorList parseErrorList61 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream62 = parseErrorList61.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor63 = parseErrorList61.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor64 = parseErrorList61.iterator();
        org.jsoup.parser.Tokeniser tokeniser65 = new org.jsoup.parser.Tokeniser(characterReader59, parseErrorList61);
        org.jsoup.parser.Token.Tag tag66 = tokeniser65.tagPending;
        tokeniser65.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype69 = tokeniser65.doctypePending;
        tokeniser65.createCommentPending();
        org.jsoup.parser.Token.Comment comment71 = tokeniser65.commentPending;
        org.jsoup.parser.TokenQueue tokenQueue73 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean74 = tokenQueue73.isEmpty();
        char[] charArray76 = new char[] { '4' };
        boolean boolean77 = tokenQueue73.matchesAny(charArray76);
        tokeniser65.emit(charArray76);
        endTag58.appendAttributeValue(charArray76);
        tag56.appendAttributeValue(charArray76);
        boolean boolean81 = characterReader22.matchesAny(charArray76);
        java.lang.String str82 = characterReader22.consumeDigitSequence();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "artTag" + "'", str26, "artTag");
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertNotNull(parseErrorStream32);
        org.junit.Assert.assertNotNull(parseErrorItor33);
        org.junit.Assert.assertNotNull(parseErrorItor34);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertNotNull(parseErrorStream40);
        org.junit.Assert.assertNotNull(parseErrorItor41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNull(tag44);
        org.junit.Assert.assertNotNull(tag46);
        org.junit.Assert.assertNotNull(doctype48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Doctype" + "'", str49, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState51);
        org.junit.Assert.assertNotNull(tokeniserState52);
        org.junit.Assert.assertNotNull(tag56);
        org.junit.Assert.assertNotNull(parseErrorList61);
        org.junit.Assert.assertNotNull(parseErrorStream62);
        org.junit.Assert.assertNotNull(parseErrorItor63);
        org.junit.Assert.assertNotNull(parseErrorItor64);
        org.junit.Assert.assertNull(tag66);
        org.junit.Assert.assertNull(doctype69);
        org.junit.Assert.assertNotNull(comment71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[4]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("EndTag", "artTag");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        boolean boolean9 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList7);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        boolean boolean14 = parseErrorList12.canAddError();
        boolean boolean15 = parseErrorList7.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        boolean boolean16 = parseErrorList7.canAddError();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder17 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = new org.jsoup.parser.ParseErrorList(0, (int) (byte) 0);
        htmlTreeBuilder17.initialiseParse("<hi!>", "hi!#", parseErrorList22);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList22.listIterator();
        boolean boolean25 = parseErrorList7.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList22);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList7.listIterator();
        org.jsoup.parser.CharacterReader characterReader28 = new org.jsoup.parser.CharacterReader("t");
        java.lang.String str29 = characterReader28.toString();
        org.jsoup.parser.TokenQueue tokenQueue31 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean32 = tokenQueue31.isEmpty();
        boolean boolean33 = tokenQueue31.consumeWhitespace();
        java.lang.String str34 = tokenQueue31.consumeWord();
        boolean boolean35 = tokenQueue31.matchesWhitespace();
        java.lang.String[] strArray40 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str41 = tokenQueue31.consumeToAny(strArray40);
        org.jsoup.parser.CharacterReader characterReader42 = null;
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList44.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList44.iterator();
        org.jsoup.parser.Tokeniser tokeniser48 = new org.jsoup.parser.Tokeniser(characterReader42, parseErrorList44);
        org.jsoup.parser.Token.Tag tag49 = tokeniser48.tagPending;
        java.lang.StringBuilder stringBuilder50 = null;
        tokeniser48.dataBuffer = stringBuilder50;
        org.jsoup.parser.Token.EndTag endTag52 = new org.jsoup.parser.Token.EndTag();
        char[] charArray55 = new char[] { '#', '#' };
        endTag52.appendAttributeValue(charArray55);
        tokeniser48.emit(charArray55);
        boolean boolean58 = tokenQueue31.matchesAny(charArray55);
        java.lang.String str59 = characterReader28.consumeToAny(charArray55);
        int int60 = parseErrorList7.lastIndexOf((java.lang.Object) characterReader28);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder61 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList65 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int66 = parseErrorList65.getMaxSize();
        org.jsoup.nodes.Document document67 = htmlTreeBuilder61.parse("0: Doctype", "hi!", parseErrorList65);
        boolean boolean68 = htmlTreeBuilder61.framesetOk();
        org.jsoup.parser.Parser parser69 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser71 = parser69.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document74 = parser69.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document77 = parser69.parseInput("<hi!>", "[]");
        htmlTreeBuilder61.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document77);
        java.lang.String[] strArray79 = new java.lang.String[] {};
        boolean boolean80 = htmlTreeBuilder61.inScope(strArray79);
        htmlTreeBuilder61.framesetOk(false);
        htmlTreeBuilder61.insertMarkerToFormattingElements();
        boolean boolean84 = parseErrorList7.equals((java.lang.Object) htmlTreeBuilder61);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "t" + "'", str29, "t");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "EndTag" + "'", str34, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNull(tag49);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "t" + "'", str59, "t");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(parseErrorList65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(document67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(parser69);
        org.junit.Assert.assertNotNull(parser71);
        org.junit.Assert.assertNotNull(document74);
        org.junit.Assert.assertNotNull(document77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.framesetOk(false);
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        org.jsoup.nodes.Element element23 = htmlTreeBuilder0.currentElement();
        org.jsoup.parser.Token.StartTag startTag25 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.Element element26 = htmlTreeBuilder0.insertEmpty(startTag25);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState27 = org.jsoup.parser.HtmlTreeBuilderState.InSelect;
        htmlTreeBuilder0.error(htmlTreeBuilderState27);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState27);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.markInsertionMode();
        boolean boolean22 = htmlTreeBuilder0.inScope("StartTag");
        org.jsoup.parser.Token.StartTag startTag23 = new org.jsoup.parser.Token.StartTag();
        startTag23.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag27 = startTag23.name("hi!#");
        boolean boolean28 = startTag23.isStartTag();
        startTag23.appendTagName('a');
        org.jsoup.nodes.Element element31 = htmlTreeBuilder0.insertEmpty(startTag23);
        boolean boolean32 = startTag23.isEndTag();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(tag27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.CharacterReader characterReader14 = null;
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList16.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList16.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList16.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        boolean boolean23 = parseErrorList16.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        org.jsoup.parser.Tokeniser tokeniser24 = new org.jsoup.parser.Tokeniser(characterReader14, parseErrorList21);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList21.iterator();
        htmlTreeBuilder0.initialiseParse("hi!", "hi!#", parseErrorList21);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState27 = org.jsoup.parser.HtmlTreeBuilderState.InCell;
        org.jsoup.parser.Token.StartTag startTag29 = new org.jsoup.parser.Token.StartTag("Doctype");
        org.jsoup.parser.Token.Tag tag31 = startTag29.name("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder32 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int37 = parseErrorList36.getMaxSize();
        org.jsoup.nodes.Document document38 = htmlTreeBuilder32.parse("0: Doctype", "hi!", parseErrorList36);
        org.jsoup.parser.ParseErrorList parseErrorList42 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream43 = parseErrorList42.stream();
        boolean boolean44 = parseErrorList42.canAddError();
        org.jsoup.nodes.Document document45 = htmlTreeBuilder32.parse("EndTag", "hi!#", parseErrorList42);
        java.lang.String[] strArray53 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean54 = htmlTreeBuilder32.inScope("hi!#", strArray53);
        htmlTreeBuilder32.clearStackToTableContext();
        boolean boolean56 = htmlTreeBuilderState27.process((org.jsoup.parser.Token) startTag29, htmlTreeBuilder32);
        boolean boolean57 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag29);
        org.jsoup.parser.Parser parser60 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser62 = parser60.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder63 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document64 = xmlTreeBuilder63.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder65 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList70 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList72 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream73 = parseErrorList72.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor74 = parseErrorList72.iterator();
        boolean boolean75 = parseErrorList70.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList72);
        xmlTreeBuilder65.initialiseParse("<!---->", "hi!", parseErrorList70);
        xmlTreeBuilder63.errors = parseErrorList70;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList78 = xmlTreeBuilder63.stack;
        org.jsoup.parser.Parser parser79 = parser62.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder63);
        org.jsoup.parser.ParseErrorList parseErrorList81 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder63.errors = parseErrorList81;
        parseErrorList81.trimToSize();
        htmlTreeBuilder0.initialiseParse("<hi!#>", "a", parseErrorList81);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState27);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNotNull(parseErrorList42);
        org.junit.Assert.assertNotNull(parseErrorStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(parser60);
        org.junit.Assert.assertNotNull(parser62);
        org.junit.Assert.assertNull(document64);
        org.junit.Assert.assertNotNull(parseErrorList72);
        org.junit.Assert.assertNotNull(parseErrorStream73);
        org.junit.Assert.assertNotNull(parseErrorItor74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(elementList78);
        org.junit.Assert.assertNotNull(parser79);
        org.junit.Assert.assertNotNull(parseErrorList81);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("<");
        char char2 = tokenQueue1.consume();
        boolean boolean4 = tokenQueue1.matchesCS("hi!");
        org.junit.Assert.assertTrue("'" + char2 + "' != '" + '<' + "'", char2 == '<');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder17 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        org.jsoup.nodes.Document document23 = htmlTreeBuilder17.parse("0: Doctype", "hi!", parseErrorList21);
        boolean boolean24 = htmlTreeBuilder17.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState25 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder17.error(htmlTreeBuilderState25);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder27 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        org.jsoup.nodes.Document document33 = htmlTreeBuilder27.parse("0: Doctype", "hi!", parseErrorList31);
        org.jsoup.parser.ParseErrorList parseErrorList37 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream38 = parseErrorList37.stream();
        boolean boolean39 = parseErrorList37.canAddError();
        org.jsoup.nodes.Document document40 = htmlTreeBuilder27.parse("EndTag", "hi!#", parseErrorList37);
        java.lang.String[] strArray48 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean49 = htmlTreeBuilder27.inScope("hi!#", strArray48);
        boolean boolean50 = htmlTreeBuilder17.inScope(strArray48);
        boolean boolean51 = htmlTreeBuilder0.inScope("t", strArray48);
        org.jsoup.nodes.Element element52 = htmlTreeBuilder0.pop();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState25);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(parseErrorList37);
        org.junit.Assert.assertNotNull(parseErrorStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(element52);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.CharacterReader characterReader3 = null;
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream6 = parseErrorList5.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList5.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList5.iterator();
        org.jsoup.parser.Tokeniser tokeniser9 = new org.jsoup.parser.Tokeniser(characterReader3, parseErrorList5);
        org.jsoup.parser.Token.Tag tag10 = tokeniser9.tagPending;
        org.jsoup.parser.Token.Tag tag12 = tokeniser9.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype13 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype14 = doctype13.asDoctype();
        java.lang.String str15 = doctype13.tokenType();
        tokeniser9.emit((org.jsoup.parser.Token) doctype13);
        boolean boolean17 = tag1.equals((java.lang.Object) doctype13);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder18 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        org.jsoup.parser.Token.Tag tag28 = tokeniser25.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype29 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype30 = doctype29.asDoctype();
        java.lang.String str31 = doctype29.tokenType();
        tokeniser25.emit((org.jsoup.parser.Token) doctype29);
        org.jsoup.parser.Token.Tag tag34 = tokeniser25.createTagPending(true);
        xmlTreeBuilder18.currentToken = tag34;
        boolean boolean36 = tag1.equals((java.lang.Object) tag34);
        tag34.finaliseTag();
        tag34.appendTagName("StartTag");
        tag34.newAttribute();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorStream6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNull(tag10);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertNotNull(doctype14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Doctype" + "'", str15, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(doctype30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Doctype" + "'", str31, "Doctype");
        org.junit.Assert.assertNotNull(tag34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        org.jsoup.parser.Token.Tag tag15 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.EndTag endTag16 = new org.jsoup.parser.Token.EndTag();
        endTag16.newAttribute();
        tokeniser6.tagPending = endTag16;
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState19 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader20 = null;
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream23 = parseErrorList22.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList22.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList22.iterator();
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader20, parseErrorList22);
        org.jsoup.parser.Token.Tag tag27 = tokeniser26.tagPending;
        java.lang.StringBuilder stringBuilder28 = null;
        tokeniser26.dataBuffer = stringBuilder28;
        org.jsoup.parser.Token.EndTag endTag30 = new org.jsoup.parser.Token.EndTag();
        char[] charArray33 = new char[] { '#', '#' };
        endTag30.appendAttributeValue(charArray33);
        tokeniser26.emit(charArray33);
        org.jsoup.parser.Token.Comment comment36 = tokeniser26.commentPending;
        org.jsoup.parser.CharacterReader characterReader38 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean39 = characterReader38.matchesLetter();
        miniSoupTokeniserState19.read(tokeniser26, characterReader38);
        int int41 = characterReader38.pos();
        org.jsoup.parser.TokenQueue tokenQueue43 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean44 = tokenQueue43.isEmpty();
        java.lang.String str46 = tokenQueue43.consumeToIgnoreCase("<hi!>");
        java.lang.String str47 = tokenQueue43.consumeTagName();
        boolean boolean48 = tokenQueue43.matchesWord();
        boolean boolean50 = tokenQueue43.matchesCS("StartTag");
        org.jsoup.parser.TokenQueue tokenQueue52 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str54 = tokenQueue52.chompTo("Doctype");
        java.lang.String str55 = tokenQueue52.consumeWord();
        boolean boolean56 = tokenQueue52.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag57 = new org.jsoup.parser.Token.EndTag();
        char[] charArray60 = new char[] { '#', '#' };
        endTag57.appendAttributeValue(charArray60);
        boolean boolean62 = tokenQueue52.matchesAny(charArray60);
        boolean boolean63 = tokenQueue43.matchesAny(charArray60);
        java.lang.String str64 = characterReader38.consumeToAny(charArray60);
        endTag16.appendAttributeValue(charArray60);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertNotNull(tag15);
        org.junit.Assert.assertNotNull(miniSoupTokeniserState19);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertNotNull(parseErrorStream23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNull(tag27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#, #]");
        org.junit.Assert.assertNull(comment36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "EndTag" + "'", str46, "EndTag");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "EndTag" + "'", str54, "EndTag");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "StartTag" + "'", str64, "StartTag");
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        tokeniser6.createDoctypePending();
        tokeniser6.emit('\000');
        org.jsoup.parser.Token.Tag tag21 = tokeniser6.tagPending;
        tokeniser6.acknowledgeSelfClosingFlag();
        org.jsoup.parser.ITokeniserState iTokeniserState23 = tokeniser6.getState();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertNotNull(tag21);
        org.junit.Assert.assertNotNull(iTokeniserState23);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype1 = new org.jsoup.parser.Token.Doctype();
        boolean boolean2 = doctype1.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = null;
        boolean boolean4 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) doctype1, htmlTreeBuilder3);
        java.lang.String str5 = doctype1.getName();
        java.lang.String str6 = doctype1.getSystemIdentifier();
        java.lang.StringBuilder stringBuilder7 = doctype1.publicIdentifier;
        java.lang.StringBuilder stringBuilder8 = doctype1.name;
        java.lang.StringBuilder stringBuilder9 = doctype1.name;
        java.lang.String str10 = doctype1.getPublicIdentifier();
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(stringBuilder7);
        org.junit.Assert.assertEquals(stringBuilder7.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder8);
        org.junit.Assert.assertEquals(stringBuilder8.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder9);
        org.junit.Assert.assertEquals(stringBuilder9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        org.jsoup.parser.Token.Comment comment0 = new org.jsoup.parser.Token.Comment();
        java.lang.String str1 = comment0.toString();
        boolean boolean2 = comment0.isCharacter();
        java.lang.String str3 = comment0.getData();
        java.lang.String str4 = comment0.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.StartTag startTag5 = comment0.asStartTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$StartTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "<!---->" + "'", str1, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "<!---->" + "'", str4, "<!---->");
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean8 = htmlTreeBuilder0.inListItemScope("100: ");
        boolean boolean9 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.framesetOk(false);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState12 = htmlTreeBuilder0.state();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.parser.Parser parser21 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser23 = parser21.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document26 = parser21.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document29 = parser21.parseInput("<hi!>", "[]");
        htmlTreeBuilder13.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document29);
        java.lang.String[] strArray31 = new java.lang.String[] {};
        boolean boolean32 = htmlTreeBuilder13.inScope(strArray31);
        htmlTreeBuilder13.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder34 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int39 = parseErrorList38.getMaxSize();
        org.jsoup.nodes.Document document40 = htmlTreeBuilder34.parse("0: Doctype", "hi!", parseErrorList38);
        htmlTreeBuilder13.setHeadElement((org.jsoup.nodes.Element) document40);
        org.jsoup.parser.CharacterReader characterReader42 = null;
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList44.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList44.iterator();
        org.jsoup.parser.Tokeniser tokeniser48 = new org.jsoup.parser.Tokeniser(characterReader42, parseErrorList44);
        org.jsoup.parser.Token.Tag tag49 = tokeniser48.tagPending;
        org.jsoup.parser.Token.Tag tag51 = tokeniser48.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype52 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype53 = doctype52.asDoctype();
        java.lang.String str54 = doctype52.tokenType();
        tokeniser48.emit((org.jsoup.parser.Token) doctype52);
        org.jsoup.parser.ITokeniserState iTokeniserState56 = tokeniser48.getState();
        org.jsoup.parser.Token.Comment comment57 = new org.jsoup.parser.Token.Comment();
        java.lang.String str58 = comment57.toString();
        java.lang.StringBuilder stringBuilder59 = comment57.data;
        boolean boolean60 = comment57.isEndTag();
        boolean boolean61 = comment57.isComment();
        tokeniser48.commentPending = comment57;
        htmlTreeBuilder13.insert(comment57);
        org.jsoup.nodes.Document document64 = htmlTreeBuilder13.doc;
        boolean boolean65 = htmlTreeBuilder0.onStack((org.jsoup.nodes.Element) document64);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState12);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(parser21);
        org.junit.Assert.assertNotNull(parser23);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNull(tag49);
        org.junit.Assert.assertNotNull(tag51);
        org.junit.Assert.assertNotNull(doctype53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Doctype" + "'", str54, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "<!---->" + "'", str58, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder59);
        org.junit.Assert.assertEquals(stringBuilder59.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(document64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        org.jsoup.parser.Token.StartTag startTag23 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes24 = startTag23.getAttributes();
        xmlTreeBuilder3.currentToken = startTag23;
        org.jsoup.parser.Token.EndTag endTag26 = new org.jsoup.parser.Token.EndTag();
        char[] charArray29 = new char[] { '#', '#' };
        endTag26.appendAttributeValue(charArray29);
        endTag26.appendAttributeValue(' ');
        char[] charArray34 = new char[] { '4' };
        endTag26.appendAttributeValue(charArray34);
        startTag23.appendAttributeValue(charArray34);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.EndTag endTag37 = startTag23.asEndTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$EndTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(attributes24);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#, #]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[4]");
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        boolean boolean37 = htmlTreeBuilder0.isFosterInserts();
        java.lang.String str38 = htmlTreeBuilder0.getBaseUri();
        org.jsoup.parser.CharacterReader characterReader40 = new org.jsoup.parser.CharacterReader("StartTag");
        java.lang.String str41 = characterReader40.consumeToEnd();
        int int43 = characterReader40.nextIndexOf('a');
        java.lang.String str44 = characterReader40.consumeDigitSequence();
        boolean boolean46 = characterReader40.matchesIgnoreCase("0: []");
        htmlTreeBuilder0.reader = characterReader40;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "StartTag" + "'", str41, "StartTag");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isSelfClosing();
        org.jsoup.parser.Tag tag5 = tag1.setSelfClosing();
        org.jsoup.parser.Token.EndTag endTag6 = new org.jsoup.parser.Token.EndTag();
        char[] charArray9 = new char[] { '#', '#' };
        endTag6.appendAttributeValue(charArray9);
        endTag6.appendAttributeValue(' ');
        char[] charArray14 = new char[] { '4' };
        endTag6.appendAttributeValue(charArray14);
        boolean boolean16 = tag5.equals((java.lang.Object) charArray14);
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(tag5);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking((int) (short) 100);
        org.jsoup.parser.ParseError parseError5 = new org.jsoup.parser.ParseError(0, "");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError6 = parseErrorList1.set((int) 't', parseError5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 116, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        org.jsoup.nodes.FormElement formElement11 = htmlTreeBuilder3.getFormElement();
        org.jsoup.parser.CharacterReader characterReader13 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean15 = characterReader13.matches('\000');
        java.lang.String str16 = characterReader13.consumeHexSequence();
        char char17 = characterReader13.current();
        htmlTreeBuilder3.reader = characterReader13;
        java.lang.String str19 = characterReader13.consumeLetterSequence();
        java.lang.String str21 = characterReader13.consumeTo("Comment");
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(formElement11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'S' + "'", char17 == 'S');
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "StartTag" + "'", str19, "StartTag");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.framesetOk(false);
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        org.jsoup.nodes.Element element23 = htmlTreeBuilder0.currentElement();
        htmlTreeBuilder0.resetInsertionMode();
        java.util.List<org.jsoup.parser.Token.Character> characterList25 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.CharacterReader characterReader26 = htmlTreeBuilder0.reader;
        boolean boolean28 = characterReader26.containsIgnoreCase("\uffff");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(characterList25);
        org.junit.Assert.assertNotNull(characterReader26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        java.lang.String str20 = htmlTreeBuilder0.toString();
        org.jsoup.parser.Tokeniser tokeniser21 = htmlTreeBuilder0.tokeniser;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder22 = new org.jsoup.parser.HtmlTreeBuilder();
        htmlTreeBuilder22.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder26 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int31 = parseErrorList30.getMaxSize();
        org.jsoup.nodes.Document document32 = htmlTreeBuilder26.parse("0: Doctype", "hi!", parseErrorList30);
        org.jsoup.parser.ParseError[] parseErrorArray33 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList34 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList34, parseErrorArray33);
        org.jsoup.parser.ParseError[] parseErrorArray36 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList37 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList37, parseErrorArray36);
        boolean boolean39 = parseErrorList34.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList37);
        java.lang.Object[] objArray40 = parseErrorList34.toArray();
        parseErrorList34.clear();
        org.jsoup.parser.ParseError[] parseErrorArray42 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList43 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43, parseErrorArray42);
        org.jsoup.parser.ParseError[] parseErrorArray45 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList46 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList46, parseErrorArray45);
        boolean boolean48 = parseErrorList43.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList46);
        java.lang.Object[] objArray49 = parseErrorList43.toArray();
        parseErrorList43.clear();
        org.jsoup.parser.ParseError[] parseErrorArray51 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList52 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList52, parseErrorArray51);
        boolean boolean54 = parseErrorList43.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList52);
        boolean boolean55 = parseErrorList34.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList52);
        java.lang.Object[] objArray56 = parseErrorList52.toArray();
        boolean boolean57 = parseErrorList30.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList52);
        org.jsoup.parser.ParseError[] parseErrorArray58 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList59 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59, parseErrorArray58);
        org.jsoup.parser.ParseError[] parseErrorArray61 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList62 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList62, parseErrorArray61);
        boolean boolean64 = parseErrorList59.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList62);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor65 = parseErrorList62.listIterator();
        int int67 = parseErrorList62.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag71 = new org.jsoup.parser.Token.EndTag();
        char[] charArray74 = new char[] { '#', '#' };
        endTag71.appendAttributeValue(charArray74);
        endTag71.finaliseTag();
        boolean boolean77 = endTag71.isSelfClosing();
        org.jsoup.parser.Tag tag79 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean80 = tag79.isFormListed();
        org.jsoup.parser.Tag tag81 = tag79.setSelfClosing();
        boolean boolean82 = tag79.isKnownTag();
        java.lang.Object[] objArray84 = new java.lang.Object[] { boolean77, tag79, "Doctype" };
        org.jsoup.parser.ParseError parseError85 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray84);
        parseErrorList62.add(0, parseError85);
        boolean boolean87 = parseErrorList30.add(parseError85);
        org.jsoup.nodes.Document document88 = htmlTreeBuilder22.parse("\uffff", "", parseErrorList30);
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document88);
        org.jsoup.parser.Token.Character character91 = new org.jsoup.parser.Token.Character("\ufffd>");
        java.lang.String str92 = character91.getData();
        htmlTreeBuilder0.insert(character91);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(tokeniser21);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(parseErrorArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(parseErrorArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(parseErrorArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(parseErrorArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(parseErrorArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(parseErrorItor65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(tag79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(tag81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(document88);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "\ufffd>" + "'", str92, "\ufffd>");
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        java.lang.String[] strArray21 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean22 = htmlTreeBuilder0.inScope("hi!#", strArray21);
        org.jsoup.parser.ParseErrorList parseErrorList27 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("0: Doctype", "", parseErrorList27);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder29 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document30 = xmlTreeBuilder29.doc;
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int35 = parseErrorList34.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray36 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList37 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList37, parseErrorArray36);
        org.jsoup.parser.ParseError[] parseErrorArray39 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList40 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40, parseErrorArray39);
        boolean boolean42 = parseErrorList37.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40);
        org.jsoup.parser.ParseError[] parseErrorArray43 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList44 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44, parseErrorArray43);
        boolean boolean46 = parseErrorList40.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        parseErrorList44.clear();
        boolean boolean48 = parseErrorList34.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList34.iterator();
        org.jsoup.nodes.Document document50 = xmlTreeBuilder29.parse("<hi!>", "0: []", parseErrorList34);
        htmlTreeBuilder0.push((org.jsoup.nodes.Element) document50);
        boolean boolean52 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.Token.Comment comment53 = new org.jsoup.parser.Token.Comment();
        java.lang.String str54 = comment53.toString();
        java.lang.StringBuilder stringBuilder55 = comment53.data;
        comment53.bogus = false;
        htmlTreeBuilder0.insert(comment53);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNull(document30);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parseErrorArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(parseErrorArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<!---->" + "'", str54, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder55);
        org.junit.Assert.assertEquals(stringBuilder55.toString(), "");
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        org.jsoup.nodes.Attributes attributes1 = null;
        org.jsoup.parser.Token.StartTag startTag2 = new org.jsoup.parser.Token.StartTag("0: []", attributes1);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.isEmpty();
        java.lang.String str6 = tag1.toString();
        boolean boolean7 = tag1.isKnownTag();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("<hi!#>");
        org.jsoup.parser.TokenQueue tokenQueue3 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean4 = tokenQueue3.isEmpty();
        java.lang.String str6 = tokenQueue3.consumeToIgnoreCase("<hi!>");
        java.lang.String str7 = tokenQueue3.consumeTagName();
        boolean boolean8 = tokenQueue3.matchesWord();
        tokenQueue3.advance();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder10 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int15 = parseErrorList14.getMaxSize();
        org.jsoup.nodes.Document document16 = htmlTreeBuilder10.parse("0: Doctype", "hi!", parseErrorList14);
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream21 = parseErrorList20.stream();
        boolean boolean22 = parseErrorList20.canAddError();
        org.jsoup.nodes.Document document23 = htmlTreeBuilder10.parse("EndTag", "hi!#", parseErrorList20);
        java.lang.String[] strArray31 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean32 = htmlTreeBuilder10.inScope("hi!#", strArray31);
        java.lang.String str33 = tokenQueue3.consumeToAny(strArray31);
        boolean boolean34 = tokenQueue1.matchesAny(strArray31);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "EndTag" + "'", str6, "EndTag");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertNotNull(parseErrorStream21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder21 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int26 = parseErrorList25.getMaxSize();
        org.jsoup.nodes.Document document27 = htmlTreeBuilder21.parse("0: Doctype", "hi!", parseErrorList25);
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document27);
        org.jsoup.parser.CharacterReader characterReader29 = null;
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream32 = parseErrorList31.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor33 = parseErrorList31.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor34 = parseErrorList31.iterator();
        org.jsoup.parser.Tokeniser tokeniser35 = new org.jsoup.parser.Tokeniser(characterReader29, parseErrorList31);
        org.jsoup.parser.Token.Tag tag36 = tokeniser35.tagPending;
        org.jsoup.parser.Token.Tag tag38 = tokeniser35.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype39 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype40 = doctype39.asDoctype();
        java.lang.String str41 = doctype39.tokenType();
        tokeniser35.emit((org.jsoup.parser.Token) doctype39);
        org.jsoup.parser.ITokeniserState iTokeniserState43 = tokeniser35.getState();
        org.jsoup.parser.Token.Comment comment44 = new org.jsoup.parser.Token.Comment();
        java.lang.String str45 = comment44.toString();
        java.lang.StringBuilder stringBuilder46 = comment44.data;
        boolean boolean47 = comment44.isEndTag();
        boolean boolean48 = comment44.isComment();
        tokeniser35.commentPending = comment44;
        htmlTreeBuilder0.insert(comment44);
        org.jsoup.nodes.Document document51 = htmlTreeBuilder0.doc;
        boolean boolean53 = htmlTreeBuilder0.inTableScope("hi!");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertNotNull(parseErrorStream32);
        org.junit.Assert.assertNotNull(parseErrorItor33);
        org.junit.Assert.assertNotNull(parseErrorItor34);
        org.junit.Assert.assertNull(tag36);
        org.junit.Assert.assertNotNull(tag38);
        org.junit.Assert.assertNotNull(doctype40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Doctype" + "'", str41, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "<!---->" + "'", str45, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder46);
        org.junit.Assert.assertEquals(stringBuilder46.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(document51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        java.util.List<org.jsoup.parser.ParseError> parseErrorList3 = parser0.getErrors();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder4 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList8 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int9 = parseErrorList8.getMaxSize();
        org.jsoup.nodes.Document document10 = htmlTreeBuilder4.parse("0: Doctype", "hi!", parseErrorList8);
        boolean boolean11 = htmlTreeBuilder4.framesetOk();
        org.jsoup.parser.Parser parser12 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser14 = parser12.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document17 = parser12.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document20 = parser12.parseInput("<hi!>", "[]");
        htmlTreeBuilder4.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document20);
        java.lang.String[] strArray22 = new java.lang.String[] {};
        boolean boolean23 = htmlTreeBuilder4.inScope(strArray22);
        htmlTreeBuilder4.markInsertionMode();
        boolean boolean26 = htmlTreeBuilder4.inScope("StartTag");
        org.jsoup.parser.Token.StartTag startTag27 = new org.jsoup.parser.Token.StartTag();
        startTag27.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag31 = startTag27.name("hi!#");
        boolean boolean32 = startTag27.isStartTag();
        startTag27.appendTagName('a');
        org.jsoup.nodes.Element element35 = htmlTreeBuilder4.insertEmpty(startTag27);
        java.lang.String str36 = htmlTreeBuilder4.getBaseUri();
        org.jsoup.nodes.Document document39 = htmlTreeBuilder4.parse("\uffff", "<!---->");
        org.jsoup.parser.Parser parser40 = parser0.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder4);
        org.jsoup.nodes.Document document43 = parser0.parseInput("artTag", "<Doctype>");
        org.jsoup.parser.TreeBuilder treeBuilder44 = parser0.getTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList48 = org.jsoup.parser.ParseErrorList.tracking((int) '\uffff');
        treeBuilder44.initialiseParse("a", "ndTag", parseErrorList48);
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parser12);
        org.junit.Assert.assertNotNull(parser14);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(parser40);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertNotNull(treeBuilder44);
        org.junit.Assert.assertNotNull(parseErrorList48);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.isEmpty();
        boolean boolean6 = tag1.isEmpty();
        boolean boolean7 = tag1.preserveWhitespace();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.CharacterReader characterReader16 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean18 = characterReader16.matches("[100: ]");
        htmlTreeBuilder0.reader = characterReader16;
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        org.jsoup.parser.CharacterReader characterReader22 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader22.advance();
        characterReader22.advance();
        java.lang.String str26 = characterReader22.consumeTo('E');
        htmlTreeBuilder0.reader = characterReader22;
        org.jsoup.parser.CharacterReader characterReader29 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean31 = characterReader29.matches('\000');
        java.lang.String str32 = characterReader29.consumeHexSequence();
        char char33 = characterReader29.current();
        boolean boolean34 = characterReader29.matchesLetter();
        org.jsoup.parser.CharacterReader characterReader35 = null;
        org.jsoup.parser.ParseErrorList parseErrorList37 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream38 = parseErrorList37.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor39 = parseErrorList37.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList37.iterator();
        org.jsoup.parser.Tokeniser tokeniser41 = new org.jsoup.parser.Tokeniser(characterReader35, parseErrorList37);
        org.jsoup.parser.Token.EndTag endTag42 = new org.jsoup.parser.Token.EndTag();
        char[] charArray45 = new char[] { '#', '#' };
        endTag42.appendAttributeValue(charArray45);
        endTag42.appendAttributeValue(' ');
        char[] charArray50 = new char[] { '4' };
        endTag42.appendAttributeValue(charArray50);
        tokeniser41.emit(charArray50);
        java.lang.String str53 = characterReader29.consumeToAny(charArray50);
        java.lang.String str54 = characterReader22.consumeToAny(charArray50);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "artTag" + "'", str26, "artTag");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + char33 + "' != '" + 'S' + "'", char33 == 'S');
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(parseErrorList37);
        org.junit.Assert.assertNotNull(parseErrorStream38);
        org.junit.Assert.assertNotNull(parseErrorItor39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[#, #]");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[4]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "StartTag" + "'", str53, "StartTag");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        boolean boolean3 = parseErrorList1.canAddError();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState4 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag5 = new org.jsoup.parser.Token.EndTag();
        endTag5.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder7 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int12 = parseErrorList11.getMaxSize();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder7.parse("0: Doctype", "hi!", parseErrorList11);
        boolean boolean14 = htmlTreeBuilderState4.process((org.jsoup.parser.Token) endTag5, htmlTreeBuilder7);
        htmlTreeBuilder7.baseUri = "</hi![]>";
        boolean boolean17 = parseErrorList1.equals((java.lang.Object) htmlTreeBuilder7);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder20 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList25 = new org.jsoup.parser.ParseErrorList(0, (int) (byte) 0);
        htmlTreeBuilder20.initialiseParse("<hi!>", "hi!#", parseErrorList25);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList25.listIterator();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder7.parse("[100: ]", "-1: []", parseErrorList25);
        java.util.function.UnaryOperator<org.jsoup.parser.ParseError> parseErrorUnaryOperator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            parseErrorList25.replaceAll(parseErrorUnaryOperator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState4);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNotNull(document28);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking((int) (short) 0);
        org.junit.Assert.assertNotNull(parseErrorList1);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype1 = doctype0.asDoctype();
        boolean boolean2 = doctype0.isEOF();
        java.lang.StringBuilder stringBuilder3 = doctype0.name;
        java.lang.String str4 = doctype0.getName();
        org.junit.Assert.assertNotNull(doctype1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(stringBuilder3);
        org.junit.Assert.assertEquals(stringBuilder3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        htmlTreeBuilder0.newPendingTableCharacters();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState6 = htmlTreeBuilder0.originalState();
        org.jsoup.nodes.Document document7 = htmlTreeBuilder0.doc;
        java.util.List<org.jsoup.parser.Token.Character> characterList8 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        boolean boolean16 = htmlTreeBuilder9.framesetOk();
        org.jsoup.parser.Parser parser17 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser19 = parser17.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document22 = parser17.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document25 = parser17.parseInput("<hi!>", "[]");
        htmlTreeBuilder9.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document25);
        boolean boolean27 = htmlTreeBuilder9.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder28 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList33 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList35 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream36 = parseErrorList35.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor37 = parseErrorList35.iterator();
        boolean boolean38 = parseErrorList33.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList35);
        xmlTreeBuilder28.initialiseParse("<!---->", "hi!", parseErrorList33);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document44 = xmlTreeBuilder28.parse("", "[]", parseErrorList43);
        boolean boolean45 = htmlTreeBuilder9.isInActiveFormattingElements((org.jsoup.nodes.Element) document44);
        org.jsoup.nodes.Element element47 = htmlTreeBuilder9.insert("<!---->");
        org.jsoup.parser.Token.StartTag startTag49 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag49.appendTagName("hi!");
        startTag49.appendAttributeName('4');
        boolean boolean54 = htmlTreeBuilder9.process((org.jsoup.parser.Token) startTag49);
        org.jsoup.parser.Token.Tag tag56 = startTag49.name("</hi![]>");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element57 = htmlTreeBuilder0.insertEmpty(startTag49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(htmlTreeBuilderState6);
        org.junit.Assert.assertNull(document7);
        org.junit.Assert.assertNotNull(characterList8);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(parser17);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(parseErrorList35);
        org.junit.Assert.assertNotNull(parseErrorStream36);
        org.junit.Assert.assertNotNull(parseErrorItor37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(element47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(tag56);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype1 = new org.jsoup.parser.Token.Doctype();
        boolean boolean2 = doctype1.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = null;
        boolean boolean4 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) doctype1, htmlTreeBuilder3);
        java.lang.StringBuilder stringBuilder5 = doctype1.name;
        java.lang.StringBuilder stringBuilder6 = doctype1.name;
        java.lang.String str7 = doctype1.getSystemIdentifier();
        boolean boolean8 = doctype1.forceQuirks;
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(stringBuilder5);
        org.junit.Assert.assertEquals(stringBuilder5.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder6);
        org.junit.Assert.assertEquals(stringBuilder6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        boolean boolean9 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList7);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList7.iterator();
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        org.jsoup.parser.ParseError[] parseErrorArray15 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList16 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16, parseErrorArray15);
        boolean boolean18 = parseErrorList13.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16);
        int int20 = parseErrorList16.lastIndexOf((java.lang.Object) (byte) -1);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.noTracking();
        boolean boolean22 = parseErrorList16.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream23 = parseErrorList16.parallelStream();
        boolean boolean24 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16);
        org.jsoup.parser.ParseError[] parseErrorArray25 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList26 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26, parseErrorArray25);
        org.jsoup.parser.ParseError[] parseErrorArray28 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList29 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList29, parseErrorArray28);
        boolean boolean31 = parseErrorList26.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList29);
        org.jsoup.parser.ParseError[] parseErrorArray32 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList33 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33, parseErrorArray32);
        boolean boolean35 = parseErrorList29.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33);
        parseErrorList33.clear();
        boolean boolean37 = parseErrorList33.isEmpty();
        org.jsoup.parser.Token.Doctype doctype38 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype39 = doctype38.asDoctype();
        boolean boolean40 = doctype38.isEOF();
        boolean boolean41 = doctype38.isForceQuirks();
        boolean boolean42 = doctype38.isEndTag();
        boolean boolean43 = parseErrorList33.remove((java.lang.Object) boolean42);
        org.jsoup.parser.CharacterReader characterReader44 = null;
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream47 = parseErrorList46.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor48 = parseErrorList46.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList46.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList51 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int52 = parseErrorList51.getMaxSize();
        boolean boolean53 = parseErrorList46.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList51);
        org.jsoup.parser.Tokeniser tokeniser54 = new org.jsoup.parser.Tokeniser(characterReader44, parseErrorList51);
        org.jsoup.parser.ParseErrorList parseErrorList56 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream57 = parseErrorList56.stream();
        boolean boolean58 = parseErrorList56.canAddError();
        boolean boolean59 = parseErrorList51.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList56);
        boolean boolean60 = parseErrorList33.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList51);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream61 = parseErrorList33.stream();
        boolean boolean62 = parseErrorList16.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33);
        org.jsoup.parser.Token.StartTag startTag64 = new org.jsoup.parser.Token.StartTag("10: ");
        org.jsoup.nodes.Attributes attributes65 = startTag64.getAttributes();
        boolean boolean66 = startTag64.isSelfClosing();
        startTag64.appendAttributeValue("Doctype");
        boolean boolean69 = parseErrorList16.equals((java.lang.Object) "Doctype");
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(parseErrorStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(parseErrorArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(parseErrorArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(parseErrorArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doctype39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(parseErrorStream47);
        org.junit.Assert.assertNotNull(parseErrorItor48);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertNotNull(parseErrorList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(parseErrorList56);
        org.junit.Assert.assertNotNull(parseErrorStream57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(parseErrorStream61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(attributes65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList(0, (int) (byte) 0);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        htmlTreeBuilder3.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray12 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList13 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList13, characterArray12);
        htmlTreeBuilder3.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList13);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder16 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.nodes.Document document22 = htmlTreeBuilder16.parse("0: Doctype", "hi!", parseErrorList20);
        boolean boolean23 = htmlTreeBuilder16.framesetOk();
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder16.setHeadElement((org.jsoup.nodes.Element) document26);
        org.jsoup.nodes.Element element28 = htmlTreeBuilder16.pop();
        htmlTreeBuilder3.push(element28);
        org.jsoup.parser.Token token30 = htmlTreeBuilder3.currentToken;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder31 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList35 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int36 = parseErrorList35.getMaxSize();
        org.jsoup.nodes.Document document37 = htmlTreeBuilder31.parse("0: Doctype", "hi!", parseErrorList35);
        htmlTreeBuilder31.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray40 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList41 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList41, characterArray40);
        htmlTreeBuilder31.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList41);
        boolean boolean44 = htmlTreeBuilder31.isFosterInserts();
        htmlTreeBuilder31.generateImpliedEndTags();
        org.jsoup.parser.ParseErrorList parseErrorList46 = htmlTreeBuilder31.errors;
        htmlTreeBuilder3.errors = parseErrorList46;
        boolean boolean48 = parseErrorList2.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList46);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertNotNull(characterArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(element28);
        org.junit.Assert.assertNotNull(token30);
        org.junit.Assert.assertNotNull(parseErrorList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertNotNull(characterArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        tokeniser6.createDoctypePending();
        tokeniser6.emit('\000');
        org.jsoup.parser.Token.Tag tag21 = tokeniser6.tagPending;
        tokeniser6.acknowledgeSelfClosingFlag();
        org.jsoup.parser.TokeniserState tokeniserState23 = org.jsoup.parser.TokeniserState.ScriptDataEscapeStartDash;
        tokeniser6.error((org.jsoup.parser.ITokeniserState) tokeniserState23);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertNotNull(tag21);
        org.junit.Assert.assertNotNull(tokeniserState23);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        java.util.List<org.jsoup.nodes.Node> nodeList2 = org.jsoup.parser.Parser.parseXmlFragment("\uffff>", "");
        org.junit.Assert.assertNotNull(nodeList2);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        htmlTreeBuilder0.clearStackToTableContext();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder20 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int25 = parseErrorList24.getMaxSize();
        org.jsoup.nodes.Document document26 = htmlTreeBuilder20.parse("0: Doctype", "hi!", parseErrorList24);
        htmlTreeBuilder20.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray29 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList30 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList30, characterArray29);
        htmlTreeBuilder20.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList30);
        boolean boolean33 = htmlTreeBuilder20.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag35 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement37 = htmlTreeBuilder20.insertForm(startTag35, true);
        org.jsoup.nodes.Element element38 = htmlTreeBuilder0.insert(startTag35);
        htmlTreeBuilder0.baseUri = "TreeBuilder{currentToken=</Doctype>, state=InBody, currentElement=<body>\n 0: Doctype\n</body>}";
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(characterArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(formElement37);
        org.junit.Assert.assertNotNull(element38);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        boolean boolean11 = doctype10.isCharacter();
        boolean boolean12 = doctype10.isEndTag();
        boolean boolean13 = doctype10.isCharacter();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        tokeniser6.createTempBuffer();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder16 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.nodes.Document document22 = htmlTreeBuilder16.parse("0: Doctype", "hi!", parseErrorList20);
        boolean boolean23 = htmlTreeBuilder16.framesetOk();
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder16.setHeadElement((org.jsoup.nodes.Element) document26);
        org.jsoup.parser.CharacterReader characterReader30 = null;
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream33 = parseErrorList32.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor34 = parseErrorList32.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList32.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList37 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int38 = parseErrorList37.getMaxSize();
        boolean boolean39 = parseErrorList32.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList37);
        org.jsoup.parser.Tokeniser tokeniser40 = new org.jsoup.parser.Tokeniser(characterReader30, parseErrorList37);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor41 = parseErrorList37.iterator();
        htmlTreeBuilder16.initialiseParse("hi!", "hi!#", parseErrorList37);
        org.jsoup.parser.CharacterReader characterReader43 = null;
        org.jsoup.parser.ParseErrorList parseErrorList45 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream46 = parseErrorList45.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList45.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor48 = parseErrorList45.iterator();
        org.jsoup.parser.Tokeniser tokeniser49 = new org.jsoup.parser.Tokeniser(characterReader43, parseErrorList45);
        org.jsoup.parser.Token.Tag tag50 = tokeniser49.tagPending;
        java.lang.StringBuilder stringBuilder51 = null;
        tokeniser49.dataBuffer = stringBuilder51;
        org.jsoup.parser.Token.EndTag endTag53 = new org.jsoup.parser.Token.EndTag();
        char[] charArray56 = new char[] { '#', '#' };
        endTag53.appendAttributeValue(charArray56);
        tokeniser49.emit(charArray56);
        htmlTreeBuilder16.tokeniser = tokeniser49;
        org.jsoup.parser.TokeniserState tokeniserState60 = org.jsoup.parser.TokeniserState.ScriptDataEndTagName;
        tokeniser49.error((org.jsoup.parser.ITokeniserState) tokeniserState60);
        org.jsoup.parser.ITokeniserState iTokeniserState62 = tokeniser49.getState();
        tokeniser6.transition(iTokeniserState62);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertNotNull(parseErrorStream33);
        org.junit.Assert.assertNotNull(parseErrorItor34);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNotNull(parseErrorList37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(parseErrorItor41);
        org.junit.Assert.assertNotNull(parseErrorList45);
        org.junit.Assert.assertNotNull(parseErrorStream46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNotNull(parseErrorItor48);
        org.junit.Assert.assertNull(tag50);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[#, #]");
        org.junit.Assert.assertNotNull(tokeniserState60);
        org.junit.Assert.assertNotNull(iTokeniserState62);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.CharacterReader characterReader14 = null;
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList16.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList16.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList16.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        boolean boolean23 = parseErrorList16.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        org.jsoup.parser.Tokeniser tokeniser24 = new org.jsoup.parser.Tokeniser(characterReader14, parseErrorList21);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList21.iterator();
        htmlTreeBuilder0.initialiseParse("hi!", "hi!#", parseErrorList21);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder27 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        org.jsoup.nodes.Document document33 = htmlTreeBuilder27.parse("0: Doctype", "hi!", parseErrorList31);
        htmlTreeBuilder27.resetInsertionMode();
        org.jsoup.nodes.Element element35 = htmlTreeBuilder27.currentElement();
        int int36 = parseErrorList21.lastIndexOf((java.lang.Object) htmlTreeBuilder27);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder37 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int42 = parseErrorList41.getMaxSize();
        org.jsoup.nodes.Document document43 = htmlTreeBuilder37.parse("0: Doctype", "hi!", parseErrorList41);
        boolean boolean44 = htmlTreeBuilder37.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState45 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder37.error(htmlTreeBuilderState45);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState47 = null;
        htmlTreeBuilder37.transition(htmlTreeBuilderState47);
        htmlTreeBuilder37.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader53 = null;
        org.jsoup.parser.ParseErrorList parseErrorList55 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream56 = parseErrorList55.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor57 = parseErrorList55.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor58 = parseErrorList55.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList60 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int61 = parseErrorList60.getMaxSize();
        boolean boolean62 = parseErrorList55.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList60);
        org.jsoup.parser.Tokeniser tokeniser63 = new org.jsoup.parser.Tokeniser(characterReader53, parseErrorList60);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor64 = parseErrorList60.iterator();
        org.jsoup.nodes.Document document65 = htmlTreeBuilder37.parse("[]", "Doctype", parseErrorList60);
        org.jsoup.parser.CharacterReader characterReader68 = null;
        org.jsoup.parser.ParseErrorList parseErrorList70 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream71 = parseErrorList70.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor72 = parseErrorList70.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor73 = parseErrorList70.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList75 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int76 = parseErrorList75.getMaxSize();
        boolean boolean77 = parseErrorList70.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList75);
        org.jsoup.parser.Tokeniser tokeniser78 = new org.jsoup.parser.Tokeniser(characterReader68, parseErrorList75);
        org.jsoup.parser.ParseErrorList parseErrorList80 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream81 = parseErrorList80.stream();
        boolean boolean82 = parseErrorList80.canAddError();
        boolean boolean83 = parseErrorList75.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList80);
        org.jsoup.nodes.Document document84 = htmlTreeBuilder37.parse("hi!", "<!---->", parseErrorList80);
        java.lang.Object[] objArray85 = parseErrorList80.toArray();
        boolean boolean86 = parseErrorList21.contains((java.lang.Object) parseErrorList80);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor87 = parseErrorList21.listIterator();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState45);
        org.junit.Assert.assertNotNull(parseErrorList55);
        org.junit.Assert.assertNotNull(parseErrorStream56);
        org.junit.Assert.assertNotNull(parseErrorItor57);
        org.junit.Assert.assertNotNull(parseErrorItor58);
        org.junit.Assert.assertNotNull(parseErrorList60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(parseErrorItor64);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertNotNull(parseErrorList70);
        org.junit.Assert.assertNotNull(parseErrorStream71);
        org.junit.Assert.assertNotNull(parseErrorItor72);
        org.junit.Assert.assertNotNull(parseErrorItor73);
        org.junit.Assert.assertNotNull(parseErrorList75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(parseErrorList80);
        org.junit.Assert.assertNotNull(parseErrorStream81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(document84);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(parseErrorItor87);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag6 = new org.jsoup.parser.Token.EndTag();
        char[] charArray9 = new char[] { '#', '#' };
        endTag6.appendAttributeValue(charArray9);
        boolean boolean11 = tokenQueue1.matchesAny(charArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = tokenQueue1.consumeToIgnoreCase("");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str1 = doctype0.getSystemIdentifier();
        org.jsoup.parser.Token.TokenType tokenType2 = doctype0.type;
        boolean boolean3 = doctype0.isForceQuirks();
        java.lang.String str4 = doctype0.getSystemIdentifier();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + tokenType2 + "' != '" + org.jsoup.parser.Token.TokenType.Doctype + "'", tokenType2.equals(org.jsoup.parser.Token.TokenType.Doctype));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        parseErrorList8.clear();
        boolean boolean12 = parseErrorList8.isEmpty();
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        boolean boolean16 = parseErrorList14.canAddError();
        org.jsoup.parser.ParseError parseError19 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str20 = parseError19.getErrorMessage();
        boolean boolean21 = parseErrorList14.add(parseError19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        org.jsoup.parser.Token.Tag tag31 = tokeniser28.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype32 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype33 = doctype32.asDoctype();
        java.lang.String str34 = doctype32.tokenType();
        tokeniser28.emit((org.jsoup.parser.Token) doctype32);
        org.jsoup.parser.ITokeniserState iTokeniserState36 = tokeniser28.getState();
        org.jsoup.parser.Token.Comment comment37 = new org.jsoup.parser.Token.Comment();
        java.lang.String str38 = comment37.toString();
        java.lang.StringBuilder stringBuilder39 = comment37.data;
        boolean boolean40 = comment37.isEndTag();
        boolean boolean41 = comment37.isComment();
        tokeniser28.commentPending = comment37;
        int int43 = parseErrorList14.lastIndexOf((java.lang.Object) comment37);
        boolean boolean44 = parseErrorList8.contains((java.lang.Object) comment37);
        java.lang.String str45 = comment37.getData();
        java.lang.String str46 = comment37.toString();
        boolean boolean47 = comment37.isStartTag();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertNotNull(doctype33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Doctype" + "'", str34, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<!---->" + "'", str38, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder39);
        org.junit.Assert.assertEquals(stringBuilder39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "<!---->" + "'", str46, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.isEmpty();
        boolean boolean6 = tag1.isEmpty();
        boolean boolean7 = tag1.canContainBlock();
        boolean boolean8 = tag1.isBlock();
        boolean boolean9 = tag1.formatAsBlock();
        boolean boolean10 = tag1.isKnownTag();
        boolean boolean11 = tag1.isSelfClosing();
        org.jsoup.parser.Tag tag12 = tag1.setSelfClosing();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(tag12);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag1.appendTagName("hi!");
        org.jsoup.nodes.Attributes attributes4 = startTag1.getAttributes();
        java.lang.String str5 = startTag1.toString();
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<hi!hi!>" + "'", str5, "<hi!hi!>");
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.BeforeDoctypePublicIdentifier;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        tokeniser7.createTempBuffer();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        boolean boolean16 = htmlTreeBuilder9.framesetOk();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder9.setHeadElement((org.jsoup.nodes.Element) document19);
        org.jsoup.parser.Token.StartTag startTag22 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType23 = startTag22.type;
        startTag22.appendTagName('#');
        boolean boolean26 = htmlTreeBuilder9.process((org.jsoup.parser.Token) startTag22);
        org.jsoup.parser.CharacterReader characterReader28 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader28.advance();
        boolean boolean31 = characterReader28.matchConsume("<hi!>");
        htmlTreeBuilder9.reader = characterReader28;
        boolean boolean34 = characterReader28.matchConsume("[100: ]");
        characterReader28.unconsume();
        org.jsoup.parser.TokenQueue tokenQueue37 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean38 = tokenQueue37.isEmpty();
        char[] charArray40 = new char[] { '4' };
        boolean boolean41 = tokenQueue37.matchesAny(charArray40);
        java.lang.String str42 = characterReader28.consumeToAny(charArray40);
        characterReader28.unconsume();
        characterReader28.unconsume();
        // The following exception was thrown during execution in test generation
        try {
            tokeniserState0.read(tokeniser7, characterReader28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + tokenType23 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType23.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[4]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "StartTag" + "'", str42, "StartTag");
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        org.jsoup.parser.Token.StartTag startTag2 = new org.jsoup.parser.Token.StartTag();
        startTag2.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag5 = startTag2.asStartTag();
        org.jsoup.parser.Token.Tag tag7 = startTag5.name("");
        startTag5.selfClosing = false;
        org.jsoup.nodes.Attributes attributes10 = startTag5.getAttributes();
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("0: []", attributes10);
        org.jsoup.nodes.Attributes attributes12 = startTag11.getAttributes();
        org.jsoup.parser.Token.StartTag startTag13 = new org.jsoup.parser.Token.StartTag("100: ", attributes12);
        boolean boolean14 = startTag13.selfClosing;
        java.lang.String str15 = startTag13.tagName;
        org.junit.Assert.assertNotNull(startTag5);
        org.junit.Assert.assertNotNull(tag7);
        org.junit.Assert.assertNotNull(attributes10);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "100: " + "'", str15, "100: ");
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        tokeniser7.createCommentPending();
        org.jsoup.parser.Token.Comment comment10 = tokeniser7.commentPending;
        // The following exception was thrown during execution in test generation
        try {
            tokeniser7.emitTagPending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(comment10);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        org.jsoup.parser.Token.Character character1 = new org.jsoup.parser.Token.Character("-1: []");
        org.jsoup.parser.Token.TokenType tokenType2 = org.jsoup.parser.Token.TokenType.EOF;
        character1.type = tokenType2;
        org.junit.Assert.assertTrue("'" + tokenType2 + "' != '" + org.jsoup.parser.Token.TokenType.EOF + "'", tokenType2.equals(org.jsoup.parser.Token.TokenType.EOF));
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        tokenQueue1.addFirst((java.lang.Character) '\uffff');
        boolean boolean8 = tokenQueue1.matchesWhitespace();
        java.lang.String str9 = tokenQueue1.toString();
        tokenQueue1.addFirst((java.lang.Character) 'S');
        boolean boolean12 = tokenQueue1.matchesWhitespace();
        java.lang.String str14 = tokenQueue1.consumeToIgnoreCase("t");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uffff" + "'", str9, "\uffff");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uffff" + "'", str14, "\uffff");
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        boolean boolean1 = doctype0.isCharacter();
        org.jsoup.parser.Token.TokenType tokenType2 = doctype0.type;
        java.lang.String str3 = doctype0.tokenType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + tokenType2 + "' != '" + org.jsoup.parser.Token.TokenType.Doctype + "'", tokenType2.equals(org.jsoup.parser.Token.TokenType.Doctype));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Doctype" + "'", str3, "Doctype");
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.EndTagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        tokeniser7.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag12 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType13 = startTag12.type;
        startTag12.appendTagName('#');
        tokeniser7.tagPending = startTag12;
        org.jsoup.parser.TokeniserState tokeniserState17 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser7.transition((org.jsoup.parser.ITokeniserState) tokeniserState17);
        tokeniser7.createDoctypePending();
        org.jsoup.parser.CharacterReader characterReader21 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean23 = characterReader21.matches('\000');
        characterReader21.mark();
        boolean boolean25 = characterReader21.isEmpty();
        org.jsoup.parser.TokenQueue tokenQueue27 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str29 = tokenQueue27.chompTo("Doctype");
        java.lang.String str30 = tokenQueue27.consumeWord();
        boolean boolean31 = tokenQueue27.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag32 = new org.jsoup.parser.Token.EndTag();
        char[] charArray35 = new char[] { '#', '#' };
        endTag32.appendAttributeValue(charArray35);
        boolean boolean37 = tokenQueue27.matchesAny(charArray35);
        boolean boolean38 = characterReader21.matchesAny(charArray35);
        miniSoupTokeniserState0.read(tokeniser7, characterReader21);
        tokeniser7.createTempBuffer();
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertTrue("'" + tokenType13 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType13.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "EndTag" + "'", str29, "EndTag");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        boolean boolean10 = parseErrorList5.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        xmlTreeBuilder0.initialiseParse("<!---->", "hi!", parseErrorList5);
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document16 = xmlTreeBuilder0.parse("", "[]", parseErrorList15);
        org.jsoup.parser.Token.StartTag startTag18 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType19 = startTag18.type;
        java.lang.String str20 = startTag18.toString();
        boolean boolean21 = xmlTreeBuilder0.process((org.jsoup.parser.Token) startTag18);
        org.jsoup.parser.Token token22 = xmlTreeBuilder0.currentToken;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder23 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList27 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int28 = parseErrorList27.getMaxSize();
        org.jsoup.nodes.Document document29 = htmlTreeBuilder23.parse("0: Doctype", "hi!", parseErrorList27);
        boolean boolean30 = htmlTreeBuilder23.framesetOk();
        org.jsoup.parser.Parser parser31 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser33 = parser31.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document36 = parser31.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document39 = parser31.parseInput("<hi!>", "[]");
        htmlTreeBuilder23.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document39);
        java.lang.String[] strArray41 = new java.lang.String[] {};
        boolean boolean42 = htmlTreeBuilder23.inScope(strArray41);
        htmlTreeBuilder23.markInsertionMode();
        boolean boolean45 = htmlTreeBuilder23.inScope("StartTag");
        org.jsoup.parser.Parser parser46 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder23);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList47 = htmlTreeBuilder23.stack;
        org.jsoup.nodes.Element element48 = htmlTreeBuilder23.pop();
        org.jsoup.parser.Token.Character character50 = new org.jsoup.parser.Token.Character("100: ");
        java.lang.String str51 = character50.toString();
        htmlTreeBuilder23.insert(character50);
        java.lang.String str53 = character50.toString();
        xmlTreeBuilder0.insert(character50);
        org.jsoup.parser.Token.Character character55 = character50.asCharacter();
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + tokenType19 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType19.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<hi!>" + "'", str20, "<hi!>");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(token22);
        org.junit.Assert.assertNotNull(parseErrorList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parser31);
        org.junit.Assert.assertNotNull(parser33);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(elementList47);
        org.junit.Assert.assertNotNull(element48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "100: " + "'", str51, "100: ");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "100: " + "'", str53, "100: ");
        org.junit.Assert.assertNotNull(character55);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        boolean boolean3 = tag1.formatAsBlock();
        boolean boolean4 = tag1.preserveWhitespace();
        boolean boolean5 = tag1.formatAsBlock();
        boolean boolean6 = tag1.isInline();
        boolean boolean7 = tag1.canContainBlock();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str1 = doctype0.getSystemIdentifier();
        org.jsoup.parser.Token.TokenType tokenType2 = doctype0.type;
        java.lang.StringBuilder stringBuilder3 = doctype0.name;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Comment comment4 = doctype0.asComment();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$Comment");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + tokenType2 + "' != '" + org.jsoup.parser.Token.TokenType.Doctype + "'", tokenType2.equals(org.jsoup.parser.Token.TokenType.Doctype));
        org.junit.Assert.assertNotNull(stringBuilder3);
        org.junit.Assert.assertEquals(stringBuilder3.toString(), "");
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        endTag0.tagName = "hi!";
        endTag0.selfClosing = false;
        endTag0.appendTagName("[]");
        java.lang.String str7 = endTag0.toString();
        endTag0.tagName = "10: ";
        endTag0.appendAttributeValue('n');
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "</hi![]>" + "'", str7, "</hi![]>");
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        int int8 = parseErrorList4.size();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        htmlTreeBuilder9.newPendingTableCharacters();
        boolean boolean17 = parseErrorList4.equals((java.lang.Object) htmlTreeBuilder9);
        org.jsoup.nodes.Document document18 = htmlTreeBuilder9.getDocument();
        htmlTreeBuilder9.generateImpliedEndTags();
        org.jsoup.nodes.Document document22 = htmlTreeBuilder9.parse("EndTag", "<!---->");
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNotNull(document22);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.Tokeniser tokeniser9 = xmlTreeBuilder0.tokeniser;
        org.jsoup.parser.ITokeniserState iTokeniserState10 = tokeniser9.getState();
        org.jsoup.parser.Token.Comment comment11 = new org.jsoup.parser.Token.Comment();
        java.lang.String str12 = comment11.toString();
        boolean boolean13 = comment11.isCharacter();
        boolean boolean14 = comment11.bogus;
        tokeniser9.commentPending = comment11;
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList18);
        org.jsoup.parser.Token.Tag tag23 = tokeniser22.tagPending;
        java.lang.StringBuilder stringBuilder24 = null;
        tokeniser22.dataBuffer = stringBuilder24;
        org.jsoup.parser.Token.Tag tag27 = tokeniser22.createTagPending(false);
        org.jsoup.parser.Token.Comment comment28 = new org.jsoup.parser.Token.Comment();
        java.lang.String str29 = comment28.toString();
        java.lang.StringBuilder stringBuilder30 = comment28.data;
        boolean boolean31 = comment28.isEndTag();
        java.lang.String str32 = comment28.toString();
        java.lang.StringBuilder stringBuilder33 = comment28.data;
        tokeniser22.commentPending = comment28;
        tokeniser9.commentPending = comment28;
        boolean boolean36 = tokeniser9.isAppropriateEndTagToken();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder37 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader38 = null;
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream41 = parseErrorList40.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList40.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList40.iterator();
        org.jsoup.parser.Tokeniser tokeniser44 = new org.jsoup.parser.Tokeniser(characterReader38, parseErrorList40);
        xmlTreeBuilder37.tokeniser = tokeniser44;
        org.jsoup.parser.Tokeniser tokeniser46 = xmlTreeBuilder37.tokeniser;
        org.jsoup.parser.ITokeniserState iTokeniserState47 = tokeniser46.getState();
        tokeniser46.createCommentPending();
        org.jsoup.parser.Token.Tag tag50 = tokeniser46.createTagPending(false);
        boolean boolean51 = tokeniser46.currentNodeInHtmlNS();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder52 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader53 = null;
        org.jsoup.parser.ParseErrorList parseErrorList55 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream56 = parseErrorList55.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor57 = parseErrorList55.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor58 = parseErrorList55.iterator();
        org.jsoup.parser.Tokeniser tokeniser59 = new org.jsoup.parser.Tokeniser(characterReader53, parseErrorList55);
        xmlTreeBuilder52.tokeniser = tokeniser59;
        org.jsoup.parser.Tokeniser tokeniser61 = xmlTreeBuilder52.tokeniser;
        org.jsoup.parser.ITokeniserState iTokeniserState62 = tokeniser61.getState();
        tokeniser61.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype64 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str65 = doctype64.getSystemIdentifier();
        boolean boolean66 = doctype64.forceQuirks;
        java.lang.String str67 = doctype64.getPublicIdentifier();
        java.lang.StringBuilder stringBuilder68 = doctype64.publicIdentifier;
        tokeniser61.dataBuffer = stringBuilder68;
        tokeniser46.dataBuffer = stringBuilder68;
        tokeniser9.dataBuffer = stringBuilder68;
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(tokeniser9);
        org.junit.Assert.assertNotNull(iTokeniserState10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<!---->" + "'", str12, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNull(tag23);
        org.junit.Assert.assertNotNull(tag27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<!---->" + "'", str29, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder30);
        org.junit.Assert.assertEquals(stringBuilder30.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<!---->" + "'", str32, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder33);
        org.junit.Assert.assertEquals(stringBuilder33.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertNotNull(parseErrorStream41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNotNull(tokeniser46);
        org.junit.Assert.assertNotNull(iTokeniserState47);
        org.junit.Assert.assertNotNull(tag50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(parseErrorList55);
        org.junit.Assert.assertNotNull(parseErrorStream56);
        org.junit.Assert.assertNotNull(parseErrorItor57);
        org.junit.Assert.assertNotNull(parseErrorItor58);
        org.junit.Assert.assertNotNull(tokeniser61);
        org.junit.Assert.assertNotNull(iTokeniserState62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(stringBuilder68);
        org.junit.Assert.assertEquals(stringBuilder68.toString(), "");
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        boolean boolean10 = parseErrorList5.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        xmlTreeBuilder0.initialiseParse("<!---->", "hi!", parseErrorList5);
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document16 = xmlTreeBuilder0.parse("", "[]", parseErrorList15);
        org.jsoup.parser.Token.StartTag startTag18 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType19 = startTag18.type;
        java.lang.String str20 = startTag18.toString();
        boolean boolean21 = xmlTreeBuilder0.process((org.jsoup.parser.Token) startTag18);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList28 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int29 = parseErrorList28.getMaxSize();
        org.jsoup.nodes.Document document30 = htmlTreeBuilder24.parse("0: Doctype", "hi!", parseErrorList28);
        boolean boolean31 = htmlTreeBuilder24.framesetOk();
        org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder24.setHeadElement((org.jsoup.nodes.Element) document34);
        org.jsoup.parser.CharacterReader characterReader38 = null;
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream41 = parseErrorList40.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList40.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList40.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList45 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int46 = parseErrorList45.getMaxSize();
        boolean boolean47 = parseErrorList40.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList45);
        org.jsoup.parser.Tokeniser tokeniser48 = new org.jsoup.parser.Tokeniser(characterReader38, parseErrorList45);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList45.iterator();
        htmlTreeBuilder24.initialiseParse("hi!", "hi!#", parseErrorList45);
        java.util.List<org.jsoup.nodes.Node> nodeList51 = xmlTreeBuilder0.parseFragment("S", "<Doctype>", parseErrorList45);
        org.jsoup.parser.ParseErrorList parseErrorList54 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int55 = parseErrorList54.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray56 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList57 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList57, parseErrorArray56);
        org.jsoup.parser.ParseError[] parseErrorArray59 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList60 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList60, parseErrorArray59);
        boolean boolean62 = parseErrorList57.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList60);
        org.jsoup.parser.ParseError[] parseErrorArray63 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList64 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList64, parseErrorArray63);
        boolean boolean66 = parseErrorList60.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList64);
        parseErrorList64.clear();
        boolean boolean68 = parseErrorList54.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList64);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor69 = parseErrorList54.iterator();
        org.jsoup.parser.CharacterReader characterReader70 = null;
        org.jsoup.parser.ParseErrorList parseErrorList72 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream73 = parseErrorList72.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor74 = parseErrorList72.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor75 = parseErrorList72.iterator();
        org.jsoup.parser.Tokeniser tokeniser76 = new org.jsoup.parser.Tokeniser(characterReader70, parseErrorList72);
        tokeniser76.createTempBuffer();
        boolean boolean78 = parseErrorList54.contains((java.lang.Object) tokeniser76);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean79 = parseErrorList45.addAll((int) (short) 1, (java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + tokenType19 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType19.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<hi!>" + "'", str20, "<hi!>");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(parseErrorList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertNotNull(parseErrorStream41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNotNull(parseErrorList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertNotNull(parseErrorList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(parseErrorArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(parseErrorArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(parseErrorItor69);
        org.junit.Assert.assertNotNull(parseErrorList72);
        org.junit.Assert.assertNotNull(parseErrorStream73);
        org.junit.Assert.assertNotNull(parseErrorItor74);
        org.junit.Assert.assertNotNull(parseErrorItor75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.framesetOk(false);
        org.jsoup.nodes.Document document24 = org.jsoup.parser.Parser.parseBodyFragment("</hi![]>", "tartTag");
        htmlTreeBuilder0.pushActiveFormattingElements((org.jsoup.nodes.Element) document24);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(document24);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        htmlTreeBuilder3.baseUri = "</hi![]>";
        htmlTreeBuilder3.clearFormattingElementsToLastMarker();
        org.jsoup.parser.Token token14 = htmlTreeBuilder3.currentToken;
        org.jsoup.nodes.Element element16 = null;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        org.jsoup.parser.ParseError[] parseErrorArray25 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList26 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26, parseErrorArray25);
        org.jsoup.parser.ParseError[] parseErrorArray28 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList29 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList29, parseErrorArray28);
        boolean boolean31 = parseErrorList26.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList29);
        java.lang.Object[] objArray32 = parseErrorList26.toArray();
        parseErrorList26.clear();
        org.jsoup.parser.ParseError[] parseErrorArray34 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList35 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList35, parseErrorArray34);
        org.jsoup.parser.ParseError[] parseErrorArray37 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList38 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38, parseErrorArray37);
        boolean boolean40 = parseErrorList35.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        java.lang.Object[] objArray41 = parseErrorList35.toArray();
        parseErrorList35.clear();
        org.jsoup.parser.ParseError[] parseErrorArray43 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList44 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44, parseErrorArray43);
        boolean boolean46 = parseErrorList35.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        boolean boolean47 = parseErrorList26.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        java.lang.Object[] objArray48 = parseErrorList44.toArray();
        boolean boolean49 = parseErrorList22.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        org.jsoup.parser.ParseError[] parseErrorArray50 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList51 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList51, parseErrorArray50);
        org.jsoup.parser.ParseError[] parseErrorArray53 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList54 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54, parseErrorArray53);
        boolean boolean56 = parseErrorList51.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor57 = parseErrorList54.listIterator();
        int int59 = parseErrorList54.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag63 = new org.jsoup.parser.Token.EndTag();
        char[] charArray66 = new char[] { '#', '#' };
        endTag63.appendAttributeValue(charArray66);
        endTag63.finaliseTag();
        boolean boolean69 = endTag63.isSelfClosing();
        org.jsoup.parser.Tag tag71 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean72 = tag71.isFormListed();
        org.jsoup.parser.Tag tag73 = tag71.setSelfClosing();
        boolean boolean74 = tag71.isKnownTag();
        java.lang.Object[] objArray76 = new java.lang.Object[] { boolean69, tag71, "Doctype" };
        org.jsoup.parser.ParseError parseError77 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray76);
        parseErrorList54.add(0, parseError77);
        boolean boolean79 = parseErrorList22.add(parseError77);
        int int80 = parseErrorList22.getMaxSize();
        org.jsoup.parser.CharacterReader characterReader82 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean84 = characterReader82.matches('\000');
        characterReader82.mark();
        boolean boolean87 = characterReader82.containsIgnoreCase("a");
        java.lang.String str88 = characterReader82.toString();
        java.lang.String str89 = characterReader82.consumeToEnd();
        boolean boolean90 = characterReader82.matchesLetter();
        int int91 = parseErrorList22.lastIndexOf((java.lang.Object) boolean90);
        java.util.List<org.jsoup.nodes.Node> nodeList92 = htmlTreeBuilder3.parseFragment("</hi![]>", element16, "</hi!#>", parseErrorList22);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(token14);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNotNull(parseErrorArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(parseErrorArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parseErrorArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(parseErrorArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(parseErrorArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(parseErrorItor57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(tag71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(tag73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "StartTag" + "'", str88, "StartTag");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "StartTag" + "'", str89, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(nodeList92);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        boolean boolean7 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder8 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int13 = parseErrorList12.getMaxSize();
        org.jsoup.nodes.Document document14 = htmlTreeBuilder8.parse("0: Doctype", "hi!", parseErrorList12);
        boolean boolean15 = htmlTreeBuilder8.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState16 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder8.error(htmlTreeBuilderState16);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState18 = null;
        htmlTreeBuilder8.transition(htmlTreeBuilderState18);
        htmlTreeBuilder8.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader24 = null;
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor29 = parseErrorList26.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        boolean boolean33 = parseErrorList26.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        org.jsoup.parser.Tokeniser tokeniser34 = new org.jsoup.parser.Tokeniser(characterReader24, parseErrorList31);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList31.iterator();
        org.jsoup.nodes.Document document36 = htmlTreeBuilder8.parse("[]", "Doctype", parseErrorList31);
        org.jsoup.parser.CharacterReader characterReader39 = null;
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream42 = parseErrorList41.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList41.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor44 = parseErrorList41.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int47 = parseErrorList46.getMaxSize();
        boolean boolean48 = parseErrorList41.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList46);
        org.jsoup.parser.Tokeniser tokeniser49 = new org.jsoup.parser.Tokeniser(characterReader39, parseErrorList46);
        org.jsoup.parser.ParseErrorList parseErrorList51 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream52 = parseErrorList51.stream();
        boolean boolean53 = parseErrorList51.canAddError();
        boolean boolean54 = parseErrorList46.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList51);
        org.jsoup.nodes.Document document55 = htmlTreeBuilder8.parse("hi!", "<!---->", parseErrorList51);
        org.jsoup.parser.Tokeniser tokeniser56 = htmlTreeBuilder8.tokeniser;
        int int57 = parseErrorList2.lastIndexOf((java.lang.Object) htmlTreeBuilder8);
        org.jsoup.nodes.Document document61 = org.jsoup.parser.Parser.parse("hi!", "<!---->");
        java.util.List<org.jsoup.nodes.Node> nodeList63 = org.jsoup.parser.Parser.parseFragment("<Doctype>", (org.jsoup.nodes.Element) document61, "0: []");
        htmlTreeBuilder8.setHeadElement((org.jsoup.nodes.Element) document61);
        htmlTreeBuilder8.generateImpliedEndTags(" ");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState16);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertNotNull(parseErrorItor29);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertNotNull(parseErrorStream42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNotNull(parseErrorItor44);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(parseErrorList51);
        org.junit.Assert.assertNotNull(parseErrorStream52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNotNull(tokeniser56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(document61);
        org.junit.Assert.assertNotNull(nodeList63);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement14 = htmlTreeBuilder0.getFormElement();
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList15 = htmlTreeBuilder0.getStack();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder16 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.nodes.Document document22 = htmlTreeBuilder16.parse("0: Doctype", "hi!", parseErrorList20);
        boolean boolean23 = htmlTreeBuilder16.framesetOk();
        org.jsoup.parser.Parser parser24 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser26 = parser24.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document29 = parser24.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document32 = parser24.parseInput("<hi!>", "[]");
        htmlTreeBuilder16.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        java.lang.String[] strArray34 = new java.lang.String[] {};
        boolean boolean35 = htmlTreeBuilder16.inScope(strArray34);
        htmlTreeBuilder16.markInsertionMode();
        boolean boolean38 = htmlTreeBuilder16.inScope("StartTag");
        htmlTreeBuilder16.markInsertionMode();
        org.jsoup.nodes.Document document42 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder16.setHeadElement((org.jsoup.nodes.Element) document42);
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document42);
        org.jsoup.parser.Token.EndTag endTag45 = new org.jsoup.parser.Token.EndTag();
        java.lang.String str46 = endTag45.tagName;
        htmlTreeBuilder0.currentToken = endTag45;
        htmlTreeBuilder0.popStackToClose("Doctype");
        htmlTreeBuilder0.clearStackToTableBodyContext();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder51 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document52 = xmlTreeBuilder51.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder53 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList58 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList60 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream61 = parseErrorList60.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor62 = parseErrorList60.iterator();
        boolean boolean63 = parseErrorList58.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList60);
        xmlTreeBuilder53.initialiseParse("<!---->", "hi!", parseErrorList58);
        xmlTreeBuilder51.errors = parseErrorList58;
        org.jsoup.parser.ParseErrorList parseErrorList69 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream70 = parseErrorList69.stream();
        xmlTreeBuilder51.initialiseParse("a", "[]", parseErrorList69);
        org.jsoup.parser.Token.Character character73 = new org.jsoup.parser.Token.Character("-1: []");
        xmlTreeBuilder51.insert(character73);
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.insert(character73);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(formElement14);
        org.junit.Assert.assertNotNull(elementList15);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parser24);
        org.junit.Assert.assertNotNull(parser26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(document52);
        org.junit.Assert.assertNotNull(parseErrorList60);
        org.junit.Assert.assertNotNull(parseErrorStream61);
        org.junit.Assert.assertNotNull(parseErrorItor62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(parseErrorList69);
        org.junit.Assert.assertNotNull(parseErrorStream70);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        char[] charArray3 = new char[] { '#', '#' };
        endTag0.appendAttributeValue(charArray3);
        endTag0.finaliseTag();
        boolean boolean6 = endTag0.isSelfClosing();
        boolean boolean7 = endTag0.isSelfClosing();
        endTag0.appendTagName("S");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag("hi!#");
        org.jsoup.parser.Token.Tag tag3 = endTag1.name("<");
        org.junit.Assert.assertNotNull(tag3);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        tokeniser6.createTempBuffer();
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        endTag11.tagName = "hi!";
        endTag11.selfClosing = false;
        endTag11.appendTagName("[]");
        java.lang.String str18 = endTag11.toString();
        endTag11.tagName = " EndTag";
        tokeniser6.tagPending = endTag11;
        org.jsoup.parser.Token.Tag tag23 = tokeniser6.createTagPending(true);
        boolean boolean24 = tag23.isEndTag();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "</hi![]>" + "'", str18, "</hi![]>");
        org.junit.Assert.assertNotNull(tag23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        tag9.finaliseTag();
        boolean boolean11 = tag9.isSelfClosing();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.Tokeniser tokeniser9 = xmlTreeBuilder0.tokeniser;
        org.jsoup.parser.ITokeniserState iTokeniserState10 = tokeniser9.getState();
        tokeniser9.createCommentPending();
        org.jsoup.parser.Token.Tag tag13 = tokeniser9.createTagPending(false);
        org.jsoup.parser.Token.Tag tag15 = tokeniser9.createTagPending(false);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(tokeniser9);
        org.junit.Assert.assertNotNull(iTokeniserState10);
        org.junit.Assert.assertNotNull(tag13);
        org.junit.Assert.assertNotNull(tag15);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        htmlTreeBuilder0.generateImpliedEndTags();
        java.lang.String str10 = htmlTreeBuilder0.toString();
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking((int) '\000');
        org.jsoup.parser.ParseError[] parseErrorArray13 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList14 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList14, parseErrorArray13);
        org.jsoup.parser.ParseError[] parseErrorArray16 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList17 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17, parseErrorArray16);
        boolean boolean19 = parseErrorList14.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17);
        java.lang.Object[] objArray20 = parseErrorList14.toArray();
        parseErrorList14.clear();
        org.jsoup.parser.ParseError[] parseErrorArray22 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList23 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23, parseErrorArray22);
        org.jsoup.parser.ParseError[] parseErrorArray25 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList26 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26, parseErrorArray25);
        boolean boolean28 = parseErrorList23.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        java.lang.Object[] objArray29 = parseErrorList23.toArray();
        parseErrorList23.clear();
        org.jsoup.parser.ParseError[] parseErrorArray31 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList32 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32, parseErrorArray31);
        boolean boolean34 = parseErrorList23.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32);
        boolean boolean35 = parseErrorList14.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32);
        java.lang.Object[] objArray36 = parseErrorList32.toArray();
        boolean boolean37 = parseErrorList12.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32);
        htmlTreeBuilder0.errors = parseErrorList12;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(parseErrorArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        htmlTreeBuilder3.clearStackToTableContext();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder12.setHeadElement((org.jsoup.nodes.Element) document22);
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder12.setHeadElement((org.jsoup.nodes.Element) document26);
        htmlTreeBuilder12.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder30 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int35 = parseErrorList34.getMaxSize();
        org.jsoup.nodes.Document document36 = htmlTreeBuilder30.parse("0: Doctype", "hi!", parseErrorList34);
        boolean boolean37 = htmlTreeBuilder30.framesetOk();
        org.jsoup.nodes.Document document40 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder30.setHeadElement((org.jsoup.nodes.Element) document40);
        org.jsoup.nodes.Document document44 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder30.setHeadElement((org.jsoup.nodes.Element) document44);
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document44);
        htmlTreeBuilder3.push((org.jsoup.nodes.Element) document44);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState48 = htmlTreeBuilder3.originalState();
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertNull(htmlTreeBuilderState48);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        org.jsoup.parser.Token.Tag tag15 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.EndTag endTag16 = new org.jsoup.parser.Token.EndTag();
        endTag16.newAttribute();
        tokeniser6.tagPending = endTag16;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = endTag16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertNotNull(tag15);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder7 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList12 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        boolean boolean17 = parseErrorList12.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList14);
        xmlTreeBuilder7.initialiseParse("<!---->", "hi!", parseErrorList12);
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document23 = xmlTreeBuilder7.parse("", "[]", parseErrorList22);
        boolean boolean24 = parseErrorList4.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList22);
        int int25 = parseErrorList22.getMaxSize();
        java.lang.String str26 = parseErrorList22.toString();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Token token8 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState9 = org.jsoup.parser.HtmlTreeBuilderState.InTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState9);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        java.util.List<org.jsoup.nodes.Node> nodeList16 = org.jsoup.parser.Parser.parseFragment("EndTag", (org.jsoup.nodes.Element) document14, "<hi!>");
        boolean boolean17 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document14);
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        tokeniser25.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag30 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType31 = startTag30.type;
        startTag30.appendTagName('#');
        tokeniser25.tagPending = startTag30;
        org.jsoup.parser.TokeniserState tokeniserState35 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser25.transition((org.jsoup.parser.ITokeniserState) tokeniserState35);
        org.jsoup.parser.Token.Doctype doctype37 = new org.jsoup.parser.Token.Doctype();
        boolean boolean38 = doctype37.isCharacter();
        tokeniser25.doctypePending = doctype37;
        boolean boolean40 = doctype37.isEndTag();
        java.lang.String str41 = doctype37.getSystemIdentifier();
        htmlTreeBuilder0.currentToken = doctype37;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(token8);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState9);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertTrue("'" + tokenType31 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType31.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.parser.Token token16 = htmlTreeBuilder0.currentToken;
        java.lang.String[] strArray23 = new java.lang.String[] { "Doctype", "</hi![]>", "<!---->", "100: ", "EOF", "a" };
        boolean boolean24 = htmlTreeBuilder0.inScope(strArray23);
        boolean boolean26 = htmlTreeBuilder0.inScope("35: hi!#");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(token16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Element element13 = htmlTreeBuilder0.getActiveFormattingElement("0: Doctype");
        htmlTreeBuilder0.runParser();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder17 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader18 = null;
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream21 = parseErrorList20.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor22 = parseErrorList20.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList20.iterator();
        org.jsoup.parser.Tokeniser tokeniser24 = new org.jsoup.parser.Tokeniser(characterReader18, parseErrorList20);
        org.jsoup.parser.Token.Tag tag25 = tokeniser24.tagPending;
        org.jsoup.parser.Token.Tag tag27 = tokeniser24.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype28 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype29 = doctype28.asDoctype();
        java.lang.String str30 = doctype28.tokenType();
        tokeniser24.emit((org.jsoup.parser.Token) doctype28);
        org.jsoup.parser.Token.Tag tag33 = tokeniser24.createTagPending(true);
        xmlTreeBuilder17.currentToken = tag33;
        org.jsoup.nodes.Attributes attributes35 = tag33.attributes;
        org.jsoup.parser.Token.StartTag startTag36 = new org.jsoup.parser.Token.StartTag("", attributes35);
        org.jsoup.parser.Token.StartTag startTag37 = new org.jsoup.parser.Token.StartTag("0: Doctype", attributes35);
        startTag37.appendAttributeName('\uffff');
        org.jsoup.nodes.FormElement formElement41 = htmlTreeBuilder0.insertForm(startTag37, true);
        boolean boolean42 = startTag37.isEndTag();
        startTag37.selfClosing = false;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(element13);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertNotNull(parseErrorStream21);
        org.junit.Assert.assertNotNull(parseErrorItor22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNull(tag25);
        org.junit.Assert.assertNotNull(tag27);
        org.junit.Assert.assertNotNull(doctype29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Doctype" + "'", str30, "Doctype");
        org.junit.Assert.assertNotNull(tag33);
        org.junit.Assert.assertNotNull(attributes35);
        org.junit.Assert.assertNotNull(formElement41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.CharacterReader characterReader3 = null;
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream6 = parseErrorList5.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList5.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList5.iterator();
        org.jsoup.parser.Tokeniser tokeniser9 = new org.jsoup.parser.Tokeniser(characterReader3, parseErrorList5);
        org.jsoup.parser.Token.Tag tag10 = tokeniser9.tagPending;
        org.jsoup.parser.Token.Tag tag12 = tokeniser9.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype13 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype14 = doctype13.asDoctype();
        java.lang.String str15 = doctype13.tokenType();
        tokeniser9.emit((org.jsoup.parser.Token) doctype13);
        boolean boolean17 = tag1.equals((java.lang.Object) doctype13);
        java.lang.StringBuilder stringBuilder18 = doctype13.systemIdentifier;
        java.lang.String str19 = doctype13.getPublicIdentifier();
        boolean boolean20 = doctype13.forceQuirks;
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorStream6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNull(tag10);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertNotNull(doctype14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Doctype" + "'", str15, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(stringBuilder18);
        org.junit.Assert.assertEquals(stringBuilder18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes2 = startTag1.getAttributes();
        org.jsoup.parser.Token.StartTag startTag3 = new org.jsoup.parser.Token.StartTag("<!---->", attributes2);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Comment comment4 = startTag3.asComment();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Comment");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(attributes2);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.Parser parser19 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.parser.Token.StartTag startTag20 = new org.jsoup.parser.Token.StartTag();
        startTag20.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag24 = startTag20.name("hi!#");
        boolean boolean25 = startTag20.selfClosing;
        java.lang.String str26 = startTag20.toString();
        org.jsoup.nodes.Element element27 = htmlTreeBuilder0.insertEmpty(startTag20);
        org.jsoup.parser.Token.StartTag startTag28 = new org.jsoup.parser.Token.StartTag();
        startTag28.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag31 = startTag28.asStartTag();
        org.jsoup.parser.Token.Tag tag33 = startTag31.name("");
        org.jsoup.parser.Token.Tag tag35 = tag33.name("-1: []");
        boolean boolean36 = tag35.isEOF();
        org.jsoup.nodes.Attributes attributes37 = tag35.getAttributes();
        startTag20.attributes = attributes37;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(tag24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<hi!#>" + "'", str26, "<hi!#>");
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(startTag31);
        org.junit.Assert.assertNotNull(tag33);
        org.junit.Assert.assertNotNull(tag35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(attributes37);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        boolean boolean8 = tokenQueue1.matchesCS("StartTag");
        org.jsoup.parser.TokenQueue tokenQueue10 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str12 = tokenQueue10.chompTo("Doctype");
        java.lang.String str13 = tokenQueue10.consumeWord();
        boolean boolean14 = tokenQueue10.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag15 = new org.jsoup.parser.Token.EndTag();
        char[] charArray18 = new char[] { '#', '#' };
        endTag15.appendAttributeValue(charArray18);
        boolean boolean20 = tokenQueue10.matchesAny(charArray18);
        boolean boolean21 = tokenQueue1.matchesAny(charArray18);
        boolean boolean23 = tokenQueue1.matchesCS("Comment");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "EndTag" + "'", str12, "EndTag");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        boolean boolean11 = doctype10.isCharacter();
        boolean boolean12 = doctype10.isEndTag();
        boolean boolean13 = doctype10.isCharacter();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        org.jsoup.parser.Token.Doctype doctype15 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype16 = doctype15.asDoctype();
        java.lang.StringBuilder stringBuilder17 = doctype16.name;
        tokeniser6.doctypePending = doctype16;
        org.jsoup.parser.ParseErrorList parseErrorList21 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream24 = parseErrorList23.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList23.iterator();
        boolean boolean26 = parseErrorList21.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23);
        boolean boolean27 = parseErrorList21.canAddError();
        org.jsoup.parser.CharacterReader characterReader28 = null;
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream31 = parseErrorList30.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList30.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor33 = parseErrorList30.iterator();
        org.jsoup.parser.Tokeniser tokeniser34 = new org.jsoup.parser.Tokeniser(characterReader28, parseErrorList30);
        org.jsoup.parser.Token.Tag tag35 = tokeniser34.tagPending;
        java.lang.StringBuilder stringBuilder36 = null;
        tokeniser34.dataBuffer = stringBuilder36;
        org.jsoup.parser.Token.EndTag endTag38 = new org.jsoup.parser.Token.EndTag();
        char[] charArray41 = new char[] { '#', '#' };
        endTag38.appendAttributeValue(charArray41);
        tokeniser34.emit(charArray41);
        boolean boolean44 = parseErrorList21.remove((java.lang.Object) tokeniser34);
        org.jsoup.parser.TokeniserState tokeniserState45 = org.jsoup.parser.TokeniserState.ScriptDataEndTagName;
        tokeniser34.eofError((org.jsoup.parser.ITokeniserState) tokeniserState45);
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState45);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doctype16);
        org.junit.Assert.assertNotNull(stringBuilder17);
        org.junit.Assert.assertEquals(stringBuilder17.toString(), "");
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertNotNull(parseErrorStream24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorStream31);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertNotNull(parseErrorItor33);
        org.junit.Assert.assertNull(tag35);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(tokeniserState45);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        htmlTreeBuilder0.newPendingTableCharacters();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState6 = htmlTreeBuilder0.originalState();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element8 = htmlTreeBuilder0.insert("t");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(htmlTreeBuilderState6);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        int int8 = parseErrorList4.size();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        htmlTreeBuilder9.newPendingTableCharacters();
        boolean boolean17 = parseErrorList4.equals((java.lang.Object) htmlTreeBuilder9);
        java.lang.String str18 = parseErrorList4.toString();
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray22 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList23 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23, parseErrorArray22);
        org.jsoup.parser.ParseError[] parseErrorArray25 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList26 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26, parseErrorArray25);
        boolean boolean28 = parseErrorList23.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        org.jsoup.parser.ParseError[] parseErrorArray29 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList30 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30, parseErrorArray29);
        boolean boolean32 = parseErrorList26.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        parseErrorList30.clear();
        boolean boolean34 = parseErrorList20.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList20.iterator();
        int int36 = parseErrorList20.size();
        boolean boolean37 = parseErrorList4.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor38 = parseErrorList20.listIterator();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(parseErrorArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(parseErrorArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(parseErrorItor38);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.Comment comment12 = new org.jsoup.parser.Token.Comment();
        java.lang.String str13 = comment12.toString();
        boolean boolean14 = comment12.isCharacter();
        htmlTreeBuilder0.insert(comment12);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        htmlTreeBuilder18.generateImpliedEndTags();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder31 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList35 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int36 = parseErrorList35.getMaxSize();
        org.jsoup.nodes.Document document37 = htmlTreeBuilder31.parse("0: Doctype", "hi!", parseErrorList35);
        boolean boolean38 = htmlTreeBuilder31.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState39 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder31.error(htmlTreeBuilderState39);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState41 = null;
        htmlTreeBuilder31.transition(htmlTreeBuilderState41);
        htmlTreeBuilder31.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList45 = htmlTreeBuilder31.getPendingTableCharacters();
        htmlTreeBuilder18.setPendingTableCharacters(characterList45);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder47 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList51 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int52 = parseErrorList51.getMaxSize();
        org.jsoup.nodes.Document document53 = htmlTreeBuilder47.parse("0: Doctype", "hi!", parseErrorList51);
        htmlTreeBuilder47.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray56 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList57 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList57, characterArray56);
        htmlTreeBuilder47.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList57);
        boolean boolean60 = htmlTreeBuilder47.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag62 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement64 = htmlTreeBuilder47.insertForm(startTag62, true);
        htmlTreeBuilder47.baseUri = "[]";
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState67 = org.jsoup.parser.HtmlTreeBuilderState.InTableText;
        htmlTreeBuilder47.error(htmlTreeBuilderState67);
        htmlTreeBuilder18.error(htmlTreeBuilderState67);
        org.jsoup.parser.ParseErrorList parseErrorList70 = htmlTreeBuilder18.errors;
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream71 = parseErrorList70.parallelStream();
        htmlTreeBuilder0.initialiseParse("<[100: ]>", "<hi!>", parseErrorList70);
        htmlTreeBuilder0.markInsertionMode();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<!---->" + "'", str13, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState39);
        org.junit.Assert.assertNotNull(characterList45);
        org.junit.Assert.assertNotNull(parseErrorList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertNotNull(characterArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(formElement64);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState67);
        org.junit.Assert.assertNotNull(parseErrorList70);
        org.junit.Assert.assertNotNull(parseErrorStream71);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("<!---->");
        startTag1.tagName = "Doctype";
        startTag1.appendAttributeValue('\uffff');
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        boolean boolean25 = parseErrorList18.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23);
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList23);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList23.iterator();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("[]", "Doctype", parseErrorList23);
        org.jsoup.parser.CharacterReader characterReader31 = null;
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream34 = parseErrorList33.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList33.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor36 = parseErrorList33.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int39 = parseErrorList38.getMaxSize();
        boolean boolean40 = parseErrorList33.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        org.jsoup.parser.Tokeniser tokeniser41 = new org.jsoup.parser.Tokeniser(characterReader31, parseErrorList38);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        boolean boolean45 = parseErrorList43.canAddError();
        boolean boolean46 = parseErrorList38.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        org.jsoup.nodes.Document document47 = htmlTreeBuilder0.parse("hi!", "<!---->", parseErrorList43);
        org.jsoup.parser.Tokeniser tokeniser48 = htmlTreeBuilder0.tokeniser;
        java.lang.StringBuilder stringBuilder49 = tokeniser48.dataBuffer;
        org.jsoup.parser.Token.Doctype doctype50 = tokeniser48.doctypePending;
        tokeniser48.emit('\uffff');
        org.jsoup.parser.Tag tag54 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean55 = tag54.isFormListed();
        org.jsoup.parser.CharacterReader characterReader56 = null;
        org.jsoup.parser.ParseErrorList parseErrorList58 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream59 = parseErrorList58.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor60 = parseErrorList58.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor61 = parseErrorList58.iterator();
        org.jsoup.parser.Tokeniser tokeniser62 = new org.jsoup.parser.Tokeniser(characterReader56, parseErrorList58);
        org.jsoup.parser.Token.Tag tag63 = tokeniser62.tagPending;
        org.jsoup.parser.Token.Tag tag65 = tokeniser62.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype66 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype67 = doctype66.asDoctype();
        java.lang.String str68 = doctype66.tokenType();
        tokeniser62.emit((org.jsoup.parser.Token) doctype66);
        boolean boolean70 = tag54.equals((java.lang.Object) doctype66);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder71 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader72 = null;
        org.jsoup.parser.ParseErrorList parseErrorList74 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream75 = parseErrorList74.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor76 = parseErrorList74.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor77 = parseErrorList74.iterator();
        org.jsoup.parser.Tokeniser tokeniser78 = new org.jsoup.parser.Tokeniser(characterReader72, parseErrorList74);
        org.jsoup.parser.Token.Tag tag79 = tokeniser78.tagPending;
        org.jsoup.parser.Token.Tag tag81 = tokeniser78.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype82 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype83 = doctype82.asDoctype();
        java.lang.String str84 = doctype82.tokenType();
        tokeniser78.emit((org.jsoup.parser.Token) doctype82);
        org.jsoup.parser.Token.Tag tag87 = tokeniser78.createTagPending(true);
        xmlTreeBuilder71.currentToken = tag87;
        boolean boolean89 = tag54.equals((java.lang.Object) tag87);
        tag87.finaliseTag();
        org.jsoup.nodes.Attributes attributes91 = tag87.attributes;
        tokeniser48.emit((org.jsoup.parser.Token) tag87);
        boolean boolean93 = tag87.isStartTag();
        tag87.finaliseTag();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertNotNull(parseErrorStream34);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNotNull(parseErrorItor36);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(tokeniser48);
        org.junit.Assert.assertNull(stringBuilder49);
        org.junit.Assert.assertNull(doctype50);
        org.junit.Assert.assertNotNull(tag54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(parseErrorList58);
        org.junit.Assert.assertNotNull(parseErrorStream59);
        org.junit.Assert.assertNotNull(parseErrorItor60);
        org.junit.Assert.assertNotNull(parseErrorItor61);
        org.junit.Assert.assertNull(tag63);
        org.junit.Assert.assertNotNull(tag65);
        org.junit.Assert.assertNotNull(doctype67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Doctype" + "'", str68, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(parseErrorList74);
        org.junit.Assert.assertNotNull(parseErrorStream75);
        org.junit.Assert.assertNotNull(parseErrorItor76);
        org.junit.Assert.assertNotNull(parseErrorItor77);
        org.junit.Assert.assertNull(tag79);
        org.junit.Assert.assertNotNull(tag81);
        org.junit.Assert.assertNotNull(doctype83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Doctype" + "'", str84, "Doctype");
        org.junit.Assert.assertNotNull(tag87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(attributes91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        htmlTreeBuilder0.markInsertionMode();
        htmlTreeBuilder0.framesetOk(true);
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState4 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader5 = null;
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor10 = parseErrorList7.iterator();
        org.jsoup.parser.Tokeniser tokeniser11 = new org.jsoup.parser.Tokeniser(characterReader5, parseErrorList7);
        org.jsoup.parser.Token.Tag tag12 = tokeniser11.tagPending;
        java.lang.StringBuilder stringBuilder13 = null;
        tokeniser11.dataBuffer = stringBuilder13;
        org.jsoup.parser.Token.EndTag endTag15 = new org.jsoup.parser.Token.EndTag();
        char[] charArray18 = new char[] { '#', '#' };
        endTag15.appendAttributeValue(charArray18);
        tokeniser11.emit(charArray18);
        org.jsoup.parser.Token.Comment comment21 = tokeniser11.commentPending;
        org.jsoup.parser.CharacterReader characterReader23 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean24 = characterReader23.matchesLetter();
        miniSoupTokeniserState4.read(tokeniser11, characterReader23);
        htmlTreeBuilder0.tokeniser = tokeniser11;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder27 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        org.jsoup.nodes.Document document33 = htmlTreeBuilder27.parse("0: Doctype", "hi!", parseErrorList31);
        boolean boolean34 = htmlTreeBuilder27.framesetOk();
        org.jsoup.parser.Parser parser35 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser37 = parser35.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document40 = parser35.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document43 = parser35.parseInput("<hi!>", "[]");
        htmlTreeBuilder27.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document43);
        boolean boolean45 = htmlTreeBuilder27.isFragmentParsing();
        org.jsoup.parser.Parser parser46 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder27);
        org.jsoup.parser.CharacterReader characterReader47 = null;
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream50 = parseErrorList49.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor51 = parseErrorList49.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor52 = parseErrorList49.iterator();
        org.jsoup.parser.Tokeniser tokeniser53 = new org.jsoup.parser.Tokeniser(characterReader47, parseErrorList49);
        org.jsoup.parser.Token.Tag tag54 = tokeniser53.tagPending;
        tokeniser53.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag58 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType59 = startTag58.type;
        startTag58.appendTagName('#');
        tokeniser53.tagPending = startTag58;
        org.jsoup.parser.Token.StartTag startTag64 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType65 = startTag64.type;
        java.lang.String str66 = startTag64.toString();
        tokeniser53.emit((org.jsoup.parser.Token) startTag64);
        org.jsoup.nodes.FormElement formElement69 = htmlTreeBuilder27.insertForm(startTag64, true);
        htmlTreeBuilder0.setFormElement(formElement69);
        org.jsoup.parser.ParseErrorList parseErrorList71 = org.jsoup.parser.ParseErrorList.noTracking();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream72 = parseErrorList71.stream();
        htmlTreeBuilder0.errors = parseErrorList71;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState74 = htmlTreeBuilder0.state();
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.popStackToBefore("StartTag");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(miniSoupTokeniserState4);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertNotNull(parseErrorItor10);
        org.junit.Assert.assertNull(tag12);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#, #]");
        org.junit.Assert.assertNull(comment21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(parser35);
        org.junit.Assert.assertNotNull(parser37);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertNotNull(parseErrorStream50);
        org.junit.Assert.assertNotNull(parseErrorItor51);
        org.junit.Assert.assertNotNull(parseErrorItor52);
        org.junit.Assert.assertNull(tag54);
        org.junit.Assert.assertTrue("'" + tokenType59 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType59.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + tokenType65 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType65.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "<hi!>" + "'", str66, "<hi!>");
        org.junit.Assert.assertNotNull(formElement69);
        org.junit.Assert.assertNotNull(parseErrorList71);
        org.junit.Assert.assertNotNull(parseErrorStream72);
        org.junit.Assert.assertNull(htmlTreeBuilderState74);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        org.jsoup.parser.Token.StartTag startTag23 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes24 = startTag23.getAttributes();
        xmlTreeBuilder3.currentToken = startTag23;
        startTag23.appendAttributeValue("0: []");
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(attributes24);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        java.lang.String[] strArray10 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str11 = tokenQueue1.consumeToAny(strArray10);
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.Tokeniser tokeniser18 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList14);
        org.jsoup.parser.Token.Tag tag19 = tokeniser18.tagPending;
        java.lang.StringBuilder stringBuilder20 = null;
        tokeniser18.dataBuffer = stringBuilder20;
        org.jsoup.parser.Token.EndTag endTag22 = new org.jsoup.parser.Token.EndTag();
        char[] charArray25 = new char[] { '#', '#' };
        endTag22.appendAttributeValue(charArray25);
        tokeniser18.emit(charArray25);
        boolean boolean28 = tokenQueue1.matchesAny(charArray25);
        java.lang.String str29 = tokenQueue1.consumeCssIdentifier();
        tokenQueue1.addFirst("ndTag");
        tokenQueue1.consume("");
        boolean boolean34 = tokenQueue1.matchesWord();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNull(tag19);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.Comment comment12 = new org.jsoup.parser.Token.Comment();
        java.lang.String str13 = comment12.toString();
        boolean boolean14 = comment12.isCharacter();
        htmlTreeBuilder0.insert(comment12);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        htmlTreeBuilder18.generateImpliedEndTags();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder31 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList35 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int36 = parseErrorList35.getMaxSize();
        org.jsoup.nodes.Document document37 = htmlTreeBuilder31.parse("0: Doctype", "hi!", parseErrorList35);
        boolean boolean38 = htmlTreeBuilder31.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState39 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder31.error(htmlTreeBuilderState39);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState41 = null;
        htmlTreeBuilder31.transition(htmlTreeBuilderState41);
        htmlTreeBuilder31.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList45 = htmlTreeBuilder31.getPendingTableCharacters();
        htmlTreeBuilder18.setPendingTableCharacters(characterList45);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder47 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList51 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int52 = parseErrorList51.getMaxSize();
        org.jsoup.nodes.Document document53 = htmlTreeBuilder47.parse("0: Doctype", "hi!", parseErrorList51);
        htmlTreeBuilder47.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray56 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList57 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList57, characterArray56);
        htmlTreeBuilder47.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList57);
        boolean boolean60 = htmlTreeBuilder47.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag62 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement64 = htmlTreeBuilder47.insertForm(startTag62, true);
        htmlTreeBuilder47.baseUri = "[]";
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState67 = org.jsoup.parser.HtmlTreeBuilderState.InTableText;
        htmlTreeBuilder47.error(htmlTreeBuilderState67);
        htmlTreeBuilder18.error(htmlTreeBuilderState67);
        org.jsoup.parser.ParseErrorList parseErrorList70 = htmlTreeBuilder18.errors;
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream71 = parseErrorList70.parallelStream();
        htmlTreeBuilder0.initialiseParse("<[100: ]>", "<hi!>", parseErrorList70);
        java.util.Spliterator<org.jsoup.parser.ParseError> parseErrorSpliterator73 = parseErrorList70.spliterator();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<!---->" + "'", str13, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState39);
        org.junit.Assert.assertNotNull(characterList45);
        org.junit.Assert.assertNotNull(parseErrorList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertNotNull(characterArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(formElement64);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState67);
        org.junit.Assert.assertNotNull(parseErrorList70);
        org.junit.Assert.assertNotNull(parseErrorStream71);
        org.junit.Assert.assertNotNull(parseErrorSpliterator73);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Token token8 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState9 = org.jsoup.parser.HtmlTreeBuilderState.InTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState9);
        org.jsoup.parser.Token.Comment comment11 = new org.jsoup.parser.Token.Comment();
        java.lang.String str12 = comment11.toString();
        java.lang.StringBuilder stringBuilder13 = comment11.data;
        boolean boolean14 = comment11.isEndTag();
        boolean boolean15 = comment11.isComment();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState16 = org.jsoup.parser.HtmlTreeBuilderState.Initial;
        boolean boolean17 = htmlTreeBuilder0.process((org.jsoup.parser.Token) comment11, htmlTreeBuilderState16);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Character character18 = comment11.asCharacter();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$Character");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(token8);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<!---->" + "'", str12, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder13);
        org.junit.Assert.assertEquals(stringBuilder13.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor2 = parseErrorList1.listIterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList1.iterator();
        java.util.Spliterator<org.jsoup.parser.ParseError> parseErrorSpliterator5 = parseErrorList1.spliterator();
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorItor2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorSpliterator5);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.markInsertionMode();
        boolean boolean22 = htmlTreeBuilder0.inScope("StartTag");
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document26);
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.getDocument();
        org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parse("", "Doctype");
        htmlTreeBuilder0.push((org.jsoup.nodes.Element) document31);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(document31);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.isInline();
        boolean boolean6 = tag1.isBlock();
        boolean boolean7 = tag1.isInline();
        boolean boolean8 = tag1.isData();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream20 = parseErrorList19.stream();
        boolean boolean21 = parseErrorList19.canAddError();
        org.jsoup.nodes.Document document22 = htmlTreeBuilder9.parse("EndTag", "hi!#", parseErrorList19);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState23 = htmlTreeBuilder9.originalState();
        org.jsoup.nodes.Element element24 = htmlTreeBuilder9.pop();
        boolean boolean25 = tag1.equals((java.lang.Object) element24);
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertNotNull(parseErrorStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(htmlTreeBuilderState23);
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("<!---->");
        startTag1.tagName = "Doctype";
        org.jsoup.nodes.Attributes attributes4 = null;
        startTag1.attributes = attributes4;
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("EndTag");
        boolean boolean2 = startTag1.isSelfClosing();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str6 = tokenQueue1.chompBalanced('E', '#');
        // The following exception was thrown during execution in test generation
        try {
            char char7 = tokenQueue1.consume();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 6");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ndTag" + "'", str6, "ndTag");
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.CharacterReader characterReader16 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean18 = characterReader16.matches("[100: ]");
        htmlTreeBuilder0.reader = characterReader16;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder20 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int25 = parseErrorList24.getMaxSize();
        org.jsoup.nodes.Document document26 = htmlTreeBuilder20.parse("0: Doctype", "hi!", parseErrorList24);
        htmlTreeBuilder20.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray29 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList30 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList30, characterArray29);
        htmlTreeBuilder20.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList30);
        boolean boolean33 = htmlTreeBuilder20.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag35 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement37 = htmlTreeBuilder20.insertForm(startTag35, true);
        htmlTreeBuilder0.setFormElement(formElement37);
        org.jsoup.parser.ParseError[] parseErrorArray40 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList41 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList41, parseErrorArray40);
        org.jsoup.parser.ParseError[] parseErrorArray43 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList44 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44, parseErrorArray43);
        boolean boolean46 = parseErrorList41.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList44.listIterator();
        int int48 = parseErrorList44.size();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder49 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int54 = parseErrorList53.getMaxSize();
        org.jsoup.nodes.Document document55 = htmlTreeBuilder49.parse("0: Doctype", "hi!", parseErrorList53);
        htmlTreeBuilder49.newPendingTableCharacters();
        boolean boolean57 = parseErrorList44.equals((java.lang.Object) htmlTreeBuilder49);
        org.jsoup.nodes.Document document58 = htmlTreeBuilder49.getDocument();
        org.jsoup.parser.ParseErrorList parseErrorList62 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList64 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream65 = parseErrorList64.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor66 = parseErrorList64.iterator();
        boolean boolean67 = parseErrorList62.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList64);
        parseErrorList64.ensureCapacity((int) (short) 1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder70 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document71 = xmlTreeBuilder70.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder72 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList77 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList79 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream80 = parseErrorList79.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor81 = parseErrorList79.iterator();
        boolean boolean82 = parseErrorList77.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList79);
        xmlTreeBuilder72.initialiseParse("<!---->", "hi!", parseErrorList77);
        xmlTreeBuilder70.errors = parseErrorList77;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList85 = xmlTreeBuilder70.stack;
        boolean boolean86 = parseErrorList64.equals((java.lang.Object) elementList85);
        java.util.List<org.jsoup.nodes.Node> nodeList87 = htmlTreeBuilder0.parseFragment("ndTag", (org.jsoup.nodes.Element) document58, " ", parseErrorList64);
        parseErrorList64.ensureCapacity(1);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(characterArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(formElement37);
        org.junit.Assert.assertNotNull(parseErrorArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(parseErrorArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(document58);
        org.junit.Assert.assertNotNull(parseErrorList64);
        org.junit.Assert.assertNotNull(parseErrorStream65);
        org.junit.Assert.assertNotNull(parseErrorItor66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(document71);
        org.junit.Assert.assertNotNull(parseErrorList79);
        org.junit.Assert.assertNotNull(parseErrorStream80);
        org.junit.Assert.assertNotNull(parseErrorItor81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(elementList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(nodeList87);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Element element13 = htmlTreeBuilder0.getActiveFormattingElement("0: Doctype");
        htmlTreeBuilder0.runParser();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder17 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader18 = null;
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream21 = parseErrorList20.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor22 = parseErrorList20.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList20.iterator();
        org.jsoup.parser.Tokeniser tokeniser24 = new org.jsoup.parser.Tokeniser(characterReader18, parseErrorList20);
        org.jsoup.parser.Token.Tag tag25 = tokeniser24.tagPending;
        org.jsoup.parser.Token.Tag tag27 = tokeniser24.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype28 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype29 = doctype28.asDoctype();
        java.lang.String str30 = doctype28.tokenType();
        tokeniser24.emit((org.jsoup.parser.Token) doctype28);
        org.jsoup.parser.Token.Tag tag33 = tokeniser24.createTagPending(true);
        xmlTreeBuilder17.currentToken = tag33;
        org.jsoup.nodes.Attributes attributes35 = tag33.attributes;
        org.jsoup.parser.Token.StartTag startTag36 = new org.jsoup.parser.Token.StartTag("", attributes35);
        org.jsoup.parser.Token.StartTag startTag37 = new org.jsoup.parser.Token.StartTag("0: Doctype", attributes35);
        startTag37.appendAttributeName('\uffff');
        org.jsoup.nodes.FormElement formElement41 = htmlTreeBuilder0.insertForm(startTag37, true);
        org.jsoup.nodes.Element element42 = htmlTreeBuilder0.getHeadElement();
        org.jsoup.nodes.Document document45 = htmlTreeBuilder0.parse("-1: []E", "hi!#<hi!#>");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(element13);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertNotNull(parseErrorStream21);
        org.junit.Assert.assertNotNull(parseErrorItor22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNull(tag25);
        org.junit.Assert.assertNotNull(tag27);
        org.junit.Assert.assertNotNull(doctype29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Doctype" + "'", str30, "Doctype");
        org.junit.Assert.assertNotNull(tag33);
        org.junit.Assert.assertNotNull(attributes35);
        org.junit.Assert.assertNotNull(formElement41);
        org.junit.Assert.assertNotNull(element42);
        org.junit.Assert.assertNotNull(document45);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\uffff');
        java.lang.String str5 = characterReader1.consumeTo("<Doctype>");
        characterReader1.rewindToMark();
        int int8 = characterReader1.nextIndexOf('\000');
        boolean boolean9 = characterReader1.isEmpty();
        characterReader1.mark();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        boolean boolean16 = htmlTreeBuilder9.framesetOk();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder9.setHeadElement((org.jsoup.nodes.Element) document19);
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder9.setHeadElement((org.jsoup.nodes.Element) document23);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder26 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int31 = parseErrorList30.getMaxSize();
        org.jsoup.nodes.Document document32 = htmlTreeBuilder26.parse("0: Doctype", "hi!", parseErrorList30);
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream37 = parseErrorList36.stream();
        boolean boolean38 = parseErrorList36.canAddError();
        org.jsoup.nodes.Document document39 = htmlTreeBuilder26.parse("EndTag", "hi!#", parseErrorList36);
        java.lang.String[] strArray47 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean48 = htmlTreeBuilder26.inScope("hi!#", strArray47);
        boolean boolean49 = htmlTreeBuilder9.inScope("hi!#", strArray47);
        htmlTreeBuilder0.popStackToClose(strArray47);
        org.jsoup.nodes.Document document51 = htmlTreeBuilder0.doc;
        org.jsoup.parser.Parser parser52 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertNotNull(parseErrorStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(document51);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype1 = doctype0.asDoctype();
        boolean boolean2 = doctype0.isEOF();
        java.lang.StringBuilder stringBuilder3 = doctype0.systemIdentifier;
        java.lang.String str4 = doctype0.getSystemIdentifier();
        org.junit.Assert.assertNotNull(doctype1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(stringBuilder3);
        org.junit.Assert.assertEquals(stringBuilder3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        char char5 = tokenQueue1.peek();
        boolean boolean6 = tokenQueue1.matchesWhitespace();
        java.lang.String str8 = tokenQueue1.consumeToIgnoreCase("<[100: ]>");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\000' + "'", char5 == '\000');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.isInline();
        boolean boolean6 = tag1.isBlock();
        org.jsoup.parser.Tag tag7 = tag1.setSelfClosing();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(tag7);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.preserveWhitespace();
        boolean boolean3 = tag1.isKnownTag();
        boolean boolean4 = tag1.isBlock();
        boolean boolean5 = tag1.isFormSubmittable();
        java.lang.String str6 = tag1.toString();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.Tokeniser tokeniser9 = xmlTreeBuilder0.tokeniser;
        org.jsoup.nodes.Document document10 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder13 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document14 = xmlTreeBuilder13.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder15 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList20 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream23 = parseErrorList22.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList22.iterator();
        boolean boolean25 = parseErrorList20.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList22);
        xmlTreeBuilder15.initialiseParse("<!---->", "hi!", parseErrorList20);
        xmlTreeBuilder13.errors = parseErrorList20;
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream32 = parseErrorList31.stream();
        xmlTreeBuilder13.initialiseParse("a", "[]", parseErrorList31);
        org.jsoup.parser.CharacterReader characterReader34 = null;
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream37 = parseErrorList36.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor38 = parseErrorList36.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor39 = parseErrorList36.iterator();
        org.jsoup.parser.Tokeniser tokeniser40 = new org.jsoup.parser.Tokeniser(characterReader34, parseErrorList36);
        org.jsoup.parser.Token.Tag tag41 = tokeniser40.tagPending;
        tokeniser40.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype44 = tokeniser40.doctypePending;
        tokeniser40.createCommentPending();
        org.jsoup.parser.Token.Comment comment46 = tokeniser40.commentPending;
        boolean boolean47 = parseErrorList31.remove((java.lang.Object) tokeniser40);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream48 = parseErrorList31.parallelStream();
        org.jsoup.nodes.Document document49 = xmlTreeBuilder0.parse("artTag", "<hi!>", parseErrorList31);
        org.jsoup.nodes.Element element50 = xmlTreeBuilder0.currentElement();
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(tokeniser9);
        org.junit.Assert.assertNull(document10);
        org.junit.Assert.assertNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertNotNull(parseErrorStream23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertNotNull(parseErrorStream32);
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertNotNull(parseErrorStream37);
        org.junit.Assert.assertNotNull(parseErrorItor38);
        org.junit.Assert.assertNotNull(parseErrorItor39);
        org.junit.Assert.assertNull(tag41);
        org.junit.Assert.assertNull(doctype44);
        org.junit.Assert.assertNotNull(comment46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(parseErrorStream48);
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertNotNull(element50);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype1 = doctype0.asDoctype();
        java.lang.String str2 = doctype0.getName();
        java.lang.String str3 = doctype0.tokenType();
        org.junit.Assert.assertNotNull(doctype1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Doctype" + "'", str3, "Doctype");
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str1 = doctype0.getSystemIdentifier();
        java.lang.String str2 = doctype0.getPublicIdentifier();
        java.lang.StringBuilder stringBuilder3 = doctype0.publicIdentifier;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(stringBuilder3);
        org.junit.Assert.assertEquals(stringBuilder3.toString(), "");
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        tokenQueue1.advance();
        boolean boolean6 = tokenQueue1.isEmpty();
        java.lang.String str7 = tokenQueue1.consumeElementSelector();
        java.lang.String str9 = tokenQueue1.consumeToIgnoreCase("a");
        java.lang.String str11 = tokenQueue1.chompToIgnoreCase("StartTag");
        java.lang.String str12 = tokenQueue1.remainder();
        org.jsoup.parser.TokenQueue tokenQueue14 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean15 = tokenQueue14.isEmpty();
        java.lang.String str17 = tokenQueue14.consumeToIgnoreCase("<hi!>");
        java.lang.String str18 = tokenQueue14.consumeTagName();
        boolean boolean19 = tokenQueue14.matchesWord();
        tokenQueue14.advance();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder21 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int26 = parseErrorList25.getMaxSize();
        org.jsoup.nodes.Document document27 = htmlTreeBuilder21.parse("0: Doctype", "hi!", parseErrorList25);
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream32 = parseErrorList31.stream();
        boolean boolean33 = parseErrorList31.canAddError();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder21.parse("EndTag", "hi!#", parseErrorList31);
        java.lang.String[] strArray42 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean43 = htmlTreeBuilder21.inScope("hi!#", strArray42);
        java.lang.String str44 = tokenQueue14.consumeToAny(strArray42);
        java.lang.String str45 = tokenQueue1.consumeToAny(strArray42);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "EndTag" + "'", str17, "EndTag");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertNotNull(parseErrorStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("t");
        java.lang.String str2 = characterReader1.toString();
        org.jsoup.parser.TokenQueue tokenQueue4 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean5 = tokenQueue4.isEmpty();
        boolean boolean6 = tokenQueue4.consumeWhitespace();
        java.lang.String str7 = tokenQueue4.consumeWord();
        boolean boolean8 = tokenQueue4.matchesWhitespace();
        java.lang.String[] strArray13 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str14 = tokenQueue4.consumeToAny(strArray13);
        org.jsoup.parser.CharacterReader characterReader15 = null;
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream18 = parseErrorList17.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList17.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList17.iterator();
        org.jsoup.parser.Tokeniser tokeniser21 = new org.jsoup.parser.Tokeniser(characterReader15, parseErrorList17);
        org.jsoup.parser.Token.Tag tag22 = tokeniser21.tagPending;
        java.lang.StringBuilder stringBuilder23 = null;
        tokeniser21.dataBuffer = stringBuilder23;
        org.jsoup.parser.Token.EndTag endTag25 = new org.jsoup.parser.Token.EndTag();
        char[] charArray28 = new char[] { '#', '#' };
        endTag25.appendAttributeValue(charArray28);
        tokeniser21.emit(charArray28);
        boolean boolean31 = tokenQueue4.matchesAny(charArray28);
        java.lang.String str32 = characterReader1.consumeToAny(charArray28);
        char char33 = characterReader1.current();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "t" + "'", str2, "t");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "EndTag" + "'", str7, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertNotNull(parseErrorStream18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNull(tag22);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "t" + "'", str32, "t");
        org.junit.Assert.assertTrue("'" + char33 + "' != '" + '\uffff' + "'", char33 == '\uffff');
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\uffff');
        java.lang.String str5 = characterReader1.consumeTo("<Doctype>");
        characterReader1.rewindToMark();
        java.lang.String str7 = characterReader1.consumeHexSequence();
        java.lang.String str8 = characterReader1.consumeHexSequence();
        characterReader1.mark();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.nodes.Element element3 = htmlTreeBuilder0.getActiveFormattingElement("\uffff");
        org.jsoup.nodes.Element element4 = htmlTreeBuilder0.getHeadElement();
        org.junit.Assert.assertNull(element3);
        org.junit.Assert.assertNull(element4);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
        org.jsoup.parser.TreeBuilder treeBuilder2 = null;
        org.jsoup.parser.Parser parser3 = parser1.setTreeBuilder(treeBuilder2);
        org.jsoup.parser.Parser parser5 = parser1.setTrackErrors((int) (byte) 10);
        org.jsoup.parser.TreeBuilder treeBuilder6 = parser5.getTreeBuilder();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState7 = org.jsoup.parser.HtmlTreeBuilderState.InCell;
        org.jsoup.parser.Token.StartTag startTag9 = new org.jsoup.parser.Token.StartTag("Doctype");
        org.jsoup.parser.Token.Tag tag11 = startTag9.name("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream23 = parseErrorList22.stream();
        boolean boolean24 = parseErrorList22.canAddError();
        org.jsoup.nodes.Document document25 = htmlTreeBuilder12.parse("EndTag", "hi!#", parseErrorList22);
        java.lang.String[] strArray33 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean34 = htmlTreeBuilder12.inScope("hi!#", strArray33);
        htmlTreeBuilder12.clearStackToTableContext();
        boolean boolean36 = htmlTreeBuilderState7.process((org.jsoup.parser.Token) startTag9, htmlTreeBuilder12);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder37 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int42 = parseErrorList41.getMaxSize();
        org.jsoup.nodes.Document document43 = htmlTreeBuilder37.parse("0: Doctype", "hi!", parseErrorList41);
        boolean boolean44 = htmlTreeBuilder37.framesetOk();
        org.jsoup.nodes.Document document47 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder37.setHeadElement((org.jsoup.nodes.Element) document47);
        htmlTreeBuilder12.doc = document47;
        org.jsoup.parser.Parser parser50 = parser5.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder12);
        org.jsoup.nodes.Document document53 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("\uffff", "EOF");
        htmlTreeBuilder12.setHeadElement((org.jsoup.nodes.Element) document53);
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNotNull(parser5);
        org.junit.Assert.assertNull(treeBuilder6);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState7);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertNotNull(parseErrorStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(parser50);
        org.junit.Assert.assertNotNull(document53);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        java.lang.String str6 = tokenQueue1.consumeElementSelector();
        java.lang.String str7 = tokenQueue1.consumeElementSelector();
        // The following exception was thrown during execution in test generation
        try {
            char char8 = tokenQueue1.consume();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 6");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        org.jsoup.parser.Token.StartTag startTag2 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag2.appendTagName("hi!");
        startTag2.appendAttributeName('4');
        org.jsoup.parser.Token.Tag tag8 = startTag2.name("");
        org.jsoup.nodes.Attributes attributes9 = tag8.getAttributes();
        org.jsoup.parser.Token.StartTag startTag10 = new org.jsoup.parser.Token.StartTag("<[100: ]>", attributes9);
        org.junit.Assert.assertNotNull(tag8);
        org.junit.Assert.assertNotNull(attributes9);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader2 = new org.jsoup.parser.CharacterReader("StartTag");
        int int4 = characterReader2.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean5 = characterReader2.matchesDigit();
        java.lang.String str6 = characterReader2.toString();
        xmlTreeBuilder0.reader = characterReader2;
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int12 = parseErrorList11.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray13 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList14 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList14, parseErrorArray13);
        org.jsoup.parser.ParseError[] parseErrorArray16 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList17 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17, parseErrorArray16);
        boolean boolean19 = parseErrorList14.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17);
        org.jsoup.parser.ParseError[] parseErrorArray20 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList21 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21, parseErrorArray20);
        boolean boolean23 = parseErrorList17.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        parseErrorList21.clear();
        boolean boolean25 = parseErrorList11.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        xmlTreeBuilder0.initialiseParse("<Doctype>", "a", parseErrorList11);
        org.jsoup.parser.Token.Character character28 = new org.jsoup.parser.Token.Character("100: ");
        xmlTreeBuilder0.insert(character28);
        org.jsoup.parser.CharacterReader characterReader30 = null;
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream33 = parseErrorList32.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor34 = parseErrorList32.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList32.iterator();
        org.jsoup.parser.Tokeniser tokeniser36 = new org.jsoup.parser.Tokeniser(characterReader30, parseErrorList32);
        org.jsoup.parser.Token.Tag tag37 = tokeniser36.tagPending;
        org.jsoup.parser.Token.Tag tag39 = tokeniser36.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype40 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype41 = doctype40.asDoctype();
        java.lang.String str42 = doctype40.tokenType();
        tokeniser36.emit((org.jsoup.parser.Token) doctype40);
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(doctype40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "StartTag" + "'", str6, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertNotNull(parseErrorStream33);
        org.junit.Assert.assertNotNull(parseErrorItor34);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNull(tag37);
        org.junit.Assert.assertNotNull(tag39);
        org.junit.Assert.assertNotNull(doctype41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Doctype" + "'", str42, "Doctype");
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag6 = new org.jsoup.parser.Token.EndTag();
        char[] charArray9 = new char[] { '#', '#' };
        endTag6.appendAttributeValue(charArray9);
        boolean boolean11 = tokenQueue1.matchesAny(charArray9);
        boolean boolean13 = tokenQueue1.matchChomp("-1: []E");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.AfterDoctypeSystemIdentifier;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        tokeniser7.emit("<!---->");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder11 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.Tokeniser tokeniser18 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList14);
        org.jsoup.parser.Token.Tag tag19 = tokeniser18.tagPending;
        org.jsoup.parser.Token.Tag tag21 = tokeniser18.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype22 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype23 = doctype22.asDoctype();
        java.lang.String str24 = doctype22.tokenType();
        tokeniser18.emit((org.jsoup.parser.Token) doctype22);
        org.jsoup.parser.Token.Tag tag27 = tokeniser18.createTagPending(true);
        xmlTreeBuilder11.currentToken = tag27;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder29 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int34 = parseErrorList33.getMaxSize();
        org.jsoup.nodes.Document document35 = htmlTreeBuilder29.parse("0: Doctype", "hi!", parseErrorList33);
        boolean boolean36 = htmlTreeBuilder29.framesetOk();
        org.jsoup.nodes.Document document39 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder29.setHeadElement((org.jsoup.nodes.Element) document39);
        xmlTreeBuilder11.doc = document39;
        org.jsoup.parser.ParseErrorList parseErrorList45 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream46 = parseErrorList45.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList45.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor48 = parseErrorList45.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int51 = parseErrorList50.getMaxSize();
        boolean boolean52 = parseErrorList45.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList50);
        xmlTreeBuilder11.initialiseParse("hi!#", "0: []", parseErrorList50);
        org.jsoup.parser.Token.Comment comment54 = new org.jsoup.parser.Token.Comment();
        java.lang.String str55 = comment54.getData();
        xmlTreeBuilder11.insert(comment54);
        java.lang.StringBuilder stringBuilder57 = comment54.data;
        tokeniser7.commentPending = comment54;
        org.jsoup.parser.CharacterReader characterReader60 = new org.jsoup.parser.CharacterReader("StartTag");
        int int62 = characterReader60.nextIndexOf((java.lang.CharSequence) "[]");
        java.lang.String str63 = characterReader60.consumeAsString();
        tokeniserState0.read(tokeniser7, characterReader60);
        int int66 = characterReader60.nextIndexOf('#');
        java.lang.String str67 = characterReader60.consumeToEnd();
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNull(tag19);
        org.junit.Assert.assertNotNull(tag21);
        org.junit.Assert.assertNotNull(doctype23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Doctype" + "'", str24, "Doctype");
        org.junit.Assert.assertNotNull(tag27);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(parseErrorList45);
        org.junit.Assert.assertNotNull(parseErrorStream46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNotNull(parseErrorItor48);
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(stringBuilder57);
        org.junit.Assert.assertEquals(stringBuilder57.toString(), "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "S" + "'", str63, "S");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "artTag" + "'", str67, "artTag");
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        tokenQueue1.addFirst((java.lang.Character) '\uffff');
        java.lang.String str9 = tokenQueue1.consumeToIgnoreCase("hi!");
        tokenQueue1.addFirst("ndTag");
        char char12 = tokenQueue1.consume();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uffff" + "'", str9, "\uffff");
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + 'n' + "'", char12 == 'n');
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        boolean boolean13 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.parser.ParseErrorList parseErrorList15 = htmlTreeBuilder0.errors;
        boolean boolean16 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parseBodyFragment("Doctype", "EndTag");
        htmlTreeBuilder0.pushActiveFormattingElements((org.jsoup.nodes.Element) document19);
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(document19);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        boolean boolean3 = tag1.formatAsBlock();
        boolean boolean4 = tag1.preserveWhitespace();
        boolean boolean5 = tag1.formatAsBlock();
        boolean boolean6 = tag1.isInline();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder7 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList12 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        boolean boolean17 = parseErrorList12.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList14);
        xmlTreeBuilder7.initialiseParse("<!---->", "hi!", parseErrorList12);
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document23 = xmlTreeBuilder7.parse("", "[]", parseErrorList22);
        org.jsoup.parser.Token.StartTag startTag25 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType26 = startTag25.type;
        java.lang.String str27 = startTag25.toString();
        boolean boolean28 = xmlTreeBuilder7.process((org.jsoup.parser.Token) startTag25);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder29 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int34 = parseErrorList33.getMaxSize();
        org.jsoup.nodes.Document document35 = htmlTreeBuilder29.parse("0: Doctype", "hi!", parseErrorList33);
        boolean boolean36 = htmlTreeBuilder29.framesetOk();
        org.jsoup.parser.Parser parser37 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser39 = parser37.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document42 = parser37.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document45 = parser37.parseInput("<hi!>", "[]");
        htmlTreeBuilder29.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document45);
        java.lang.String[] strArray47 = new java.lang.String[] {};
        boolean boolean48 = htmlTreeBuilder29.inScope(strArray47);
        htmlTreeBuilder29.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder50 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList54 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int55 = parseErrorList54.getMaxSize();
        org.jsoup.nodes.Document document56 = htmlTreeBuilder50.parse("0: Doctype", "hi!", parseErrorList54);
        htmlTreeBuilder29.setHeadElement((org.jsoup.nodes.Element) document56);
        org.jsoup.parser.CharacterReader characterReader58 = null;
        org.jsoup.parser.ParseErrorList parseErrorList60 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream61 = parseErrorList60.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor62 = parseErrorList60.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor63 = parseErrorList60.iterator();
        org.jsoup.parser.Tokeniser tokeniser64 = new org.jsoup.parser.Tokeniser(characterReader58, parseErrorList60);
        org.jsoup.parser.Token.Tag tag65 = tokeniser64.tagPending;
        org.jsoup.parser.Token.Tag tag67 = tokeniser64.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype68 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype69 = doctype68.asDoctype();
        java.lang.String str70 = doctype68.tokenType();
        tokeniser64.emit((org.jsoup.parser.Token) doctype68);
        org.jsoup.parser.ITokeniserState iTokeniserState72 = tokeniser64.getState();
        org.jsoup.parser.Token.Comment comment73 = new org.jsoup.parser.Token.Comment();
        java.lang.String str74 = comment73.toString();
        java.lang.StringBuilder stringBuilder75 = comment73.data;
        boolean boolean76 = comment73.isEndTag();
        boolean boolean77 = comment73.isComment();
        tokeniser64.commentPending = comment73;
        htmlTreeBuilder29.insert(comment73);
        xmlTreeBuilder7.insert(comment73);
        java.lang.String str81 = comment73.getData();
        boolean boolean82 = tag1.equals((java.lang.Object) str81);
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertTrue("'" + tokenType26 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType26.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "<hi!>" + "'", str27, "<hi!>");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parser37);
        org.junit.Assert.assertNotNull(parser39);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(parseErrorList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(document56);
        org.junit.Assert.assertNotNull(parseErrorList60);
        org.junit.Assert.assertNotNull(parseErrorStream61);
        org.junit.Assert.assertNotNull(parseErrorItor62);
        org.junit.Assert.assertNotNull(parseErrorItor63);
        org.junit.Assert.assertNull(tag65);
        org.junit.Assert.assertNotNull(tag67);
        org.junit.Assert.assertNotNull(doctype69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Doctype" + "'", str70, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "<!---->" + "'", str74, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder75);
        org.junit.Assert.assertEquals(stringBuilder75.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.markInsertionMode();
        boolean boolean22 = htmlTreeBuilder0.inScope("StartTag");
        org.jsoup.parser.Parser parser23 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        java.util.List<org.jsoup.parser.Token.Character> characterList24 = htmlTreeBuilder0.getPendingTableCharacters();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(characterList24);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.Parser parser19 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        java.util.List<org.jsoup.parser.ParseError> parseErrorList20 = parser19.getErrors();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder21 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document22 = xmlTreeBuilder21.doc;
        org.jsoup.nodes.Document document23 = xmlTreeBuilder21.doc;
        org.jsoup.parser.Parser parser24 = parser19.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder21);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(parseErrorList20);
        org.junit.Assert.assertNull(document22);
        org.junit.Assert.assertNull(document23);
        org.junit.Assert.assertNotNull(parser24);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
        org.jsoup.parser.TreeBuilder treeBuilder2 = null;
        org.jsoup.parser.Parser parser3 = parser1.setTreeBuilder(treeBuilder2);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder4 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document5 = xmlTreeBuilder4.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder6 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        boolean boolean16 = parseErrorList11.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        xmlTreeBuilder6.initialiseParse("<!---->", "hi!", parseErrorList11);
        xmlTreeBuilder4.errors = parseErrorList11;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList19 = xmlTreeBuilder4.stack;
        org.jsoup.parser.CharacterReader characterReader20 = null;
        xmlTreeBuilder4.reader = characterReader20;
        org.jsoup.parser.Parser parser22 = parser1.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder4);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder23 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document24 = xmlTreeBuilder23.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder25 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream33 = parseErrorList32.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor34 = parseErrorList32.iterator();
        boolean boolean35 = parseErrorList30.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32);
        xmlTreeBuilder25.initialiseParse("<!---->", "hi!", parseErrorList30);
        xmlTreeBuilder23.errors = parseErrorList30;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList38 = xmlTreeBuilder23.stack;
        org.jsoup.parser.CharacterReader characterReader39 = null;
        xmlTreeBuilder23.reader = characterReader39;
        org.jsoup.parser.Parser parser41 = parser22.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder23);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder42 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int47 = parseErrorList46.getMaxSize();
        org.jsoup.nodes.Document document48 = htmlTreeBuilder42.parse("0: Doctype", "hi!", parseErrorList46);
        org.jsoup.parser.ParseErrorList parseErrorList52 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream53 = parseErrorList52.stream();
        boolean boolean54 = parseErrorList52.canAddError();
        org.jsoup.nodes.Document document55 = htmlTreeBuilder42.parse("EndTag", "hi!#", parseErrorList52);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState56 = null;
        htmlTreeBuilder42.transition(htmlTreeBuilderState56);
        org.jsoup.nodes.Document document58 = htmlTreeBuilder42.doc;
        org.jsoup.parser.Parser parser59 = parser22.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder42);
        htmlTreeBuilder42.clearStackToTableContext();
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNull(document5);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(elementList19);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNull(document24);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertNotNull(parseErrorStream33);
        org.junit.Assert.assertNotNull(parseErrorItor34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(elementList38);
        org.junit.Assert.assertNotNull(parser41);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertNotNull(parseErrorList52);
        org.junit.Assert.assertNotNull(parseErrorStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNotNull(document58);
        org.junit.Assert.assertNotNull(parser59);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        java.util.List<org.jsoup.nodes.Node> nodeList2 = org.jsoup.parser.Parser.parseXmlFragment("<hi!>", "0: []");
        org.junit.Assert.assertNotNull(nodeList2);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.StartTag startTag13 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType14 = startTag13.type;
        startTag13.appendTagName('#');
        boolean boolean17 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag13);
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader19.advance();
        boolean boolean22 = characterReader19.matchConsume("<hi!>");
        htmlTreeBuilder0.reader = characterReader19;
        boolean boolean24 = characterReader19.matchesLetter();
        boolean boolean25 = characterReader19.matchesDigit();
        boolean boolean27 = characterReader19.matches('#');
        boolean boolean29 = characterReader19.matches("artTag");
        char char30 = characterReader19.current();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertTrue("'" + tokenType14 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType14.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + char30 + "' != '" + 't' + "'", char30 == 't');
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str1 = doctype0.getSystemIdentifier();
        boolean boolean2 = doctype0.forceQuirks;
        boolean boolean3 = doctype0.isCharacter();
        boolean boolean4 = doctype0.isDoctype();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement14 = htmlTreeBuilder0.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder15 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        org.jsoup.nodes.Document document21 = htmlTreeBuilder15.parse("0: Doctype", "hi!", parseErrorList19);
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream26 = parseErrorList25.stream();
        boolean boolean27 = parseErrorList25.canAddError();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder15.parse("EndTag", "hi!#", parseErrorList25);
        java.lang.String[] strArray36 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean37 = htmlTreeBuilder15.inScope("hi!#", strArray36);
        org.jsoup.parser.ParseErrorList parseErrorList42 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document43 = htmlTreeBuilder15.parse("0: Doctype", "", parseErrorList42);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder44 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document45 = xmlTreeBuilder44.doc;
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int50 = parseErrorList49.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray51 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList52 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList52, parseErrorArray51);
        org.jsoup.parser.ParseError[] parseErrorArray54 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList55 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList55, parseErrorArray54);
        boolean boolean57 = parseErrorList52.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList55);
        org.jsoup.parser.ParseError[] parseErrorArray58 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList59 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59, parseErrorArray58);
        boolean boolean61 = parseErrorList55.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59);
        parseErrorList59.clear();
        boolean boolean63 = parseErrorList49.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor64 = parseErrorList49.iterator();
        org.jsoup.nodes.Document document65 = xmlTreeBuilder44.parse("<hi!>", "0: []", parseErrorList49);
        htmlTreeBuilder15.push((org.jsoup.nodes.Element) document65);
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document65);
        org.jsoup.parser.Token token68 = null;
        htmlTreeBuilder0.currentToken = token68;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(formElement14);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertNotNull(parseErrorStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertNull(document45);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(parseErrorArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(parseErrorArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(parseErrorItor64);
        org.junit.Assert.assertNotNull(document65);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder21 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int26 = parseErrorList25.getMaxSize();
        org.jsoup.nodes.Document document27 = htmlTreeBuilder21.parse("0: Doctype", "hi!", parseErrorList25);
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document27);
        org.jsoup.parser.CharacterReader characterReader29 = null;
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream32 = parseErrorList31.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor33 = parseErrorList31.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor34 = parseErrorList31.iterator();
        org.jsoup.parser.Tokeniser tokeniser35 = new org.jsoup.parser.Tokeniser(characterReader29, parseErrorList31);
        org.jsoup.parser.Token.Tag tag36 = tokeniser35.tagPending;
        org.jsoup.parser.Token.Tag tag38 = tokeniser35.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype39 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype40 = doctype39.asDoctype();
        java.lang.String str41 = doctype39.tokenType();
        tokeniser35.emit((org.jsoup.parser.Token) doctype39);
        org.jsoup.parser.ITokeniserState iTokeniserState43 = tokeniser35.getState();
        org.jsoup.parser.Token.Comment comment44 = new org.jsoup.parser.Token.Comment();
        java.lang.String str45 = comment44.toString();
        java.lang.StringBuilder stringBuilder46 = comment44.data;
        boolean boolean47 = comment44.isEndTag();
        boolean boolean48 = comment44.isComment();
        tokeniser35.commentPending = comment44;
        htmlTreeBuilder0.insert(comment44);
        java.lang.String str51 = comment44.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.EndTag endTag52 = comment44.asEndTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$EndTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertNotNull(parseErrorStream32);
        org.junit.Assert.assertNotNull(parseErrorItor33);
        org.junit.Assert.assertNotNull(parseErrorItor34);
        org.junit.Assert.assertNull(tag36);
        org.junit.Assert.assertNotNull(tag38);
        org.junit.Assert.assertNotNull(doctype40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Doctype" + "'", str41, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "<!---->" + "'", str45, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder46);
        org.junit.Assert.assertEquals(stringBuilder46.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        tokenQueue1.addFirst((java.lang.Character) '\uffff');
        boolean boolean8 = tokenQueue1.matchesWhitespace();
        java.lang.String str9 = tokenQueue1.toString();
        tokenQueue1.addFirst((java.lang.Character) 'S');
        boolean boolean12 = tokenQueue1.matchesWhitespace();
        java.lang.String str13 = tokenQueue1.consumeTagName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uffff" + "'", str9, "\uffff");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "S" + "'", str13, "S");
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.nodes.Element element38 = htmlTreeBuilder0.insert("<!---->");
        org.jsoup.parser.Token.StartTag startTag40 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag40.appendTagName("hi!");
        startTag40.appendAttributeName('4');
        boolean boolean45 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag40);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder46 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int51 = parseErrorList50.getMaxSize();
        org.jsoup.nodes.Document document52 = htmlTreeBuilder46.parse("0: Doctype", "hi!", parseErrorList50);
        boolean boolean53 = htmlTreeBuilder46.framesetOk();
        org.jsoup.parser.Parser parser54 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser56 = parser54.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document59 = parser54.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document62 = parser54.parseInput("<hi!>", "[]");
        htmlTreeBuilder46.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document62);
        boolean boolean64 = htmlTreeBuilder46.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder65 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList70 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList72 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream73 = parseErrorList72.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor74 = parseErrorList72.iterator();
        boolean boolean75 = parseErrorList70.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList72);
        xmlTreeBuilder65.initialiseParse("<!---->", "hi!", parseErrorList70);
        org.jsoup.parser.ParseErrorList parseErrorList80 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document81 = xmlTreeBuilder65.parse("", "[]", parseErrorList80);
        boolean boolean82 = htmlTreeBuilder46.isInActiveFormattingElements((org.jsoup.nodes.Element) document81);
        boolean boolean83 = htmlTreeBuilder46.isFosterInserts();
        org.jsoup.parser.Parser parser84 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.nodes.Document document87 = parser84.parseInput("", "hi!");
        boolean boolean88 = htmlTreeBuilder46.onStack((org.jsoup.nodes.Element) document87);
        boolean boolean89 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document87);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(element38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(parser54);
        org.junit.Assert.assertNotNull(parser56);
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertNotNull(document62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(parseErrorList72);
        org.junit.Assert.assertNotNull(parseErrorStream73);
        org.junit.Assert.assertNotNull(parseErrorItor74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(parseErrorList80);
        org.junit.Assert.assertNotNull(document81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(parser84);
        org.junit.Assert.assertNotNull(document87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("<!---->");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder10 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader11 = null;
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList13.iterator();
        org.jsoup.parser.Tokeniser tokeniser17 = new org.jsoup.parser.Tokeniser(characterReader11, parseErrorList13);
        org.jsoup.parser.Token.Tag tag18 = tokeniser17.tagPending;
        org.jsoup.parser.Token.Tag tag20 = tokeniser17.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype21 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype22 = doctype21.asDoctype();
        java.lang.String str23 = doctype21.tokenType();
        tokeniser17.emit((org.jsoup.parser.Token) doctype21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser17.createTagPending(true);
        xmlTreeBuilder10.currentToken = tag26;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        boolean boolean35 = htmlTreeBuilder28.framesetOk();
        org.jsoup.nodes.Document document38 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder28.setHeadElement((org.jsoup.nodes.Element) document38);
        xmlTreeBuilder10.doc = document38;
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList44.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList44.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int50 = parseErrorList49.getMaxSize();
        boolean boolean51 = parseErrorList44.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList49);
        xmlTreeBuilder10.initialiseParse("hi!#", "0: []", parseErrorList49);
        org.jsoup.parser.Token.Comment comment53 = new org.jsoup.parser.Token.Comment();
        java.lang.String str54 = comment53.getData();
        xmlTreeBuilder10.insert(comment53);
        java.lang.StringBuilder stringBuilder56 = comment53.data;
        tokeniser6.commentPending = comment53;
        boolean boolean58 = comment53.bogus;
        java.lang.StringBuilder stringBuilder59 = comment53.data;
        java.lang.StringBuilder stringBuilder60 = comment53.data;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNull(tag18);
        org.junit.Assert.assertNotNull(tag20);
        org.junit.Assert.assertNotNull(doctype22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Doctype" + "'", str23, "Doctype");
        org.junit.Assert.assertNotNull(tag26);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(stringBuilder56);
        org.junit.Assert.assertEquals(stringBuilder56.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(stringBuilder59);
        org.junit.Assert.assertEquals(stringBuilder59.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder60);
        org.junit.Assert.assertEquals(stringBuilder60.toString(), "");
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder7 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int12 = parseErrorList11.getMaxSize();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder7.parse("0: Doctype", "hi!", parseErrorList11);
        boolean boolean14 = htmlTreeBuilder7.framesetOk();
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder7.setHeadElement((org.jsoup.nodes.Element) document17);
        org.jsoup.nodes.Document document21 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder7.setHeadElement((org.jsoup.nodes.Element) document21);
        htmlTreeBuilder7.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder25 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList29 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int30 = parseErrorList29.getMaxSize();
        org.jsoup.nodes.Document document31 = htmlTreeBuilder25.parse("0: Doctype", "hi!", parseErrorList29);
        boolean boolean32 = htmlTreeBuilder25.framesetOk();
        org.jsoup.nodes.Document document35 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder25.setHeadElement((org.jsoup.nodes.Element) document35);
        org.jsoup.nodes.Document document39 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder25.setHeadElement((org.jsoup.nodes.Element) document39);
        htmlTreeBuilder7.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document39);
        org.jsoup.parser.CharacterReader characterReader42 = htmlTreeBuilder7.reader;
        org.jsoup.parser.Parser parser43 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser45 = parser43.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder46 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document47 = xmlTreeBuilder46.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder48 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList53 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList55 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream56 = parseErrorList55.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor57 = parseErrorList55.iterator();
        boolean boolean58 = parseErrorList53.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList55);
        xmlTreeBuilder48.initialiseParse("<!---->", "hi!", parseErrorList53);
        xmlTreeBuilder46.errors = parseErrorList53;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList61 = xmlTreeBuilder46.stack;
        org.jsoup.parser.Parser parser62 = parser45.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder46);
        org.jsoup.nodes.Document document65 = parser62.parseInput("hi!", "[]");
        htmlTreeBuilder7.doc = document65;
        int int67 = parseErrorList1.lastIndexOf((java.lang.Object) document65);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(parseErrorList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(characterReader42);
        org.junit.Assert.assertNotNull(parser43);
        org.junit.Assert.assertNotNull(parser45);
        org.junit.Assert.assertNull(document47);
        org.junit.Assert.assertNotNull(parseErrorList55);
        org.junit.Assert.assertNotNull(parseErrorStream56);
        org.junit.Assert.assertNotNull(parseErrorItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(elementList61);
        org.junit.Assert.assertNotNull(parser62);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        org.jsoup.nodes.FormElement formElement11 = htmlTreeBuilder3.getFormElement();
        org.jsoup.parser.CharacterReader characterReader13 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean15 = characterReader13.matches('\000');
        java.lang.String str16 = characterReader13.consumeHexSequence();
        char char17 = characterReader13.current();
        htmlTreeBuilder3.reader = characterReader13;
        java.lang.String str19 = characterReader13.consumeLetterSequence();
        characterReader13.unconsume();
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(formElement11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'S' + "'", char17 == 'S');
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "StartTag" + "'", str19, "StartTag");
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType2 = startTag1.type;
        startTag1.appendTagName('#');
        java.lang.String str5 = startTag1.toString();
        org.jsoup.nodes.Attributes attributes6 = startTag1.getAttributes();
        org.junit.Assert.assertTrue("'" + tokenType2 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType2.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<hi!#>" + "'", str5, "<hi!#>");
        org.junit.Assert.assertNotNull(attributes6);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        org.jsoup.nodes.FormElement formElement11 = htmlTreeBuilder3.getFormElement();
        boolean boolean13 = htmlTreeBuilder3.inListItemScope("0: []");
        boolean boolean14 = htmlTreeBuilder3.isFosterInserts();
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(formElement11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList4.listIterator(0);
        parseErrorList4.trimToSize();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList4.listIterator((int) 'n');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 110");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor8);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.Token.StartTag startTag16 = new org.jsoup.parser.Token.StartTag("Doctype");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState17 = org.jsoup.parser.HtmlTreeBuilderState.AfterBody;
        boolean boolean18 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag16, htmlTreeBuilderState17);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState19 = htmlTreeBuilder0.state();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder20 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int25 = parseErrorList24.getMaxSize();
        org.jsoup.nodes.Document document26 = htmlTreeBuilder20.parse("0: Doctype", "hi!", parseErrorList24);
        boolean boolean27 = htmlTreeBuilder20.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState28 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder20.error(htmlTreeBuilderState28);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState30 = null;
        htmlTreeBuilder20.transition(htmlTreeBuilderState30);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList32 = htmlTreeBuilder20.stack;
        org.jsoup.parser.Token.StartTag startTag34 = new org.jsoup.parser.Token.StartTag("<!---->");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState35 = org.jsoup.parser.HtmlTreeBuilderState.AfterFrameset;
        boolean boolean36 = htmlTreeBuilder20.process((org.jsoup.parser.Token) startTag34, htmlTreeBuilderState35);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder37 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int42 = parseErrorList41.getMaxSize();
        org.jsoup.nodes.Document document43 = htmlTreeBuilder37.parse("0: Doctype", "hi!", parseErrorList41);
        boolean boolean44 = htmlTreeBuilder37.framesetOk();
        org.jsoup.parser.Parser parser45 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser47 = parser45.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document50 = parser45.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document53 = parser45.parseInput("<hi!>", "[]");
        htmlTreeBuilder37.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document53);
        java.lang.String[] strArray55 = new java.lang.String[] {};
        boolean boolean56 = htmlTreeBuilder37.inScope(strArray55);
        htmlTreeBuilder37.markInsertionMode();
        boolean boolean59 = htmlTreeBuilder37.inScope("StartTag");
        org.jsoup.parser.Token.StartTag startTag60 = new org.jsoup.parser.Token.StartTag();
        startTag60.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag64 = startTag60.name("hi!#");
        boolean boolean65 = startTag60.isStartTag();
        startTag60.appendTagName('a');
        org.jsoup.nodes.Element element68 = htmlTreeBuilder37.insertEmpty(startTag60);
        htmlTreeBuilder20.removeFromActiveFormattingElements(element68);
        htmlTreeBuilder20.reconstructFormattingElements();
        org.jsoup.nodes.Document document73 = org.jsoup.parser.Parser.parseBodyFragment("100: ", "<Doctype>");
        boolean boolean74 = htmlTreeBuilder20.isSpecial((org.jsoup.nodes.Element) document73);
        boolean boolean75 = htmlTreeBuilder0.onStack((org.jsoup.nodes.Element) document73);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState19);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState28);
        org.junit.Assert.assertNotNull(elementList32);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(parser45);
        org.junit.Assert.assertNotNull(parser47);
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(tag64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(element68);
        org.junit.Assert.assertNotNull(document73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.nodes.Document document3 = parser0.parseInput("", "hi!");
        boolean boolean4 = parser0.isTrackErrors();
        org.jsoup.nodes.Document document7 = parser0.parseInput(" ", "<0: Doctype>");
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(document7);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("EndTag");
        java.lang.String str2 = characterReader1.consumeDigitSequence();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        tokeniser6.createDoctypePending();
        tokeniser6.emit('\000');
        org.jsoup.parser.Token.Tag tag21 = tokeniser6.tagPending;
        tokeniser6.acknowledgeSelfClosingFlag();
        tokeniser6.createCommentPending();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertNotNull(tag21);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList9 = xmlTreeBuilder0.stack;
        org.jsoup.parser.Parser parser10 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) xmlTreeBuilder0);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder11 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int16 = parseErrorList15.getMaxSize();
        org.jsoup.nodes.Document document17 = htmlTreeBuilder11.parse("0: Doctype", "hi!", parseErrorList15);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState18 = null;
        htmlTreeBuilder11.transition(htmlTreeBuilderState18);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder22 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int27 = parseErrorList26.getMaxSize();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder22.parse("0: Doctype", "hi!", parseErrorList26);
        htmlTreeBuilder22.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray31 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList32 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList32, characterArray31);
        htmlTreeBuilder22.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList32);
        boolean boolean35 = htmlTreeBuilder22.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag37 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement39 = htmlTreeBuilder22.insertForm(startTag37, true);
        htmlTreeBuilder22.baseUri = "[]";
        org.jsoup.parser.CharacterReader characterReader44 = null;
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream47 = parseErrorList46.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor48 = parseErrorList46.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList46.iterator();
        org.jsoup.parser.Tokeniser tokeniser50 = new org.jsoup.parser.Tokeniser(characterReader44, parseErrorList46);
        htmlTreeBuilder22.initialiseParse("St", "<Doctype>", parseErrorList46);
        org.jsoup.nodes.Document document52 = htmlTreeBuilder11.parse("\uffff", "<hi!#>", parseErrorList46);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder53 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList57 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int58 = parseErrorList57.getMaxSize();
        org.jsoup.nodes.Document document59 = htmlTreeBuilder53.parse("0: Doctype", "hi!", parseErrorList57);
        boolean boolean60 = htmlTreeBuilder53.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState61 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder53.error(htmlTreeBuilderState61);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState63 = null;
        htmlTreeBuilder53.transition(htmlTreeBuilderState63);
        htmlTreeBuilder53.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList67 = htmlTreeBuilder53.getPendingTableCharacters();
        htmlTreeBuilder11.setPendingTableCharacters(characterList67);
        org.jsoup.parser.Parser parser69 = parser10.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder11);
        org.jsoup.nodes.Element element70 = null;
        htmlTreeBuilder11.setHeadElement(element70);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(elementList9);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(characterArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(formElement39);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(parseErrorStream47);
        org.junit.Assert.assertNotNull(parseErrorItor48);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertNotNull(parseErrorList57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState61);
        org.junit.Assert.assertNotNull(characterList67);
        org.junit.Assert.assertNotNull(parser69);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Token token8 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState9 = org.jsoup.parser.HtmlTreeBuilderState.InTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState9);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        java.util.List<org.jsoup.nodes.Node> nodeList16 = org.jsoup.parser.Parser.parseFragment("EndTag", (org.jsoup.nodes.Element) document14, "<hi!>");
        boolean boolean17 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document14);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder19 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        org.jsoup.nodes.Document document25 = htmlTreeBuilder19.parse("0: Doctype", "hi!", parseErrorList23);
        org.jsoup.parser.ParseErrorList parseErrorList29 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream30 = parseErrorList29.stream();
        boolean boolean31 = parseErrorList29.canAddError();
        org.jsoup.nodes.Document document32 = htmlTreeBuilder19.parse("EndTag", "hi!#", parseErrorList29);
        java.lang.String[] strArray40 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean41 = htmlTreeBuilder19.inScope("hi!#", strArray40);
        org.jsoup.parser.ParseErrorList parseErrorList46 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document47 = htmlTreeBuilder19.parse("0: Doctype", "", parseErrorList46);
        java.lang.String str48 = htmlTreeBuilder19.getBaseUri();
        org.jsoup.nodes.Element element49 = htmlTreeBuilder19.pop();
        org.jsoup.parser.ParseErrorList parseErrorList52 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.List<org.jsoup.nodes.Node> nodeList53 = htmlTreeBuilder0.parseFragment("\uffff", element49, "a", parseErrorList52);
        org.jsoup.nodes.Element element55 = htmlTreeBuilder0.insert("EndTag");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(token8);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState9);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(parseErrorList29);
        org.junit.Assert.assertNotNull(parseErrorStream30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(element49);
        org.junit.Assert.assertNotNull(parseErrorList52);
        org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertNotNull(element55);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        org.jsoup.parser.ParseError parseError2 = new org.jsoup.parser.ParseError((int) (short) 10, "<hi!>");
        int int3 = parseError2.getPosition();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        java.lang.StringBuilder stringBuilder10 = tokeniser6.dataBuffer;
        tokeniser6.createTempBuffer();
        boolean boolean12 = tokeniser6.currentNodeInHtmlNS();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNull(stringBuilder10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        tokeniser6.acknowledgeSelfClosingFlag();
        org.jsoup.parser.Token.Doctype doctype17 = tokeniser6.doctypePending;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNull(doctype17);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        int int9 = parseErrorList4.lastIndexOf((java.lang.Object) 1.0d);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor10 = parseErrorList4.iterator();
        boolean boolean11 = parseErrorList4.isEmpty();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.parser.Parser parser21 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser23 = parser21.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document26 = parser21.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document29 = parser21.parseInput("<hi!>", "[]");
        htmlTreeBuilder13.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document29);
        org.jsoup.parser.ParseErrorList parseErrorList31 = htmlTreeBuilder13.errors;
        parseErrorList31.ensureCapacity((int) (short) 10);
        java.lang.Object[] objArray34 = parseErrorList31.toArray();
        org.jsoup.parser.ParseError[] parseErrorArray37 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList38 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38, parseErrorArray37);
        org.jsoup.parser.ParseError[] parseErrorArray40 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList41 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList41, parseErrorArray40);
        boolean boolean43 = parseErrorList38.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList41);
        java.lang.Object[] objArray44 = parseErrorList38.toArray();
        parseErrorList38.clear();
        org.jsoup.parser.ParseError[] parseErrorArray46 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList47 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList47, parseErrorArray46);
        org.jsoup.parser.ParseError[] parseErrorArray49 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList50 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList50, parseErrorArray49);
        boolean boolean52 = parseErrorList47.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList50);
        java.lang.Object[] objArray53 = parseErrorList47.toArray();
        parseErrorList47.clear();
        org.jsoup.parser.ParseError[] parseErrorArray55 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList56 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList56, parseErrorArray55);
        boolean boolean58 = parseErrorList47.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList56);
        boolean boolean59 = parseErrorList38.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList56);
        java.lang.Object[] objArray60 = parseErrorList56.toArray();
        org.jsoup.parser.ParseError parseError61 = new org.jsoup.parser.ParseError((int) '#', "hi!#", objArray60);
        boolean boolean62 = parseErrorList31.add(parseError61);
        boolean boolean63 = parseErrorList4.addAll((int) (byte) 0, (java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        org.jsoup.parser.Token.EndTag endTag65 = new org.jsoup.parser.Token.EndTag("Doctype");
        endTag65.appendTagName('\ufffd');
        int int68 = parseErrorList4.lastIndexOf((java.lang.Object) '\ufffd');
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(parseErrorItor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(parser21);
        org.junit.Assert.assertNotNull(parser23);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(parseErrorArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(parseErrorArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        char char3 = tokenQueue1.peek();
        boolean boolean5 = tokenQueue1.matches("hi!#");
        java.lang.String str6 = tokenQueue1.consumeAttributeKey();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'E' + "'", char3 == 'E');
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "EndTag" + "'", str6, "EndTag");
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList4.stream();
        org.jsoup.parser.ParseError parseError15 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        parseErrorList4.add((int) (byte) 0, parseError15);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList4.stream();
        java.lang.Object[] objArray18 = parseErrorList4.toArray();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100: ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100: ]");
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        boolean boolean3 = parseErrorList1.canAddError();
        org.jsoup.parser.ParseError parseError6 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str7 = parseError6.getErrorMessage();
        boolean boolean8 = parseErrorList1.add(parseError6);
        parseErrorList1.clear();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor10 = parseErrorList1.listIterator();
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parseErrorItor10);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        boolean boolean12 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        java.lang.String str13 = parseErrorList1.toString();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList1.stream();
        org.jsoup.parser.Token.EndTag endTag17 = new org.jsoup.parser.Token.EndTag();
        char[] charArray20 = new char[] { '#', '#' };
        endTag17.appendAttributeValue(charArray20);
        endTag17.finaliseTag();
        boolean boolean23 = endTag17.isSelfClosing();
        org.jsoup.parser.Tag tag25 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean26 = tag25.isFormListed();
        org.jsoup.parser.Tag tag27 = tag25.setSelfClosing();
        boolean boolean28 = tag25.isKnownTag();
        java.lang.Object[] objArray30 = new java.lang.Object[] { boolean23, tag25, "Doctype" };
        org.jsoup.parser.ParseError parseError31 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray30);
        int int32 = parseError31.getPosition();
        java.lang.String str33 = parseError31.toString();
        boolean boolean34 = parseErrorList1.add(parseError31);
        int int35 = parseError31.getPosition();
        java.lang.String str36 = parseError31.getErrorMessage();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(tag25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(tag27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0: []" + "'", str33, "0: []");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) 100);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilder3.framesetOk();
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder3.setHeadElement((org.jsoup.nodes.Element) document13);
        htmlTreeBuilder3.generateImpliedEndTags();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder16 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.nodes.Document document22 = htmlTreeBuilder16.parse("0: Doctype", "hi!", parseErrorList20);
        boolean boolean23 = htmlTreeBuilder16.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState24 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder16.error(htmlTreeBuilderState24);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState26 = null;
        htmlTreeBuilder16.transition(htmlTreeBuilderState26);
        htmlTreeBuilder16.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList30 = htmlTreeBuilder16.getPendingTableCharacters();
        htmlTreeBuilder3.setPendingTableCharacters(characterList30);
        org.jsoup.parser.Parser parser32 = parser0.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder3);
        org.jsoup.parser.Parser parser33 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder3);
        org.jsoup.parser.CharacterReader characterReader34 = null;
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream37 = parseErrorList36.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor38 = parseErrorList36.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor39 = parseErrorList36.iterator();
        org.jsoup.parser.Tokeniser tokeniser40 = new org.jsoup.parser.Tokeniser(characterReader34, parseErrorList36);
        org.jsoup.parser.Token.Tag tag41 = tokeniser40.tagPending;
        org.jsoup.parser.Token.Tag tag43 = tokeniser40.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype44 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype45 = doctype44.asDoctype();
        java.lang.String str46 = doctype44.tokenType();
        tokeniser40.emit((org.jsoup.parser.Token) doctype44);
        java.lang.StringBuilder stringBuilder48 = doctype44.publicIdentifier;
        java.lang.String str49 = doctype44.getSystemIdentifier();
        java.lang.StringBuilder stringBuilder50 = doctype44.systemIdentifier;
        htmlTreeBuilder3.currentToken = doctype44;
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState24);
        org.junit.Assert.assertNotNull(characterList30);
        org.junit.Assert.assertNotNull(parser32);
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertNotNull(parseErrorStream37);
        org.junit.Assert.assertNotNull(parseErrorItor38);
        org.junit.Assert.assertNotNull(parseErrorItor39);
        org.junit.Assert.assertNull(tag41);
        org.junit.Assert.assertNotNull(tag43);
        org.junit.Assert.assertNotNull(doctype45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Doctype" + "'", str46, "Doctype");
        org.junit.Assert.assertNotNull(stringBuilder48);
        org.junit.Assert.assertEquals(stringBuilder48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(stringBuilder50);
        org.junit.Assert.assertEquals(stringBuilder50.toString(), "");
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag3.isInline();
        boolean boolean5 = tag3.isFormSubmittable();
        boolean boolean6 = tag3.formatAsBlock();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder4 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList8 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int9 = parseErrorList8.getMaxSize();
        org.jsoup.nodes.Document document10 = htmlTreeBuilder4.parse("0: Doctype", "hi!", parseErrorList8);
        org.jsoup.parser.ParseError[] parseErrorArray11 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList12 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12, parseErrorArray11);
        org.jsoup.parser.ParseError[] parseErrorArray14 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList15 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15, parseErrorArray14);
        boolean boolean17 = parseErrorList12.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15);
        java.lang.Object[] objArray18 = parseErrorList12.toArray();
        parseErrorList12.clear();
        org.jsoup.parser.ParseError[] parseErrorArray20 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList21 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21, parseErrorArray20);
        org.jsoup.parser.ParseError[] parseErrorArray23 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList24 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24, parseErrorArray23);
        boolean boolean26 = parseErrorList21.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
        java.lang.Object[] objArray27 = parseErrorList21.toArray();
        parseErrorList21.clear();
        org.jsoup.parser.ParseError[] parseErrorArray29 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList30 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30, parseErrorArray29);
        boolean boolean32 = parseErrorList21.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        boolean boolean33 = parseErrorList12.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        java.lang.Object[] objArray34 = parseErrorList30.toArray();
        boolean boolean35 = parseErrorList8.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        org.jsoup.parser.ParseError[] parseErrorArray36 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList37 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList37, parseErrorArray36);
        org.jsoup.parser.ParseError[] parseErrorArray39 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList40 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40, parseErrorArray39);
        boolean boolean42 = parseErrorList37.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList40.listIterator();
        int int45 = parseErrorList40.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag49 = new org.jsoup.parser.Token.EndTag();
        char[] charArray52 = new char[] { '#', '#' };
        endTag49.appendAttributeValue(charArray52);
        endTag49.finaliseTag();
        boolean boolean55 = endTag49.isSelfClosing();
        org.jsoup.parser.Tag tag57 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean58 = tag57.isFormListed();
        org.jsoup.parser.Tag tag59 = tag57.setSelfClosing();
        boolean boolean60 = tag57.isKnownTag();
        java.lang.Object[] objArray62 = new java.lang.Object[] { boolean55, tag57, "Doctype" };
        org.jsoup.parser.ParseError parseError63 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray62);
        parseErrorList40.add(0, parseError63);
        boolean boolean65 = parseErrorList8.add(parseError63);
        org.jsoup.nodes.Document document66 = htmlTreeBuilder0.parse("\uffff", "", parseErrorList8);
        htmlTreeBuilder0.clearStackToTableBodyContext();
        boolean boolean68 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document69 = htmlTreeBuilder0.getDocument();
        org.junit.Assert.assertNotNull(parseErrorList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parseErrorArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(parseErrorArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(parseErrorArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parseErrorArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(tag57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(tag59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(document66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(document69);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.resetInsertionMode();
        org.jsoup.nodes.Element element8 = htmlTreeBuilder0.currentElement();
        boolean boolean9 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.CharacterReader characterReader10 = null;
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList12.iterator();
        org.jsoup.parser.Tokeniser tokeniser16 = new org.jsoup.parser.Tokeniser(characterReader10, parseErrorList12);
        boolean boolean17 = tokeniser16.isAppropriateEndTagToken();
        org.jsoup.parser.Token.Tag tag19 = tokeniser16.createTagPending(true);
        java.lang.StringBuilder stringBuilder20 = null;
        tokeniser16.dataBuffer = stringBuilder20;
        org.jsoup.parser.Token.Comment comment22 = tokeniser16.commentPending;
        htmlTreeBuilder0.tokeniser = tokeniser16;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(tag19);
        org.junit.Assert.assertNull(comment22);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        tokenQueue1.advance();
        boolean boolean6 = tokenQueue1.matchesWhitespace();
        java.lang.String str8 = tokenQueue1.consumeToIgnoreCase("StartTag");
        boolean boolean9 = tokenQueue1.isEmpty();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder10 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int15 = parseErrorList14.getMaxSize();
        org.jsoup.nodes.Document document16 = htmlTreeBuilder10.parse("0: Doctype", "hi!", parseErrorList14);
        htmlTreeBuilder10.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray19 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList20 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList20, characterArray19);
        htmlTreeBuilder10.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList20);
        boolean boolean23 = htmlTreeBuilder10.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag25 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement27 = htmlTreeBuilder10.insertForm(startTag25, true);
        org.jsoup.parser.TokenQueue tokenQueue30 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean31 = tokenQueue30.matchesStartTag();
        boolean boolean32 = tokenQueue30.consumeWhitespace();
        boolean boolean33 = tokenQueue30.matchesWhitespace();
        org.jsoup.parser.TokenQueue tokenQueue35 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str37 = tokenQueue35.chompTo("Doctype");
        java.lang.String str38 = tokenQueue35.consumeWord();
        boolean boolean39 = tokenQueue35.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag40 = new org.jsoup.parser.Token.EndTag();
        char[] charArray43 = new char[] { '#', '#' };
        endTag40.appendAttributeValue(charArray43);
        boolean boolean45 = tokenQueue35.matchesAny(charArray43);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder46 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int51 = parseErrorList50.getMaxSize();
        org.jsoup.nodes.Document document52 = htmlTreeBuilder46.parse("0: Doctype", "hi!", parseErrorList50);
        boolean boolean53 = htmlTreeBuilder46.framesetOk();
        org.jsoup.parser.Parser parser54 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser56 = parser54.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document59 = parser54.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document62 = parser54.parseInput("<hi!>", "[]");
        htmlTreeBuilder46.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document62);
        java.lang.String[] strArray64 = new java.lang.String[] {};
        boolean boolean65 = htmlTreeBuilder46.inScope(strArray64);
        boolean boolean66 = tokenQueue35.matchesAny(strArray64);
        java.lang.String str67 = tokenQueue30.consumeToAny(strArray64);
        boolean boolean68 = htmlTreeBuilder10.inScope("[0: []]", strArray64);
        boolean boolean69 = tokenQueue1.matchesAny(strArray64);
        boolean boolean70 = tokenQueue1.matchesStartTag();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(characterArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(formElement27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "EndTag" + "'", str37, "EndTag");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(parser54);
        org.junit.Assert.assertNotNull(parser56);
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertNotNull(document62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "EndTag" + "'", str67, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        startTag0.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag4 = startTag0.name("hi!#");
        tag4.selfClosing = true;
        org.junit.Assert.assertNotNull(tag4);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = htmlTreeBuilder0.originalState();
        org.jsoup.nodes.Element element15 = htmlTreeBuilder0.pop();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        org.jsoup.parser.Token.Comment comment30 = new org.jsoup.parser.Token.Comment();
        java.lang.String str31 = comment30.toString();
        boolean boolean32 = comment30.isCharacter();
        htmlTreeBuilder18.insert(comment30);
        org.jsoup.parser.Parser parser34 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder18);
        org.jsoup.nodes.Document document37 = parser34.parseInput("hi!", "[]");
        java.util.List<org.jsoup.nodes.Node> nodeList39 = org.jsoup.parser.Parser.parseFragment("-1: []", (org.jsoup.nodes.Element) document37, "");
        org.jsoup.parser.CharacterReader characterReader41 = null;
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor45 = parseErrorList43.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList43.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList48 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int49 = parseErrorList48.getMaxSize();
        boolean boolean50 = parseErrorList43.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList48);
        org.jsoup.parser.Tokeniser tokeniser51 = new org.jsoup.parser.Tokeniser(characterReader41, parseErrorList48);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor52 = parseErrorList48.iterator();
        java.util.List<org.jsoup.nodes.Node> nodeList53 = htmlTreeBuilder0.parseFragment("0: []", (org.jsoup.nodes.Element) document37, "0: []", parseErrorList48);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder54 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader55 = null;
        org.jsoup.parser.ParseErrorList parseErrorList57 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream58 = parseErrorList57.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor59 = parseErrorList57.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor60 = parseErrorList57.iterator();
        org.jsoup.parser.Tokeniser tokeniser61 = new org.jsoup.parser.Tokeniser(characterReader55, parseErrorList57);
        org.jsoup.parser.Token.Tag tag62 = tokeniser61.tagPending;
        org.jsoup.parser.Token.Tag tag64 = tokeniser61.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype65 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype66 = doctype65.asDoctype();
        java.lang.String str67 = doctype65.tokenType();
        tokeniser61.emit((org.jsoup.parser.Token) doctype65);
        org.jsoup.parser.Token.Tag tag70 = tokeniser61.createTagPending(true);
        xmlTreeBuilder54.currentToken = tag70;
        org.jsoup.nodes.Attributes attributes72 = tag70.attributes;
        boolean boolean73 = parseErrorList48.remove((java.lang.Object) tag70);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(htmlTreeBuilderState14);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<!---->" + "'", str31, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertNotNull(nodeList39);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertNotNull(parseErrorItor45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertNotNull(parseErrorList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(parseErrorItor52);
        org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertNotNull(parseErrorList57);
        org.junit.Assert.assertNotNull(parseErrorStream58);
        org.junit.Assert.assertNotNull(parseErrorItor59);
        org.junit.Assert.assertNotNull(parseErrorItor60);
        org.junit.Assert.assertNull(tag62);
        org.junit.Assert.assertNotNull(tag64);
        org.junit.Assert.assertNotNull(doctype66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Doctype" + "'", str67, "Doctype");
        org.junit.Assert.assertNotNull(tag70);
        org.junit.Assert.assertNotNull(attributes72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag();
        startTag1.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag4 = startTag1.asStartTag();
        org.jsoup.parser.Token.Tag tag6 = startTag4.name("");
        org.jsoup.parser.Token.StartTag startTag7 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes8 = startTag7.getAttributes();
        tag6.attributes = attributes8;
        org.jsoup.parser.Token.StartTag startTag10 = new org.jsoup.parser.Token.StartTag("-1: []", attributes8);
        startTag10.appendTagName('E');
        startTag10.appendAttributeName('<');
        org.junit.Assert.assertNotNull(startTag4);
        org.junit.Assert.assertNotNull(tag6);
        org.junit.Assert.assertNotNull(attributes8);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        tokenQueue1.advance();
        boolean boolean6 = tokenQueue1.isEmpty();
        boolean boolean7 = tokenQueue1.matchesWord();
        java.lang.String str8 = tokenQueue1.remainder();
        java.lang.String str10 = tokenQueue1.consumeTo("artTag");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        org.jsoup.nodes.FormElement formElement11 = htmlTreeBuilder3.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.parser.Parser parser20 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser22 = parser20.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document25 = parser20.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document28 = parser20.parseInput("<hi!>", "[]");
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document28);
        boolean boolean30 = htmlTreeBuilder12.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder31 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList38.iterator();
        boolean boolean41 = parseErrorList36.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        xmlTreeBuilder31.initialiseParse("<!---->", "hi!", parseErrorList36);
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document47 = xmlTreeBuilder31.parse("", "[]", parseErrorList46);
        boolean boolean48 = htmlTreeBuilder12.isInActiveFormattingElements((org.jsoup.nodes.Element) document47);
        boolean boolean49 = htmlTreeBuilder3.isInActiveFormattingElements((org.jsoup.nodes.Element) document47);
        java.util.List<org.jsoup.parser.Token.Character> characterList50 = htmlTreeBuilder3.getPendingTableCharacters();
        org.jsoup.parser.Tokeniser tokeniser51 = htmlTreeBuilder3.tokeniser;
        org.jsoup.parser.Token.Tag tag52 = tokeniser51.tagPending;
        tokeniser51.createTempBuffer();
        org.jsoup.parser.Token.StartTag startTag55 = new org.jsoup.parser.Token.StartTag("");
        tokeniser51.tagPending = startTag55;
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(formElement11);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parser20);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(characterList50);
        org.junit.Assert.assertNotNull(tokeniser51);
        org.junit.Assert.assertNull(tag52);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("</hi![]>");
        boolean boolean2 = tag1.preserveWhitespace();
        boolean boolean3 = tag1.isKnownTag();
        java.lang.String str4 = tag1.toString();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "</hi![]>" + "'", str4, "</hi![]>");
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        tokenQueue1.advance();
        boolean boolean6 = tokenQueue1.isEmpty();
        boolean boolean7 = tokenQueue1.matchesWord();
        boolean boolean8 = tokenQueue1.matchesStartTag();
        org.jsoup.parser.TokenQueue tokenQueue10 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean11 = tokenQueue10.isEmpty();
        boolean boolean12 = tokenQueue10.consumeWhitespace();
        boolean boolean14 = tokenQueue10.matchChomp("<!---->");
        char char15 = tokenQueue10.peek();
        tokenQueue10.addFirst("EndTag");
        boolean boolean18 = tokenQueue10.matchesWord();
        org.jsoup.parser.TokenQueue tokenQueue20 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str22 = tokenQueue20.chompTo("Doctype");
        java.lang.String str23 = tokenQueue20.consumeWord();
        boolean boolean24 = tokenQueue20.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag25 = new org.jsoup.parser.Token.EndTag();
        char[] charArray28 = new char[] { '#', '#' };
        endTag25.appendAttributeValue(charArray28);
        boolean boolean30 = tokenQueue20.matchesAny(charArray28);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder31 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList35 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int36 = parseErrorList35.getMaxSize();
        org.jsoup.nodes.Document document37 = htmlTreeBuilder31.parse("0: Doctype", "hi!", parseErrorList35);
        boolean boolean38 = htmlTreeBuilder31.framesetOk();
        org.jsoup.parser.Parser parser39 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser41 = parser39.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document44 = parser39.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document47 = parser39.parseInput("<hi!>", "[]");
        htmlTreeBuilder31.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document47);
        java.lang.String[] strArray49 = new java.lang.String[] {};
        boolean boolean50 = htmlTreeBuilder31.inScope(strArray49);
        boolean boolean51 = tokenQueue20.matchesAny(strArray49);
        boolean boolean52 = tokenQueue10.matchesAny(strArray49);
        java.lang.String str53 = tokenQueue1.consumeToAny(strArray49);
        java.lang.String str55 = tokenQueue1.consumeTo("Comment");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + 'E' + "'", char15 == 'E');
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "EndTag" + "'", str22, "EndTag");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parseErrorList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parser39);
        org.junit.Assert.assertNotNull(parser41);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.resetInsertionMode();
        htmlTreeBuilder0.markInsertionMode();
        boolean boolean10 = htmlTreeBuilder0.inTableScope("artTag");
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        boolean boolean14 = parseErrorList12.canAddError();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState15 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag16 = new org.jsoup.parser.Token.EndTag();
        endTag16.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilderState15.process((org.jsoup.parser.Token) endTag16, htmlTreeBuilder18);
        htmlTreeBuilder18.baseUri = "</hi![]>";
        boolean boolean28 = parseErrorList12.equals((java.lang.Object) htmlTreeBuilder18);
        org.jsoup.nodes.Document document29 = htmlTreeBuilder18.getDocument();
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document29);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState15);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(document29);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        org.jsoup.parser.TokeniserState tokeniserState11 = org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedDashDash;
        tokeniser6.eofError((org.jsoup.parser.ITokeniserState) tokeniserState11);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token token13 = tokeniser6.read();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNotNull(tokeniserState11);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("<!---->");
        startTag1.tagName = "Doctype";
        startTag1.appendAttributeName('#');
        startTag1.appendAttributeValue('E');
        startTag1.finaliseTag();
        java.lang.String str9 = startTag1.name();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Doctype" + "'", str9, "Doctype");
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement14 = htmlTreeBuilder0.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder15 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        org.jsoup.nodes.Document document21 = htmlTreeBuilder15.parse("0: Doctype", "hi!", parseErrorList19);
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream26 = parseErrorList25.stream();
        boolean boolean27 = parseErrorList25.canAddError();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder15.parse("EndTag", "hi!#", parseErrorList25);
        java.lang.String[] strArray36 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean37 = htmlTreeBuilder15.inScope("hi!#", strArray36);
        org.jsoup.parser.ParseErrorList parseErrorList42 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document43 = htmlTreeBuilder15.parse("0: Doctype", "", parseErrorList42);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder44 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document45 = xmlTreeBuilder44.doc;
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int50 = parseErrorList49.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray51 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList52 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList52, parseErrorArray51);
        org.jsoup.parser.ParseError[] parseErrorArray54 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList55 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList55, parseErrorArray54);
        boolean boolean57 = parseErrorList52.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList55);
        org.jsoup.parser.ParseError[] parseErrorArray58 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList59 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59, parseErrorArray58);
        boolean boolean61 = parseErrorList55.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59);
        parseErrorList59.clear();
        boolean boolean63 = parseErrorList49.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor64 = parseErrorList49.iterator();
        org.jsoup.nodes.Document document65 = xmlTreeBuilder44.parse("<hi!>", "0: []", parseErrorList49);
        htmlTreeBuilder15.push((org.jsoup.nodes.Element) document65);
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document65);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState68 = htmlTreeBuilder0.originalState();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder69 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList73 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int74 = parseErrorList73.getMaxSize();
        org.jsoup.nodes.Document document75 = htmlTreeBuilder69.parse("0: Doctype", "hi!", parseErrorList73);
        boolean boolean76 = htmlTreeBuilder69.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState77 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder69.error(htmlTreeBuilderState77);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState79 = null;
        htmlTreeBuilder69.transition(htmlTreeBuilderState79);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList81 = htmlTreeBuilder69.stack;
        org.jsoup.parser.Token.StartTag startTag83 = new org.jsoup.parser.Token.StartTag("<!---->");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState84 = org.jsoup.parser.HtmlTreeBuilderState.AfterFrameset;
        boolean boolean85 = htmlTreeBuilder69.process((org.jsoup.parser.Token) startTag83, htmlTreeBuilderState84);
        org.jsoup.nodes.Element element86 = htmlTreeBuilder0.insertEmpty(startTag83);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState87 = htmlTreeBuilder0.state();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(formElement14);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertNotNull(parseErrorStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertNull(document45);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(parseErrorArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(parseErrorArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(parseErrorItor64);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertNull(htmlTreeBuilderState68);
        org.junit.Assert.assertNotNull(parseErrorList73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(document75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState77);
        org.junit.Assert.assertNotNull(elementList81);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(element86);
        org.junit.Assert.assertNull(htmlTreeBuilderState87);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking((int) '\uffff');
        java.util.Spliterator<org.jsoup.parser.ParseError> parseErrorSpliterator2 = parseErrorList1.spliterator();
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        org.jsoup.parser.ParseError[] parseErrorArray6 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList7 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7, parseErrorArray6);
        boolean boolean9 = parseErrorList4.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList7.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        parseErrorList7.trimToSize();
        boolean boolean15 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder16 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader17 = null;
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream20 = parseErrorList19.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList19.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor22 = parseErrorList19.iterator();
        org.jsoup.parser.Tokeniser tokeniser23 = new org.jsoup.parser.Tokeniser(characterReader17, parseErrorList19);
        xmlTreeBuilder16.tokeniser = tokeniser23;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList25 = xmlTreeBuilder16.stack;
        org.jsoup.parser.CharacterReader characterReader28 = null;
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream31 = parseErrorList30.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList30.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor33 = parseErrorList30.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList35 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int36 = parseErrorList35.getMaxSize();
        boolean boolean37 = parseErrorList30.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList35);
        org.jsoup.parser.Tokeniser tokeniser38 = new org.jsoup.parser.Tokeniser(characterReader28, parseErrorList35);
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream41 = parseErrorList40.stream();
        boolean boolean42 = parseErrorList40.canAddError();
        boolean boolean43 = parseErrorList35.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40);
        java.util.List<org.jsoup.nodes.Node> nodeList44 = xmlTreeBuilder16.parseFragment("StartTag", "<!---->", parseErrorList40);
        boolean boolean45 = parseErrorList7.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40);
        java.util.Spliterator<org.jsoup.parser.ParseError> parseErrorSpliterator46 = parseErrorList7.spliterator();
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorSpliterator2);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(parseErrorArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertNotNull(parseErrorStream20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorItor22);
        org.junit.Assert.assertNull(elementList25);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorStream31);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertNotNull(parseErrorItor33);
        org.junit.Assert.assertNotNull(parseErrorList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertNotNull(parseErrorStream41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(parseErrorSpliterator46);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        tokenQueue1.advance();
        boolean boolean6 = tokenQueue1.matchesWhitespace();
        java.lang.String str8 = tokenQueue1.consumeToIgnoreCase("EOF");
        boolean boolean10 = tokenQueue1.matches("hi!#<hi!#>");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.matchesStartTag();
        char[] charArray9 = new char[] { ' ', '4', '\000', ' ', '\uffff', 'a' };
        boolean boolean10 = tokenQueue1.matchesAny(charArray9);
        boolean boolean11 = tokenQueue1.consumeWhitespace();
        tokenQueue1.advance();
        java.lang.String str14 = tokenQueue1.consumeToIgnoreCase("[100: ]");
        java.lang.String str15 = tokenQueue1.consumeTagName();
        java.lang.String str17 = tokenQueue1.chompTo("[100: ]");
        java.lang.String str19 = tokenQueue1.chompToIgnoreCase("S");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray9);
// flaky:         org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " 4\000\uffffa");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " 4\000\uffffa");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , 4, \000\uffff, a]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ndTag" + "'", str14, "ndTag");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        boolean boolean12 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.parser.Parser parser21 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser23 = parser21.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document26 = parser21.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document29 = parser21.parseInput("<hi!>", "[]");
        htmlTreeBuilder13.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document29);
        java.lang.String[] strArray31 = new java.lang.String[] {};
        boolean boolean32 = htmlTreeBuilder13.inScope(strArray31);
        htmlTreeBuilder13.markInsertionMode();
        boolean boolean35 = htmlTreeBuilder13.inScope("StartTag");
        org.jsoup.parser.Parser parser36 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder13);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList37 = htmlTreeBuilder13.stack;
        boolean boolean38 = parseErrorList1.remove((java.lang.Object) elementList37);
        org.jsoup.parser.Token.EndTag endTag42 = new org.jsoup.parser.Token.EndTag();
        char[] charArray45 = new char[] { '#', '#' };
        endTag42.appendAttributeValue(charArray45);
        endTag42.finaliseTag();
        boolean boolean48 = endTag42.isSelfClosing();
        org.jsoup.parser.Tag tag50 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean51 = tag50.isFormListed();
        org.jsoup.parser.Tag tag52 = tag50.setSelfClosing();
        boolean boolean53 = tag50.isKnownTag();
        java.lang.Object[] objArray55 = new java.lang.Object[] { boolean48, tag50, "Doctype" };
        org.jsoup.parser.ParseError parseError56 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray55);
        java.lang.String str57 = parseError56.getErrorMessage();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError58 = parseErrorList1.set((int) '<', parseError56);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 60, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(parser21);
        org.junit.Assert.assertNotNull(parser23);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(elementList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(tag50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(tag52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.formatAsBlock();
        boolean boolean6 = tag1.isInline();
        boolean boolean7 = tag1.isFormListed();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeTagName();
        java.lang.String str5 = tokenQueue1.consumeCssIdentifier();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState7 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState7);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder11 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int16 = parseErrorList15.getMaxSize();
        org.jsoup.nodes.Document document17 = htmlTreeBuilder11.parse("0: Doctype", "hi!", parseErrorList15);
        htmlTreeBuilder11.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray20 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList21 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList21, characterArray20);
        htmlTreeBuilder11.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList21);
        boolean boolean24 = htmlTreeBuilder11.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag26 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement28 = htmlTreeBuilder11.insertForm(startTag26, true);
        htmlTreeBuilder11.baseUri = "[]";
        org.jsoup.parser.CharacterReader characterReader33 = null;
        org.jsoup.parser.ParseErrorList parseErrorList35 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream36 = parseErrorList35.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor37 = parseErrorList35.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor38 = parseErrorList35.iterator();
        org.jsoup.parser.Tokeniser tokeniser39 = new org.jsoup.parser.Tokeniser(characterReader33, parseErrorList35);
        htmlTreeBuilder11.initialiseParse("St", "<Doctype>", parseErrorList35);
        org.jsoup.nodes.Document document41 = htmlTreeBuilder0.parse("\uffff", "<hi!#>", parseErrorList35);
        org.jsoup.parser.ParseErrorList parseErrorList44 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream47 = parseErrorList46.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor48 = parseErrorList46.iterator();
        boolean boolean49 = parseErrorList44.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList46);
        parseErrorList46.ensureCapacity((int) (short) 1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder52 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document53 = xmlTreeBuilder52.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder54 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList59 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList61 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream62 = parseErrorList61.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor63 = parseErrorList61.iterator();
        boolean boolean64 = parseErrorList59.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList61);
        xmlTreeBuilder54.initialiseParse("<!---->", "hi!", parseErrorList59);
        xmlTreeBuilder52.errors = parseErrorList59;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList67 = xmlTreeBuilder52.stack;
        boolean boolean68 = parseErrorList46.equals((java.lang.Object) elementList67);
        boolean boolean69 = parseErrorList46.canAddError();
        boolean boolean70 = parseErrorList35.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList46);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNotNull(characterArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(formElement28);
        org.junit.Assert.assertNotNull(parseErrorList35);
        org.junit.Assert.assertNotNull(parseErrorStream36);
        org.junit.Assert.assertNotNull(parseErrorItor37);
        org.junit.Assert.assertNotNull(parseErrorItor38);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(parseErrorStream47);
        org.junit.Assert.assertNotNull(parseErrorItor48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(document53);
        org.junit.Assert.assertNotNull(parseErrorList61);
        org.junit.Assert.assertNotNull(parseErrorStream62);
        org.junit.Assert.assertNotNull(parseErrorItor63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(elementList67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        org.jsoup.parser.Token.StartTag startTag23 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes24 = startTag23.getAttributes();
        xmlTreeBuilder3.currentToken = startTag23;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder26 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int31 = parseErrorList30.getMaxSize();
        org.jsoup.nodes.Document document32 = htmlTreeBuilder26.parse("0: Doctype", "hi!", parseErrorList30);
        boolean boolean33 = htmlTreeBuilder26.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState34 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder26.error(htmlTreeBuilderState34);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState36 = null;
        htmlTreeBuilder26.transition(htmlTreeBuilderState36);
        htmlTreeBuilder26.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList40 = htmlTreeBuilder26.getPendingTableCharacters();
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList41 = htmlTreeBuilder26.getStack();
        xmlTreeBuilder3.stack = elementList41;
        org.jsoup.parser.CharacterReader characterReader43 = null;
        org.jsoup.parser.ParseErrorList parseErrorList45 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream46 = parseErrorList45.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList45.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor48 = parseErrorList45.iterator();
        org.jsoup.parser.Tokeniser tokeniser49 = new org.jsoup.parser.Tokeniser(characterReader43, parseErrorList45);
        org.jsoup.parser.Token.Tag tag50 = tokeniser49.tagPending;
        org.jsoup.parser.Token.Tag tag52 = tokeniser49.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype53 = new org.jsoup.parser.Token.Doctype();
        boolean boolean54 = doctype53.isCharacter();
        boolean boolean55 = doctype53.isEndTag();
        boolean boolean56 = doctype53.isCharacter();
        tokeniser49.emit((org.jsoup.parser.Token) doctype53);
        java.lang.String str58 = doctype53.getSystemIdentifier();
        java.lang.String str59 = doctype53.getName();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = xmlTreeBuilder3.process((org.jsoup.parser.Token) doctype53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(attributes24);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState34);
        org.junit.Assert.assertNotNull(characterList40);
        org.junit.Assert.assertNotNull(elementList41);
        org.junit.Assert.assertNotNull(parseErrorList45);
        org.junit.Assert.assertNotNull(parseErrorStream46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNotNull(parseErrorItor48);
        org.junit.Assert.assertNull(tag50);
        org.junit.Assert.assertNotNull(tag52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document5 = parser0.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document8 = parser0.parseInput("<hi!>", "[]");
        org.jsoup.parser.TreeBuilder treeBuilder9 = parser0.getTreeBuilder();
        org.jsoup.parser.Parser parser11 = parser0.setTrackErrors(8);
        java.util.List<org.jsoup.parser.ParseError> parseErrorList12 = parser0.getErrors();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNotNull(treeBuilder9);
        org.junit.Assert.assertNotNull(parser11);
        org.junit.Assert.assertNotNull(parseErrorList12);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        java.lang.String str1 = org.jsoup.parser.TokenQueue.unescape("ndTag");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ndTag" + "'", str1, "ndTag");
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        tokenQueue1.addFirst((java.lang.Character) 'a');
        char char8 = tokenQueue1.consume();
        org.jsoup.parser.CharacterReader characterReader9 = null;
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream12 = parseErrorList11.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor13 = parseErrorList11.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList11.iterator();
        org.jsoup.parser.Tokeniser tokeniser15 = new org.jsoup.parser.Tokeniser(characterReader9, parseErrorList11);
        org.jsoup.parser.Token.Tag tag16 = tokeniser15.tagPending;
        tokeniser15.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag20 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType21 = startTag20.type;
        startTag20.appendTagName('#');
        tokeniser15.tagPending = startTag20;
        org.jsoup.parser.TokeniserState tokeniserState25 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser15.transition((org.jsoup.parser.ITokeniserState) tokeniserState25);
        org.jsoup.parser.Token.Doctype doctype27 = new org.jsoup.parser.Token.Doctype();
        boolean boolean28 = doctype27.isCharacter();
        tokeniser15.doctypePending = doctype27;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState30 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype31 = new org.jsoup.parser.Token.Doctype();
        boolean boolean32 = doctype31.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder33 = null;
        boolean boolean34 = htmlTreeBuilderState30.process((org.jsoup.parser.Token) doctype31, htmlTreeBuilder33);
        java.lang.StringBuilder stringBuilder35 = doctype31.name;
        tokeniser15.dataBuffer = stringBuilder35;
        org.jsoup.parser.Token.EndTag endTag37 = new org.jsoup.parser.Token.EndTag();
        char[] charArray40 = new char[] { '#', '#' };
        endTag37.appendAttributeValue(charArray40);
        endTag37.appendAttributeValue(' ');
        char[] charArray45 = new char[] { '4' };
        endTag37.appendAttributeValue(charArray45);
        tokeniser15.emit(charArray45);
        boolean boolean48 = tokenQueue1.matchesAny(charArray45);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + 'a' + "'", char8 == 'a');
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertNotNull(parseErrorStream12);
        org.junit.Assert.assertNotNull(parseErrorItor13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertNull(tag16);
        org.junit.Assert.assertTrue("'" + tokenType21 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType21.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(stringBuilder35);
        org.junit.Assert.assertEquals(stringBuilder35.toString(), "");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#, #]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[4]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.formatAsBlock();
        boolean boolean6 = tag1.isKnownTag();
        java.lang.String str7 = tag1.getName();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        org.jsoup.nodes.FormElement formElement11 = htmlTreeBuilder3.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.parser.Parser parser20 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser22 = parser20.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document25 = parser20.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document28 = parser20.parseInput("<hi!>", "[]");
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document28);
        boolean boolean30 = htmlTreeBuilder12.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder31 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList38.iterator();
        boolean boolean41 = parseErrorList36.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        xmlTreeBuilder31.initialiseParse("<!---->", "hi!", parseErrorList36);
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document47 = xmlTreeBuilder31.parse("", "[]", parseErrorList46);
        boolean boolean48 = htmlTreeBuilder12.isInActiveFormattingElements((org.jsoup.nodes.Element) document47);
        boolean boolean49 = htmlTreeBuilder3.isInActiveFormattingElements((org.jsoup.nodes.Element) document47);
        htmlTreeBuilder3.clearStackToTableRowContext();
        htmlTreeBuilder3.newPendingTableCharacters();
        org.jsoup.parser.Tokeniser tokeniser52 = htmlTreeBuilder3.tokeniser;
        boolean boolean54 = htmlTreeBuilder3.inButtonScope("St");
        org.jsoup.parser.Parser parser55 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder3);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(formElement11);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parser20);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(tokeniser52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.EndTagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.Token.Tag tag10 = tokeniser7.createTagPending(true);
        tokeniser7.createTempBuffer();
        tokeniser7.emitTagPending();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder13.error(htmlTreeBuilderState21);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState23 = null;
        htmlTreeBuilder13.transition(htmlTreeBuilderState23);
        htmlTreeBuilder13.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList27 = htmlTreeBuilder13.getPendingTableCharacters();
        org.jsoup.parser.CharacterReader characterReader29 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean31 = characterReader29.matches("[100: ]");
        htmlTreeBuilder13.reader = characterReader29;
        htmlTreeBuilder13.insertMarkerToFormattingElements();
        org.jsoup.parser.CharacterReader characterReader35 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader35.advance();
        characterReader35.advance();
        java.lang.String str39 = characterReader35.consumeTo('E');
        htmlTreeBuilder13.reader = characterReader35;
        miniSoupTokeniserState0.read(tokeniser7, characterReader35);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder42 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int47 = parseErrorList46.getMaxSize();
        org.jsoup.nodes.Document document48 = htmlTreeBuilder42.parse("0: Doctype", "hi!", parseErrorList46);
        boolean boolean49 = htmlTreeBuilder42.framesetOk();
        org.jsoup.parser.Parser parser50 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser52 = parser50.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document55 = parser50.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document58 = parser50.parseInput("<hi!>", "[]");
        htmlTreeBuilder42.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document58);
        boolean boolean60 = htmlTreeBuilder42.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder61 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList66 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList68 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream69 = parseErrorList68.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor70 = parseErrorList68.iterator();
        boolean boolean71 = parseErrorList66.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList68);
        xmlTreeBuilder61.initialiseParse("<!---->", "hi!", parseErrorList66);
        org.jsoup.parser.ParseErrorList parseErrorList76 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document77 = xmlTreeBuilder61.parse("", "[]", parseErrorList76);
        boolean boolean78 = htmlTreeBuilder42.isInActiveFormattingElements((org.jsoup.nodes.Element) document77);
        org.jsoup.nodes.Element element80 = htmlTreeBuilder42.insert("<!---->");
        org.jsoup.parser.Token.StartTag startTag82 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag82.appendTagName("hi!");
        startTag82.appendAttributeName('4');
        boolean boolean87 = htmlTreeBuilder42.process((org.jsoup.parser.Token) startTag82);
        org.jsoup.parser.Token.EndTag endTag88 = new org.jsoup.parser.Token.EndTag();
        char[] charArray91 = new char[] { '#', '#' };
        endTag88.appendAttributeValue(charArray91);
        endTag88.appendAttributeValue(' ');
        char[] charArray96 = new char[] { '4' };
        endTag88.appendAttributeValue(charArray96);
        startTag82.appendAttributeValue(charArray96);
        java.lang.String str99 = characterReader35.consumeToAny(charArray96);
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(tag10);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState21);
        org.junit.Assert.assertNotNull(characterList27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "artTag" + "'", str39, "artTag");
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(parser50);
        org.junit.Assert.assertNotNull(parser52);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNotNull(document58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(parseErrorList68);
        org.junit.Assert.assertNotNull(parseErrorStream69);
        org.junit.Assert.assertNotNull(parseErrorItor70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(parseErrorList76);
        org.junit.Assert.assertNotNull(document77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(element80);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[#, #]");
        org.junit.Assert.assertNotNull(charArray96);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray96), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray96), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray96), "[4]");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        char char5 = tokenQueue1.peek();
        org.jsoup.parser.CharacterReader characterReader6 = null;
        org.jsoup.parser.ParseErrorList parseErrorList8 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream9 = parseErrorList8.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor10 = parseErrorList8.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList8.iterator();
        org.jsoup.parser.Tokeniser tokeniser12 = new org.jsoup.parser.Tokeniser(characterReader6, parseErrorList8);
        org.jsoup.parser.Token.Tag tag13 = tokeniser12.tagPending;
        org.jsoup.parser.Token.Tag tag15 = tokeniser12.createTagPending(true);
        java.lang.StringBuilder stringBuilder16 = tokeniser12.dataBuffer;
        org.jsoup.parser.Token.EndTag endTag17 = new org.jsoup.parser.Token.EndTag();
        char[] charArray20 = new char[] { '#', '#' };
        endTag17.appendAttributeValue(charArray20);
        tokeniser12.emit(charArray20);
        boolean boolean23 = tokenQueue1.matchesAny(charArray20);
        java.lang.String str24 = tokenQueue1.consumeCssIdentifier();
        boolean boolean25 = tokenQueue1.matchesWord();
        char char26 = tokenQueue1.peek();
        org.jsoup.parser.TokenQueue tokenQueue28 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean29 = tokenQueue28.isEmpty();
        boolean boolean30 = tokenQueue28.consumeWhitespace();
        java.lang.String str31 = tokenQueue28.consumeWord();
        boolean boolean32 = tokenQueue28.matchesWhitespace();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder33 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList37 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int38 = parseErrorList37.getMaxSize();
        org.jsoup.nodes.Document document39 = htmlTreeBuilder33.parse("0: Doctype", "hi!", parseErrorList37);
        boolean boolean40 = htmlTreeBuilder33.framesetOk();
        org.jsoup.parser.Parser parser41 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser43 = parser41.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document46 = parser41.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document49 = parser41.parseInput("<hi!>", "[]");
        htmlTreeBuilder33.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document49);
        boolean boolean51 = htmlTreeBuilder33.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder52 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList57 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList59 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream60 = parseErrorList59.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor61 = parseErrorList59.iterator();
        boolean boolean62 = parseErrorList57.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59);
        xmlTreeBuilder52.initialiseParse("<!---->", "hi!", parseErrorList57);
        org.jsoup.parser.ParseErrorList parseErrorList67 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document68 = xmlTreeBuilder52.parse("", "[]", parseErrorList67);
        boolean boolean69 = htmlTreeBuilder33.isInActiveFormattingElements((org.jsoup.nodes.Element) document68);
        org.jsoup.parser.TokenQueue tokenQueue71 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean72 = tokenQueue71.isEmpty();
        boolean boolean73 = tokenQueue71.consumeWhitespace();
        java.lang.String str74 = tokenQueue71.consumeWord();
        boolean boolean75 = tokenQueue71.matchesWhitespace();
        java.lang.String[] strArray80 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str81 = tokenQueue71.consumeToAny(strArray80);
        boolean boolean82 = htmlTreeBuilder33.inScope(strArray80);
        java.lang.String str83 = tokenQueue28.consumeToAny(strArray80);
        java.lang.String str84 = tokenQueue1.consumeToAny(strArray80);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\000' + "'", char5 == '\000');
        org.junit.Assert.assertNotNull(parseErrorList8);
        org.junit.Assert.assertNotNull(parseErrorStream9);
        org.junit.Assert.assertNotNull(parseErrorItor10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertNull(tag13);
        org.junit.Assert.assertNotNull(tag15);
        org.junit.Assert.assertNull(stringBuilder16);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + char26 + "' != '" + '\000' + "'", char26 == '\000');
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "EndTag" + "'", str31, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(parseErrorList37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parser41);
        org.junit.Assert.assertNotNull(parser43);
        org.junit.Assert.assertNotNull(document46);
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(parseErrorList59);
        org.junit.Assert.assertNotNull(parseErrorStream60);
        org.junit.Assert.assertNotNull(parseErrorItor61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(parseErrorList67);
        org.junit.Assert.assertNotNull(document68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "EndTag" + "'", str74, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        boolean boolean13 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag15 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement17 = htmlTreeBuilder0.insertForm(startTag15, true);
        org.jsoup.parser.TokenQueue tokenQueue20 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean21 = tokenQueue20.matchesStartTag();
        boolean boolean22 = tokenQueue20.consumeWhitespace();
        boolean boolean23 = tokenQueue20.matchesWhitespace();
        org.jsoup.parser.TokenQueue tokenQueue25 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str27 = tokenQueue25.chompTo("Doctype");
        java.lang.String str28 = tokenQueue25.consumeWord();
        boolean boolean29 = tokenQueue25.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag30 = new org.jsoup.parser.Token.EndTag();
        char[] charArray33 = new char[] { '#', '#' };
        endTag30.appendAttributeValue(charArray33);
        boolean boolean35 = tokenQueue25.matchesAny(charArray33);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder36 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int41 = parseErrorList40.getMaxSize();
        org.jsoup.nodes.Document document42 = htmlTreeBuilder36.parse("0: Doctype", "hi!", parseErrorList40);
        boolean boolean43 = htmlTreeBuilder36.framesetOk();
        org.jsoup.parser.Parser parser44 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser46 = parser44.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document49 = parser44.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document52 = parser44.parseInput("<hi!>", "[]");
        htmlTreeBuilder36.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document52);
        java.lang.String[] strArray54 = new java.lang.String[] {};
        boolean boolean55 = htmlTreeBuilder36.inScope(strArray54);
        boolean boolean56 = tokenQueue25.matchesAny(strArray54);
        java.lang.String str57 = tokenQueue20.consumeToAny(strArray54);
        boolean boolean58 = htmlTreeBuilder0.inScope("[0: []]", strArray54);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder59 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList63 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int64 = parseErrorList63.getMaxSize();
        org.jsoup.nodes.Document document65 = htmlTreeBuilder59.parse("0: Doctype", "hi!", parseErrorList63);
        boolean boolean66 = htmlTreeBuilder59.framesetOk();
        org.jsoup.parser.Parser parser67 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser69 = parser67.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document72 = parser67.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document75 = parser67.parseInput("<hi!>", "[]");
        htmlTreeBuilder59.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document75);
        java.lang.String[] strArray77 = new java.lang.String[] {};
        boolean boolean78 = htmlTreeBuilder59.inScope(strArray77);
        htmlTreeBuilder59.markInsertionMode();
        boolean boolean81 = htmlTreeBuilder59.inScope("StartTag");
        org.jsoup.parser.Parser parser82 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder59);
        org.jsoup.nodes.Document document85 = parser82.parseInput("t", "tartTag");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document85);
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(formElement17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "EndTag" + "'", str27, "EndTag");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(parser44);
        org.junit.Assert.assertNotNull(parser46);
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "EndTag" + "'", str57, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(parseErrorList63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(parser67);
        org.junit.Assert.assertNotNull(parser69);
        org.junit.Assert.assertNotNull(document72);
        org.junit.Assert.assertNotNull(document75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(document85);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement14 = htmlTreeBuilder0.getFormElement();
        boolean boolean15 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.ParseError[] parseErrorArray16 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList17 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17, parseErrorArray16);
        org.jsoup.parser.ParseError[] parseErrorArray19 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList20 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20, parseErrorArray19);
        boolean boolean22 = parseErrorList17.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20);
        java.lang.Object[] objArray23 = parseErrorList17.toArray();
        parseErrorList17.clear();
        org.jsoup.parser.ParseError[] parseErrorArray25 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList26 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26, parseErrorArray25);
        boolean boolean28 = parseErrorList17.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder29 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int34 = parseErrorList33.getMaxSize();
        org.jsoup.nodes.Document document35 = htmlTreeBuilder29.parse("0: Doctype", "hi!", parseErrorList33);
        boolean boolean36 = htmlTreeBuilder29.framesetOk();
        org.jsoup.parser.Parser parser37 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser39 = parser37.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document42 = parser37.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document45 = parser37.parseInput("<hi!>", "[]");
        htmlTreeBuilder29.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document45);
        java.lang.String[] strArray47 = new java.lang.String[] {};
        boolean boolean48 = htmlTreeBuilder29.inScope(strArray47);
        htmlTreeBuilder29.markInsertionMode();
        boolean boolean51 = htmlTreeBuilder29.inScope("StartTag");
        org.jsoup.parser.Parser parser52 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder29);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList53 = htmlTreeBuilder29.stack;
        boolean boolean54 = parseErrorList17.remove((java.lang.Object) elementList53);
        htmlTreeBuilder0.stack = elementList53;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(formElement14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parser37);
        org.junit.Assert.assertNotNull(parser39);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(elementList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        tokenQueue1.advance();
        java.lang.String str7 = tokenQueue1.toString();
        java.lang.String str9 = tokenQueue1.consumeTo("</hi![]>");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        boolean boolean19 = doctype18.isCharacter();
        tokeniser6.doctypePending = doctype18;
        org.jsoup.parser.Token.Comment comment21 = new org.jsoup.parser.Token.Comment();
        java.lang.String str22 = comment21.toString();
        java.lang.StringBuilder stringBuilder23 = comment21.data;
        tokeniser6.commentPending = comment21;
        org.jsoup.parser.Token.TokenType tokenType25 = comment21.type;
        boolean boolean26 = comment21.bogus;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<!---->" + "'", str22, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder23);
        org.junit.Assert.assertEquals(stringBuilder23.toString(), "");
        org.junit.Assert.assertTrue("'" + tokenType25 + "' != '" + org.jsoup.parser.Token.TokenType.Comment + "'", tokenType25.equals(org.jsoup.parser.Token.TokenType.Comment));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag("Doctype");
        endTag1.appendTagName('\ufffd');
        endTag1.appendTagName('t');
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        org.jsoup.parser.ITokeniserState iTokeniserState14 = tokeniser6.getState();
        org.jsoup.parser.TokeniserState tokeniserState15 = org.jsoup.parser.TokeniserState.Doctype;
        tokeniser6.error((org.jsoup.parser.ITokeniserState) tokeniserState15);
        tokeniser6.emit("artTag");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = tokeniser6.unescapeEntities(false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState14);
        org.junit.Assert.assertNotNull(tokeniserState15);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        boolean boolean12 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        java.lang.String str13 = parseErrorList1.toString();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList1.stream();
        java.lang.Object[] objArray15 = parseErrorList1.toArray();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder16 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.nodes.Document document22 = htmlTreeBuilder16.parse("0: Doctype", "hi!", parseErrorList20);
        boolean boolean23 = htmlTreeBuilder16.framesetOk();
        org.jsoup.parser.Parser parser24 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser26 = parser24.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document29 = parser24.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document32 = parser24.parseInput("<hi!>", "[]");
        htmlTreeBuilder16.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        boolean boolean34 = htmlTreeBuilder16.isFragmentParsing();
        htmlTreeBuilder16.clearStackToTableContext();
        int int36 = parseErrorList1.indexOf((java.lang.Object) htmlTreeBuilder16);
        org.jsoup.nodes.Document document37 = htmlTreeBuilder16.getDocument();
        org.jsoup.nodes.Document document41 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("EndTag", "</hi![]>");
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState46 = org.jsoup.parser.MiniSoupTokeniserState.Data;
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState47 = org.jsoup.parser.MiniSoupTokeniserState.Data;
        org.jsoup.parser.MiniSoupTokeniserState[] miniSoupTokeniserStateArray48 = new org.jsoup.parser.MiniSoupTokeniserState[] { miniSoupTokeniserState46, miniSoupTokeniserState47 };
        org.jsoup.parser.MiniSoupTokeniserState[] miniSoupTokeniserStateArray49 = parseErrorList44.toArray(miniSoupTokeniserStateArray48);
        java.util.List<org.jsoup.nodes.Node> nodeList50 = htmlTreeBuilder16.parseFragment("t", (org.jsoup.nodes.Element) document41, "<0: Doctype>", parseErrorList44);
        org.jsoup.parser.ParseError parseError52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError53 = parseErrorList44.set(0, parseError52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parser24);
        org.junit.Assert.assertNotNull(parser26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(miniSoupTokeniserState46);
        org.junit.Assert.assertNotNull(miniSoupTokeniserState47);
        org.junit.Assert.assertNotNull(miniSoupTokeniserStateArray48);
        org.junit.Assert.assertNotNull(miniSoupTokeniserStateArray49);
        org.junit.Assert.assertNotNull(nodeList50);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.parser.Token token16 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.Token.TokenType tokenType17 = token16.type;
        boolean boolean18 = token16.isDoctype();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(token16);
        org.junit.Assert.assertTrue("'" + tokenType17 + "' != '" + org.jsoup.parser.Token.TokenType.EOF + "'", tokenType17.equals(org.jsoup.parser.Token.TokenType.EOF));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.newPendingTableCharacters();
        boolean boolean9 = htmlTreeBuilder0.inTableScope("");
        org.jsoup.nodes.Document document10 = htmlTreeBuilder0.getDocument();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(document10);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        org.jsoup.nodes.Attributes attributes1 = null;
        org.jsoup.parser.Token.StartTag startTag2 = new org.jsoup.parser.Token.StartTag("Comment", attributes1);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("</hi!#>");
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader2 = new org.jsoup.parser.CharacterReader("StartTag");
        int int4 = characterReader2.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean5 = characterReader2.matchesDigit();
        java.lang.String str6 = characterReader2.toString();
        xmlTreeBuilder0.reader = characterReader2;
        java.lang.String str8 = characterReader2.consumeLetterThenDigitSequence();
        java.lang.String str9 = characterReader2.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "StartTag" + "'", str6, "StartTag");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "StartTag" + "'", str8, "StartTag");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("<hi!>");
        startTag1.finaliseTag();
        startTag1.appendTagName('\uffff');
        java.lang.String str5 = startTag1.toString();
        startTag1.finaliseTag();
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uffff>" + "'", str5, "\uffff>");
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Token token8 = htmlTreeBuilder0.currentToken;
        org.jsoup.nodes.Document document9 = htmlTreeBuilder0.doc;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder10 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int15 = parseErrorList14.getMaxSize();
        org.jsoup.nodes.Document document16 = htmlTreeBuilder10.parse("0: Doctype", "hi!", parseErrorList14);
        boolean boolean17 = htmlTreeBuilder10.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState18 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder10.error(htmlTreeBuilderState18);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState20 = null;
        htmlTreeBuilder10.transition(htmlTreeBuilderState20);
        htmlTreeBuilder10.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList24 = htmlTreeBuilder10.getPendingTableCharacters();
        htmlTreeBuilder10.framesetOk(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder27 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        org.jsoup.nodes.Document document33 = htmlTreeBuilder27.parse("0: Doctype", "hi!", parseErrorList31);
        boolean boolean34 = htmlTreeBuilder27.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState35 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder27.error(htmlTreeBuilderState35);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder37 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int42 = parseErrorList41.getMaxSize();
        org.jsoup.nodes.Document document43 = htmlTreeBuilder37.parse("0: Doctype", "hi!", parseErrorList41);
        org.jsoup.parser.ParseErrorList parseErrorList47 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream48 = parseErrorList47.stream();
        boolean boolean49 = parseErrorList47.canAddError();
        org.jsoup.nodes.Document document50 = htmlTreeBuilder37.parse("EndTag", "hi!#", parseErrorList47);
        java.lang.String[] strArray58 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean59 = htmlTreeBuilder37.inScope("hi!#", strArray58);
        boolean boolean60 = htmlTreeBuilder27.inScope(strArray58);
        java.util.List<org.jsoup.parser.Token.Character> characterList61 = htmlTreeBuilder27.getPendingTableCharacters();
        org.jsoup.nodes.Document document64 = org.jsoup.parser.Parser.parse("", "Doctype");
        htmlTreeBuilder27.insertInFosterParent((org.jsoup.nodes.Node) document64);
        htmlTreeBuilder10.pushActiveFormattingElements((org.jsoup.nodes.Element) document64);
        htmlTreeBuilder0.insertInFosterParent((org.jsoup.nodes.Node) document64);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(token8);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState18);
        org.junit.Assert.assertNotNull(characterList24);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState35);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertNotNull(parseErrorList47);
        org.junit.Assert.assertNotNull(parseErrorStream48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(characterList61);
        org.junit.Assert.assertNotNull(document64);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        java.lang.String str6 = tokenQueue1.consumeElementSelector();
        java.lang.String str7 = tokenQueue1.consumeCssIdentifier();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.Comment comment12 = new org.jsoup.parser.Token.Comment();
        java.lang.String str13 = comment12.toString();
        boolean boolean14 = comment12.isCharacter();
        htmlTreeBuilder0.insert(comment12);
        org.jsoup.parser.Parser parser16 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.nodes.Element element18 = htmlTreeBuilder0.insert("StartTag");
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.parser.Parser parser20 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser22 = parser20.setTrackErrors((int) (byte) -1);
        java.util.List<org.jsoup.parser.ParseError> parseErrorList23 = parser20.getErrors();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList28 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int29 = parseErrorList28.getMaxSize();
        org.jsoup.nodes.Document document30 = htmlTreeBuilder24.parse("0: Doctype", "hi!", parseErrorList28);
        boolean boolean31 = htmlTreeBuilder24.framesetOk();
        org.jsoup.parser.Parser parser32 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser34 = parser32.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document37 = parser32.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document40 = parser32.parseInput("<hi!>", "[]");
        htmlTreeBuilder24.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        boolean boolean43 = htmlTreeBuilder24.inScope(strArray42);
        htmlTreeBuilder24.markInsertionMode();
        boolean boolean46 = htmlTreeBuilder24.inScope("StartTag");
        org.jsoup.parser.Token.StartTag startTag47 = new org.jsoup.parser.Token.StartTag();
        startTag47.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag51 = startTag47.name("hi!#");
        boolean boolean52 = startTag47.isStartTag();
        startTag47.appendTagName('a');
        org.jsoup.nodes.Element element55 = htmlTreeBuilder24.insertEmpty(startTag47);
        java.lang.String str56 = htmlTreeBuilder24.getBaseUri();
        org.jsoup.nodes.Document document59 = htmlTreeBuilder24.parse("\uffff", "<!---->");
        org.jsoup.parser.Parser parser60 = parser20.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder24);
        org.jsoup.nodes.Document document63 = parser20.parseInput("artTag", "<Doctype>");
        htmlTreeBuilder0.doc = document63;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<!---->" + "'", str13, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(parser20);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNull(parseErrorList23);
        org.junit.Assert.assertNotNull(parseErrorList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(parser32);
        org.junit.Assert.assertNotNull(parser34);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(tag51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(element55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertNotNull(parser60);
        org.junit.Assert.assertNotNull(document63);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilder3.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState11 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder3.error(htmlTreeBuilderState11);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState13 = null;
        htmlTreeBuilder3.transition(htmlTreeBuilderState13);
        htmlTreeBuilder3.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement17 = htmlTreeBuilder3.getFormElement();
        org.jsoup.parser.ParseErrorList parseErrorList22 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        htmlTreeBuilder3.initialiseParse("StartTaga", "a", parseErrorList22);
        boolean boolean24 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList22);
        java.util.function.UnaryOperator<org.jsoup.parser.ParseError> parseErrorUnaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            parseErrorList22.replaceAll(parseErrorUnaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState11);
        org.junit.Assert.assertNull(formElement17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        htmlTreeBuilder0.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder21 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int26 = parseErrorList25.getMaxSize();
        org.jsoup.nodes.Document document27 = htmlTreeBuilder21.parse("0: Doctype", "hi!", parseErrorList25);
        org.jsoup.nodes.Document document30 = org.jsoup.parser.Parser.parseBodyFragment("Doctype", "<hi!>");
        htmlTreeBuilder21.maybeSetBaseUri((org.jsoup.nodes.Element) document30);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder32 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int37 = parseErrorList36.getMaxSize();
        org.jsoup.nodes.Document document38 = htmlTreeBuilder32.parse("0: Doctype", "hi!", parseErrorList36);
        boolean boolean39 = htmlTreeBuilder32.framesetOk();
        org.jsoup.nodes.Document document42 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder32.setHeadElement((org.jsoup.nodes.Element) document42);
        org.jsoup.nodes.Document document46 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder32.setHeadElement((org.jsoup.nodes.Element) document46);
        htmlTreeBuilder32.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder50 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList54 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int55 = parseErrorList54.getMaxSize();
        org.jsoup.nodes.Document document56 = htmlTreeBuilder50.parse("0: Doctype", "hi!", parseErrorList54);
        boolean boolean57 = htmlTreeBuilder50.framesetOk();
        org.jsoup.nodes.Document document60 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder50.setHeadElement((org.jsoup.nodes.Element) document60);
        org.jsoup.nodes.Element element63 = htmlTreeBuilder50.getActiveFormattingElement("0: Doctype");
        htmlTreeBuilder50.runParser();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder67 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader68 = null;
        org.jsoup.parser.ParseErrorList parseErrorList70 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream71 = parseErrorList70.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor72 = parseErrorList70.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor73 = parseErrorList70.iterator();
        org.jsoup.parser.Tokeniser tokeniser74 = new org.jsoup.parser.Tokeniser(characterReader68, parseErrorList70);
        org.jsoup.parser.Token.Tag tag75 = tokeniser74.tagPending;
        org.jsoup.parser.Token.Tag tag77 = tokeniser74.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype78 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype79 = doctype78.asDoctype();
        java.lang.String str80 = doctype78.tokenType();
        tokeniser74.emit((org.jsoup.parser.Token) doctype78);
        org.jsoup.parser.Token.Tag tag83 = tokeniser74.createTagPending(true);
        xmlTreeBuilder67.currentToken = tag83;
        org.jsoup.nodes.Attributes attributes85 = tag83.attributes;
        org.jsoup.parser.Token.StartTag startTag86 = new org.jsoup.parser.Token.StartTag("", attributes85);
        org.jsoup.parser.Token.StartTag startTag87 = new org.jsoup.parser.Token.StartTag("0: Doctype", attributes85);
        startTag87.appendAttributeName('\uffff');
        org.jsoup.nodes.FormElement formElement91 = htmlTreeBuilder50.insertForm(startTag87, true);
        htmlTreeBuilder32.setFormElement(formElement91);
        org.jsoup.nodes.FormElement formElement93 = htmlTreeBuilder32.getFormElement();
        htmlTreeBuilder21.pushActiveFormattingElements((org.jsoup.nodes.Element) formElement93);
        htmlTreeBuilder0.push((org.jsoup.nodes.Element) formElement93);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNotNull(document46);
        org.junit.Assert.assertNotNull(parseErrorList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(document56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(document60);
        org.junit.Assert.assertNull(element63);
        org.junit.Assert.assertNotNull(parseErrorList70);
        org.junit.Assert.assertNotNull(parseErrorStream71);
        org.junit.Assert.assertNotNull(parseErrorItor72);
        org.junit.Assert.assertNotNull(parseErrorItor73);
        org.junit.Assert.assertNull(tag75);
        org.junit.Assert.assertNotNull(tag77);
        org.junit.Assert.assertNotNull(doctype79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Doctype" + "'", str80, "Doctype");
        org.junit.Assert.assertNotNull(tag83);
        org.junit.Assert.assertNotNull(attributes85);
        org.junit.Assert.assertNotNull(formElement91);
        org.junit.Assert.assertNotNull(formElement93);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        boolean boolean37 = htmlTreeBuilder0.isFosterInserts();
        boolean boolean38 = htmlTreeBuilder0.isFragmentParsing();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        org.jsoup.parser.ParseError parseError2 = new org.jsoup.parser.ParseError(8, "0: []");
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        boolean boolean12 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.Parser parser13 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser15 = parser13.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder16 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document17 = xmlTreeBuilder16.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder18 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList23 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream26 = parseErrorList25.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList25.iterator();
        boolean boolean28 = parseErrorList23.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList25);
        xmlTreeBuilder18.initialiseParse("<!---->", "hi!", parseErrorList23);
        xmlTreeBuilder16.errors = parseErrorList23;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList31 = xmlTreeBuilder16.stack;
        org.jsoup.parser.Parser parser32 = parser15.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder16);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder16.errors = parseErrorList34;
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream40 = parseErrorList39.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor41 = parseErrorList39.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList39.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int45 = parseErrorList44.getMaxSize();
        boolean boolean46 = parseErrorList39.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        xmlTreeBuilder16.initialiseParse("<!---->", "", parseErrorList39);
        htmlTreeBuilder0.errors = parseErrorList39;
        htmlTreeBuilder0.generateImpliedEndTags("</hi![]>");
        boolean boolean52 = htmlTreeBuilder0.inButtonScope("-1: []");
        org.jsoup.parser.Token.StartTag startTag54 = new org.jsoup.parser.Token.StartTag("Doctype");
        org.jsoup.parser.Token.Tag tag56 = startTag54.name("hi!#");
        org.jsoup.nodes.FormElement formElement58 = htmlTreeBuilder0.insertForm(startTag54, false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder60 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList64 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int65 = parseErrorList64.getMaxSize();
        org.jsoup.nodes.Document document66 = htmlTreeBuilder60.parse("0: Doctype", "hi!", parseErrorList64);
        boolean boolean67 = htmlTreeBuilder60.framesetOk();
        org.jsoup.parser.Parser parser68 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser70 = parser68.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document73 = parser68.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document76 = parser68.parseInput("<hi!>", "[]");
        htmlTreeBuilder60.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document76);
        java.lang.String[] strArray78 = new java.lang.String[] {};
        boolean boolean79 = htmlTreeBuilder60.inScope(strArray78);
        htmlTreeBuilder60.markInsertionMode();
        boolean boolean82 = htmlTreeBuilder60.inScope("StartTag");
        org.jsoup.parser.Parser parser83 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder60);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList84 = htmlTreeBuilder60.stack;
        org.jsoup.nodes.Document document87 = htmlTreeBuilder60.parse("Comment", "[]");
        org.jsoup.parser.ParseErrorList parseErrorList91 = new org.jsoup.parser.ParseErrorList((int) '\000', (int) '\uffff');
        java.util.List<org.jsoup.nodes.Node> nodeList92 = htmlTreeBuilder0.parseFragment("<!---->", (org.jsoup.nodes.Element) document87, "<hi!hi!>", parseErrorList91);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parser13);
        org.junit.Assert.assertNotNull(parser15);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertNotNull(parseErrorStream26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(elementList31);
        org.junit.Assert.assertNotNull(parser32);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertNotNull(parseErrorStream40);
        org.junit.Assert.assertNotNull(parseErrorItor41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(tag56);
        org.junit.Assert.assertNotNull(formElement58);
        org.junit.Assert.assertNotNull(parseErrorList64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(document66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(parser68);
        org.junit.Assert.assertNotNull(parser70);
        org.junit.Assert.assertNotNull(document73);
        org.junit.Assert.assertNotNull(document76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(elementList84);
        org.junit.Assert.assertNotNull(document87);
        org.junit.Assert.assertNotNull(nodeList92);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        org.jsoup.parser.Token.Comment comment0 = new org.jsoup.parser.Token.Comment();
        java.lang.String str1 = comment0.toString();
        comment0.bogus = true;
        java.lang.String str4 = comment0.getData();
        java.lang.String str5 = comment0.toString();
        java.lang.String str6 = comment0.getData();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "<!---->" + "'", str1, "<!---->");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<!---->" + "'", str5, "<!---->");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        org.jsoup.parser.Token.Tag tag12 = tokeniser6.createTagPending(true);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token token13 = tokeniser6.read();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNotNull(tag12);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.isInline();
        org.jsoup.parser.Tag tag6 = tag1.setSelfClosing();
        org.jsoup.parser.Tag tag7 = tag6.setSelfClosing();
        boolean boolean8 = tag6.isKnownTag();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(tag6);
        org.junit.Assert.assertNotNull(tag7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        tokeniser7.createCommentPending();
        org.jsoup.parser.Token.Comment comment10 = tokeniser7.commentPending;
        tokeniser7.createTempBuffer();
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(comment10);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag("Doctype");
        endTag1.appendTagName('\ufffd');
        org.jsoup.parser.Token.EndTag endTag4 = endTag1.asEndTag();
        org.junit.Assert.assertNotNull(endTag4);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.Tokeniser tokeniser9 = xmlTreeBuilder0.tokeniser;
        org.jsoup.parser.ITokeniserState iTokeniserState10 = tokeniser9.getState();
        org.jsoup.parser.Token.Comment comment11 = new org.jsoup.parser.Token.Comment();
        java.lang.String str12 = comment11.toString();
        boolean boolean13 = comment11.isCharacter();
        boolean boolean14 = comment11.bogus;
        tokeniser9.commentPending = comment11;
        // The following exception was thrown during execution in test generation
        try {
            tokeniser9.emitDoctypePending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(tokeniser9);
        org.junit.Assert.assertNotNull(iTokeniserState10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<!---->" + "'", str12, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.CharacterReader characterReader3 = null;
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream6 = parseErrorList5.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList5.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList5.iterator();
        org.jsoup.parser.Tokeniser tokeniser9 = new org.jsoup.parser.Tokeniser(characterReader3, parseErrorList5);
        org.jsoup.parser.Token.Tag tag10 = tokeniser9.tagPending;
        org.jsoup.parser.Token.Tag tag12 = tokeniser9.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype13 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype14 = doctype13.asDoctype();
        java.lang.String str15 = doctype13.tokenType();
        tokeniser9.emit((org.jsoup.parser.Token) doctype13);
        boolean boolean17 = tag1.equals((java.lang.Object) doctype13);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder18 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        org.jsoup.parser.Token.Tag tag28 = tokeniser25.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype29 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype30 = doctype29.asDoctype();
        java.lang.String str31 = doctype29.tokenType();
        tokeniser25.emit((org.jsoup.parser.Token) doctype29);
        org.jsoup.parser.Token.Tag tag34 = tokeniser25.createTagPending(true);
        xmlTreeBuilder18.currentToken = tag34;
        boolean boolean36 = tag1.equals((java.lang.Object) tag34);
        java.lang.String str37 = tag1.toString();
        org.jsoup.parser.Token.StartTag startTag38 = new org.jsoup.parser.Token.StartTag();
        startTag38.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag42 = startTag38.name("hi!#");
        boolean boolean43 = tag1.equals((java.lang.Object) startTag38);
        startTag38.newAttribute();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Comment comment45 = startTag38.asComment();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Comment");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorStream6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNull(tag10);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertNotNull(doctype14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Doctype" + "'", str15, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(doctype30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Doctype" + "'", str31, "Doctype");
        org.junit.Assert.assertNotNull(tag34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(tag42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        tokenQueue1.advance();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder8 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int13 = parseErrorList12.getMaxSize();
        org.jsoup.nodes.Document document14 = htmlTreeBuilder8.parse("0: Doctype", "hi!", parseErrorList12);
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        boolean boolean20 = parseErrorList18.canAddError();
        org.jsoup.nodes.Document document21 = htmlTreeBuilder8.parse("EndTag", "hi!#", parseErrorList18);
        java.lang.String[] strArray29 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean30 = htmlTreeBuilder8.inScope("hi!#", strArray29);
        java.lang.String str31 = tokenQueue1.consumeToAny(strArray29);
        java.lang.String str32 = tokenQueue1.consumeWord();
        java.lang.String str33 = tokenQueue1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.parser.ParseErrorList parseErrorList41 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor45 = parseErrorList43.iterator();
        boolean boolean46 = parseErrorList41.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        boolean boolean47 = parseErrorList41.canAddError();
        org.jsoup.parser.CharacterReader characterReader48 = null;
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream51 = parseErrorList50.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor52 = parseErrorList50.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor53 = parseErrorList50.iterator();
        org.jsoup.parser.Tokeniser tokeniser54 = new org.jsoup.parser.Tokeniser(characterReader48, parseErrorList50);
        org.jsoup.parser.Token.Tag tag55 = tokeniser54.tagPending;
        java.lang.StringBuilder stringBuilder56 = null;
        tokeniser54.dataBuffer = stringBuilder56;
        org.jsoup.parser.Token.EndTag endTag58 = new org.jsoup.parser.Token.EndTag();
        char[] charArray61 = new char[] { '#', '#' };
        endTag58.appendAttributeValue(charArray61);
        tokeniser54.emit(charArray61);
        boolean boolean64 = parseErrorList41.remove((java.lang.Object) tokeniser54);
        org.jsoup.nodes.Document document65 = htmlTreeBuilder0.parse("<!---->", "\uffff", parseErrorList41);
        htmlTreeBuilder0.clearStackToTableBodyContext();
        boolean boolean68 = htmlTreeBuilder0.inSelectScope("</hi![]>");
        org.jsoup.nodes.Document document71 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        boolean boolean72 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document71);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertNotNull(parseErrorItor45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertNotNull(parseErrorStream51);
        org.junit.Assert.assertNotNull(parseErrorItor52);
        org.junit.Assert.assertNotNull(parseErrorItor53);
        org.junit.Assert.assertNull(tag55);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(document71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
        org.jsoup.parser.TreeBuilder treeBuilder2 = null;
        org.jsoup.parser.Parser parser3 = parser1.setTreeBuilder(treeBuilder2);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder4 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document5 = xmlTreeBuilder4.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder6 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        boolean boolean16 = parseErrorList11.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        xmlTreeBuilder6.initialiseParse("<!---->", "hi!", parseErrorList11);
        xmlTreeBuilder4.errors = parseErrorList11;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList19 = xmlTreeBuilder4.stack;
        org.jsoup.parser.CharacterReader characterReader20 = null;
        xmlTreeBuilder4.reader = characterReader20;
        org.jsoup.parser.Parser parser22 = parser1.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder4);
        org.jsoup.parser.Parser parser24 = parser1.setTrackErrors((int) '#');
        org.jsoup.parser.Parser parser26 = parser24.setTrackErrors((int) 'n');
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNull(document5);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(elementList19);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(parser24);
        org.junit.Assert.assertNotNull(parser26);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        org.jsoup.parser.TokenQueue tokenQueue3 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean4 = tokenQueue3.isEmpty();
        java.lang.String str6 = tokenQueue3.consumeToIgnoreCase("<hi!>");
        java.lang.String str7 = tokenQueue3.consumeTagName();
        boolean boolean8 = tokenQueue3.matchesWord();
        tokenQueue3.advance();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder10 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int15 = parseErrorList14.getMaxSize();
        org.jsoup.nodes.Document document16 = htmlTreeBuilder10.parse("0: Doctype", "hi!", parseErrorList14);
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream21 = parseErrorList20.stream();
        boolean boolean22 = parseErrorList20.canAddError();
        org.jsoup.nodes.Document document23 = htmlTreeBuilder10.parse("EndTag", "hi!#", parseErrorList20);
        java.lang.String[] strArray31 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean32 = htmlTreeBuilder10.inScope("hi!#", strArray31);
        java.lang.String str33 = tokenQueue3.consumeToAny(strArray31);
        org.jsoup.parser.ParseError parseError34 = new org.jsoup.parser.ParseError((int) '\uffff', "hi!#<hi!#>", (java.lang.Object[]) strArray31);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "EndTag" + "'", str6, "EndTag");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertNotNull(parseErrorStream21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.Parser parser19 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.parser.CharacterReader characterReader20 = null;
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream23 = parseErrorList22.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList22.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList22.iterator();
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader20, parseErrorList22);
        org.jsoup.parser.Token.Tag tag27 = tokeniser26.tagPending;
        tokeniser26.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag31 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType32 = startTag31.type;
        startTag31.appendTagName('#');
        tokeniser26.tagPending = startTag31;
        org.jsoup.parser.Token.StartTag startTag37 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType38 = startTag37.type;
        java.lang.String str39 = startTag37.toString();
        tokeniser26.emit((org.jsoup.parser.Token) startTag37);
        org.jsoup.nodes.FormElement formElement42 = htmlTreeBuilder0.insertForm(startTag37, true);
        boolean boolean44 = htmlTreeBuilder0.inScope("</hi![]>");
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertNotNull(parseErrorStream23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNull(tag27);
        org.junit.Assert.assertTrue("'" + tokenType32 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType32.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + tokenType38 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType38.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "<hi!>" + "'", str39, "<hi!>");
        org.junit.Assert.assertNotNull(formElement42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("artTag");
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        org.jsoup.parser.Token.Character character1 = new org.jsoup.parser.Token.Character("100: ");
        java.lang.String str2 = character1.getData();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "100: " + "'", str2, "100: ");
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str5 = tokenQueue1.consumeToIgnoreCase("StartTag");
        boolean boolean6 = tokenQueue1.matchesWhitespace();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "EndTag" + "'", str5, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        org.jsoup.parser.Token.StartTag startTag2 = new org.jsoup.parser.Token.StartTag();
        startTag2.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag5 = startTag2.asStartTag();
        org.jsoup.parser.Token.Tag tag7 = startTag5.name("");
        startTag5.selfClosing = false;
        org.jsoup.nodes.Attributes attributes10 = startTag5.getAttributes();
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("0: []", attributes10);
        org.jsoup.nodes.Attributes attributes12 = startTag11.getAttributes();
        org.jsoup.parser.Token.StartTag startTag13 = new org.jsoup.parser.Token.StartTag("100: ", attributes12);
        boolean boolean14 = startTag13.selfClosing;
        org.jsoup.parser.Token.TokenType tokenType15 = startTag13.type;
        org.junit.Assert.assertNotNull(startTag5);
        org.junit.Assert.assertNotNull(tag7);
        org.junit.Assert.assertNotNull(attributes10);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + tokenType15 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType15.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype1 = new org.jsoup.parser.Token.Doctype();
        boolean boolean2 = doctype1.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = null;
        boolean boolean4 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) doctype1, htmlTreeBuilder3);
        java.lang.String str5 = doctype1.getName();
        java.lang.StringBuilder stringBuilder6 = doctype1.publicIdentifier;
        boolean boolean7 = doctype1.isForceQuirks();
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(stringBuilder6);
        org.junit.Assert.assertEquals(stringBuilder6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.CharacterReader characterReader3 = null;
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream6 = parseErrorList5.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList5.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList5.iterator();
        org.jsoup.parser.Tokeniser tokeniser9 = new org.jsoup.parser.Tokeniser(characterReader3, parseErrorList5);
        org.jsoup.parser.Token.Tag tag10 = tokeniser9.tagPending;
        org.jsoup.parser.Token.Tag tag12 = tokeniser9.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype13 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype14 = doctype13.asDoctype();
        java.lang.String str15 = doctype13.tokenType();
        tokeniser9.emit((org.jsoup.parser.Token) doctype13);
        boolean boolean17 = tag1.equals((java.lang.Object) doctype13);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder18 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        org.jsoup.parser.Token.Tag tag28 = tokeniser25.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype29 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype30 = doctype29.asDoctype();
        java.lang.String str31 = doctype29.tokenType();
        tokeniser25.emit((org.jsoup.parser.Token) doctype29);
        org.jsoup.parser.Token.Tag tag34 = tokeniser25.createTagPending(true);
        xmlTreeBuilder18.currentToken = tag34;
        boolean boolean36 = tag1.equals((java.lang.Object) tag34);
        java.lang.String str37 = tag1.toString();
        org.jsoup.parser.Token.StartTag startTag38 = new org.jsoup.parser.Token.StartTag();
        startTag38.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag42 = startTag38.name("hi!#");
        boolean boolean43 = tag1.equals((java.lang.Object) startTag38);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder44 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList48 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int49 = parseErrorList48.getMaxSize();
        org.jsoup.nodes.Document document50 = htmlTreeBuilder44.parse("0: Doctype", "hi!", parseErrorList48);
        org.jsoup.parser.ParseErrorList parseErrorList54 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream55 = parseErrorList54.stream();
        boolean boolean56 = parseErrorList54.canAddError();
        org.jsoup.nodes.Document document57 = htmlTreeBuilder44.parse("EndTag", "hi!#", parseErrorList54);
        java.lang.String[] strArray65 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean66 = htmlTreeBuilder44.inScope("hi!#", strArray65);
        org.jsoup.parser.ParseErrorList parseErrorList71 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document72 = htmlTreeBuilder44.parse("0: Doctype", "", parseErrorList71);
        java.lang.String str73 = htmlTreeBuilder44.getBaseUri();
        htmlTreeBuilder44.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState75 = htmlTreeBuilder44.originalState();
        boolean boolean76 = tag1.equals((java.lang.Object) htmlTreeBuilder44);
        org.jsoup.nodes.Element element78 = htmlTreeBuilder44.getFromStack("hi!#<hi!#>");
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorStream6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNull(tag10);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertNotNull(doctype14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Doctype" + "'", str15, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(doctype30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Doctype" + "'", str31, "Doctype");
        org.junit.Assert.assertNotNull(tag34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(tag42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(parseErrorList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertNotNull(parseErrorList54);
        org.junit.Assert.assertNotNull(parseErrorStream55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(document57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(document72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(htmlTreeBuilderState75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(element78);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.nodes.Document document22 = parser19.parseInput("hi!", "[]");
        org.jsoup.parser.TreeBuilder treeBuilder23 = parser19.getTreeBuilder();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = new org.jsoup.parser.HtmlTreeBuilder();
        htmlTreeBuilder24.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        org.jsoup.parser.ParseError[] parseErrorArray35 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList36 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36, parseErrorArray35);
        org.jsoup.parser.ParseError[] parseErrorArray38 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList39 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList39, parseErrorArray38);
        boolean boolean41 = parseErrorList36.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList39);
        java.lang.Object[] objArray42 = parseErrorList36.toArray();
        parseErrorList36.clear();
        org.jsoup.parser.ParseError[] parseErrorArray44 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList45 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList45, parseErrorArray44);
        org.jsoup.parser.ParseError[] parseErrorArray47 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList48 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList48, parseErrorArray47);
        boolean boolean50 = parseErrorList45.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList48);
        java.lang.Object[] objArray51 = parseErrorList45.toArray();
        parseErrorList45.clear();
        org.jsoup.parser.ParseError[] parseErrorArray53 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList54 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54, parseErrorArray53);
        boolean boolean56 = parseErrorList45.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54);
        boolean boolean57 = parseErrorList36.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54);
        java.lang.Object[] objArray58 = parseErrorList54.toArray();
        boolean boolean59 = parseErrorList32.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54);
        org.jsoup.parser.ParseError[] parseErrorArray60 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList61 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList61, parseErrorArray60);
        org.jsoup.parser.ParseError[] parseErrorArray63 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList64 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList64, parseErrorArray63);
        boolean boolean66 = parseErrorList61.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList64);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor67 = parseErrorList64.listIterator();
        int int69 = parseErrorList64.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag73 = new org.jsoup.parser.Token.EndTag();
        char[] charArray76 = new char[] { '#', '#' };
        endTag73.appendAttributeValue(charArray76);
        endTag73.finaliseTag();
        boolean boolean79 = endTag73.isSelfClosing();
        org.jsoup.parser.Tag tag81 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean82 = tag81.isFormListed();
        org.jsoup.parser.Tag tag83 = tag81.setSelfClosing();
        boolean boolean84 = tag81.isKnownTag();
        java.lang.Object[] objArray86 = new java.lang.Object[] { boolean79, tag81, "Doctype" };
        org.jsoup.parser.ParseError parseError87 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray86);
        parseErrorList64.add(0, parseError87);
        boolean boolean89 = parseErrorList32.add(parseError87);
        org.jsoup.nodes.Document document90 = htmlTreeBuilder24.parse("\uffff", "", parseErrorList32);
        org.jsoup.parser.Parser parser91 = parser19.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder24);
        boolean boolean92 = parser19.isTrackErrors();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(treeBuilder23);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(parseErrorArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(parseErrorArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(parseErrorArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(parseErrorArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(parseErrorArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(parseErrorItor67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(tag81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(tag83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(document90);
        org.junit.Assert.assertNotNull(parser91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitCommentPending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList(100, 1);
        parseErrorList2.trimToSize();
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList15 = xmlTreeBuilder0.stack;
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList18);
        org.jsoup.parser.Token.Tag tag23 = tokeniser22.tagPending;
        org.jsoup.parser.Token.Tag tag25 = tokeniser22.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype26 = tokeniser22.doctypePending;
        xmlTreeBuilder0.tokeniser = tokeniser22;
        org.jsoup.parser.CharacterReader characterReader28 = null;
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream31 = parseErrorList30.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList30.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor33 = parseErrorList30.iterator();
        org.jsoup.parser.Tokeniser tokeniser34 = new org.jsoup.parser.Tokeniser(characterReader28, parseErrorList30);
        tokeniser34.createTempBuffer();
        xmlTreeBuilder0.tokeniser = tokeniser34;
        org.jsoup.parser.Token.Doctype doctype37 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str38 = doctype37.getSystemIdentifier();
        java.lang.String str39 = doctype37.getPublicIdentifier();
        org.jsoup.parser.Token.TokenType tokenType40 = doctype37.type;
        tokeniser34.doctypePending = doctype37;
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(elementList15);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNull(tag23);
        org.junit.Assert.assertNotNull(tag25);
        org.junit.Assert.assertNull(doctype26);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorStream31);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertNotNull(parseErrorItor33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + tokenType40 + "' != '" + org.jsoup.parser.Token.TokenType.Doctype + "'", tokenType40.equals(org.jsoup.parser.Token.TokenType.Doctype));
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        boolean boolean9 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList7);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        boolean boolean14 = parseErrorList12.canAddError();
        boolean boolean15 = parseErrorList7.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        boolean boolean16 = parseErrorList7.canAddError();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState17 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag18 = new org.jsoup.parser.Token.EndTag();
        endTag18.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder20 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int25 = parseErrorList24.getMaxSize();
        org.jsoup.nodes.Document document26 = htmlTreeBuilder20.parse("0: Doctype", "hi!", parseErrorList24);
        boolean boolean27 = htmlTreeBuilderState17.process((org.jsoup.parser.Token) endTag18, htmlTreeBuilder20);
        org.jsoup.nodes.FormElement formElement28 = htmlTreeBuilder20.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder29 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int34 = parseErrorList33.getMaxSize();
        org.jsoup.nodes.Document document35 = htmlTreeBuilder29.parse("0: Doctype", "hi!", parseErrorList33);
        boolean boolean36 = htmlTreeBuilder29.framesetOk();
        org.jsoup.parser.Parser parser37 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser39 = parser37.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document42 = parser37.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document45 = parser37.parseInput("<hi!>", "[]");
        htmlTreeBuilder29.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document45);
        boolean boolean47 = htmlTreeBuilder29.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder48 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList53 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList55 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream56 = parseErrorList55.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor57 = parseErrorList55.iterator();
        boolean boolean58 = parseErrorList53.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList55);
        xmlTreeBuilder48.initialiseParse("<!---->", "hi!", parseErrorList53);
        org.jsoup.parser.ParseErrorList parseErrorList63 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document64 = xmlTreeBuilder48.parse("", "[]", parseErrorList63);
        boolean boolean65 = htmlTreeBuilder29.isInActiveFormattingElements((org.jsoup.nodes.Element) document64);
        boolean boolean66 = htmlTreeBuilder20.isInActiveFormattingElements((org.jsoup.nodes.Element) document64);
        java.util.List<org.jsoup.parser.Token.Character> characterList67 = htmlTreeBuilder20.getPendingTableCharacters();
        org.jsoup.parser.Tokeniser tokeniser68 = htmlTreeBuilder20.tokeniser;
        org.jsoup.parser.Token.Tag tag69 = tokeniser68.tagPending;
        char[] charArray72 = tokeniser68.consumeCharacterReference((java.lang.Character) ' ', false);
        org.jsoup.parser.Token.Doctype doctype73 = new org.jsoup.parser.Token.Doctype();
        boolean boolean74 = doctype73.isCharacter();
        java.lang.StringBuilder stringBuilder75 = doctype73.systemIdentifier;
        tokeniser68.dataBuffer = stringBuilder75;
        java.lang.Appendable[] appendableArray77 = new java.lang.Appendable[] { stringBuilder75 };
        java.lang.Appendable[] appendableArray78 = parseErrorList7.toArray(appendableArray77);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState17);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(formElement28);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parser37);
        org.junit.Assert.assertNotNull(parser39);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(parseErrorList55);
        org.junit.Assert.assertNotNull(parseErrorStream56);
        org.junit.Assert.assertNotNull(parseErrorItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(parseErrorList63);
        org.junit.Assert.assertNotNull(document64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(characterList67);
        org.junit.Assert.assertNotNull(tokeniser68);
        org.junit.Assert.assertNull(tag69);
        org.junit.Assert.assertNull(charArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(stringBuilder75);
        org.junit.Assert.assertEquals(stringBuilder75.toString(), "");
        org.junit.Assert.assertNotNull(appendableArray77);
        org.junit.Assert.assertNotNull(appendableArray78);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList9 = xmlTreeBuilder0.stack;
        org.jsoup.parser.Parser parser10 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) xmlTreeBuilder0);
        org.jsoup.parser.Token.Comment comment11 = new org.jsoup.parser.Token.Comment();
        java.lang.String str12 = comment11.getData();
        boolean boolean13 = comment11.bogus;
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(comment11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(elementList9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.framesetOk(false);
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        boolean boolean23 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.Token.EndTag endTag24 = new org.jsoup.parser.Token.EndTag();
        endTag24.tagName = "hi!";
        endTag24.selfClosing = false;
        boolean boolean29 = endTag24.isEOF();
        org.jsoup.parser.Token.EndTag endTag30 = endTag24.asEndTag();
        boolean boolean31 = htmlTreeBuilder0.process((org.jsoup.parser.Token) endTag24);
        org.jsoup.nodes.Element element32 = htmlTreeBuilder0.currentElement();
        boolean boolean34 = htmlTreeBuilder0.inTableScope("65533: <hi!#>");
        org.jsoup.parser.Tokeniser tokeniser35 = null;
        htmlTreeBuilder0.tokeniser = tokeniser35;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(endTag30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(element32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("Comment");
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean4 = characterReader1.matchesDigit();
        java.lang.String str5 = characterReader1.consumeHexSequence();
        char char6 = characterReader1.consume();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + 'S' + "'", char6 == 'S');
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        startTag0.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag3 = startTag0.asStartTag();
        boolean boolean4 = startTag3.isSelfClosing();
        org.junit.Assert.assertNotNull(startTag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.parser.Token token10 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        boolean boolean21 = parseErrorList14.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        org.jsoup.nodes.Document document22 = htmlTreeBuilder0.parse("[]", "hi!", parseErrorList19);
        org.jsoup.nodes.Element element23 = null;
        boolean boolean24 = htmlTreeBuilder0.removeFromStack(element23);
        org.jsoup.nodes.Element element26 = htmlTreeBuilder0.getActiveFormattingElement("StartTaga");
        htmlTreeBuilder0.clearStackToTableContext();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(token10);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(element26);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        htmlTreeBuilder0.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        org.jsoup.nodes.Element element31 = htmlTreeBuilder18.getActiveFormattingElement("0: Doctype");
        htmlTreeBuilder18.runParser();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder35 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader36 = null;
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList38.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor41 = parseErrorList38.iterator();
        org.jsoup.parser.Tokeniser tokeniser42 = new org.jsoup.parser.Tokeniser(characterReader36, parseErrorList38);
        org.jsoup.parser.Token.Tag tag43 = tokeniser42.tagPending;
        org.jsoup.parser.Token.Tag tag45 = tokeniser42.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype46 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype47 = doctype46.asDoctype();
        java.lang.String str48 = doctype46.tokenType();
        tokeniser42.emit((org.jsoup.parser.Token) doctype46);
        org.jsoup.parser.Token.Tag tag51 = tokeniser42.createTagPending(true);
        xmlTreeBuilder35.currentToken = tag51;
        org.jsoup.nodes.Attributes attributes53 = tag51.attributes;
        org.jsoup.parser.Token.StartTag startTag54 = new org.jsoup.parser.Token.StartTag("", attributes53);
        org.jsoup.parser.Token.StartTag startTag55 = new org.jsoup.parser.Token.StartTag("0: Doctype", attributes53);
        startTag55.appendAttributeName('\uffff');
        org.jsoup.nodes.FormElement formElement59 = htmlTreeBuilder18.insertForm(startTag55, true);
        htmlTreeBuilder0.setFormElement(formElement59);
        org.jsoup.parser.Token.EndTag endTag62 = new org.jsoup.parser.Token.EndTag("Doctype");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder63 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList67 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int68 = parseErrorList67.getMaxSize();
        org.jsoup.nodes.Document document69 = htmlTreeBuilder63.parse("0: Doctype", "hi!", parseErrorList67);
        boolean boolean70 = htmlTreeBuilder63.framesetOk();
        org.jsoup.nodes.Document document73 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder63.setHeadElement((org.jsoup.nodes.Element) document73);
        org.jsoup.parser.Token.StartTag startTag76 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType77 = startTag76.type;
        startTag76.appendTagName('#');
        boolean boolean80 = htmlTreeBuilder63.process((org.jsoup.parser.Token) startTag76);
        org.jsoup.parser.CharacterReader characterReader82 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader82.advance();
        boolean boolean85 = characterReader82.matchConsume("<hi!>");
        htmlTreeBuilder63.reader = characterReader82;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState87 = htmlTreeBuilder63.state();
        boolean boolean88 = htmlTreeBuilder0.process((org.jsoup.parser.Token) endTag62, htmlTreeBuilderState87);
        org.jsoup.nodes.Attributes attributes89 = endTag62.getAttributes();
        java.lang.String str90 = endTag62.tokenType();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNull(element31);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
        org.junit.Assert.assertNotNull(parseErrorItor41);
        org.junit.Assert.assertNull(tag43);
        org.junit.Assert.assertNotNull(tag45);
        org.junit.Assert.assertNotNull(doctype47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Doctype" + "'", str48, "Doctype");
        org.junit.Assert.assertNotNull(tag51);
        org.junit.Assert.assertNotNull(attributes53);
        org.junit.Assert.assertNotNull(formElement59);
        org.junit.Assert.assertNotNull(parseErrorList67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(document69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(document73);
        org.junit.Assert.assertTrue("'" + tokenType77 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType77.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(attributes89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "EndTag" + "'", str90, "EndTag");
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        int int3 = characterReader1.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean4 = characterReader1.matchesDigit();
        java.lang.String str5 = characterReader1.toString();
        boolean boolean7 = characterReader1.matches(' ');
        boolean boolean9 = characterReader1.matchConsumeIgnoreCase("S");
        boolean boolean11 = characterReader1.matchConsume("\uffff>");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.StartTag startTag13 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType14 = startTag13.type;
        startTag13.appendTagName('#');
        boolean boolean17 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag13);
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader19.advance();
        boolean boolean22 = characterReader19.matchConsume("<hi!>");
        htmlTreeBuilder0.reader = characterReader19;
        boolean boolean25 = characterReader19.matchConsume("[100: ]");
        java.lang.String str26 = characterReader19.consumeDigitSequence();
        boolean boolean28 = characterReader19.matchConsumeIgnoreCase("St");
        boolean boolean30 = characterReader19.matchesIgnoreCase("0: Doctype");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertTrue("'" + tokenType14 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType14.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        boolean boolean9 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList7);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList7.iterator();
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        org.jsoup.parser.ParseError[] parseErrorArray15 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList16 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16, parseErrorArray15);
        boolean boolean18 = parseErrorList13.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16);
        int int20 = parseErrorList16.lastIndexOf((java.lang.Object) (byte) -1);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.noTracking();
        boolean boolean22 = parseErrorList16.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream23 = parseErrorList16.parallelStream();
        boolean boolean24 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList7.stream();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(parseErrorStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(parseErrorStream25);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        tokenQueue1.advance();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder8 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int13 = parseErrorList12.getMaxSize();
        org.jsoup.nodes.Document document14 = htmlTreeBuilder8.parse("0: Doctype", "hi!", parseErrorList12);
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        boolean boolean20 = parseErrorList18.canAddError();
        org.jsoup.nodes.Document document21 = htmlTreeBuilder8.parse("EndTag", "hi!#", parseErrorList18);
        java.lang.String[] strArray29 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean30 = htmlTreeBuilder8.inScope("hi!#", strArray29);
        java.lang.String str31 = tokenQueue1.consumeToAny(strArray29);
        java.lang.String str32 = tokenQueue1.consumeAttributeKey();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.RawtextEndTagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.Token.Tag tag10 = tokeniser7.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype11 = new org.jsoup.parser.Token.Doctype();
        boolean boolean12 = doctype11.isCharacter();
        boolean boolean13 = doctype11.isEndTag();
        boolean boolean14 = doctype11.isCharacter();
        tokeniser7.emit((org.jsoup.parser.Token) doctype11);
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.ScriptData;
        tokeniser7.eofError((org.jsoup.parser.ITokeniserState) tokeniserState16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str19 = doctype18.getSystemIdentifier();
        org.jsoup.parser.Token.TokenType tokenType20 = doctype18.type;
        tokeniser7.doctypePending = doctype18;
        boolean boolean22 = tokeniser7.currentNodeInHtmlNS();
        org.jsoup.parser.CharacterReader characterReader24 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean26 = characterReader24.matches('\uffff');
        boolean boolean28 = characterReader24.containsIgnoreCase("0: []");
        tokeniserState0.read(tokeniser7, characterReader24);
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(tag10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + tokenType20 + "' != '" + org.jsoup.parser.Token.TokenType.Doctype + "'", tokenType20.equals(org.jsoup.parser.Token.TokenType.Doctype));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.CharacterReader characterReader16 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean18 = characterReader16.matches("[100: ]");
        htmlTreeBuilder0.reader = characterReader16;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState20 = htmlTreeBuilder0.state();
        htmlTreeBuilder0.popStackToClose(" ");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(htmlTreeBuilderState20);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        org.jsoup.parser.Token.StartTag startTag21 = new org.jsoup.parser.Token.StartTag("10: ");
        org.jsoup.nodes.Attributes attributes22 = startTag21.getAttributes();
        boolean boolean23 = startTag21.isSelfClosing();
        htmlTreeBuilder0.currentToken = startTag21;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(attributes22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        java.lang.String str1 = org.jsoup.parser.TokenQueue.unescape("-1: []E");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "-1: []E" + "'", str1, "-1: []E");
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader2 = new org.jsoup.parser.CharacterReader("StartTag");
        int int4 = characterReader2.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean5 = characterReader2.matchesDigit();
        java.lang.String str6 = characterReader2.toString();
        xmlTreeBuilder0.reader = characterReader2;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder8 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader9 = null;
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream12 = parseErrorList11.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor13 = parseErrorList11.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList11.iterator();
        org.jsoup.parser.Tokeniser tokeniser15 = new org.jsoup.parser.Tokeniser(characterReader9, parseErrorList11);
        xmlTreeBuilder8.tokeniser = tokeniser15;
        tokeniser15.createCommentPending();
        org.jsoup.parser.Token.Comment comment18 = tokeniser15.commentPending;
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(comment18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "StartTag" + "'", str6, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertNotNull(parseErrorStream12);
        org.junit.Assert.assertNotNull(parseErrorItor13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertNotNull(comment18);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Element element13 = htmlTreeBuilder0.getActiveFormattingElement("0: Doctype");
        boolean boolean15 = htmlTreeBuilder0.inSelectScope("");
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList18);
        org.jsoup.parser.Token.Tag tag23 = tokeniser22.tagPending;
        tokeniser22.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag27 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType28 = startTag27.type;
        startTag27.appendTagName('#');
        tokeniser22.tagPending = startTag27;
        org.jsoup.parser.TokeniserState tokeniserState32 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser22.transition((org.jsoup.parser.ITokeniserState) tokeniserState32);
        org.jsoup.parser.Token.Doctype doctype34 = new org.jsoup.parser.Token.Doctype();
        boolean boolean35 = doctype34.isCharacter();
        tokeniser22.doctypePending = doctype34;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState37 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype38 = new org.jsoup.parser.Token.Doctype();
        boolean boolean39 = doctype38.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder40 = null;
        boolean boolean41 = htmlTreeBuilderState37.process((org.jsoup.parser.Token) doctype38, htmlTreeBuilder40);
        java.lang.StringBuilder stringBuilder42 = doctype38.name;
        tokeniser22.dataBuffer = stringBuilder42;
        org.jsoup.parser.Token.Comment comment44 = new org.jsoup.parser.Token.Comment();
        java.lang.String str45 = comment44.toString();
        boolean boolean46 = comment44.isCharacter();
        boolean boolean47 = comment44.bogus;
        tokeniser22.commentPending = comment44;
        htmlTreeBuilder0.tokeniser = tokeniser22;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(element13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNull(tag23);
        org.junit.Assert.assertTrue("'" + tokenType28 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType28.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(stringBuilder42);
        org.junit.Assert.assertEquals(stringBuilder42.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "<!---->" + "'", str45, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.Token.Tag tag10 = tokeniser7.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype11 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype12 = doctype11.asDoctype();
        java.lang.String str13 = doctype11.tokenType();
        tokeniser7.emit((org.jsoup.parser.Token) doctype11);
        org.jsoup.parser.Token.Tag tag16 = tokeniser7.createTagPending(true);
        xmlTreeBuilder0.currentToken = tag16;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        xmlTreeBuilder0.doc = document28;
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream35 = parseErrorList34.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor36 = parseErrorList34.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor37 = parseErrorList34.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int40 = parseErrorList39.getMaxSize();
        boolean boolean41 = parseErrorList34.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList39);
        xmlTreeBuilder0.initialiseParse("hi!#", "0: []", parseErrorList39);
        org.jsoup.parser.ParseErrorList parseErrorList43 = xmlTreeBuilder0.errors;
        org.jsoup.parser.Token.Character character45 = new org.jsoup.parser.Token.Character(" EndTag");
        java.lang.String str46 = character45.getData();
        java.lang.String str47 = character45.toString();
        xmlTreeBuilder0.insert(character45);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(tag10);
        org.junit.Assert.assertNotNull(doctype12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Doctype" + "'", str13, "Doctype");
        org.junit.Assert.assertNotNull(tag16);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(parseErrorStream35);
        org.junit.Assert.assertNotNull(parseErrorItor36);
        org.junit.Assert.assertNotNull(parseErrorItor37);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + " EndTag" + "'", str46, " EndTag");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + " EndTag" + "'", str47, " EndTag");
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        tokenQueue1.addFirst((java.lang.Character) '\uffff');
        java.lang.String str9 = tokenQueue1.consumeToIgnoreCase("hi!");
        tokenQueue1.addFirst((java.lang.Character) '\uffff');
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.parser.Parser parser20 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser22 = parser20.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document25 = parser20.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document28 = parser20.parseInput("<hi!>", "[]");
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document28);
        boolean boolean30 = htmlTreeBuilder12.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder31 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList38.iterator();
        boolean boolean41 = parseErrorList36.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        xmlTreeBuilder31.initialiseParse("<!---->", "hi!", parseErrorList36);
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document47 = xmlTreeBuilder31.parse("", "[]", parseErrorList46);
        boolean boolean48 = htmlTreeBuilder12.isInActiveFormattingElements((org.jsoup.nodes.Element) document47);
        org.jsoup.nodes.Element element50 = htmlTreeBuilder12.insert("<!---->");
        org.jsoup.parser.Token.StartTag startTag52 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag52.appendTagName("hi!");
        startTag52.appendAttributeName('4');
        boolean boolean57 = htmlTreeBuilder12.process((org.jsoup.parser.Token) startTag52);
        org.jsoup.parser.Token.EndTag endTag58 = new org.jsoup.parser.Token.EndTag();
        char[] charArray61 = new char[] { '#', '#' };
        endTag58.appendAttributeValue(charArray61);
        endTag58.appendAttributeValue(' ');
        char[] charArray66 = new char[] { '4' };
        endTag58.appendAttributeValue(charArray66);
        startTag52.appendAttributeValue(charArray66);
        boolean boolean69 = tokenQueue1.matchesAny(charArray66);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uffff" + "'", str9, "\uffff");
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parser20);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(element50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[#, #]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[4]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        int int9 = parseErrorList4.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag13 = new org.jsoup.parser.Token.EndTag();
        char[] charArray16 = new char[] { '#', '#' };
        endTag13.appendAttributeValue(charArray16);
        endTag13.finaliseTag();
        boolean boolean19 = endTag13.isSelfClosing();
        org.jsoup.parser.Tag tag21 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean22 = tag21.isFormListed();
        org.jsoup.parser.Tag tag23 = tag21.setSelfClosing();
        boolean boolean24 = tag21.isKnownTag();
        java.lang.Object[] objArray26 = new java.lang.Object[] { boolean19, tag21, "Doctype" };
        org.jsoup.parser.ParseError parseError27 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray26);
        parseErrorList4.add(0, parseError27);
        java.lang.String str29 = parseError27.getErrorMessage();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(tag21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(tag23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.Comment comment12 = new org.jsoup.parser.Token.Comment();
        java.lang.String str13 = comment12.toString();
        boolean boolean14 = comment12.isCharacter();
        htmlTreeBuilder0.insert(comment12);
        boolean boolean16 = comment12.isStartTag();
        java.lang.StringBuilder stringBuilder17 = comment12.data;
        comment12.bogus = true;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<!---->" + "'", str13, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(stringBuilder17);
        org.junit.Assert.assertEquals(stringBuilder17.toString(), "");
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Tag tag10 = tokeniser6.tagPending;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(tag10);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking((int) (short) 1);
        parseErrorList1.ensureCapacity((int) '<');
        org.junit.Assert.assertNotNull(parseErrorList1);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        java.lang.String str14 = doctype10.getPublicIdentifier();
        java.lang.String str15 = doctype10.getPublicIdentifier();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        java.lang.String str2 = characterReader1.consumeToEnd();
        int int4 = characterReader1.nextIndexOf('a');
        char char5 = characterReader1.consume();
        characterReader1.rewindToMark();
        boolean boolean8 = characterReader1.matchesIgnoreCase("1: Doctype");
        java.lang.String str9 = characterReader1.consumeLetterThenDigitSequence();
        characterReader1.mark();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "StartTag" + "'", str2, "StartTag");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\uffff' + "'", char5 == '\uffff');
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "StartTag" + "'", str9, "StartTag");
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.Tag tag8 = org.jsoup.parser.Tag.valueOf("<!---->");
        java.lang.String str9 = tag8.getName();
        boolean boolean10 = parseErrorList1.remove((java.lang.Object) str9);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(tag8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "<!---->" + "'", str9, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        startTag0.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag4 = startTag0.name("hi!#");
        boolean boolean5 = startTag0.isStartTag();
        startTag0.appendTagName("hi!#<hi!#>");
        org.junit.Assert.assertNotNull(tag4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList(10, (int) '#');
        java.lang.Object obj3 = parseErrorList2.clone();
        org.jsoup.parser.CharacterReader characterReader4 = null;
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream7 = parseErrorList6.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList6.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList6.iterator();
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader4, parseErrorList6);
        org.jsoup.parser.Token.Tag tag11 = tokeniser10.tagPending;
        org.jsoup.parser.Token.Tag tag13 = tokeniser10.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype14 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype15 = doctype14.asDoctype();
        java.lang.String str16 = doctype14.tokenType();
        tokeniser10.emit((org.jsoup.parser.Token) doctype14);
        org.jsoup.parser.ITokeniserState iTokeniserState18 = tokeniser10.getState();
        org.jsoup.parser.TokeniserState tokeniserState19 = org.jsoup.parser.TokeniserState.Doctype;
        tokeniser10.error((org.jsoup.parser.ITokeniserState) tokeniserState19);
        boolean boolean21 = parseErrorList2.remove((java.lang.Object) tokeniser10);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "[]");
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertNotNull(parseErrorStream7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertNull(tag11);
        org.junit.Assert.assertNotNull(tag13);
        org.junit.Assert.assertNotNull(doctype15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Doctype" + "'", str16, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState18);
        org.junit.Assert.assertNotNull(tokeniserState19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        java.lang.String str6 = tokenQueue1.consumeElementSelector();
        org.jsoup.parser.TokenQueue tokenQueue8 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean9 = tokenQueue8.isEmpty();
        boolean boolean10 = tokenQueue8.consumeWhitespace();
        java.lang.String str11 = tokenQueue8.consumeWord();
        boolean boolean12 = tokenQueue8.matchesWhitespace();
        java.lang.String[] strArray17 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str18 = tokenQueue8.consumeToAny(strArray17);
        boolean boolean19 = tokenQueue1.matchesAny(strArray17);
        java.lang.String str21 = tokenQueue1.chompToIgnoreCase("\000EndTag");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "EndTag" + "'", str11, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.framesetOk(false);
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        boolean boolean23 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.ParseErrorList parseErrorList28 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream31 = parseErrorList30.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList30.iterator();
        boolean boolean33 = parseErrorList28.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        parseErrorList30.ensureCapacity((int) (short) 1);
        org.jsoup.nodes.Document document36 = htmlTreeBuilder0.parse("StartTaga", "</hi![]>", parseErrorList30);
        java.lang.String str37 = htmlTreeBuilder0.getBaseUri();
        htmlTreeBuilder0.runParser();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorStream31);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "</hi![]>" + "'", str37, "</hi![]>");
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype12 = tokeniser6.doctypePending;
        org.jsoup.parser.Token.Comment comment13 = new org.jsoup.parser.Token.Comment();
        java.lang.String str14 = comment13.toString();
        java.lang.StringBuilder stringBuilder15 = comment13.data;
        boolean boolean16 = comment13.isEndTag();
        java.lang.String str17 = comment13.toString();
        tokeniser6.commentPending = comment13;
        tokeniser6.createCommentPending();
        org.jsoup.parser.ITokeniserState iTokeniserState20 = tokeniser6.getState();
        boolean boolean21 = tokeniser6.currentNodeInHtmlNS();
        boolean boolean22 = tokeniser6.currentNodeInHtmlNS();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNull(doctype12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "<!---->" + "'", str14, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<!---->" + "'", str17, "<!---->");
        org.junit.Assert.assertNotNull(iTokeniserState20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.newPendingTableCharacters();
        org.jsoup.nodes.Element element9 = htmlTreeBuilder0.getActiveFormattingElement("[0: []]");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder10 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int15 = parseErrorList14.getMaxSize();
        org.jsoup.nodes.Document document16 = htmlTreeBuilder10.parse("0: Doctype", "hi!", parseErrorList14);
        htmlTreeBuilder10.generateImpliedEndTags("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder19 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        org.jsoup.nodes.Document document25 = htmlTreeBuilder19.parse("0: Doctype", "hi!", parseErrorList23);
        boolean boolean26 = htmlTreeBuilder19.framesetOk();
        org.jsoup.nodes.Document document29 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder19.setHeadElement((org.jsoup.nodes.Element) document29);
        org.jsoup.nodes.Document document33 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder19.setHeadElement((org.jsoup.nodes.Element) document33);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder36 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int41 = parseErrorList40.getMaxSize();
        org.jsoup.nodes.Document document42 = htmlTreeBuilder36.parse("0: Doctype", "hi!", parseErrorList40);
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream47 = parseErrorList46.stream();
        boolean boolean48 = parseErrorList46.canAddError();
        org.jsoup.nodes.Document document49 = htmlTreeBuilder36.parse("EndTag", "hi!#", parseErrorList46);
        java.lang.String[] strArray57 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean58 = htmlTreeBuilder36.inScope("hi!#", strArray57);
        boolean boolean59 = htmlTreeBuilder19.inScope("hi!#", strArray57);
        htmlTreeBuilder10.popStackToClose(strArray57);
        htmlTreeBuilder0.popStackToClose(strArray57);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(element9);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(parseErrorStream47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        boolean boolean19 = doctype18.isCharacter();
        tokeniser6.doctypePending = doctype18;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype22 = new org.jsoup.parser.Token.Doctype();
        boolean boolean23 = doctype22.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = null;
        boolean boolean25 = htmlTreeBuilderState21.process((org.jsoup.parser.Token) doctype22, htmlTreeBuilder24);
        java.lang.StringBuilder stringBuilder26 = doctype22.name;
        tokeniser6.dataBuffer = stringBuilder26;
        org.jsoup.parser.Token.EndTag endTag28 = new org.jsoup.parser.Token.EndTag();
        char[] charArray31 = new char[] { '#', '#' };
        endTag28.appendAttributeValue(charArray31);
        endTag28.appendAttributeValue(' ');
        char[] charArray36 = new char[] { '4' };
        endTag28.appendAttributeValue(charArray36);
        tokeniser6.emit(charArray36);
        tokeniser6.emit('t');
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(stringBuilder26);
        org.junit.Assert.assertEquals(stringBuilder26.toString(), "");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4]");
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        boolean boolean8 = parseErrorList1.isEmpty();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream9 = parseErrorList1.parallelStream();
        org.jsoup.parser.TokenQueue tokenQueue11 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean12 = tokenQueue11.isEmpty();
        boolean boolean13 = tokenQueue11.consumeWhitespace();
        java.lang.String str14 = tokenQueue11.consumeWord();
        boolean boolean15 = tokenQueue11.matchesWhitespace();
        java.lang.String[] strArray20 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str21 = tokenQueue11.consumeToAny(strArray20);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        java.lang.StringBuilder stringBuilder30 = null;
        tokeniser28.dataBuffer = stringBuilder30;
        org.jsoup.parser.Token.EndTag endTag32 = new org.jsoup.parser.Token.EndTag();
        char[] charArray35 = new char[] { '#', '#' };
        endTag32.appendAttributeValue(charArray35);
        tokeniser28.emit(charArray35);
        boolean boolean38 = tokenQueue11.matchesAny(charArray35);
        java.lang.String str39 = tokenQueue11.consumeCssIdentifier();
        tokenQueue11.addFirst("ndTag");
        char char42 = tokenQueue11.peek();
        java.lang.String str43 = tokenQueue11.remainder();
        int int44 = parseErrorList1.lastIndexOf((java.lang.Object) tokenQueue11);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parseErrorStream9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "EndTag" + "'", str14, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + char42 + "' != '" + 'n' + "'", char42 == 'n');
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ndTag" + "'", str43, "ndTag");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        boolean boolean15 = parseErrorList10.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        java.lang.Object[] objArray16 = parseErrorList10.toArray();
        parseErrorList10.clear();
        org.jsoup.parser.ParseError[] parseErrorArray18 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList19 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19, parseErrorArray18);
        boolean boolean21 = parseErrorList10.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        boolean boolean22 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder23 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList27 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int28 = parseErrorList27.getMaxSize();
        org.jsoup.nodes.Document document29 = htmlTreeBuilder23.parse("0: Doctype", "hi!", parseErrorList27);
        boolean boolean30 = htmlTreeBuilder23.framesetOk();
        org.jsoup.parser.Parser parser31 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser33 = parser31.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document36 = parser31.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document39 = parser31.parseInput("<hi!>", "[]");
        htmlTreeBuilder23.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document39);
        java.lang.String[] strArray41 = new java.lang.String[] {};
        boolean boolean42 = htmlTreeBuilder23.inScope(strArray41);
        htmlTreeBuilder23.framesetOk(false);
        htmlTreeBuilder23.insertMarkerToFormattingElements();
        boolean boolean46 = htmlTreeBuilder23.isFosterInserts();
        org.jsoup.parser.ParseErrorList parseErrorList51 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream54 = parseErrorList53.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList53.iterator();
        boolean boolean56 = parseErrorList51.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList53);
        parseErrorList53.ensureCapacity((int) (short) 1);
        org.jsoup.nodes.Document document59 = htmlTreeBuilder23.parse("StartTaga", "</hi![]>", parseErrorList53);
        boolean boolean60 = parseErrorList1.contains((java.lang.Object) document59);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(parseErrorList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parser31);
        org.junit.Assert.assertNotNull(parser33);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertNotNull(parseErrorStream54);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder13.setHeadElement((org.jsoup.nodes.Element) document23);
        org.jsoup.nodes.Element element25 = htmlTreeBuilder13.pop();
        htmlTreeBuilder0.push(element25);
        org.jsoup.parser.Token token27 = htmlTreeBuilder0.currentToken;
        boolean boolean29 = htmlTreeBuilder0.inSelectScope("\ufffd>");
        htmlTreeBuilder0.resetInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder31 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList35 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int36 = parseErrorList35.getMaxSize();
        org.jsoup.nodes.Document document37 = htmlTreeBuilder31.parse("0: Doctype", "hi!", parseErrorList35);
        boolean boolean38 = htmlTreeBuilder31.framesetOk();
        org.jsoup.nodes.Document document41 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder31.setHeadElement((org.jsoup.nodes.Element) document41);
        org.jsoup.nodes.Document document45 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder31.setHeadElement((org.jsoup.nodes.Element) document45);
        htmlTreeBuilder31.setFosterInserts(false);
        htmlTreeBuilder31.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder50 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList54 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int55 = parseErrorList54.getMaxSize();
        org.jsoup.nodes.Document document56 = htmlTreeBuilder50.parse("0: Doctype", "hi!", parseErrorList54);
        boolean boolean57 = htmlTreeBuilder50.framesetOk();
        org.jsoup.parser.Parser parser58 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser60 = parser58.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document63 = parser58.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document66 = parser58.parseInput("<hi!>", "[]");
        htmlTreeBuilder50.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document66);
        java.lang.String[] strArray68 = new java.lang.String[] {};
        boolean boolean69 = htmlTreeBuilder50.inScope(strArray68);
        htmlTreeBuilder50.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder71 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList75 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int76 = parseErrorList75.getMaxSize();
        org.jsoup.nodes.Document document77 = htmlTreeBuilder71.parse("0: Doctype", "hi!", parseErrorList75);
        htmlTreeBuilder50.setHeadElement((org.jsoup.nodes.Element) document77);
        htmlTreeBuilder31.pushActiveFormattingElements((org.jsoup.nodes.Element) document77);
        org.jsoup.nodes.Document document82 = htmlTreeBuilder31.parse("a", "ndTag");
        htmlTreeBuilder0.doc = document82;
        org.jsoup.parser.Parser parser84 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean86 = htmlTreeBuilder0.inScope(" ");
        java.lang.Class<?> wildcardClass87 = htmlTreeBuilder0.getClass();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(token27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertNotNull(parseErrorList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(document56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(parser58);
        org.junit.Assert.assertNotNull(parser60);
        org.junit.Assert.assertNotNull(document63);
        org.junit.Assert.assertNotNull(document66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(parseErrorList75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(document77);
        org.junit.Assert.assertNotNull(document82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        startTag0.appendAttributeValue("hi!");
        startTag0.appendAttributeValue("");
        org.jsoup.nodes.Attributes attributes5 = null;
        startTag0.attributes = attributes5;
        startTag0.appendAttributeValue("StartTag");
        boolean boolean9 = startTag0.selfClosing;
        startTag0.appendAttributeName("artTag");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.Tag tag11 = tokeniser6.createTagPending(false);
        org.jsoup.parser.Token.Tag tag13 = tokeniser6.createTagPending(false);
        org.jsoup.parser.TokeniserState tokeniserState14 = org.jsoup.parser.TokeniserState.CdataSection;
        tokeniser6.eofError((org.jsoup.parser.ITokeniserState) tokeniserState14);
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList18);
        org.jsoup.parser.Token.Tag tag23 = tokeniser22.tagPending;
        org.jsoup.parser.Token.Tag tag25 = tokeniser22.createTagPending(true);
        java.lang.StringBuilder stringBuilder26 = tokeniser22.dataBuffer;
        org.jsoup.parser.Token.EndTag endTag27 = new org.jsoup.parser.Token.EndTag();
        char[] charArray30 = new char[] { '#', '#' };
        endTag27.appendAttributeValue(charArray30);
        tokeniser22.emit(charArray30);
        org.jsoup.parser.CharacterReader characterReader34 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean36 = characterReader34.matches("[100: ]");
        java.lang.String str38 = characterReader34.consumeTo('4');
        boolean boolean39 = characterReader34.matchesLetter();
        tokeniserState14.read(tokeniser22, characterReader34);
        characterReader34.rewindToMark();
        boolean boolean43 = characterReader34.matches('\ufffd');
        org.jsoup.parser.CharacterReader characterReader44 = null;
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream47 = parseErrorList46.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor48 = parseErrorList46.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList46.iterator();
        org.jsoup.parser.Tokeniser tokeniser50 = new org.jsoup.parser.Tokeniser(characterReader44, parseErrorList46);
        org.jsoup.parser.Token.EndTag endTag51 = new org.jsoup.parser.Token.EndTag();
        char[] charArray54 = new char[] { '#', '#' };
        endTag51.appendAttributeValue(charArray54);
        endTag51.appendAttributeValue(' ');
        char[] charArray59 = new char[] { '4' };
        endTag51.appendAttributeValue(charArray59);
        tokeniser50.emit(charArray59);
        java.lang.String str62 = characterReader34.consumeToAny(charArray59);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(tag13);
        org.junit.Assert.assertNotNull(tokeniserState14);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNull(tag23);
        org.junit.Assert.assertNotNull(tag25);
        org.junit.Assert.assertNull(stringBuilder26);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "StartTag" + "'", str38, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(parseErrorStream47);
        org.junit.Assert.assertNotNull(parseErrorItor48);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[#, #]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[4]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "StartTag" + "'", str62, "StartTag");
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.parser.Token token16 = htmlTreeBuilder0.currentToken;
        java.lang.String[] strArray23 = new java.lang.String[] { "Doctype", "</hi![]>", "<!---->", "100: ", "EOF", "a" };
        boolean boolean24 = htmlTreeBuilder0.inScope(strArray23);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder25 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList29 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int30 = parseErrorList29.getMaxSize();
        org.jsoup.nodes.Document document31 = htmlTreeBuilder25.parse("0: Doctype", "hi!", parseErrorList29);
        boolean boolean32 = htmlTreeBuilder25.framesetOk();
        org.jsoup.nodes.Document document35 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder25.setHeadElement((org.jsoup.nodes.Element) document35);
        org.jsoup.nodes.Document document39 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder25.setHeadElement((org.jsoup.nodes.Element) document39);
        htmlTreeBuilder25.setFosterInserts(false);
        htmlTreeBuilder25.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder44 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList48 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int49 = parseErrorList48.getMaxSize();
        org.jsoup.nodes.Document document50 = htmlTreeBuilder44.parse("0: Doctype", "hi!", parseErrorList48);
        boolean boolean51 = htmlTreeBuilder44.framesetOk();
        org.jsoup.parser.Parser parser52 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser54 = parser52.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document57 = parser52.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document60 = parser52.parseInput("<hi!>", "[]");
        htmlTreeBuilder44.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document60);
        java.lang.String[] strArray62 = new java.lang.String[] {};
        boolean boolean63 = htmlTreeBuilder44.inScope(strArray62);
        htmlTreeBuilder44.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder65 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList69 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int70 = parseErrorList69.getMaxSize();
        org.jsoup.nodes.Document document71 = htmlTreeBuilder65.parse("0: Doctype", "hi!", parseErrorList69);
        htmlTreeBuilder44.setHeadElement((org.jsoup.nodes.Element) document71);
        htmlTreeBuilder25.pushActiveFormattingElements((org.jsoup.nodes.Element) document71);
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document71);
        htmlTreeBuilder0.setFosterInserts(true);
        org.jsoup.parser.Token.StartTag startTag77 = new org.jsoup.parser.Token.StartTag();
        startTag77.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag81 = startTag77.name("hi!#");
        boolean boolean82 = startTag77.selfClosing;
        org.jsoup.nodes.FormElement formElement84 = htmlTreeBuilder0.insertForm(startTag77, false);
        java.lang.String str85 = htmlTreeBuilder0.toString();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(token16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(parseErrorList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(parseErrorList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(parser52);
        org.junit.Assert.assertNotNull(parser54);
        org.junit.Assert.assertNotNull(document57);
        org.junit.Assert.assertNotNull(document60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(parseErrorList69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(document71);
        org.junit.Assert.assertNotNull(tag81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(formElement84);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        boolean boolean11 = doctype10.isCharacter();
        boolean boolean12 = doctype10.isEndTag();
        boolean boolean13 = doctype10.isCharacter();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        tokeniser6.createTempBuffer();
        org.jsoup.parser.Token.Comment comment16 = new org.jsoup.parser.Token.Comment();
        java.lang.String str17 = comment16.toString();
        java.lang.StringBuilder stringBuilder18 = comment16.data;
        boolean boolean19 = comment16.isEndTag();
        java.lang.String str20 = comment16.toString();
        tokeniser6.commentPending = comment16;
        org.jsoup.parser.Token.Doctype doctype22 = new org.jsoup.parser.Token.Doctype();
        boolean boolean23 = doctype22.isCharacter();
        java.lang.StringBuilder stringBuilder24 = doctype22.systemIdentifier;
        org.jsoup.parser.Token.StartTag startTag26 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType27 = startTag26.type;
        doctype22.type = tokenType27;
        comment16.type = tokenType27;
        org.jsoup.parser.Token.TokenType tokenType30 = comment16.type;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<!---->" + "'", str17, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder18);
        org.junit.Assert.assertEquals(stringBuilder18.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<!---->" + "'", str20, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(stringBuilder24);
        org.junit.Assert.assertEquals(stringBuilder24.toString(), "");
        org.junit.Assert.assertTrue("'" + tokenType27 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType27.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + tokenType30 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType30.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\000');
        characterReader1.mark();
        java.lang.String str5 = characterReader1.consumeLetterSequence();
        characterReader1.mark();
        java.lang.String str7 = characterReader1.consumeToEnd();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        java.lang.String str2 = characterReader1.consumeToEnd();
        int int4 = characterReader1.nextIndexOf('a');
        java.lang.String str5 = characterReader1.consumeDigitSequence();
        char char6 = characterReader1.current();
        int int8 = characterReader1.nextIndexOf('\uffff');
        boolean boolean10 = characterReader1.matchConsume("ndTag");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "StartTag" + "'", str2, "StartTag");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\uffff' + "'", char6 == '\uffff');
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList12 = htmlTreeBuilder0.stack;
        org.jsoup.parser.Token.StartTag startTag14 = new org.jsoup.parser.Token.StartTag("<!---->");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState15 = org.jsoup.parser.HtmlTreeBuilderState.AfterFrameset;
        boolean boolean16 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag14, htmlTreeBuilderState15);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder17 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        org.jsoup.nodes.Document document23 = htmlTreeBuilder17.parse("0: Doctype", "hi!", parseErrorList21);
        boolean boolean24 = htmlTreeBuilder17.framesetOk();
        org.jsoup.parser.Parser parser25 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser27 = parser25.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document30 = parser25.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document33 = parser25.parseInput("<hi!>", "[]");
        htmlTreeBuilder17.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document33);
        java.lang.String[] strArray35 = new java.lang.String[] {};
        boolean boolean36 = htmlTreeBuilder17.inScope(strArray35);
        htmlTreeBuilder17.markInsertionMode();
        boolean boolean39 = htmlTreeBuilder17.inScope("StartTag");
        org.jsoup.parser.Token.StartTag startTag40 = new org.jsoup.parser.Token.StartTag();
        startTag40.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag44 = startTag40.name("hi!#");
        boolean boolean45 = startTag40.isStartTag();
        startTag40.appendTagName('a');
        org.jsoup.nodes.Element element48 = htmlTreeBuilder17.insertEmpty(startTag40);
        htmlTreeBuilder0.removeFromActiveFormattingElements(element48);
        htmlTreeBuilder0.reconstructFormattingElements();
        htmlTreeBuilder0.clearStackToTableContext();
        htmlTreeBuilder0.clearStackToTableBodyContext();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(elementList12);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(parser25);
        org.junit.Assert.assertNotNull(parser27);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(tag44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(element48);
    }
}
