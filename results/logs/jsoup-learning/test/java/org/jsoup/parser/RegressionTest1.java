package org.jsoup.parser;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        boolean boolean2 = startTag1.isCharacter();
        startTag1.selfClosing = false;
        boolean boolean5 = startTag1.isDoctype();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.newPendingTableCharacters();
        boolean boolean9 = htmlTreeBuilder0.inTableScope("");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        endTag11.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilderState10.process((org.jsoup.parser.Token) endTag11, htmlTreeBuilder13);
        htmlTreeBuilder13.clearStackToTableContext();
        htmlTreeBuilder13.generateImpliedEndTags("hi!#");
        java.util.List<org.jsoup.parser.Token.Character> characterList24 = htmlTreeBuilder13.getPendingTableCharacters();
        htmlTreeBuilder0.setPendingTableCharacters(characterList24);
        org.jsoup.parser.ParseErrorList parseErrorList26 = null;
        htmlTreeBuilder0.errors = parseErrorList26;
        org.jsoup.parser.CharacterReader characterReader28 = null;
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream31 = parseErrorList30.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList30.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor33 = parseErrorList30.iterator();
        org.jsoup.parser.Tokeniser tokeniser34 = new org.jsoup.parser.Tokeniser(characterReader28, parseErrorList30);
        org.jsoup.parser.Token.Tag tag35 = tokeniser34.tagPending;
        org.jsoup.parser.Token.Tag tag37 = tokeniser34.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype38 = new org.jsoup.parser.Token.Doctype();
        boolean boolean39 = doctype38.isCharacter();
        boolean boolean40 = doctype38.isEndTag();
        boolean boolean41 = doctype38.isCharacter();
        tokeniser34.emit((org.jsoup.parser.Token) doctype38);
        java.lang.String str43 = doctype38.getSystemIdentifier();
        htmlTreeBuilder0.currentToken = doctype38;
        java.lang.String str45 = doctype38.getName();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState10);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(characterList24);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorStream31);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertNotNull(parseErrorItor33);
        org.junit.Assert.assertNull(tag35);
        org.junit.Assert.assertNotNull(tag37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        java.lang.StringBuilder stringBuilder14 = doctype10.publicIdentifier;
        java.lang.String str15 = doctype10.getName();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertNotNull(stringBuilder14);
        org.junit.Assert.assertEquals(stringBuilder14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        boolean boolean2 = startTag1.isCharacter();
        startTag1.selfClosing = false;
        boolean boolean5 = startTag1.isCharacter();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Tag tag2 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean3 = tag2.isFormListed();
        org.jsoup.parser.CharacterReader characterReader4 = null;
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream7 = parseErrorList6.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList6.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList6.iterator();
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader4, parseErrorList6);
        org.jsoup.parser.Token.Tag tag11 = tokeniser10.tagPending;
        org.jsoup.parser.Token.Tag tag13 = tokeniser10.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype14 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype15 = doctype14.asDoctype();
        java.lang.String str16 = doctype14.tokenType();
        tokeniser10.emit((org.jsoup.parser.Token) doctype14);
        boolean boolean18 = tag2.equals((java.lang.Object) doctype14);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader20 = null;
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream23 = parseErrorList22.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList22.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList22.iterator();
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader20, parseErrorList22);
        org.jsoup.parser.Token.Tag tag27 = tokeniser26.tagPending;
        org.jsoup.parser.Token.Tag tag29 = tokeniser26.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype30 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype31 = doctype30.asDoctype();
        java.lang.String str32 = doctype30.tokenType();
        tokeniser26.emit((org.jsoup.parser.Token) doctype30);
        org.jsoup.parser.Token.Tag tag35 = tokeniser26.createTagPending(true);
        xmlTreeBuilder19.currentToken = tag35;
        boolean boolean37 = tag2.equals((java.lang.Object) tag35);
        java.lang.String str38 = tag2.toString();
        org.jsoup.parser.Token.StartTag startTag39 = new org.jsoup.parser.Token.StartTag();
        startTag39.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag43 = startTag39.name("hi!#");
        boolean boolean44 = tag2.equals((java.lang.Object) startTag39);
        startTag39.appendTagName("</hi![]>");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element47 = xmlTreeBuilder0.insert(startTag39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tag2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertNotNull(parseErrorStream7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertNull(tag11);
        org.junit.Assert.assertNotNull(tag13);
        org.junit.Assert.assertNotNull(doctype15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Doctype" + "'", str16, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertNotNull(parseErrorStream23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNull(tag27);
        org.junit.Assert.assertNotNull(tag29);
        org.junit.Assert.assertNotNull(doctype31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Doctype" + "'", str32, "Doctype");
        org.junit.Assert.assertNotNull(tag35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(tag43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\000');
        characterReader1.mark();
        boolean boolean6 = characterReader1.containsIgnoreCase("a");
        java.lang.String str7 = characterReader1.toString();
        java.lang.String str8 = characterReader1.consumeToEnd();
        java.lang.String str9 = characterReader1.consumeToEnd();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "StartTag" + "'", str7, "StartTag");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "StartTag" + "'", str8, "StartTag");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader2 = new org.jsoup.parser.CharacterReader("StartTag");
        int int4 = characterReader2.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean5 = characterReader2.matchesDigit();
        java.lang.String str6 = characterReader2.toString();
        xmlTreeBuilder0.reader = characterReader2;
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int12 = parseErrorList11.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray13 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList14 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList14, parseErrorArray13);
        org.jsoup.parser.ParseError[] parseErrorArray16 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList17 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17, parseErrorArray16);
        boolean boolean19 = parseErrorList14.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17);
        org.jsoup.parser.ParseError[] parseErrorArray20 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList21 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21, parseErrorArray20);
        boolean boolean23 = parseErrorList17.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        parseErrorList21.clear();
        boolean boolean25 = parseErrorList11.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        xmlTreeBuilder0.initialiseParse("<Doctype>", "a", parseErrorList11);
        org.jsoup.parser.Token.Character character28 = new org.jsoup.parser.Token.Character("100: ");
        xmlTreeBuilder0.insert(character28);
        org.jsoup.parser.Token.StartTag startTag30 = new org.jsoup.parser.Token.StartTag();
        startTag30.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag33 = startTag30.asStartTag();
        org.jsoup.parser.Token.Tag tag35 = startTag33.name("");
        org.jsoup.parser.Token.StartTag startTag36 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes37 = startTag36.getAttributes();
        tag35.attributes = attributes37;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = xmlTreeBuilder0.process((org.jsoup.parser.Token) tag35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be false");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "StartTag" + "'", str6, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(startTag33);
        org.junit.Assert.assertNotNull(tag35);
        org.junit.Assert.assertNotNull(attributes37);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        java.lang.String str2 = org.jsoup.parser.Parser.unescapeEntities("\ufffd>", true);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ufffd>" + "'", str2, "\ufffd>");
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag("S");
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList(10, (int) '#');
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        org.jsoup.parser.ParseError[] parseErrorArray6 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList7 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7, parseErrorArray6);
        boolean boolean9 = parseErrorList4.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList7.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList7.stream();
        boolean boolean15 = parseErrorList2.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.ParseError[] parseErrorArray16 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList17 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17, parseErrorArray16);
        org.jsoup.parser.ParseError[] parseErrorArray19 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList20 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20, parseErrorArray19);
        boolean boolean22 = parseErrorList17.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20);
        java.lang.Object[] objArray23 = parseErrorList17.toArray();
        parseErrorList17.clear();
        org.jsoup.parser.ParseError[] parseErrorArray25 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList26 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26, parseErrorArray25);
        boolean boolean28 = parseErrorList17.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream29 = parseErrorList26.parallelStream();
        java.lang.Object[] objArray30 = parseErrorList26.toArray();
        org.jsoup.parser.ParseError parseError33 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        boolean boolean34 = parseErrorList26.add(parseError33);
        boolean boolean35 = parseErrorList2.add(parseError33);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder36 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int41 = parseErrorList40.getMaxSize();
        org.jsoup.nodes.Document document42 = htmlTreeBuilder36.parse("0: Doctype", "hi!", parseErrorList40);
        org.jsoup.parser.ParseError[] parseErrorArray43 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList44 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44, parseErrorArray43);
        org.jsoup.parser.ParseError[] parseErrorArray46 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList47 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList47, parseErrorArray46);
        boolean boolean49 = parseErrorList44.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList47);
        java.lang.Object[] objArray50 = parseErrorList44.toArray();
        parseErrorList44.clear();
        org.jsoup.parser.ParseError[] parseErrorArray52 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList53 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList53, parseErrorArray52);
        org.jsoup.parser.ParseError[] parseErrorArray55 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList56 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList56, parseErrorArray55);
        boolean boolean58 = parseErrorList53.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList56);
        java.lang.Object[] objArray59 = parseErrorList53.toArray();
        parseErrorList53.clear();
        org.jsoup.parser.ParseError[] parseErrorArray61 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList62 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList62, parseErrorArray61);
        boolean boolean64 = parseErrorList53.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList62);
        boolean boolean65 = parseErrorList44.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList62);
        java.lang.Object[] objArray66 = parseErrorList62.toArray();
        boolean boolean67 = parseErrorList40.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList62);
        org.jsoup.parser.ParseError[] parseErrorArray68 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList69 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList69, parseErrorArray68);
        org.jsoup.parser.ParseError[] parseErrorArray71 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList72 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList72, parseErrorArray71);
        boolean boolean74 = parseErrorList69.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList72);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor75 = parseErrorList72.listIterator();
        int int77 = parseErrorList72.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag81 = new org.jsoup.parser.Token.EndTag();
        char[] charArray84 = new char[] { '#', '#' };
        endTag81.appendAttributeValue(charArray84);
        endTag81.finaliseTag();
        boolean boolean87 = endTag81.isSelfClosing();
        org.jsoup.parser.Tag tag89 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean90 = tag89.isFormListed();
        org.jsoup.parser.Tag tag91 = tag89.setSelfClosing();
        boolean boolean92 = tag89.isKnownTag();
        java.lang.Object[] objArray94 = new java.lang.Object[] { boolean87, tag89, "Doctype" };
        org.jsoup.parser.ParseError parseError95 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray94);
        parseErrorList72.add(0, parseError95);
        boolean boolean97 = parseErrorList40.add(parseError95);
        int int98 = parseErrorList2.lastIndexOf((java.lang.Object) parseError95);
        int int99 = parseErrorList2.getMaxSize();
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(parseErrorArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(parseErrorStream29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNotNull(parseErrorArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(parseErrorArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(parseErrorArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(parseErrorArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(parseErrorArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(parseErrorItor75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(tag89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(tag91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(objArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray94), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray94), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 35 + "'", int99 == 35);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader1.advance();
        boolean boolean4 = characterReader1.matchConsume("<hi!>");
        boolean boolean6 = characterReader1.matchConsumeIgnoreCase(" EndTag");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.EndTag endTag10 = new org.jsoup.parser.Token.EndTag();
        char[] charArray13 = new char[] { '#', '#' };
        endTag10.appendAttributeValue(charArray13);
        tokeniser6.emit(charArray13);
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitDoctypePending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, #]");
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.DoctypeName;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.Token.Tag tag10 = tokeniser7.createTagPending(true);
        tokeniser7.createTempBuffer();
        tokeniser7.emitTagPending();
        tokeniser7.createDoctypePending();
        org.jsoup.parser.CharacterReader characterReader15 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean17 = characterReader15.matches("[100: ]");
        java.lang.String str19 = characterReader15.consumeTo('4');
        boolean boolean20 = characterReader15.matchesLetter();
        // The following exception was thrown during execution in test generation
        try {
            tokeniserState0.read(tokeniser7, characterReader15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: There is an unread token pending!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(tag10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "StartTag" + "'", str19, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        org.jsoup.parser.Token.StartTag startTag16 = new org.jsoup.parser.Token.StartTag("<!---->");
        startTag16.tagName = "Doctype";
        startTag16.finaliseTag();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element20 = xmlTreeBuilder0.insert(startTag16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.InCell;
        org.jsoup.parser.Token.StartTag startTag2 = new org.jsoup.parser.Token.StartTag("Doctype");
        org.jsoup.parser.Token.Tag tag4 = startTag2.name("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder5 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int10 = parseErrorList9.getMaxSize();
        org.jsoup.nodes.Document document11 = htmlTreeBuilder5.parse("0: Doctype", "hi!", parseErrorList9);
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream16 = parseErrorList15.stream();
        boolean boolean17 = parseErrorList15.canAddError();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder5.parse("EndTag", "hi!#", parseErrorList15);
        java.lang.String[] strArray26 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean27 = htmlTreeBuilder5.inScope("hi!#", strArray26);
        htmlTreeBuilder5.clearStackToTableContext();
        boolean boolean29 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) startTag2, htmlTreeBuilder5);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder30 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int35 = parseErrorList34.getMaxSize();
        org.jsoup.nodes.Document document36 = htmlTreeBuilder30.parse("0: Doctype", "hi!", parseErrorList34);
        htmlTreeBuilder30.newPendingTableCharacters();
        org.jsoup.nodes.Document document38 = htmlTreeBuilder30.getDocument();
        boolean boolean39 = htmlTreeBuilder5.isInActiveFormattingElements((org.jsoup.nodes.Element) document38);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(tag4);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(parseErrorStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        boolean boolean5 = tokenQueue1.matchChomp("<!---->");
        java.lang.String str6 = tokenQueue1.consumeCssIdentifier();
        java.lang.String str8 = tokenQueue1.chompToIgnoreCase("Doctype");
        java.lang.String str9 = tokenQueue1.consumeElementSelector();
        boolean boolean10 = tokenQueue1.consumeWhitespace();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "EndTag" + "'", str6, "EndTag");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.EndTag endTag10 = new org.jsoup.parser.Token.EndTag();
        char[] charArray13 = new char[] { '#', '#' };
        endTag10.appendAttributeValue(charArray13);
        tokeniser6.emit(charArray13);
        org.jsoup.parser.Token.Comment comment16 = tokeniser6.commentPending;
        tokeniser6.createDoctypePending();
        org.jsoup.parser.Token.Tag tag19 = tokeniser6.createTagPending(false);
        tag19.tagName = "EOF";
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, #]");
        org.junit.Assert.assertNull(comment16);
        org.junit.Assert.assertNotNull(tag19);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\000');
        characterReader1.mark();
        boolean boolean6 = characterReader1.containsIgnoreCase("a");
        boolean boolean8 = characterReader1.matches("\uffff");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        boolean boolean25 = parseErrorList18.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23);
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList23);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList23.iterator();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("[]", "Doctype", parseErrorList23);
        org.jsoup.parser.CharacterReader characterReader31 = null;
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream34 = parseErrorList33.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList33.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor36 = parseErrorList33.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int39 = parseErrorList38.getMaxSize();
        boolean boolean40 = parseErrorList33.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        org.jsoup.parser.Tokeniser tokeniser41 = new org.jsoup.parser.Tokeniser(characterReader31, parseErrorList38);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        boolean boolean45 = parseErrorList43.canAddError();
        boolean boolean46 = parseErrorList38.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        org.jsoup.nodes.Document document47 = htmlTreeBuilder0.parse("hi!", "<!---->", parseErrorList43);
        org.jsoup.parser.Tokeniser tokeniser48 = htmlTreeBuilder0.tokeniser;
        org.jsoup.parser.Parser parser49 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser51 = parser49.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document54 = parser49.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document57 = parser49.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document57);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder59 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList63 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int64 = parseErrorList63.getMaxSize();
        org.jsoup.nodes.Document document65 = htmlTreeBuilder59.parse("0: Doctype", "hi!", parseErrorList63);
        boolean boolean66 = htmlTreeBuilder59.framesetOk();
        org.jsoup.nodes.Document document69 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder59.setHeadElement((org.jsoup.nodes.Element) document69);
        org.jsoup.nodes.Document document73 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder59.setHeadElement((org.jsoup.nodes.Element) document73);
        boolean boolean75 = htmlTreeBuilder0.onStack((org.jsoup.nodes.Element) document73);
        org.jsoup.nodes.Document document76 = htmlTreeBuilder0.getDocument();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder77 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList81 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int82 = parseErrorList81.getMaxSize();
        org.jsoup.nodes.Document document83 = htmlTreeBuilder77.parse("0: Doctype", "hi!", parseErrorList81);
        htmlTreeBuilder77.resetInsertionMode();
        org.jsoup.nodes.Element element85 = htmlTreeBuilder77.currentElement();
        htmlTreeBuilder0.insert(element85);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertNotNull(parseErrorStream34);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNotNull(parseErrorItor36);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(tokeniser48);
        org.junit.Assert.assertNotNull(parser49);
        org.junit.Assert.assertNotNull(parser51);
        org.junit.Assert.assertNotNull(document54);
        org.junit.Assert.assertNotNull(document57);
        org.junit.Assert.assertNotNull(parseErrorList63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(document69);
        org.junit.Assert.assertNotNull(document73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(document76);
        org.junit.Assert.assertNotNull(parseErrorList81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(document83);
        org.junit.Assert.assertNotNull(element85);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder0.getPendingTableCharacters();
        boolean boolean15 = htmlTreeBuilder0.isFragmentParsing();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype12 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.TokeniserState tokeniserState14 = org.jsoup.parser.TokeniserState.Doctype;
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.advanceTransition((org.jsoup.parser.ITokeniserState) tokeniserState14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNull(doctype12);
        org.junit.Assert.assertNotNull(tokeniserState14);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("");
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.markInsertionMode();
        boolean boolean22 = htmlTreeBuilder0.inScope("StartTag");
        org.jsoup.parser.Parser parser23 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.parser.TreeBuilder treeBuilder24 = parser23.getTreeBuilder();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(treeBuilder24);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.listIterator();
        parseErrorList1.clear();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder5 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int10 = parseErrorList9.getMaxSize();
        org.jsoup.nodes.Document document11 = htmlTreeBuilder5.parse("0: Doctype", "hi!", parseErrorList9);
        boolean boolean12 = htmlTreeBuilder5.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState13 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder5.error(htmlTreeBuilderState13);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState15 = null;
        htmlTreeBuilder5.transition(htmlTreeBuilderState15);
        htmlTreeBuilder5.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader21 = null;
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream24 = parseErrorList23.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList23.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList23.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList28 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int29 = parseErrorList28.getMaxSize();
        boolean boolean30 = parseErrorList23.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList28);
        org.jsoup.parser.Tokeniser tokeniser31 = new org.jsoup.parser.Tokeniser(characterReader21, parseErrorList28);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList28.iterator();
        org.jsoup.nodes.Document document33 = htmlTreeBuilder5.parse("[]", "Doctype", parseErrorList28);
        org.jsoup.parser.CharacterReader characterReader36 = null;
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList38.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor41 = parseErrorList38.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int44 = parseErrorList43.getMaxSize();
        boolean boolean45 = parseErrorList38.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        org.jsoup.parser.Tokeniser tokeniser46 = new org.jsoup.parser.Tokeniser(characterReader36, parseErrorList43);
        org.jsoup.parser.ParseErrorList parseErrorList48 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream49 = parseErrorList48.stream();
        boolean boolean50 = parseErrorList48.canAddError();
        boolean boolean51 = parseErrorList43.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList48);
        org.jsoup.nodes.Document document52 = htmlTreeBuilder5.parse("hi!", "<!---->", parseErrorList48);
        org.jsoup.parser.Tokeniser tokeniser53 = htmlTreeBuilder5.tokeniser;
        org.jsoup.parser.Parser parser54 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser56 = parser54.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document59 = parser54.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document62 = parser54.parseInput("<hi!>", "[]");
        htmlTreeBuilder5.setHeadElement((org.jsoup.nodes.Element) document62);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState64 = htmlTreeBuilder5.originalState();
        boolean boolean65 = parseErrorList1.contains((java.lang.Object) htmlTreeBuilderState64);
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState13);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertNotNull(parseErrorStream24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
        org.junit.Assert.assertNotNull(parseErrorItor41);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(parseErrorList48);
        org.junit.Assert.assertNotNull(parseErrorStream49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertNotNull(tokeniser53);
        org.junit.Assert.assertNotNull(parser54);
        org.junit.Assert.assertNotNull(parser56);
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertNotNull(document62);
        org.junit.Assert.assertNull(htmlTreeBuilderState64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        boolean boolean1 = doctype0.isCharacter();
        boolean boolean2 = doctype0.isEndTag();
        boolean boolean3 = doctype0.isCharacter();
        java.lang.StringBuilder stringBuilder4 = doctype0.publicIdentifier;
        doctype0.forceQuirks = true;
        boolean boolean7 = doctype0.isDoctype();
        boolean boolean8 = doctype0.isComment();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(stringBuilder4);
        org.junit.Assert.assertEquals(stringBuilder4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        char[] charArray3 = new char[] { '#', '#' };
        endTag0.appendAttributeValue(charArray3);
        endTag0.finaliseTag();
        java.lang.Class<?> wildcardClass6 = endTag0.getClass();
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#, #]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype1 = doctype0.asDoctype();
        java.lang.StringBuilder stringBuilder2 = doctype1.name;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Comment comment3 = doctype1.asComment();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$Comment");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doctype1);
        org.junit.Assert.assertNotNull(stringBuilder2);
        org.junit.Assert.assertEquals(stringBuilder2.toString(), "");
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        boolean boolean12 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.Token.Character character13 = null;
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.insert(character13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token token1 = xmlTreeBuilder0.currentToken;
        org.jsoup.parser.CharacterReader characterReader2 = null;
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.iterator();
        org.jsoup.parser.Tokeniser tokeniser8 = new org.jsoup.parser.Tokeniser(characterReader2, parseErrorList4);
        org.jsoup.parser.Token.Tag tag9 = tokeniser8.tagPending;
        org.jsoup.parser.Token.Tag tag11 = tokeniser8.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype12 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype13 = doctype12.asDoctype();
        java.lang.String str14 = doctype12.tokenType();
        tokeniser8.emit((org.jsoup.parser.Token) doctype12);
        org.jsoup.parser.Token.Tag tag17 = tokeniser8.createTagPending(true);
        xmlTreeBuilder0.tokeniser = tokeniser8;
        tokeniser8.emit('a');
        org.jsoup.parser.TokeniserState tokeniserState21 = org.jsoup.parser.TokeniserState.AttributeValue_unquoted;
        // The following exception was thrown during execution in test generation
        try {
            tokeniser8.advanceTransition((org.jsoup.parser.ITokeniserState) tokeniserState21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(token1);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNull(tag9);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(doctype13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Doctype" + "'", str14, "Doctype");
        org.junit.Assert.assertNotNull(tag17);
        org.junit.Assert.assertNotNull(tokeniserState21);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        boolean boolean3 = tag1.formatAsBlock();
        boolean boolean4 = tag1.canContainBlock();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        boolean boolean3 = tag1.formatAsBlock();
        boolean boolean4 = tag1.preserveWhitespace();
        java.lang.String str5 = tag1.toString();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.EndTag endTag10 = new org.jsoup.parser.Token.EndTag();
        char[] charArray13 = new char[] { '#', '#' };
        endTag10.appendAttributeValue(charArray13);
        tokeniser6.emit(charArray13);
        org.jsoup.parser.Token.Comment comment16 = tokeniser6.commentPending;
        tokeniser6.createDoctypePending();
        org.jsoup.parser.Token.Tag tag19 = tokeniser6.createTagPending(false);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.StartTag startTag20 = tag19.asStartTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$StartTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, #]");
        org.junit.Assert.assertNull(comment16);
        org.junit.Assert.assertNotNull(tag19);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag3.formatAsBlock();
        boolean boolean5 = tag3.isFormListed();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        java.lang.String str12 = htmlTreeBuilder0.toString();
        org.jsoup.nodes.Element element14 = htmlTreeBuilder0.getFromStack("a");
        htmlTreeBuilder0.framesetOk(false);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder18 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        org.jsoup.parser.Token.Tag tag28 = tokeniser25.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype29 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype30 = doctype29.asDoctype();
        java.lang.String str31 = doctype29.tokenType();
        tokeniser25.emit((org.jsoup.parser.Token) doctype29);
        org.jsoup.parser.Token.Tag tag34 = tokeniser25.createTagPending(true);
        xmlTreeBuilder18.currentToken = tag34;
        org.jsoup.nodes.Attributes attributes36 = tag34.attributes;
        org.jsoup.parser.Token.StartTag startTag37 = new org.jsoup.parser.Token.StartTag("", attributes36);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.FormElement formElement39 = htmlTreeBuilder0.insertForm(startTag37, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be false");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(element14);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(doctype30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Doctype" + "'", str31, "Doctype");
        org.junit.Assert.assertNotNull(tag34);
        org.junit.Assert.assertNotNull(attributes36);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        boolean boolean13 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag15 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState16 = org.jsoup.parser.HtmlTreeBuilderState.InRow;
        boolean boolean17 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag15, htmlTreeBuilderState16);
        org.jsoup.nodes.Element element19 = htmlTreeBuilder0.insert("hi!");
        org.jsoup.parser.Token token20 = htmlTreeBuilder0.currentToken;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(token20);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        char char5 = tokenQueue1.peek();
        org.jsoup.parser.CharacterReader characterReader6 = null;
        org.jsoup.parser.ParseErrorList parseErrorList8 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream9 = parseErrorList8.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor10 = parseErrorList8.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList8.iterator();
        org.jsoup.parser.Tokeniser tokeniser12 = new org.jsoup.parser.Tokeniser(characterReader6, parseErrorList8);
        org.jsoup.parser.Token.Tag tag13 = tokeniser12.tagPending;
        org.jsoup.parser.Token.Tag tag15 = tokeniser12.createTagPending(true);
        java.lang.StringBuilder stringBuilder16 = tokeniser12.dataBuffer;
        org.jsoup.parser.Token.EndTag endTag17 = new org.jsoup.parser.Token.EndTag();
        char[] charArray20 = new char[] { '#', '#' };
        endTag17.appendAttributeValue(charArray20);
        tokeniser12.emit(charArray20);
        boolean boolean23 = tokenQueue1.matchesAny(charArray20);
        java.lang.String str24 = tokenQueue1.consumeCssIdentifier();
        boolean boolean26 = tokenQueue1.matches("100: ");
        java.lang.String str27 = tokenQueue1.consumeTagName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\000' + "'", char5 == '\000');
        org.junit.Assert.assertNotNull(parseErrorList8);
        org.junit.Assert.assertNotNull(parseErrorStream9);
        org.junit.Assert.assertNotNull(parseErrorItor10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertNull(tag13);
        org.junit.Assert.assertNotNull(tag15);
        org.junit.Assert.assertNull(stringBuilder16);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.Token token19 = htmlTreeBuilder0.currentToken;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Doctype doctype20 = token19.asDoctype();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$EOF cannot be cast to org.jsoup.parser.Token$Doctype");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(token19);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("<!---->");
        boolean boolean10 = tokeniser6.currentNodeInHtmlNS();
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitTagPending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        boolean boolean8 = tokenQueue1.matchesCS("StartTag");
        char char9 = tokenQueue1.peek();
        boolean boolean10 = tokenQueue1.matchesStartTag();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + '\000' + "'", char9 == '\000');
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.Token.StartTag startTag17 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType18 = startTag17.type;
        java.lang.String str19 = startTag17.toString();
        tokeniser6.emit((org.jsoup.parser.Token) startTag17);
        org.jsoup.parser.ITokeniserState iTokeniserState21 = tokeniser6.getState();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + tokenType18 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType18.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<hi!>" + "'", str19, "<hi!>");
        org.junit.Assert.assertNotNull(iTokeniserState21);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Comment comment12 = tokeniser6.commentPending;
        org.jsoup.parser.TokenQueue tokenQueue14 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean15 = tokenQueue14.isEmpty();
        char[] charArray17 = new char[] { '4' };
        boolean boolean18 = tokenQueue14.matchesAny(charArray17);
        tokeniser6.emit(charArray17);
        org.jsoup.parser.TokeniserState tokeniserState20 = org.jsoup.parser.TokeniserState.DoctypeSystemIdentifier_singleQuoted;
        tokeniser6.error((org.jsoup.parser.ITokeniserState) tokeniserState20);
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitDoctypePending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNotNull(comment12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(tokeniserState20);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        java.lang.String[] strArray21 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean22 = htmlTreeBuilder0.inScope("hi!#", strArray21);
        org.jsoup.nodes.Element element23 = htmlTreeBuilder0.currentElement();
        boolean boolean25 = htmlTreeBuilder0.inScope("hi!#");
        htmlTreeBuilder0.popStackToBefore("Doctype");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("EOF");
        boolean boolean2 = tag1.isInline();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        boolean boolean25 = parseErrorList18.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23);
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList23);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList23.iterator();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("[]", "Doctype", parseErrorList23);
        org.jsoup.parser.CharacterReader characterReader31 = null;
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream34 = parseErrorList33.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList33.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor36 = parseErrorList33.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int39 = parseErrorList38.getMaxSize();
        boolean boolean40 = parseErrorList33.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        org.jsoup.parser.Tokeniser tokeniser41 = new org.jsoup.parser.Tokeniser(characterReader31, parseErrorList38);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        boolean boolean45 = parseErrorList43.canAddError();
        boolean boolean46 = parseErrorList38.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        org.jsoup.nodes.Document document47 = htmlTreeBuilder0.parse("hi!", "<!---->", parseErrorList43);
        org.jsoup.parser.Tokeniser tokeniser48 = htmlTreeBuilder0.tokeniser;
        org.jsoup.parser.Parser parser49 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser51 = parser49.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document54 = parser49.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document57 = parser49.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document57);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState59 = htmlTreeBuilder0.originalState();
        org.jsoup.parser.ParseErrorList parseErrorList60 = htmlTreeBuilder0.errors;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.parser.ParseError> parseErrorList63 = parseErrorList60.subList((int) (byte) 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertNotNull(parseErrorStream34);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNotNull(parseErrorItor36);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(tokeniser48);
        org.junit.Assert.assertNotNull(parser49);
        org.junit.Assert.assertNotNull(parser51);
        org.junit.Assert.assertNotNull(document54);
        org.junit.Assert.assertNotNull(document57);
        org.junit.Assert.assertNull(htmlTreeBuilderState59);
        org.junit.Assert.assertNotNull(parseErrorList60);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        boolean boolean6 = tokenQueue1.matchChomp("hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        endTag11.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilderState10.process((org.jsoup.parser.Token) endTag11, htmlTreeBuilder13);
        org.jsoup.nodes.FormElement formElement21 = htmlTreeBuilder13.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder22 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int27 = parseErrorList26.getMaxSize();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder22.parse("0: Doctype", "hi!", parseErrorList26);
        boolean boolean29 = htmlTreeBuilder22.framesetOk();
        org.jsoup.parser.Parser parser30 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser32 = parser30.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document35 = parser30.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document38 = parser30.parseInput("<hi!>", "[]");
        htmlTreeBuilder22.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document38);
        boolean boolean40 = htmlTreeBuilder22.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder41 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList46 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList48 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream49 = parseErrorList48.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor50 = parseErrorList48.iterator();
        boolean boolean51 = parseErrorList46.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList48);
        xmlTreeBuilder41.initialiseParse("<!---->", "hi!", parseErrorList46);
        org.jsoup.parser.ParseErrorList parseErrorList56 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document57 = xmlTreeBuilder41.parse("", "[]", parseErrorList56);
        boolean boolean58 = htmlTreeBuilder22.isInActiveFormattingElements((org.jsoup.nodes.Element) document57);
        boolean boolean59 = htmlTreeBuilder13.isInActiveFormattingElements((org.jsoup.nodes.Element) document57);
        java.util.List<org.jsoup.parser.Token.Character> characterList60 = htmlTreeBuilder13.getPendingTableCharacters();
        org.jsoup.nodes.Element element61 = htmlTreeBuilder13.getHeadElement();
        org.jsoup.parser.ParseErrorList parseErrorList64 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream65 = parseErrorList64.stream();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor66 = parseErrorList64.listIterator();
        parseErrorList64.clear();
        parseErrorList64.ensureCapacity(1);
        java.util.List<org.jsoup.nodes.Node> nodeList70 = htmlTreeBuilder0.parseFragment("hi!#", element61, "", parseErrorList64);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream71 = parseErrorList64.parallelStream();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState10);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(formElement21);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parser30);
        org.junit.Assert.assertNotNull(parser32);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList48);
        org.junit.Assert.assertNotNull(parseErrorStream49);
        org.junit.Assert.assertNotNull(parseErrorItor50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(parseErrorList56);
        org.junit.Assert.assertNotNull(document57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(characterList60);
        org.junit.Assert.assertNotNull(element61);
        org.junit.Assert.assertNotNull(parseErrorList64);
        org.junit.Assert.assertNotNull(parseErrorStream65);
        org.junit.Assert.assertNotNull(parseErrorItor66);
        org.junit.Assert.assertNotNull(nodeList70);
        org.junit.Assert.assertNotNull(parseErrorStream71);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Element element8 = htmlTreeBuilder0.currentElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        boolean boolean16 = htmlTreeBuilder9.framesetOk();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder9.setHeadElement((org.jsoup.nodes.Element) document19);
        org.jsoup.parser.Token.StartTag startTag22 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType23 = startTag22.type;
        startTag22.appendTagName('#');
        boolean boolean26 = htmlTreeBuilder9.process((org.jsoup.parser.Token) startTag22);
        htmlTreeBuilder0.currentToken = startTag22;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + tokenType23 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType23.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        boolean boolean24 = parseErrorList21.isEmpty();
        parseErrorList21.ensureCapacity((int) '\000');
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        char char6 = tokenQueue1.peek();
        boolean boolean8 = tokenQueue1.matchChomp("<hi!#>");
        boolean boolean9 = tokenQueue1.consumeWhitespace();
        boolean boolean10 = tokenQueue1.matchesWhitespace();
        java.lang.String str12 = tokenQueue1.consumeTo("0: []");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\000' + "'", char6 == '\000');
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        java.lang.String[] strArray21 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean22 = htmlTreeBuilder0.inScope("hi!#", strArray21);
        org.jsoup.parser.ParseErrorList parseErrorList27 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("0: Doctype", "", parseErrorList27);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder29 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document30 = xmlTreeBuilder29.doc;
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int35 = parseErrorList34.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray36 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList37 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList37, parseErrorArray36);
        org.jsoup.parser.ParseError[] parseErrorArray39 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList40 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40, parseErrorArray39);
        boolean boolean42 = parseErrorList37.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40);
        org.jsoup.parser.ParseError[] parseErrorArray43 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList44 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44, parseErrorArray43);
        boolean boolean46 = parseErrorList40.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        parseErrorList44.clear();
        boolean boolean48 = parseErrorList34.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList34.iterator();
        org.jsoup.nodes.Document document50 = xmlTreeBuilder29.parse("<hi!>", "0: []", parseErrorList34);
        htmlTreeBuilder0.push((org.jsoup.nodes.Element) document50);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder52 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList56 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int57 = parseErrorList56.getMaxSize();
        org.jsoup.nodes.Document document58 = htmlTreeBuilder52.parse("0: Doctype", "hi!", parseErrorList56);
        htmlTreeBuilder52.resetInsertionMode();
        htmlTreeBuilder52.popStackToBefore("EndTag");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState62 = htmlTreeBuilder52.state();
        htmlTreeBuilder0.transition(htmlTreeBuilderState62);
        boolean boolean65 = htmlTreeBuilder0.inTableScope("S");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNull(document30);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parseErrorArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(parseErrorArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertNotNull(parseErrorList56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(document58);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.parser.TokenQueue tokenQueue38 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean39 = tokenQueue38.isEmpty();
        boolean boolean40 = tokenQueue38.consumeWhitespace();
        java.lang.String str41 = tokenQueue38.consumeWord();
        boolean boolean42 = tokenQueue38.matchesWhitespace();
        java.lang.String[] strArray47 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str48 = tokenQueue38.consumeToAny(strArray47);
        boolean boolean49 = htmlTreeBuilder0.inScope(strArray47);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList50 = htmlTreeBuilder0.getStack();
        java.lang.String str51 = htmlTreeBuilder0.toString();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "EndTag" + "'", str41, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(elementList50);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Comment comment12 = tokeniser6.commentPending;
        org.jsoup.parser.TokenQueue tokenQueue14 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean15 = tokenQueue14.isEmpty();
        char[] charArray17 = new char[] { '4' };
        boolean boolean18 = tokenQueue14.matchesAny(charArray17);
        tokeniser6.emit(charArray17);
        tokeniser6.createCommentPending();
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitDoctypePending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNotNull(comment12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        tokenQueue1.advance();
        boolean boolean6 = tokenQueue1.isEmpty();
        java.lang.String str7 = tokenQueue1.consumeElementSelector();
        boolean boolean8 = tokenQueue1.matchesWord();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\000');
        characterReader1.mark();
        boolean boolean6 = characterReader1.containsIgnoreCase("a");
        boolean boolean7 = characterReader1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int2 = parseErrorList1.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        org.jsoup.parser.ParseError[] parseErrorArray6 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList7 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7, parseErrorArray6);
        boolean boolean9 = parseErrorList4.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList7.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        parseErrorList11.clear();
        boolean boolean15 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList1.iterator();
        org.jsoup.parser.CharacterReader characterReader17 = null;
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream20 = parseErrorList19.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList19.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor22 = parseErrorList19.iterator();
        org.jsoup.parser.Tokeniser tokeniser23 = new org.jsoup.parser.Tokeniser(characterReader17, parseErrorList19);
        tokeniser23.createTempBuffer();
        boolean boolean25 = parseErrorList1.contains((java.lang.Object) tokeniser23);
        org.jsoup.parser.Token.Comment comment26 = tokeniser23.commentPending;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = tokeniser23.appropriateEndTagName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(parseErrorArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertNotNull(parseErrorStream20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorItor22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(comment26);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\000');
        characterReader1.mark();
        boolean boolean6 = characterReader1.containsIgnoreCase("a");
        java.lang.String str7 = characterReader1.consumeAsString();
        java.lang.String str8 = characterReader1.consumeLetterSequence();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "S" + "'", str7, "S");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tartTag" + "'", str8, "tartTag");
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.jsoup.parser.Token.Comment comment0 = new org.jsoup.parser.Token.Comment();
        java.lang.String str1 = comment0.toString();
        java.lang.StringBuilder stringBuilder2 = comment0.data;
        boolean boolean3 = comment0.isEndTag();
        boolean boolean4 = comment0.isComment();
        java.lang.String str5 = comment0.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.EndTag endTag6 = comment0.asEndTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$EndTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "<!---->" + "'", str1, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder2);
        org.junit.Assert.assertEquals(stringBuilder2.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        boolean boolean13 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag15 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState16 = org.jsoup.parser.HtmlTreeBuilderState.InRow;
        boolean boolean17 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag15, htmlTreeBuilderState16);
        boolean boolean18 = htmlTreeBuilder0.framesetOk();
        htmlTreeBuilder0.resetInsertionMode();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.jsoup.parser.ParseError parseError2 = new org.jsoup.parser.ParseError((int) '\ufffd', "\ufffd>");
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList9 = xmlTreeBuilder0.stack;
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        boolean boolean21 = parseErrorList14.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList19);
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        boolean boolean26 = parseErrorList24.canAddError();
        boolean boolean27 = parseErrorList19.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
        java.util.List<org.jsoup.nodes.Node> nodeList28 = xmlTreeBuilder0.parseFragment("StartTag", "<!---->", parseErrorList24);
        org.jsoup.parser.ParseError[] parseErrorArray29 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList30 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30, parseErrorArray29);
        org.jsoup.parser.ParseError[] parseErrorArray32 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList33 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33, parseErrorArray32);
        boolean boolean35 = parseErrorList30.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33);
        boolean boolean36 = parseErrorList24.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream37 = parseErrorList30.parallelStream();
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(elementList9);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertNotNull(parseErrorArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(parseErrorArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parseErrorStream37);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        boolean boolean15 = parseErrorList10.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        java.lang.Object[] objArray16 = parseErrorList10.toArray();
        parseErrorList10.clear();
        org.jsoup.parser.ParseError[] parseErrorArray18 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList19 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19, parseErrorArray18);
        boolean boolean21 = parseErrorList10.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        boolean boolean22 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        java.lang.Object[] objArray23 = parseErrorList19.toArray();
        parseErrorList19.ensureCapacity((int) '\000');
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.jsoup.parser.ParseError parseError2 = new org.jsoup.parser.ParseError((int) (byte) 10, "");
        java.lang.String str3 = parseError2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "10: " + "'", str3, "10: ");
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.Token.Doctype doctype9 = new org.jsoup.parser.Token.Doctype();
        java.lang.StringBuilder stringBuilder10 = doctype9.publicIdentifier;
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(doctype9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(stringBuilder10);
        org.junit.Assert.assertEquals(stringBuilder10.toString(), "");
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        startTag0.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag4 = startTag0.name("hi!#");
        boolean boolean5 = startTag0.isStartTag();
        startTag0.appendTagName('a');
        startTag0.appendAttributeValue("-1: []");
        org.junit.Assert.assertNotNull(tag4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("t");
        startTag1.appendAttributeName("\ufffd>");
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        java.lang.StringBuilder stringBuilder1 = doctype0.systemIdentifier;
        java.lang.String str2 = doctype0.tokenType();
        org.jsoup.parser.Token.TokenType tokenType3 = doctype0.type;
        org.junit.Assert.assertNotNull(stringBuilder1);
        org.junit.Assert.assertEquals(stringBuilder1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Doctype" + "'", str2, "Doctype");
        org.junit.Assert.assertTrue("'" + tokenType3 + "' != '" + org.jsoup.parser.Token.TokenType.Doctype + "'", tokenType3.equals(org.jsoup.parser.Token.TokenType.Doctype));
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList(0, (int) (byte) 0);
        htmlTreeBuilder0.initialiseParse("<hi!>", "hi!#", parseErrorList5);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder7 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int12 = parseErrorList11.getMaxSize();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder7.parse("0: Doctype", "hi!", parseErrorList11);
        boolean boolean14 = htmlTreeBuilder7.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState15 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder7.error(htmlTreeBuilderState15);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState17 = null;
        htmlTreeBuilder7.transition(htmlTreeBuilderState17);
        htmlTreeBuilder7.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader23 = null;
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream26 = parseErrorList25.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList25.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList25.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int31 = parseErrorList30.getMaxSize();
        boolean boolean32 = parseErrorList25.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        org.jsoup.parser.Tokeniser tokeniser33 = new org.jsoup.parser.Tokeniser(characterReader23, parseErrorList30);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor34 = parseErrorList30.iterator();
        org.jsoup.nodes.Document document35 = htmlTreeBuilder7.parse("[]", "Doctype", parseErrorList30);
        org.jsoup.parser.CharacterReader characterReader38 = null;
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream41 = parseErrorList40.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList40.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList40.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList45 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int46 = parseErrorList45.getMaxSize();
        boolean boolean47 = parseErrorList40.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList45);
        org.jsoup.parser.Tokeniser tokeniser48 = new org.jsoup.parser.Tokeniser(characterReader38, parseErrorList45);
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream51 = parseErrorList50.stream();
        boolean boolean52 = parseErrorList50.canAddError();
        boolean boolean53 = parseErrorList45.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList50);
        org.jsoup.nodes.Document document54 = htmlTreeBuilder7.parse("hi!", "<!---->", parseErrorList50);
        org.jsoup.parser.Tokeniser tokeniser55 = htmlTreeBuilder7.tokeniser;
        org.jsoup.parser.Parser parser56 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser58 = parser56.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document61 = parser56.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document64 = parser56.parseInput("<hi!>", "[]");
        htmlTreeBuilder7.setHeadElement((org.jsoup.nodes.Element) document64);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder66 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList70 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int71 = parseErrorList70.getMaxSize();
        org.jsoup.nodes.Document document72 = htmlTreeBuilder66.parse("0: Doctype", "hi!", parseErrorList70);
        org.jsoup.parser.ParseErrorList parseErrorList76 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream77 = parseErrorList76.stream();
        boolean boolean78 = parseErrorList76.canAddError();
        org.jsoup.nodes.Document document79 = htmlTreeBuilder66.parse("EndTag", "hi!#", parseErrorList76);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState80 = null;
        htmlTreeBuilder66.transition(htmlTreeBuilderState80);
        org.jsoup.parser.Token token82 = htmlTreeBuilder66.currentToken;
        org.jsoup.nodes.Element element84 = htmlTreeBuilder66.insert("[100: ]");
        boolean boolean85 = htmlTreeBuilder7.isInActiveFormattingElements(element84);
        boolean boolean86 = parseErrorList5.contains((java.lang.Object) element84);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState15);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertNotNull(parseErrorStream26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(parseErrorItor34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertNotNull(parseErrorStream41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNotNull(parseErrorList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertNotNull(parseErrorStream51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(document54);
        org.junit.Assert.assertNotNull(tokeniser55);
        org.junit.Assert.assertNotNull(parser56);
        org.junit.Assert.assertNotNull(parser58);
        org.junit.Assert.assertNotNull(document61);
        org.junit.Assert.assertNotNull(document64);
        org.junit.Assert.assertNotNull(parseErrorList70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(document72);
        org.junit.Assert.assertNotNull(parseErrorList76);
        org.junit.Assert.assertNotNull(parseErrorStream77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(document79);
        org.junit.Assert.assertNotNull(token82);
        org.junit.Assert.assertNotNull(element84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.newPendingTableCharacters();
        boolean boolean9 = htmlTreeBuilder0.inTableScope("");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        endTag11.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilderState10.process((org.jsoup.parser.Token) endTag11, htmlTreeBuilder13);
        htmlTreeBuilder13.clearStackToTableContext();
        htmlTreeBuilder13.generateImpliedEndTags("hi!#");
        java.util.List<org.jsoup.parser.Token.Character> characterList24 = htmlTreeBuilder13.getPendingTableCharacters();
        htmlTreeBuilder0.setPendingTableCharacters(characterList24);
        org.jsoup.parser.ParseErrorList parseErrorList26 = null;
        htmlTreeBuilder0.errors = parseErrorList26;
        org.jsoup.parser.CharacterReader characterReader28 = null;
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream31 = parseErrorList30.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList30.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor33 = parseErrorList30.iterator();
        org.jsoup.parser.Tokeniser tokeniser34 = new org.jsoup.parser.Tokeniser(characterReader28, parseErrorList30);
        org.jsoup.parser.Token.Tag tag35 = tokeniser34.tagPending;
        org.jsoup.parser.Token.Tag tag37 = tokeniser34.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype38 = new org.jsoup.parser.Token.Doctype();
        boolean boolean39 = doctype38.isCharacter();
        boolean boolean40 = doctype38.isEndTag();
        boolean boolean41 = doctype38.isCharacter();
        tokeniser34.emit((org.jsoup.parser.Token) doctype38);
        java.lang.String str43 = doctype38.getSystemIdentifier();
        htmlTreeBuilder0.currentToken = doctype38;
        java.lang.String str45 = doctype38.getPublicIdentifier();
        java.lang.String str46 = doctype38.getName();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState10);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(characterList24);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertNotNull(parseErrorStream31);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertNotNull(parseErrorItor33);
        org.junit.Assert.assertNull(tag35);
        org.junit.Assert.assertNotNull(tag37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking((int) (byte) 0);
        org.jsoup.parser.Token.EndTag endTag8 = new org.jsoup.parser.Token.EndTag();
        char[] charArray11 = new char[] { '#', '#' };
        endTag8.appendAttributeValue(charArray11);
        endTag8.finaliseTag();
        boolean boolean14 = endTag8.isSelfClosing();
        org.jsoup.parser.Tag tag16 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean17 = tag16.isFormListed();
        org.jsoup.parser.Tag tag18 = tag16.setSelfClosing();
        boolean boolean19 = tag16.isKnownTag();
        java.lang.Object[] objArray21 = new java.lang.Object[] { boolean14, tag16, "Doctype" };
        org.jsoup.parser.ParseError parseError22 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray21);
        org.jsoup.parser.ParseError parseError23 = new org.jsoup.parser.ParseError((int) (short) -1, "[]", objArray21);
        org.jsoup.parser.ParseError parseError24 = new org.jsoup.parser.ParseError((int) (byte) 10, "", objArray21);
        boolean boolean25 = parseErrorList1.add(parseError24);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList1.iterator();
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(tag16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(tag18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(parseErrorItor26);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.markInsertionMode();
        boolean boolean22 = htmlTreeBuilder0.inScope("StartTag");
        org.jsoup.parser.Parser parser23 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList24 = htmlTreeBuilder0.stack;
        org.jsoup.nodes.Element element25 = htmlTreeBuilder0.pop();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder26 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int31 = parseErrorList30.getMaxSize();
        org.jsoup.nodes.Document document32 = htmlTreeBuilder26.parse("0: Doctype", "hi!", parseErrorList30);
        boolean boolean33 = htmlTreeBuilder26.framesetOk();
        org.jsoup.parser.Parser parser34 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser36 = parser34.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document39 = parser34.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document42 = parser34.parseInput("<hi!>", "[]");
        htmlTreeBuilder26.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document42);
        org.jsoup.parser.Token.StartTag startTag45 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes46 = startTag45.getAttributes();
        org.jsoup.parser.Token.StartTag startTag47 = new org.jsoup.parser.Token.StartTag("<!---->", attributes46);
        org.jsoup.nodes.Element element48 = htmlTreeBuilder26.insert(startTag47);
        boolean boolean49 = htmlTreeBuilder0.isSpecial(element48);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(elementList24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(parser34);
        org.junit.Assert.assertNotNull(parser36);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNotNull(attributes46);
        org.junit.Assert.assertNotNull(element48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        boolean boolean25 = parseErrorList18.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23);
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList23);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList23.iterator();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("[]", "Doctype", parseErrorList23);
        org.jsoup.parser.CharacterReader characterReader31 = null;
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream34 = parseErrorList33.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList33.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor36 = parseErrorList33.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int39 = parseErrorList38.getMaxSize();
        boolean boolean40 = parseErrorList33.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        org.jsoup.parser.Tokeniser tokeniser41 = new org.jsoup.parser.Tokeniser(characterReader31, parseErrorList38);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        boolean boolean45 = parseErrorList43.canAddError();
        boolean boolean46 = parseErrorList38.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        org.jsoup.nodes.Document document47 = htmlTreeBuilder0.parse("hi!", "<!---->", parseErrorList43);
        boolean boolean48 = parseErrorList43.canAddError();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertNotNull(parseErrorStream34);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNotNull(parseErrorItor36);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.parser.Token token16 = htmlTreeBuilder0.currentToken;
        java.lang.String[] strArray23 = new java.lang.String[] { "Doctype", "</hi![]>", "<!---->", "100: ", "EOF", "a" };
        boolean boolean24 = htmlTreeBuilder0.inScope(strArray23);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder25 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList29 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int30 = parseErrorList29.getMaxSize();
        org.jsoup.nodes.Document document31 = htmlTreeBuilder25.parse("0: Doctype", "hi!", parseErrorList29);
        boolean boolean32 = htmlTreeBuilder25.framesetOk();
        org.jsoup.nodes.Document document35 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder25.setHeadElement((org.jsoup.nodes.Element) document35);
        org.jsoup.nodes.Document document39 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder25.setHeadElement((org.jsoup.nodes.Element) document39);
        htmlTreeBuilder25.setFosterInserts(false);
        htmlTreeBuilder25.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder44 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList48 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int49 = parseErrorList48.getMaxSize();
        org.jsoup.nodes.Document document50 = htmlTreeBuilder44.parse("0: Doctype", "hi!", parseErrorList48);
        boolean boolean51 = htmlTreeBuilder44.framesetOk();
        org.jsoup.parser.Parser parser52 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser54 = parser52.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document57 = parser52.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document60 = parser52.parseInput("<hi!>", "[]");
        htmlTreeBuilder44.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document60);
        java.lang.String[] strArray62 = new java.lang.String[] {};
        boolean boolean63 = htmlTreeBuilder44.inScope(strArray62);
        htmlTreeBuilder44.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder65 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList69 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int70 = parseErrorList69.getMaxSize();
        org.jsoup.nodes.Document document71 = htmlTreeBuilder65.parse("0: Doctype", "hi!", parseErrorList69);
        htmlTreeBuilder44.setHeadElement((org.jsoup.nodes.Element) document71);
        htmlTreeBuilder25.pushActiveFormattingElements((org.jsoup.nodes.Element) document71);
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document71);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList75 = htmlTreeBuilder0.stack;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(token16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(parseErrorList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(parseErrorList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(parser52);
        org.junit.Assert.assertNotNull(parser54);
        org.junit.Assert.assertNotNull(document57);
        org.junit.Assert.assertNotNull(document60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(parseErrorList69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(document71);
        org.junit.Assert.assertNotNull(elementList75);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        htmlTreeBuilder3.clearStackToTableContext();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder12.setHeadElement((org.jsoup.nodes.Element) document22);
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder12.setHeadElement((org.jsoup.nodes.Element) document26);
        htmlTreeBuilder12.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder30 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int35 = parseErrorList34.getMaxSize();
        org.jsoup.nodes.Document document36 = htmlTreeBuilder30.parse("0: Doctype", "hi!", parseErrorList34);
        boolean boolean37 = htmlTreeBuilder30.framesetOk();
        org.jsoup.nodes.Document document40 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder30.setHeadElement((org.jsoup.nodes.Element) document40);
        org.jsoup.nodes.Document document44 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder30.setHeadElement((org.jsoup.nodes.Element) document44);
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document44);
        htmlTreeBuilder3.push((org.jsoup.nodes.Element) document44);
        org.jsoup.nodes.Element element48 = null;
        boolean boolean49 = htmlTreeBuilder3.isInActiveFormattingElements(element48);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        java.lang.String str2 = characterReader1.consumeToEnd();
        int int4 = characterReader1.nextIndexOf('a');
        java.lang.String str5 = characterReader1.consumeDigitSequence();
        char char6 = characterReader1.current();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = characterReader1.consumeAsString();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 9");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "StartTag" + "'", str2, "StartTag");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\uffff' + "'", char6 == '\uffff');
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("t", "\uffff");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.StartTag startTag13 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType14 = startTag13.type;
        startTag13.appendTagName('#');
        boolean boolean17 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag13);
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader19.advance();
        boolean boolean22 = characterReader19.matchConsume("<hi!>");
        htmlTreeBuilder0.reader = characterReader19;
        boolean boolean25 = characterReader19.matchConsume("[100: ]");
        characterReader19.unconsume();
        java.lang.String str27 = characterReader19.consumeLetterThenDigitSequence();
        boolean boolean29 = characterReader19.matches("</hi![]>");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertTrue("'" + tokenType14 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType14.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "StartTag" + "'", str27, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag3.preserveWhitespace();
        java.lang.Object obj5 = null;
        boolean boolean6 = tag3.equals(obj5);
        boolean boolean7 = tag3.preserveWhitespace();
        boolean boolean8 = tag3.isInline();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.EndTag endTag7 = new org.jsoup.parser.Token.EndTag();
        char[] charArray10 = new char[] { '#', '#' };
        endTag7.appendAttributeValue(charArray10);
        endTag7.appendAttributeValue(' ');
        char[] charArray15 = new char[] { '4' };
        endTag7.appendAttributeValue(charArray15);
        tokeniser6.emit(charArray15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = tokeniser6.unescapeEntities(false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4]");
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        java.lang.String str20 = htmlTreeBuilder0.toString();
        org.jsoup.parser.Tokeniser tokeniser21 = htmlTreeBuilder0.tokeniser;
        org.jsoup.parser.Token.StartTag startTag23 = new org.jsoup.parser.Token.StartTag("hi!");
        boolean boolean24 = startTag23.isCharacter();
        org.jsoup.parser.Token.TokenType tokenType25 = startTag23.type;
        tokeniser21.tagPending = startTag23;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(tokeniser21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + tokenType25 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType25.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.resetInsertionMode();
        org.jsoup.parser.Tokeniser tokeniser8 = htmlTreeBuilder0.tokeniser;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        boolean boolean16 = htmlTreeBuilder9.framesetOk();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder9.setHeadElement((org.jsoup.nodes.Element) document19);
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder9.setHeadElement((org.jsoup.nodes.Element) document23);
        htmlTreeBuilder9.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder27 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        org.jsoup.nodes.Document document33 = htmlTreeBuilder27.parse("0: Doctype", "hi!", parseErrorList31);
        boolean boolean34 = htmlTreeBuilder27.framesetOk();
        org.jsoup.nodes.Document document37 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder27.setHeadElement((org.jsoup.nodes.Element) document37);
        org.jsoup.nodes.Document document41 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder27.setHeadElement((org.jsoup.nodes.Element) document41);
        htmlTreeBuilder9.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document41);
        org.jsoup.parser.CharacterReader characterReader44 = htmlTreeBuilder9.reader;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder45 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int50 = parseErrorList49.getMaxSize();
        org.jsoup.nodes.Document document51 = htmlTreeBuilder45.parse("0: Doctype", "hi!", parseErrorList49);
        boolean boolean52 = htmlTreeBuilder45.framesetOk();
        org.jsoup.parser.Token token53 = htmlTreeBuilder45.currentToken;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState54 = org.jsoup.parser.HtmlTreeBuilderState.InTable;
        htmlTreeBuilder45.error(htmlTreeBuilderState54);
        org.jsoup.nodes.Document document59 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        java.util.List<org.jsoup.nodes.Node> nodeList61 = org.jsoup.parser.Parser.parseFragment("EndTag", (org.jsoup.nodes.Element) document59, "<hi!>");
        boolean boolean62 = htmlTreeBuilder45.isInActiveFormattingElements((org.jsoup.nodes.Element) document59);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder63 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList67 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int68 = parseErrorList67.getMaxSize();
        org.jsoup.nodes.Document document69 = htmlTreeBuilder63.parse("0: Doctype", "hi!", parseErrorList67);
        boolean boolean70 = htmlTreeBuilder63.framesetOk();
        org.jsoup.parser.Parser parser71 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser73 = parser71.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document76 = parser71.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document79 = parser71.parseInput("<hi!>", "[]");
        htmlTreeBuilder63.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document79);
        org.jsoup.parser.Token.Doctype doctype81 = new org.jsoup.parser.Token.Doctype();
        boolean boolean82 = doctype81.isCharacter();
        boolean boolean83 = doctype81.isEndTag();
        htmlTreeBuilder63.currentToken = doctype81;
        org.jsoup.nodes.Element element85 = htmlTreeBuilder63.pop();
        htmlTreeBuilder45.maybeSetBaseUri(element85);
        boolean boolean87 = htmlTreeBuilder9.isInActiveFormattingElements(element85);
        htmlTreeBuilder0.push(element85);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(tokeniser8);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(characterReader44);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(document51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(token53);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState54);
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertNotNull(nodeList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(parseErrorList67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(document69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(parser71);
        org.junit.Assert.assertNotNull(parser73);
        org.junit.Assert.assertNotNull(document76);
        org.junit.Assert.assertNotNull(document79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(element85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        boolean boolean3 = tag1.isFormSubmittable();
        boolean boolean4 = tag1.isEmpty();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        boolean boolean19 = doctype18.isCharacter();
        boolean boolean20 = doctype18.isEndTag();
        htmlTreeBuilder0.currentToken = doctype18;
        java.lang.StringBuilder stringBuilder22 = doctype18.name;
        java.lang.String str23 = doctype18.getName();
        java.lang.String str24 = doctype18.getName();
        doctype18.forceQuirks = false;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(stringBuilder22);
        org.junit.Assert.assertEquals(stringBuilder22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        boolean boolean16 = htmlTreeBuilder9.framesetOk();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder9.setHeadElement((org.jsoup.nodes.Element) document19);
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder9.setHeadElement((org.jsoup.nodes.Element) document23);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder26 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int31 = parseErrorList30.getMaxSize();
        org.jsoup.nodes.Document document32 = htmlTreeBuilder26.parse("0: Doctype", "hi!", parseErrorList30);
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream37 = parseErrorList36.stream();
        boolean boolean38 = parseErrorList36.canAddError();
        org.jsoup.nodes.Document document39 = htmlTreeBuilder26.parse("EndTag", "hi!#", parseErrorList36);
        java.lang.String[] strArray47 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean48 = htmlTreeBuilder26.inScope("hi!#", strArray47);
        boolean boolean49 = htmlTreeBuilder9.inScope("hi!#", strArray47);
        htmlTreeBuilder0.popStackToClose(strArray47);
        org.jsoup.nodes.Element element52 = htmlTreeBuilder0.getActiveFormattingElement("<Doctype>");
        org.jsoup.parser.Token.StartTag startTag54 = new org.jsoup.parser.Token.StartTag("hi!");
        boolean boolean55 = startTag54.isCharacter();
        startTag54.selfClosing = false;
        org.jsoup.parser.Token.StartTag startTag58 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes59 = startTag58.getAttributes();
        startTag54.attributes = attributes59;
        java.lang.String str61 = startTag54.tokenType();
        org.jsoup.nodes.Element element62 = htmlTreeBuilder0.insert(startTag54);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Comment comment63 = startTag54.asComment();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Comment");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertNotNull(parseErrorStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(element52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(attributes59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "StartTag" + "'", str61, "StartTag");
        org.junit.Assert.assertNotNull(element62);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        boolean boolean12 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList10.parallelStream();
        java.lang.Object[] objArray14 = parseErrorList10.toArray();
        org.jsoup.parser.ParseError parseError17 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        boolean boolean18 = parseErrorList10.add(parseError17);
        java.util.Spliterator<org.jsoup.parser.ParseError> parseErrorSpliterator19 = parseErrorList10.spliterator();
        java.lang.String str20 = parseErrorList10.toString();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(parseErrorSpliterator19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100: ]" + "'", str20, "[100: ]");
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        java.lang.StringBuilder stringBuilder9 = null;
        tokeniser7.dataBuffer = stringBuilder9;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        tokeniser7.emit(charArray14);
        org.jsoup.parser.Token.Comment comment17 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean20 = characterReader19.matchesLetter();
        miniSoupTokeniserState0.read(tokeniser7, characterReader19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        org.jsoup.parser.Token.Tag tag31 = tokeniser28.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype32 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype33 = doctype32.asDoctype();
        java.lang.String str34 = doctype32.tokenType();
        tokeniser28.emit((org.jsoup.parser.Token) doctype32);
        org.jsoup.parser.ITokeniserState iTokeniserState36 = tokeniser28.getState();
        org.jsoup.parser.Token.Comment comment37 = new org.jsoup.parser.Token.Comment();
        java.lang.String str38 = comment37.toString();
        java.lang.StringBuilder stringBuilder39 = comment37.data;
        boolean boolean40 = comment37.isEndTag();
        boolean boolean41 = comment37.isComment();
        tokeniser28.commentPending = comment37;
        org.jsoup.parser.CharacterReader characterReader44 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean46 = characterReader44.matches('\000');
        characterReader44.mark();
        boolean boolean48 = characterReader44.isEmpty();
        java.lang.String str49 = characterReader44.consumeToEnd();
        miniSoupTokeniserState0.read(tokeniser28, characterReader44);
        org.jsoup.parser.CharacterReader characterReader51 = null;
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream54 = parseErrorList53.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList53.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor56 = parseErrorList53.iterator();
        org.jsoup.parser.Tokeniser tokeniser57 = new org.jsoup.parser.Tokeniser(characterReader51, parseErrorList53);
        org.jsoup.parser.Token.Tag tag58 = tokeniser57.tagPending;
        tokeniser57.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag62 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType63 = startTag62.type;
        startTag62.appendTagName('#');
        tokeniser57.tagPending = startTag62;
        tokeniser57.acknowledgeSelfClosingFlag();
        org.jsoup.parser.CharacterReader characterReader69 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean71 = characterReader69.matches('\uffff');
        miniSoupTokeniserState0.read(tokeniser57, characterReader69);
        org.jsoup.parser.Token.Doctype doctype73 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype74 = doctype73.asDoctype();
        boolean boolean75 = doctype73.isEOF();
        boolean boolean76 = doctype73.isForceQuirks();
        boolean boolean77 = doctype73.isEndTag();
        tokeniser57.emit((org.jsoup.parser.Token) doctype73);
        tokeniser57.emit('\ufffd');
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertNotNull(doctype33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Doctype" + "'", str34, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<!---->" + "'", str38, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder39);
        org.junit.Assert.assertEquals(stringBuilder39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "StartTag" + "'", str49, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertNotNull(parseErrorStream54);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertNotNull(parseErrorItor56);
        org.junit.Assert.assertNull(tag58);
        org.junit.Assert.assertTrue("'" + tokenType63 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType63.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(doctype74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        char char5 = tokenQueue1.peek();
        org.jsoup.parser.CharacterReader characterReader6 = null;
        org.jsoup.parser.ParseErrorList parseErrorList8 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream9 = parseErrorList8.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor10 = parseErrorList8.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList8.iterator();
        org.jsoup.parser.Tokeniser tokeniser12 = new org.jsoup.parser.Tokeniser(characterReader6, parseErrorList8);
        org.jsoup.parser.Token.Tag tag13 = tokeniser12.tagPending;
        org.jsoup.parser.Token.Tag tag15 = tokeniser12.createTagPending(true);
        java.lang.StringBuilder stringBuilder16 = tokeniser12.dataBuffer;
        org.jsoup.parser.Token.EndTag endTag17 = new org.jsoup.parser.Token.EndTag();
        char[] charArray20 = new char[] { '#', '#' };
        endTag17.appendAttributeValue(charArray20);
        tokeniser12.emit(charArray20);
        boolean boolean23 = tokenQueue1.matchesAny(charArray20);
        java.lang.String str24 = tokenQueue1.consumeElementSelector();
        java.lang.String str26 = tokenQueue1.consumeToIgnoreCase("hi!");
        java.lang.String str27 = tokenQueue1.consumeAttributeKey();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\000' + "'", char5 == '\000');
        org.junit.Assert.assertNotNull(parseErrorList8);
        org.junit.Assert.assertNotNull(parseErrorStream9);
        org.junit.Assert.assertNotNull(parseErrorItor10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertNull(tag13);
        org.junit.Assert.assertNotNull(tag15);
        org.junit.Assert.assertNull(stringBuilder16);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        org.jsoup.parser.Token.StartTag startTag19 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes20 = startTag19.getAttributes();
        org.jsoup.parser.Token.StartTag startTag21 = new org.jsoup.parser.Token.StartTag("<!---->", attributes20);
        org.jsoup.nodes.Element element22 = htmlTreeBuilder0.insert(startTag21);
        boolean boolean24 = htmlTreeBuilder0.inScope("[]");
        org.jsoup.nodes.Document document25 = htmlTreeBuilder0.doc;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(attributes20);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(document25);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches("[100: ]");
        java.lang.String str5 = characterReader1.consumeTo('#');
        boolean boolean6 = characterReader1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Element element13 = htmlTreeBuilder0.getActiveFormattingElement("0: Doctype");
        htmlTreeBuilder0.runParser();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder17 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader18 = null;
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream21 = parseErrorList20.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor22 = parseErrorList20.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList20.iterator();
        org.jsoup.parser.Tokeniser tokeniser24 = new org.jsoup.parser.Tokeniser(characterReader18, parseErrorList20);
        org.jsoup.parser.Token.Tag tag25 = tokeniser24.tagPending;
        org.jsoup.parser.Token.Tag tag27 = tokeniser24.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype28 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype29 = doctype28.asDoctype();
        java.lang.String str30 = doctype28.tokenType();
        tokeniser24.emit((org.jsoup.parser.Token) doctype28);
        org.jsoup.parser.Token.Tag tag33 = tokeniser24.createTagPending(true);
        xmlTreeBuilder17.currentToken = tag33;
        org.jsoup.nodes.Attributes attributes35 = tag33.attributes;
        org.jsoup.parser.Token.StartTag startTag36 = new org.jsoup.parser.Token.StartTag("", attributes35);
        org.jsoup.parser.Token.StartTag startTag37 = new org.jsoup.parser.Token.StartTag("0: Doctype", attributes35);
        startTag37.appendAttributeName('\uffff');
        org.jsoup.nodes.FormElement formElement41 = htmlTreeBuilder0.insertForm(startTag37, true);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder42 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int47 = parseErrorList46.getMaxSize();
        org.jsoup.nodes.Document document48 = htmlTreeBuilder42.parse("0: Doctype", "hi!", parseErrorList46);
        org.jsoup.parser.ParseErrorList parseErrorList52 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream53 = parseErrorList52.stream();
        boolean boolean54 = parseErrorList52.canAddError();
        org.jsoup.nodes.Document document55 = htmlTreeBuilder42.parse("EndTag", "hi!#", parseErrorList52);
        java.lang.String[] strArray63 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean64 = htmlTreeBuilder42.inScope("hi!#", strArray63);
        org.jsoup.parser.ParseErrorList parseErrorList69 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document70 = htmlTreeBuilder42.parse("0: Doctype", "", parseErrorList69);
        java.lang.String str71 = htmlTreeBuilder42.getBaseUri();
        org.jsoup.nodes.Element element72 = htmlTreeBuilder42.pop();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder73 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList77 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int78 = parseErrorList77.getMaxSize();
        org.jsoup.nodes.Document document79 = htmlTreeBuilder73.parse("0: Doctype", "hi!", parseErrorList77);
        boolean boolean80 = htmlTreeBuilder73.framesetOk();
        org.jsoup.nodes.Document document83 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder73.setHeadElement((org.jsoup.nodes.Element) document83);
        org.jsoup.parser.Token.StartTag startTag86 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType87 = startTag86.type;
        startTag86.appendTagName('#');
        boolean boolean90 = htmlTreeBuilder73.process((org.jsoup.parser.Token) startTag86);
        org.jsoup.nodes.Element element91 = htmlTreeBuilder42.insert(startTag86);
        htmlTreeBuilder0.push(element91);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(element13);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertNotNull(parseErrorStream21);
        org.junit.Assert.assertNotNull(parseErrorItor22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNull(tag25);
        org.junit.Assert.assertNotNull(tag27);
        org.junit.Assert.assertNotNull(doctype29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Doctype" + "'", str30, "Doctype");
        org.junit.Assert.assertNotNull(tag33);
        org.junit.Assert.assertNotNull(attributes35);
        org.junit.Assert.assertNotNull(formElement41);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertNotNull(parseErrorList52);
        org.junit.Assert.assertNotNull(parseErrorStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(document70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(element72);
        org.junit.Assert.assertNotNull(parseErrorList77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(document79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(document83);
        org.junit.Assert.assertTrue("'" + tokenType87 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType87.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(element91);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        org.jsoup.parser.Token.StartTag startTag19 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes20 = startTag19.getAttributes();
        org.jsoup.parser.Token.StartTag startTag21 = new org.jsoup.parser.Token.StartTag("<!---->", attributes20);
        org.jsoup.nodes.Element element22 = htmlTreeBuilder0.insert(startTag21);
        boolean boolean24 = htmlTreeBuilder0.inScope("[]");
        org.jsoup.parser.Tokeniser tokeniser25 = htmlTreeBuilder0.tokeniser;
        boolean boolean26 = tokeniser25.isAppropriateEndTagToken();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(attributes20);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(tokeniser25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        java.util.List<org.jsoup.nodes.Node> nodeList2 = org.jsoup.parser.Parser.parseXmlFragment("S", "<0: Doctype>");
        org.junit.Assert.assertNotNull(nodeList2);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.Token.Tag tag10 = tokeniser7.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype11 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype12 = doctype11.asDoctype();
        java.lang.String str13 = doctype11.tokenType();
        tokeniser7.emit((org.jsoup.parser.Token) doctype11);
        org.jsoup.parser.Token.Tag tag16 = tokeniser7.createTagPending(true);
        xmlTreeBuilder0.currentToken = tag16;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        xmlTreeBuilder0.doc = document28;
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream35 = parseErrorList34.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor36 = parseErrorList34.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor37 = parseErrorList34.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int40 = parseErrorList39.getMaxSize();
        boolean boolean41 = parseErrorList34.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList39);
        xmlTreeBuilder0.initialiseParse("hi!#", "0: []", parseErrorList39);
        org.jsoup.parser.ParseErrorList parseErrorList43 = xmlTreeBuilder0.errors;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState44 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype45 = new org.jsoup.parser.Token.Doctype();
        boolean boolean46 = doctype45.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder47 = null;
        boolean boolean48 = htmlTreeBuilderState44.process((org.jsoup.parser.Token) doctype45, htmlTreeBuilder47);
        java.lang.String str49 = doctype45.getName();
        java.lang.StringBuilder stringBuilder50 = doctype45.publicIdentifier;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean51 = xmlTreeBuilder0.process((org.jsoup.parser.Token) doctype45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(tag10);
        org.junit.Assert.assertNotNull(doctype12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Doctype" + "'", str13, "Doctype");
        org.junit.Assert.assertNotNull(tag16);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(parseErrorStream35);
        org.junit.Assert.assertNotNull(parseErrorItor36);
        org.junit.Assert.assertNotNull(parseErrorItor37);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(stringBuilder50);
        org.junit.Assert.assertEquals(stringBuilder50.toString(), "");
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        java.lang.String str20 = htmlTreeBuilder0.toString();
        org.jsoup.parser.Tokeniser tokeniser21 = htmlTreeBuilder0.tokeniser;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder22 = new org.jsoup.parser.HtmlTreeBuilder();
        htmlTreeBuilder22.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder26 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int31 = parseErrorList30.getMaxSize();
        org.jsoup.nodes.Document document32 = htmlTreeBuilder26.parse("0: Doctype", "hi!", parseErrorList30);
        org.jsoup.parser.ParseError[] parseErrorArray33 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList34 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList34, parseErrorArray33);
        org.jsoup.parser.ParseError[] parseErrorArray36 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList37 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList37, parseErrorArray36);
        boolean boolean39 = parseErrorList34.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList37);
        java.lang.Object[] objArray40 = parseErrorList34.toArray();
        parseErrorList34.clear();
        org.jsoup.parser.ParseError[] parseErrorArray42 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList43 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43, parseErrorArray42);
        org.jsoup.parser.ParseError[] parseErrorArray45 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList46 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList46, parseErrorArray45);
        boolean boolean48 = parseErrorList43.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList46);
        java.lang.Object[] objArray49 = parseErrorList43.toArray();
        parseErrorList43.clear();
        org.jsoup.parser.ParseError[] parseErrorArray51 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList52 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList52, parseErrorArray51);
        boolean boolean54 = parseErrorList43.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList52);
        boolean boolean55 = parseErrorList34.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList52);
        java.lang.Object[] objArray56 = parseErrorList52.toArray();
        boolean boolean57 = parseErrorList30.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList52);
        org.jsoup.parser.ParseError[] parseErrorArray58 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList59 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59, parseErrorArray58);
        org.jsoup.parser.ParseError[] parseErrorArray61 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList62 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList62, parseErrorArray61);
        boolean boolean64 = parseErrorList59.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList62);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor65 = parseErrorList62.listIterator();
        int int67 = parseErrorList62.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag71 = new org.jsoup.parser.Token.EndTag();
        char[] charArray74 = new char[] { '#', '#' };
        endTag71.appendAttributeValue(charArray74);
        endTag71.finaliseTag();
        boolean boolean77 = endTag71.isSelfClosing();
        org.jsoup.parser.Tag tag79 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean80 = tag79.isFormListed();
        org.jsoup.parser.Tag tag81 = tag79.setSelfClosing();
        boolean boolean82 = tag79.isKnownTag();
        java.lang.Object[] objArray84 = new java.lang.Object[] { boolean77, tag79, "Doctype" };
        org.jsoup.parser.ParseError parseError85 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray84);
        parseErrorList62.add(0, parseError85);
        boolean boolean87 = parseErrorList30.add(parseError85);
        org.jsoup.nodes.Document document88 = htmlTreeBuilder22.parse("\uffff", "", parseErrorList30);
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document88);
        org.jsoup.parser.Token.StartTag startTag90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element91 = htmlTreeBuilder0.insertEmpty(startTag90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(tokeniser21);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(parseErrorArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(parseErrorArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(parseErrorArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(parseErrorArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(parseErrorArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(parseErrorItor65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(tag79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(tag81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(document88);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        int int8 = parseErrorList4.size();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        htmlTreeBuilder9.newPendingTableCharacters();
        boolean boolean17 = parseErrorList4.equals((java.lang.Object) htmlTreeBuilder9);
        java.lang.String str18 = parseErrorList4.toString();
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray22 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList23 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23, parseErrorArray22);
        org.jsoup.parser.ParseError[] parseErrorArray25 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList26 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26, parseErrorArray25);
        boolean boolean28 = parseErrorList23.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        org.jsoup.parser.ParseError[] parseErrorArray29 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList30 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30, parseErrorArray29);
        boolean boolean32 = parseErrorList26.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        parseErrorList30.clear();
        boolean boolean34 = parseErrorList20.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList20.iterator();
        int int36 = parseErrorList20.size();
        boolean boolean37 = parseErrorList4.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20);
        org.jsoup.parser.Parser parser39 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser41 = parser39.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder42 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document43 = xmlTreeBuilder42.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder44 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList49 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList51 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream52 = parseErrorList51.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor53 = parseErrorList51.iterator();
        boolean boolean54 = parseErrorList49.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList51);
        xmlTreeBuilder44.initialiseParse("<!---->", "hi!", parseErrorList49);
        xmlTreeBuilder42.errors = parseErrorList49;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList57 = xmlTreeBuilder42.stack;
        org.jsoup.parser.Parser parser58 = parser41.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder42);
        org.jsoup.parser.ParseErrorList parseErrorList60 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder42.errors = parseErrorList60;
        parseErrorList60.trimToSize();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = parseErrorList4.addAll((int) 't', (java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList60);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 116, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(parseErrorArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(parseErrorArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(parser39);
        org.junit.Assert.assertNotNull(parser41);
        org.junit.Assert.assertNull(document43);
        org.junit.Assert.assertNotNull(parseErrorList51);
        org.junit.Assert.assertNotNull(parseErrorStream52);
        org.junit.Assert.assertNotNull(parseErrorItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(elementList57);
        org.junit.Assert.assertNotNull(parser58);
        org.junit.Assert.assertNotNull(parseErrorList60);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token token1 = xmlTreeBuilder0.currentToken;
        org.jsoup.parser.Token.StartTag startTag2 = new org.jsoup.parser.Token.StartTag();
        startTag2.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag6 = startTag2.name("hi!#");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = xmlTreeBuilder0.process((org.jsoup.parser.Token) startTag2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(token1);
        org.junit.Assert.assertNotNull(tag6);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.Rawtext;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder1 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document2 = xmlTreeBuilder1.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList8 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor12 = parseErrorList10.iterator();
        boolean boolean13 = parseErrorList8.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        xmlTreeBuilder3.initialiseParse("<!---->", "hi!", parseErrorList8);
        xmlTreeBuilder1.errors = parseErrorList8;
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream20 = parseErrorList19.stream();
        xmlTreeBuilder1.initialiseParse("a", "[]", parseErrorList19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        tokeniser28.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype32 = tokeniser28.doctypePending;
        tokeniser28.createCommentPending();
        org.jsoup.parser.Token.Comment comment34 = tokeniser28.commentPending;
        boolean boolean35 = parseErrorList19.remove((java.lang.Object) tokeniser28);
        org.jsoup.parser.CharacterReader characterReader37 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean39 = characterReader37.matches('\uffff');
        boolean boolean41 = characterReader37.containsIgnoreCase("0: []");
        tokeniserState0.read(tokeniser28, characterReader37);
        int int44 = characterReader37.nextIndexOf('4');
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNull(document2);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertNotNull(parseErrorItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertNotNull(parseErrorStream20);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNull(doctype32);
        org.junit.Assert.assertNotNull(comment34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype1 = new org.jsoup.parser.Token.Doctype();
        boolean boolean2 = doctype1.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = null;
        boolean boolean4 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) doctype1, htmlTreeBuilder3);
        java.lang.StringBuilder stringBuilder5 = doctype1.name;
        java.lang.String str6 = doctype1.getName();
        boolean boolean7 = doctype1.isComment();
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(stringBuilder5);
        org.junit.Assert.assertEquals(stringBuilder5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.CharacterReader characterReader14 = null;
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList16.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList16.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList16.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        boolean boolean23 = parseErrorList16.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        org.jsoup.parser.Tokeniser tokeniser24 = new org.jsoup.parser.Tokeniser(characterReader14, parseErrorList21);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList21.iterator();
        htmlTreeBuilder0.initialiseParse("hi!", "hi!#", parseErrorList21);
        org.jsoup.parser.CharacterReader characterReader27 = null;
        org.jsoup.parser.ParseErrorList parseErrorList29 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream30 = parseErrorList29.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor31 = parseErrorList29.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor32 = parseErrorList29.iterator();
        org.jsoup.parser.Tokeniser tokeniser33 = new org.jsoup.parser.Tokeniser(characterReader27, parseErrorList29);
        org.jsoup.parser.Token.Tag tag34 = tokeniser33.tagPending;
        java.lang.StringBuilder stringBuilder35 = null;
        tokeniser33.dataBuffer = stringBuilder35;
        org.jsoup.parser.Token.EndTag endTag37 = new org.jsoup.parser.Token.EndTag();
        char[] charArray40 = new char[] { '#', '#' };
        endTag37.appendAttributeValue(charArray40);
        tokeniser33.emit(charArray40);
        htmlTreeBuilder0.tokeniser = tokeniser33;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder44 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList48 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int49 = parseErrorList48.getMaxSize();
        org.jsoup.nodes.Document document50 = htmlTreeBuilder44.parse("0: Doctype", "hi!", parseErrorList48);
        boolean boolean51 = htmlTreeBuilder44.framesetOk();
        org.jsoup.parser.Parser parser52 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser54 = parser52.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document57 = parser52.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document60 = parser52.parseInput("<hi!>", "[]");
        htmlTreeBuilder44.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document60);
        java.lang.String[] strArray62 = new java.lang.String[] {};
        boolean boolean63 = htmlTreeBuilder44.inScope(strArray62);
        htmlTreeBuilder44.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder65 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList69 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int70 = parseErrorList69.getMaxSize();
        org.jsoup.nodes.Document document71 = htmlTreeBuilder65.parse("0: Doctype", "hi!", parseErrorList69);
        htmlTreeBuilder44.setHeadElement((org.jsoup.nodes.Element) document71);
        htmlTreeBuilder0.doc = document71;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNotNull(parseErrorList29);
        org.junit.Assert.assertNotNull(parseErrorStream30);
        org.junit.Assert.assertNotNull(parseErrorItor31);
        org.junit.Assert.assertNotNull(parseErrorItor32);
        org.junit.Assert.assertNull(tag34);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#, #]");
        org.junit.Assert.assertNotNull(parseErrorList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(parser52);
        org.junit.Assert.assertNotNull(parser54);
        org.junit.Assert.assertNotNull(document57);
        org.junit.Assert.assertNotNull(document60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(parseErrorList69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(document71);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        boolean boolean7 = tokeniser6.isAppropriateEndTagToken();
        org.jsoup.parser.Token.Comment comment8 = new org.jsoup.parser.Token.Comment();
        java.lang.String str9 = comment8.getData();
        tokeniser6.commentPending = comment8;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState11 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype12 = new org.jsoup.parser.Token.Doctype();
        boolean boolean13 = doctype12.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder14 = null;
        boolean boolean15 = htmlTreeBuilderState11.process((org.jsoup.parser.Token) doctype12, htmlTreeBuilder14);
        java.lang.StringBuilder stringBuilder16 = doctype12.name;
        boolean boolean17 = doctype12.forceQuirks;
        tokeniser6.doctypePending = doctype12;
        java.lang.String str19 = doctype12.getName();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(htmlTreeBuilderState11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(stringBuilder16);
        org.junit.Assert.assertEquals(stringBuilder16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.jsoup.parser.ParseError parseError2 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str3 = parseError2.getErrorMessage();
        java.lang.String str4 = parseError2.toString();
        int int5 = parseError2.getPosition();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100: " + "'", str4, "100: ");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        htmlTreeBuilder3.baseUri = "</hi![]>";
        htmlTreeBuilder3.generateImpliedEndTags("ndTag");
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
        org.jsoup.parser.TreeBuilder treeBuilder2 = null;
        org.jsoup.parser.Parser parser3 = parser1.setTreeBuilder(treeBuilder2);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder4 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document5 = xmlTreeBuilder4.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder6 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        boolean boolean16 = parseErrorList11.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        xmlTreeBuilder6.initialiseParse("<!---->", "hi!", parseErrorList11);
        xmlTreeBuilder4.errors = parseErrorList11;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList19 = xmlTreeBuilder4.stack;
        org.jsoup.parser.CharacterReader characterReader20 = null;
        xmlTreeBuilder4.reader = characterReader20;
        org.jsoup.parser.Parser parser22 = parser1.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder4);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder23 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document24 = xmlTreeBuilder23.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder25 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream33 = parseErrorList32.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor34 = parseErrorList32.iterator();
        boolean boolean35 = parseErrorList30.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32);
        xmlTreeBuilder25.initialiseParse("<!---->", "hi!", parseErrorList30);
        xmlTreeBuilder23.errors = parseErrorList30;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList38 = xmlTreeBuilder23.stack;
        org.jsoup.parser.CharacterReader characterReader39 = null;
        xmlTreeBuilder23.reader = characterReader39;
        org.jsoup.parser.Parser parser41 = parser22.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder23);
        org.jsoup.parser.CharacterReader characterReader42 = null;
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList44.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList44.iterator();
        org.jsoup.parser.Tokeniser tokeniser48 = new org.jsoup.parser.Tokeniser(characterReader42, parseErrorList44);
        org.jsoup.parser.Token.Tag tag49 = tokeniser48.tagPending;
        org.jsoup.parser.Token.Tag tag51 = tokeniser48.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype52 = new org.jsoup.parser.Token.Doctype();
        boolean boolean53 = doctype52.isCharacter();
        boolean boolean54 = doctype52.isEndTag();
        boolean boolean55 = doctype52.isCharacter();
        tokeniser48.emit((org.jsoup.parser.Token) doctype52);
        org.jsoup.parser.TokeniserState tokeniserState57 = org.jsoup.parser.TokeniserState.ScriptData;
        tokeniser48.eofError((org.jsoup.parser.ITokeniserState) tokeniserState57);
        xmlTreeBuilder23.tokeniser = tokeniser48;
        org.jsoup.nodes.Attributes attributes61 = null;
        org.jsoup.parser.Token.StartTag startTag62 = new org.jsoup.parser.Token.StartTag("[]", attributes61);
        boolean boolean63 = startTag62.isCharacter();
        // The following exception was thrown during execution in test generation
        try {
            tokeniser48.emit((org.jsoup.parser.Token) startTag62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: There is an unread token pending!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNull(document5);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(elementList19);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNull(document24);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertNotNull(parseErrorStream33);
        org.junit.Assert.assertNotNull(parseErrorItor34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(elementList38);
        org.junit.Assert.assertNotNull(parser41);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNull(tag49);
        org.junit.Assert.assertNotNull(tag51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(tokeniserState57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.EndTag endTag10 = new org.jsoup.parser.Token.EndTag();
        char[] charArray13 = new char[] { '#', '#' };
        endTag10.appendAttributeValue(charArray13);
        tokeniser6.emit(charArray13);
        org.jsoup.parser.Token.Comment comment16 = tokeniser6.commentPending;
        tokeniser6.createDoctypePending();
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitTagPending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, #]");
        org.junit.Assert.assertNull(comment16);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        htmlTreeBuilder0.newPendingTableCharacters();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList16.listIterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList16.iterator();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder0.parse("StartTag", "[100: ]", parseErrorList16);
        int int20 = parseErrorList16.getMaxSize();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder22 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList27 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList29 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream30 = parseErrorList29.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor31 = parseErrorList29.iterator();
        boolean boolean32 = parseErrorList27.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList29);
        xmlTreeBuilder22.initialiseParse("<!---->", "hi!", parseErrorList27);
        org.jsoup.parser.ParseErrorList parseErrorList37 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document38 = xmlTreeBuilder22.parse("", "[]", parseErrorList37);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = parseErrorList16.addAll((int) 'S', (java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList37);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 83, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(parseErrorList29);
        org.junit.Assert.assertNotNull(parseErrorStream30);
        org.junit.Assert.assertNotNull(parseErrorItor31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(parseErrorList37);
        org.junit.Assert.assertNotNull(document38);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.Comment comment12 = new org.jsoup.parser.Token.Comment();
        java.lang.String str13 = comment12.toString();
        boolean boolean14 = comment12.isCharacter();
        htmlTreeBuilder0.insert(comment12);
        boolean boolean16 = comment12.isStartTag();
        java.lang.String str17 = comment12.toString();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<!---->" + "'", str13, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<!---->" + "'", str17, "<!---->");
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList4.stream();
        org.jsoup.parser.ParseError parseError15 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        parseErrorList4.add((int) (byte) 0, parseError15);
        java.lang.String str17 = parseError15.getErrorMessage();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.CharacterReader characterReader16 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean18 = characterReader16.matches("[100: ]");
        htmlTreeBuilder0.reader = characterReader16;
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        htmlTreeBuilder0.resetInsertionMode();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        java.util.List<org.jsoup.nodes.Node> nodeList2 = org.jsoup.parser.Parser.parseXmlFragment("StartTaga", "");
        org.junit.Assert.assertNotNull(nodeList2);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        htmlTreeBuilder0.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document32);
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        org.jsoup.parser.CharacterReader characterReader35 = htmlTreeBuilder0.reader;
        org.jsoup.parser.TokenQueue tokenQueue37 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean38 = tokenQueue37.isEmpty();
        boolean boolean39 = tokenQueue37.consumeWhitespace();
        java.lang.String str40 = tokenQueue37.consumeWord();
        char char41 = tokenQueue37.peek();
        org.jsoup.parser.CharacterReader characterReader42 = null;
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList44.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList44.iterator();
        org.jsoup.parser.Tokeniser tokeniser48 = new org.jsoup.parser.Tokeniser(characterReader42, parseErrorList44);
        org.jsoup.parser.Token.Tag tag49 = tokeniser48.tagPending;
        org.jsoup.parser.Token.Tag tag51 = tokeniser48.createTagPending(true);
        java.lang.StringBuilder stringBuilder52 = tokeniser48.dataBuffer;
        org.jsoup.parser.Token.EndTag endTag53 = new org.jsoup.parser.Token.EndTag();
        char[] charArray56 = new char[] { '#', '#' };
        endTag53.appendAttributeValue(charArray56);
        tokeniser48.emit(charArray56);
        boolean boolean59 = tokenQueue37.matchesAny(charArray56);
        java.lang.String str60 = characterReader35.consumeToAny(charArray56);
        java.lang.String str61 = characterReader35.toString();
        boolean boolean62 = characterReader35.matchesDigit();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(characterReader35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "EndTag" + "'", str40, "EndTag");
        org.junit.Assert.assertTrue("'" + char41 + "' != '" + '\000' + "'", char41 == '\000');
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNull(tag49);
        org.junit.Assert.assertNotNull(tag51);
        org.junit.Assert.assertNull(stringBuilder52);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        java.lang.String str13 = htmlTreeBuilder0.toString();
        java.lang.String str14 = htmlTreeBuilder0.getBaseUri();
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("<hi!#>", "hi!");
        htmlTreeBuilder0.push((org.jsoup.nodes.Element) document17);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(document17);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        tokeniser6.acknowledgeSelfClosingFlag();
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitCommentPending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("<!---->");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder10 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader11 = null;
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList13.iterator();
        org.jsoup.parser.Tokeniser tokeniser17 = new org.jsoup.parser.Tokeniser(characterReader11, parseErrorList13);
        org.jsoup.parser.Token.Tag tag18 = tokeniser17.tagPending;
        org.jsoup.parser.Token.Tag tag20 = tokeniser17.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype21 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype22 = doctype21.asDoctype();
        java.lang.String str23 = doctype21.tokenType();
        tokeniser17.emit((org.jsoup.parser.Token) doctype21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser17.createTagPending(true);
        xmlTreeBuilder10.currentToken = tag26;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        boolean boolean35 = htmlTreeBuilder28.framesetOk();
        org.jsoup.nodes.Document document38 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder28.setHeadElement((org.jsoup.nodes.Element) document38);
        xmlTreeBuilder10.doc = document38;
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList44.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList44.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int50 = parseErrorList49.getMaxSize();
        boolean boolean51 = parseErrorList44.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList49);
        xmlTreeBuilder10.initialiseParse("hi!#", "0: []", parseErrorList49);
        org.jsoup.parser.Token.Comment comment53 = new org.jsoup.parser.Token.Comment();
        java.lang.String str54 = comment53.getData();
        xmlTreeBuilder10.insert(comment53);
        java.lang.StringBuilder stringBuilder56 = comment53.data;
        tokeniser6.commentPending = comment53;
        boolean boolean58 = comment53.bogus;
        java.lang.StringBuilder stringBuilder59 = comment53.data;
        java.lang.String str60 = comment53.toString();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNull(tag18);
        org.junit.Assert.assertNotNull(tag20);
        org.junit.Assert.assertNotNull(doctype22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Doctype" + "'", str23, "Doctype");
        org.junit.Assert.assertNotNull(tag26);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(stringBuilder56);
        org.junit.Assert.assertEquals(stringBuilder56.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(stringBuilder59);
        org.junit.Assert.assertEquals(stringBuilder59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "<!---->" + "'", str60, "<!---->");
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        htmlTreeBuilder0.reconstructFormattingElements();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToBefore("StartTag");
        org.jsoup.nodes.Element element14 = null;
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.maybeSetBaseUri(element14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("S");
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder17 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        org.jsoup.nodes.Document document23 = htmlTreeBuilder17.parse("0: Doctype", "hi!", parseErrorList21);
        org.jsoup.parser.ParseErrorList parseErrorList27 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream28 = parseErrorList27.stream();
        boolean boolean29 = parseErrorList27.canAddError();
        org.jsoup.nodes.Document document30 = htmlTreeBuilder17.parse("EndTag", "hi!#", parseErrorList27);
        java.lang.String[] strArray38 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean39 = htmlTreeBuilder17.inScope("hi!#", strArray38);
        boolean boolean40 = htmlTreeBuilder0.inScope("hi!#", strArray38);
        org.jsoup.nodes.FormElement formElement41 = htmlTreeBuilder0.getFormElement();
        org.jsoup.parser.CharacterReader characterReader42 = null;
        htmlTreeBuilder0.reader = characterReader42;
        org.jsoup.nodes.FormElement formElement44 = htmlTreeBuilder0.getFormElement();
        org.jsoup.parser.ParseErrorList parseErrorList47 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        htmlTreeBuilder0.errors = parseErrorList47;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(parseErrorList27);
        org.junit.Assert.assertNotNull(parseErrorStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(formElement41);
        org.junit.Assert.assertNull(formElement44);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        java.lang.String[] strArray21 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean22 = htmlTreeBuilder0.inScope("hi!#", strArray21);
        org.jsoup.parser.ParseErrorList parseErrorList27 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("0: Doctype", "", parseErrorList27);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder29 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document30 = xmlTreeBuilder29.doc;
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int35 = parseErrorList34.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray36 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList37 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList37, parseErrorArray36);
        org.jsoup.parser.ParseError[] parseErrorArray39 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList40 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40, parseErrorArray39);
        boolean boolean42 = parseErrorList37.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40);
        org.jsoup.parser.ParseError[] parseErrorArray43 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList44 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44, parseErrorArray43);
        boolean boolean46 = parseErrorList40.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        parseErrorList44.clear();
        boolean boolean48 = parseErrorList34.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList34.iterator();
        org.jsoup.nodes.Document document50 = xmlTreeBuilder29.parse("<hi!>", "0: []", parseErrorList34);
        htmlTreeBuilder0.push((org.jsoup.nodes.Element) document50);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder52 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList56 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int57 = parseErrorList56.getMaxSize();
        org.jsoup.nodes.Document document58 = htmlTreeBuilder52.parse("0: Doctype", "hi!", parseErrorList56);
        htmlTreeBuilder52.resetInsertionMode();
        htmlTreeBuilder52.popStackToBefore("EndTag");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState62 = htmlTreeBuilder52.state();
        htmlTreeBuilder0.transition(htmlTreeBuilderState62);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder64 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList68 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int69 = parseErrorList68.getMaxSize();
        org.jsoup.nodes.Document document70 = htmlTreeBuilder64.parse("0: Doctype", "hi!", parseErrorList68);
        org.jsoup.parser.ParseErrorList parseErrorList74 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream75 = parseErrorList74.stream();
        boolean boolean76 = parseErrorList74.canAddError();
        org.jsoup.nodes.Document document77 = htmlTreeBuilder64.parse("EndTag", "hi!#", parseErrorList74);
        java.lang.String[] strArray85 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean86 = htmlTreeBuilder64.inScope("hi!#", strArray85);
        boolean boolean87 = htmlTreeBuilder0.inScope(strArray85);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNull(document30);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parseErrorArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(parseErrorArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertNotNull(parseErrorList56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(document58);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState62);
        org.junit.Assert.assertNotNull(parseErrorList68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(document70);
        org.junit.Assert.assertNotNull(parseErrorList74);
        org.junit.Assert.assertNotNull(parseErrorStream75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(document77);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        org.jsoup.parser.ParseErrorList parseErrorList18 = htmlTreeBuilder0.errors;
        parseErrorList18.ensureCapacity((int) (short) 10);
        java.lang.Object[] objArray21 = parseErrorList18.toArray();
        org.jsoup.parser.CharacterReader characterReader23 = new org.jsoup.parser.CharacterReader("StartTag");
        int int25 = characterReader23.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean26 = characterReader23.matchesDigit();
        java.lang.String str27 = characterReader23.toString();
        boolean boolean29 = characterReader23.matches(' ');
        int int30 = parseErrorList18.lastIndexOf((java.lang.Object) boolean29);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "StartTag" + "'", str27, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        java.lang.String str1 = org.jsoup.parser.TokenQueue.unescape("</hi![]>");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "</hi![]>" + "'", str1, "</hi![]>");
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        int int9 = parseErrorList4.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag13 = new org.jsoup.parser.Token.EndTag();
        char[] charArray16 = new char[] { '#', '#' };
        endTag13.appendAttributeValue(charArray16);
        endTag13.finaliseTag();
        boolean boolean19 = endTag13.isSelfClosing();
        org.jsoup.parser.Tag tag21 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean22 = tag21.isFormListed();
        org.jsoup.parser.Tag tag23 = tag21.setSelfClosing();
        boolean boolean24 = tag21.isKnownTag();
        java.lang.Object[] objArray26 = new java.lang.Object[] { boolean19, tag21, "Doctype" };
        org.jsoup.parser.ParseError parseError27 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray26);
        parseErrorList4.add(0, parseError27);
        org.jsoup.parser.Token.Doctype doctype29 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str30 = doctype29.getSystemIdentifier();
        boolean boolean31 = doctype29.forceQuirks;
        boolean boolean32 = parseErrorList4.equals((java.lang.Object) doctype29);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Comment comment33 = doctype29.asComment();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$Comment");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(tag21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(tag23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        java.lang.String str2 = characterReader1.consumeToEnd();
        int int4 = characterReader1.nextIndexOf('a');
        java.lang.String str5 = characterReader1.consumeDigitSequence();
        boolean boolean7 = characterReader1.matchesIgnoreCase("0: []");
        characterReader1.mark();
        java.lang.CharSequence charSequence9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = characterReader1.nextIndexOf(charSequence9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "StartTag" + "'", str2, "StartTag");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        char char5 = tokenQueue1.peek();
        org.jsoup.parser.CharacterReader characterReader6 = null;
        org.jsoup.parser.ParseErrorList parseErrorList8 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream9 = parseErrorList8.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor10 = parseErrorList8.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList8.iterator();
        org.jsoup.parser.Tokeniser tokeniser12 = new org.jsoup.parser.Tokeniser(characterReader6, parseErrorList8);
        org.jsoup.parser.Token.Tag tag13 = tokeniser12.tagPending;
        org.jsoup.parser.Token.Tag tag15 = tokeniser12.createTagPending(true);
        java.lang.StringBuilder stringBuilder16 = tokeniser12.dataBuffer;
        org.jsoup.parser.Token.EndTag endTag17 = new org.jsoup.parser.Token.EndTag();
        char[] charArray20 = new char[] { '#', '#' };
        endTag17.appendAttributeValue(charArray20);
        tokeniser12.emit(charArray20);
        boolean boolean23 = tokenQueue1.matchesAny(charArray20);
        java.lang.String str24 = tokenQueue1.consumeCssIdentifier();
        boolean boolean26 = tokenQueue1.matches("");
        // The following exception was thrown during execution in test generation
        try {
            char char27 = tokenQueue1.consume();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 6");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\000' + "'", char5 == '\000');
        org.junit.Assert.assertNotNull(parseErrorList8);
        org.junit.Assert.assertNotNull(parseErrorStream9);
        org.junit.Assert.assertNotNull(parseErrorItor10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertNull(tag13);
        org.junit.Assert.assertNotNull(tag15);
        org.junit.Assert.assertNull(stringBuilder16);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        boolean boolean3 = parseErrorList1.canAddError();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState4 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag5 = new org.jsoup.parser.Token.EndTag();
        endTag5.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder7 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int12 = parseErrorList11.getMaxSize();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder7.parse("0: Doctype", "hi!", parseErrorList11);
        boolean boolean14 = htmlTreeBuilderState4.process((org.jsoup.parser.Token) endTag5, htmlTreeBuilder7);
        htmlTreeBuilder7.baseUri = "</hi![]>";
        boolean boolean17 = parseErrorList1.equals((java.lang.Object) htmlTreeBuilder7);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        org.jsoup.nodes.Element element31 = htmlTreeBuilder18.getActiveFormattingElement("");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder34 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList39 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream42 = parseErrorList41.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList41.iterator();
        boolean boolean44 = parseErrorList39.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList41);
        xmlTreeBuilder34.initialiseParse("<!---->", "hi!", parseErrorList39);
        int int47 = parseErrorList39.indexOf((java.lang.Object) '#');
        boolean boolean49 = parseErrorList39.equals((java.lang.Object) (short) 0);
        org.jsoup.nodes.Document document50 = htmlTreeBuilder18.parse("tartTag", " EndTag", parseErrorList39);
        boolean boolean51 = parseErrorList1.contains((java.lang.Object) "tartTag");
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState4);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNull(element31);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertNotNull(parseErrorStream42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement14 = htmlTreeBuilder0.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder15 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        org.jsoup.nodes.Document document21 = htmlTreeBuilder15.parse("0: Doctype", "hi!", parseErrorList19);
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream26 = parseErrorList25.stream();
        boolean boolean27 = parseErrorList25.canAddError();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder15.parse("EndTag", "hi!#", parseErrorList25);
        java.lang.String[] strArray36 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean37 = htmlTreeBuilder15.inScope("hi!#", strArray36);
        org.jsoup.parser.ParseErrorList parseErrorList42 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document43 = htmlTreeBuilder15.parse("0: Doctype", "", parseErrorList42);
        boolean boolean44 = htmlTreeBuilder0.onStack((org.jsoup.nodes.Element) document43);
        org.jsoup.nodes.Element element45 = htmlTreeBuilder0.getHeadElement();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(formElement14);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertNotNull(parseErrorStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(element45);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.Comment comment12 = new org.jsoup.parser.Token.Comment();
        java.lang.String str13 = comment12.toString();
        boolean boolean14 = comment12.isCharacter();
        htmlTreeBuilder0.insert(comment12);
        htmlTreeBuilder0.popStackToClose("0: []");
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState19 = htmlTreeBuilder0.originalState();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<!---->" + "'", str13, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(htmlTreeBuilderState19);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.Tag tag11 = tokeniser6.createTagPending(false);
        boolean boolean12 = tag11.isSelfClosing();
        tag11.appendAttributeName('\ufffd');
        tag11.tagName = "100: ";
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.StartTag startTag17 = tag11.asStartTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$StartTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token token1 = xmlTreeBuilder0.currentToken;
        org.jsoup.parser.CharacterReader characterReader2 = null;
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.iterator();
        org.jsoup.parser.Tokeniser tokeniser8 = new org.jsoup.parser.Tokeniser(characterReader2, parseErrorList4);
        org.jsoup.parser.Token.Tag tag9 = tokeniser8.tagPending;
        org.jsoup.parser.Token.Tag tag11 = tokeniser8.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype12 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype13 = doctype12.asDoctype();
        java.lang.String str14 = doctype12.tokenType();
        tokeniser8.emit((org.jsoup.parser.Token) doctype12);
        org.jsoup.parser.Token.Tag tag17 = tokeniser8.createTagPending(true);
        xmlTreeBuilder0.tokeniser = tokeniser8;
        tokeniser8.emit('a');
        org.jsoup.parser.Token.Tag tag22 = tokeniser8.createTagPending(true);
        org.junit.Assert.assertNull(token1);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNull(tag9);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(doctype13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Doctype" + "'", str14, "Doctype");
        org.junit.Assert.assertNotNull(tag17);
        org.junit.Assert.assertNotNull(tag22);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.resetInsertionMode();
        htmlTreeBuilder0.popStackToBefore("EndTag");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = htmlTreeBuilder0.state();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder11 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int16 = parseErrorList15.getMaxSize();
        org.jsoup.nodes.Document document17 = htmlTreeBuilder11.parse("0: Doctype", "hi!", parseErrorList15);
        boolean boolean18 = htmlTreeBuilder11.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState19 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder11.error(htmlTreeBuilderState19);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = null;
        htmlTreeBuilder11.transition(htmlTreeBuilderState21);
        org.jsoup.parser.Parser parser23 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.nodes.Document document26 = parser23.parseInput("", "hi!");
        org.jsoup.nodes.Document document29 = parser23.parseInput("hi!", "hi!");
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parse("hi!", "<!---->");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder33 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList37 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int38 = parseErrorList37.getMaxSize();
        org.jsoup.nodes.Document document39 = htmlTreeBuilder33.parse("0: Doctype", "hi!", parseErrorList37);
        boolean boolean40 = htmlTreeBuilder33.framesetOk();
        org.jsoup.parser.Parser parser41 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser43 = parser41.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document46 = parser41.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document49 = parser41.parseInput("<hi!>", "[]");
        htmlTreeBuilder33.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document49);
        org.jsoup.nodes.Document document53 = org.jsoup.parser.Parser.parse("", "Doctype");
        org.jsoup.nodes.Element[] elementArray54 = new org.jsoup.nodes.Element[] { document29, document32, document49, document53 };
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList55 = new org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.jsoup.nodes.Element>) elementList55, elementArray54);
        htmlTreeBuilder11.stack = elementList55;
        htmlTreeBuilder0.stack = elementList55;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList59 = htmlTreeBuilder0.getStack();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState10);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState19);
        org.junit.Assert.assertNotNull(parser23);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(parseErrorList37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parser41);
        org.junit.Assert.assertNotNull(parser43);
        org.junit.Assert.assertNotNull(document46);
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertNotNull(elementArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(elementList59);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        boolean boolean7 = tokeniser6.isAppropriateEndTagToken();
        tokeniser6.acknowledgeSelfClosingFlag();
        tokeniser6.createDoctypePending();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        htmlTreeBuilder0.newPendingTableCharacters();
        org.jsoup.nodes.Element element5 = htmlTreeBuilder0.getHeadElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder6 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int11 = parseErrorList10.getMaxSize();
        org.jsoup.nodes.Document document12 = htmlTreeBuilder6.parse("0: Doctype", "hi!", parseErrorList10);
        boolean boolean13 = htmlTreeBuilder6.framesetOk();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder6.setHeadElement((org.jsoup.nodes.Element) document16);
        htmlTreeBuilder6.generateImpliedEndTags();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder19 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        org.jsoup.nodes.Document document25 = htmlTreeBuilder19.parse("0: Doctype", "hi!", parseErrorList23);
        boolean boolean26 = htmlTreeBuilder19.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState27 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder19.error(htmlTreeBuilderState27);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState29 = null;
        htmlTreeBuilder19.transition(htmlTreeBuilderState29);
        htmlTreeBuilder19.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList33 = htmlTreeBuilder19.getPendingTableCharacters();
        htmlTreeBuilder6.setPendingTableCharacters(characterList33);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder35 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int40 = parseErrorList39.getMaxSize();
        org.jsoup.nodes.Document document41 = htmlTreeBuilder35.parse("0: Doctype", "hi!", parseErrorList39);
        htmlTreeBuilder35.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray44 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList45 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList45, characterArray44);
        htmlTreeBuilder35.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList45);
        boolean boolean48 = htmlTreeBuilder35.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag50 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement52 = htmlTreeBuilder35.insertForm(startTag50, true);
        htmlTreeBuilder35.baseUri = "[]";
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState55 = org.jsoup.parser.HtmlTreeBuilderState.InTableText;
        htmlTreeBuilder35.error(htmlTreeBuilderState55);
        htmlTreeBuilder6.error(htmlTreeBuilderState55);
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.error(htmlTreeBuilderState55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(element5);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState27);
        org.junit.Assert.assertNotNull(characterList33);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(characterArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(formElement52);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState55);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder1 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int6 = parseErrorList5.getMaxSize();
        org.jsoup.nodes.Document document7 = htmlTreeBuilder1.parse("0: Doctype", "hi!", parseErrorList5);
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream12 = parseErrorList11.stream();
        boolean boolean13 = parseErrorList11.canAddError();
        org.jsoup.nodes.Document document14 = htmlTreeBuilder1.parse("EndTag", "hi!#", parseErrorList11);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState15 = null;
        htmlTreeBuilder1.transition(htmlTreeBuilderState15);
        org.jsoup.parser.CharacterReader characterReader17 = null;
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream20 = parseErrorList19.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList19.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor22 = parseErrorList19.iterator();
        org.jsoup.parser.Tokeniser tokeniser23 = new org.jsoup.parser.Tokeniser(characterReader17, parseErrorList19);
        org.jsoup.parser.Token.Tag tag24 = tokeniser23.tagPending;
        tokeniser23.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype27 = tokeniser23.doctypePending;
        tokeniser23.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype29 = tokeniser23.doctypePending;
        htmlTreeBuilder1.tokeniser = tokeniser23;
        org.jsoup.parser.Token.Comment comment31 = tokeniser23.commentPending;
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.insert(comment31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertNotNull(parseErrorStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertNotNull(parseErrorStream20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorItor22);
        org.junit.Assert.assertNull(tag24);
        org.junit.Assert.assertNull(doctype27);
        org.junit.Assert.assertNull(doctype29);
        org.junit.Assert.assertNotNull(comment31);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        parseErrorList8.clear();
        boolean boolean12 = parseErrorList8.isEmpty();
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        boolean boolean16 = parseErrorList14.canAddError();
        org.jsoup.parser.ParseError parseError19 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str20 = parseError19.getErrorMessage();
        boolean boolean21 = parseErrorList14.add(parseError19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        org.jsoup.parser.Token.Tag tag31 = tokeniser28.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype32 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype33 = doctype32.asDoctype();
        java.lang.String str34 = doctype32.tokenType();
        tokeniser28.emit((org.jsoup.parser.Token) doctype32);
        org.jsoup.parser.ITokeniserState iTokeniserState36 = tokeniser28.getState();
        org.jsoup.parser.Token.Comment comment37 = new org.jsoup.parser.Token.Comment();
        java.lang.String str38 = comment37.toString();
        java.lang.StringBuilder stringBuilder39 = comment37.data;
        boolean boolean40 = comment37.isEndTag();
        boolean boolean41 = comment37.isComment();
        tokeniser28.commentPending = comment37;
        int int43 = parseErrorList14.lastIndexOf((java.lang.Object) comment37);
        boolean boolean44 = parseErrorList8.contains((java.lang.Object) comment37);
        org.jsoup.parser.TokenQueue tokenQueue46 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str48 = tokenQueue46.chompTo("Doctype");
        boolean boolean49 = parseErrorList8.contains((java.lang.Object) str48);
        java.lang.String str50 = parseErrorList8.toString();
        java.util.function.UnaryOperator<org.jsoup.parser.ParseError> parseErrorUnaryOperator51 = null;
        // The following exception was thrown during execution in test generation
        try {
            parseErrorList8.replaceAll(parseErrorUnaryOperator51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertNotNull(doctype33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Doctype" + "'", str34, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<!---->" + "'", str38, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder39);
        org.junit.Assert.assertEquals(stringBuilder39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "EndTag" + "'", str48, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        boolean boolean11 = doctype10.isCharacter();
        boolean boolean12 = doctype10.isEndTag();
        boolean boolean13 = doctype10.isCharacter();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        tokeniser6.createTempBuffer();
        org.jsoup.parser.Token.Comment comment16 = new org.jsoup.parser.Token.Comment();
        java.lang.String str17 = comment16.toString();
        java.lang.StringBuilder stringBuilder18 = comment16.data;
        boolean boolean19 = comment16.isEndTag();
        java.lang.String str20 = comment16.toString();
        tokeniser6.commentPending = comment16;
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitCommentPending();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: There is an unread token pending!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<!---->" + "'", str17, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder18);
        org.junit.Assert.assertEquals(stringBuilder18.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<!---->" + "'", str20, "<!---->");
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
        org.jsoup.parser.TreeBuilder treeBuilder2 = null;
        org.jsoup.parser.Parser parser3 = parser1.setTreeBuilder(treeBuilder2);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder4 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document5 = xmlTreeBuilder4.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder6 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        boolean boolean16 = parseErrorList11.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        xmlTreeBuilder6.initialiseParse("<!---->", "hi!", parseErrorList11);
        xmlTreeBuilder4.errors = parseErrorList11;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList19 = xmlTreeBuilder4.stack;
        org.jsoup.parser.CharacterReader characterReader20 = null;
        xmlTreeBuilder4.reader = characterReader20;
        org.jsoup.parser.Parser parser22 = parser1.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder4);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder23 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document24 = xmlTreeBuilder23.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder25 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream33 = parseErrorList32.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor34 = parseErrorList32.iterator();
        boolean boolean35 = parseErrorList30.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32);
        xmlTreeBuilder25.initialiseParse("<!---->", "hi!", parseErrorList30);
        xmlTreeBuilder23.errors = parseErrorList30;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList38 = xmlTreeBuilder23.stack;
        org.jsoup.parser.CharacterReader characterReader39 = null;
        xmlTreeBuilder23.reader = characterReader39;
        org.jsoup.parser.Parser parser41 = parser22.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder23);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder42 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader44 = new org.jsoup.parser.CharacterReader("StartTag");
        int int46 = characterReader44.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean47 = characterReader44.matchesDigit();
        java.lang.String str48 = characterReader44.toString();
        xmlTreeBuilder42.reader = characterReader44;
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int54 = parseErrorList53.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray55 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList56 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList56, parseErrorArray55);
        org.jsoup.parser.ParseError[] parseErrorArray58 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList59 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59, parseErrorArray58);
        boolean boolean61 = parseErrorList56.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59);
        org.jsoup.parser.ParseError[] parseErrorArray62 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList63 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList63, parseErrorArray62);
        boolean boolean65 = parseErrorList59.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList63);
        parseErrorList63.clear();
        boolean boolean67 = parseErrorList53.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList63);
        xmlTreeBuilder42.initialiseParse("<Doctype>", "a", parseErrorList53);
        org.jsoup.parser.Token.Character character70 = new org.jsoup.parser.Token.Character("100: ");
        xmlTreeBuilder42.insert(character70);
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder23.insert(character70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNull(document5);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(elementList19);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNull(document24);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertNotNull(parseErrorStream33);
        org.junit.Assert.assertNotNull(parseErrorItor34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(elementList38);
        org.junit.Assert.assertNotNull(parser41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "StartTag" + "'", str48, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(parseErrorArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(parseErrorArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        boolean boolean3 = parseErrorList1.canAddError();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList1.iterator();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList1.parallelStream();
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.RawtextEndTagName;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.CharacterReader characterReader10 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean12 = characterReader10.matches('\000');
        characterReader10.mark();
        boolean boolean14 = characterReader10.isEmpty();
        java.lang.String str15 = characterReader10.consumeToEnd();
        // The following exception was thrown during execution in test generation
        try {
            tokeniserState0.read(tokeniser7, characterReader10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "StartTag" + "'", str15, "StartTag");
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        boolean boolean12 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        java.lang.String str13 = parseErrorList1.toString();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList1.stream();
        java.lang.Object[] objArray15 = parseErrorList1.toArray();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder16 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.nodes.Document document22 = htmlTreeBuilder16.parse("0: Doctype", "hi!", parseErrorList20);
        boolean boolean23 = htmlTreeBuilder16.framesetOk();
        org.jsoup.parser.Parser parser24 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser26 = parser24.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document29 = parser24.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document32 = parser24.parseInput("<hi!>", "[]");
        htmlTreeBuilder16.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        boolean boolean34 = htmlTreeBuilder16.isFragmentParsing();
        htmlTreeBuilder16.clearStackToTableContext();
        int int36 = parseErrorList1.indexOf((java.lang.Object) htmlTreeBuilder16);
        htmlTreeBuilder16.setFosterInserts(false);
        htmlTreeBuilder16.generateImpliedEndTags("");
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parser24);
        org.junit.Assert.assertNotNull(parser26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
        org.jsoup.parser.TreeBuilder treeBuilder2 = null;
        org.jsoup.parser.Parser parser3 = parser1.setTreeBuilder(treeBuilder2);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder4 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document5 = xmlTreeBuilder4.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder6 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        boolean boolean16 = parseErrorList11.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        xmlTreeBuilder6.initialiseParse("<!---->", "hi!", parseErrorList11);
        xmlTreeBuilder4.errors = parseErrorList11;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList19 = xmlTreeBuilder4.stack;
        org.jsoup.parser.CharacterReader characterReader20 = null;
        xmlTreeBuilder4.reader = characterReader20;
        org.jsoup.parser.Parser parser22 = parser1.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder4);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder23 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document24 = xmlTreeBuilder23.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder25 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream33 = parseErrorList32.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor34 = parseErrorList32.iterator();
        boolean boolean35 = parseErrorList30.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32);
        xmlTreeBuilder25.initialiseParse("<!---->", "hi!", parseErrorList30);
        xmlTreeBuilder23.errors = parseErrorList30;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList38 = xmlTreeBuilder23.stack;
        org.jsoup.parser.CharacterReader characterReader39 = null;
        xmlTreeBuilder23.reader = characterReader39;
        org.jsoup.parser.Parser parser41 = parser22.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder23);
        org.jsoup.parser.ParseErrorList parseErrorList46 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        parseErrorList46.trimToSize();
        java.util.List<org.jsoup.nodes.Node> nodeList48 = xmlTreeBuilder23.parseFragment("ndTag", "artTag", parseErrorList46);
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNull(document5);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(elementList19);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNull(document24);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertNotNull(parseErrorStream33);
        org.junit.Assert.assertNotNull(parseErrorItor34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(elementList38);
        org.junit.Assert.assertNotNull(parser41);
        org.junit.Assert.assertNotNull(nodeList48);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.jsoup.parser.ParseError parseError2 = new org.jsoup.parser.ParseError((int) 'S', "hi!");
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormSubmittable();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        boolean boolean19 = doctype18.isCharacter();
        tokeniser6.doctypePending = doctype18;
        org.jsoup.parser.Token.Comment comment21 = new org.jsoup.parser.Token.Comment();
        java.lang.String str22 = comment21.toString();
        java.lang.StringBuilder stringBuilder23 = comment21.data;
        tokeniser6.commentPending = comment21;
        java.lang.String str25 = comment21.toString();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<!---->" + "'", str22, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder23);
        org.junit.Assert.assertEquals(stringBuilder23.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "<!---->" + "'", str25, "<!---->");
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        boolean boolean7 = tokeniser6.isAppropriateEndTagToken();
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        java.lang.StringBuilder stringBuilder10 = null;
        tokeniser6.dataBuffer = stringBuilder10;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = tokeniser6.appropriateEndTagName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(tag9);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        endTag0.tagName = "hi!";
        endTag0.selfClosing = false;
        boolean boolean5 = endTag0.isEOF();
        org.jsoup.parser.Token.Tag tag7 = endTag0.name(" EndTag");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(tag7);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.resetInsertionMode();
        htmlTreeBuilder0.popStackToBefore("EndTag");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = htmlTreeBuilder0.state();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder11 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int16 = parseErrorList15.getMaxSize();
        org.jsoup.nodes.Document document17 = htmlTreeBuilder11.parse("0: Doctype", "hi!", parseErrorList15);
        boolean boolean18 = htmlTreeBuilder11.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState19 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder11.error(htmlTreeBuilderState19);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = null;
        htmlTreeBuilder11.transition(htmlTreeBuilderState21);
        org.jsoup.parser.Parser parser23 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.nodes.Document document26 = parser23.parseInput("", "hi!");
        org.jsoup.nodes.Document document29 = parser23.parseInput("hi!", "hi!");
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parse("hi!", "<!---->");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder33 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList37 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int38 = parseErrorList37.getMaxSize();
        org.jsoup.nodes.Document document39 = htmlTreeBuilder33.parse("0: Doctype", "hi!", parseErrorList37);
        boolean boolean40 = htmlTreeBuilder33.framesetOk();
        org.jsoup.parser.Parser parser41 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser43 = parser41.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document46 = parser41.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document49 = parser41.parseInput("<hi!>", "[]");
        htmlTreeBuilder33.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document49);
        org.jsoup.nodes.Document document53 = org.jsoup.parser.Parser.parse("", "Doctype");
        org.jsoup.nodes.Element[] elementArray54 = new org.jsoup.nodes.Element[] { document29, document32, document49, document53 };
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList55 = new org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.jsoup.nodes.Element>) elementList55, elementArray54);
        htmlTreeBuilder11.stack = elementList55;
        htmlTreeBuilder0.stack = elementList55;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder60 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList64 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int65 = parseErrorList64.getMaxSize();
        org.jsoup.nodes.Document document66 = htmlTreeBuilder60.parse("0: Doctype", "hi!", parseErrorList64);
        boolean boolean67 = htmlTreeBuilder60.framesetOk();
        org.jsoup.parser.Parser parser68 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser70 = parser68.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document73 = parser68.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document76 = parser68.parseInput("<hi!>", "[]");
        htmlTreeBuilder60.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document76);
        java.lang.String[] strArray78 = new java.lang.String[] {};
        boolean boolean79 = htmlTreeBuilder60.inScope(strArray78);
        htmlTreeBuilder60.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder81 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList85 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int86 = parseErrorList85.getMaxSize();
        org.jsoup.nodes.Document document87 = htmlTreeBuilder81.parse("0: Doctype", "hi!", parseErrorList85);
        htmlTreeBuilder60.setHeadElement((org.jsoup.nodes.Element) document87);
        org.jsoup.parser.ParseErrorList parseErrorList90 = null;
        java.util.List<org.jsoup.nodes.Node> nodeList91 = htmlTreeBuilder0.parseFragment("-1: []", (org.jsoup.nodes.Element) document87, "\uffff", parseErrorList90);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState10);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState19);
        org.junit.Assert.assertNotNull(parser23);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(parseErrorList37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parser41);
        org.junit.Assert.assertNotNull(parser43);
        org.junit.Assert.assertNotNull(document46);
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertNotNull(elementArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(parseErrorList64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(document66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(parser68);
        org.junit.Assert.assertNotNull(parser70);
        org.junit.Assert.assertNotNull(document73);
        org.junit.Assert.assertNotNull(document76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(parseErrorList85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(document87);
        org.junit.Assert.assertNotNull(nodeList91);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        startTag0.appendAttributeValue("hi!");
        startTag0.appendAttributeValue("");
        org.jsoup.nodes.Attributes attributes5 = null;
        startTag0.attributes = attributes5;
        startTag0.appendAttributeValue("");
        org.jsoup.nodes.Attributes attributes9 = startTag0.attributes;
        org.junit.Assert.assertNull(attributes9);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        htmlTreeBuilder0.markInsertionMode();
        htmlTreeBuilder0.framesetOk(true);
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState4 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader5 = null;
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor10 = parseErrorList7.iterator();
        org.jsoup.parser.Tokeniser tokeniser11 = new org.jsoup.parser.Tokeniser(characterReader5, parseErrorList7);
        org.jsoup.parser.Token.Tag tag12 = tokeniser11.tagPending;
        java.lang.StringBuilder stringBuilder13 = null;
        tokeniser11.dataBuffer = stringBuilder13;
        org.jsoup.parser.Token.EndTag endTag15 = new org.jsoup.parser.Token.EndTag();
        char[] charArray18 = new char[] { '#', '#' };
        endTag15.appendAttributeValue(charArray18);
        tokeniser11.emit(charArray18);
        org.jsoup.parser.Token.Comment comment21 = tokeniser11.commentPending;
        org.jsoup.parser.CharacterReader characterReader23 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean24 = characterReader23.matchesLetter();
        miniSoupTokeniserState4.read(tokeniser11, characterReader23);
        htmlTreeBuilder0.tokeniser = tokeniser11;
        tokeniser11.createDoctypePending();
        org.junit.Assert.assertNotNull(miniSoupTokeniserState4);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertNotNull(parseErrorItor10);
        org.junit.Assert.assertNull(tag12);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#, #]");
        org.junit.Assert.assertNull(comment21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList1.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int7 = parseErrorList6.getMaxSize();
        boolean boolean8 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList6);
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        boolean boolean16 = parseErrorList1.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList10.stream();
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(parseErrorStream17);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.parser.Token token10 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        boolean boolean21 = parseErrorList14.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        org.jsoup.nodes.Document document22 = htmlTreeBuilder0.parse("[]", "hi!", parseErrorList19);
        org.jsoup.nodes.Element element23 = htmlTreeBuilder0.pop();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList28 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int29 = parseErrorList28.getMaxSize();
        org.jsoup.nodes.Document document30 = htmlTreeBuilder24.parse("0: Doctype", "hi!", parseErrorList28);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder31 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList35 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int36 = parseErrorList35.getMaxSize();
        org.jsoup.nodes.Document document37 = htmlTreeBuilder31.parse("0: Doctype", "hi!", parseErrorList35);
        boolean boolean38 = htmlTreeBuilder31.framesetOk();
        org.jsoup.nodes.Document document41 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder31.setHeadElement((org.jsoup.nodes.Element) document41);
        org.jsoup.nodes.Element element43 = htmlTreeBuilder31.pop();
        htmlTreeBuilder24.pushActiveFormattingElements(element43);
        org.jsoup.nodes.Element element46 = htmlTreeBuilder24.insert("[100: ]");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder47 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList51 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int52 = parseErrorList51.getMaxSize();
        org.jsoup.nodes.Document document53 = htmlTreeBuilder47.parse("0: Doctype", "hi!", parseErrorList51);
        boolean boolean54 = htmlTreeBuilder47.framesetOk();
        org.jsoup.parser.Parser parser55 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser57 = parser55.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document60 = parser55.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document63 = parser55.parseInput("<hi!>", "[]");
        htmlTreeBuilder47.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document63);
        java.lang.String[] strArray65 = new java.lang.String[] {};
        boolean boolean66 = htmlTreeBuilder47.inScope(strArray65);
        htmlTreeBuilder47.markInsertionMode();
        boolean boolean69 = htmlTreeBuilder47.inScope("StartTag");
        org.jsoup.parser.Token.StartTag startTag70 = new org.jsoup.parser.Token.StartTag();
        startTag70.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag74 = startTag70.name("hi!#");
        boolean boolean75 = startTag70.isStartTag();
        startTag70.appendTagName('a');
        org.jsoup.nodes.Element element78 = htmlTreeBuilder47.insertEmpty(startTag70);
        java.lang.String str79 = htmlTreeBuilder47.getBaseUri();
        org.jsoup.nodes.Document document82 = htmlTreeBuilder47.parse("\uffff", "<!---->");
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.insertOnStackAfter(element46, (org.jsoup.nodes.Element) document82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(token10);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(parseErrorList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNotNull(parseErrorList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(element43);
        org.junit.Assert.assertNotNull(element46);
        org.junit.Assert.assertNotNull(parseErrorList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(parser55);
        org.junit.Assert.assertNotNull(parser57);
        org.junit.Assert.assertNotNull(document60);
        org.junit.Assert.assertNotNull(document63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(tag74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(element78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
        org.junit.Assert.assertNotNull(document82);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        java.lang.StringBuilder stringBuilder9 = null;
        tokeniser7.dataBuffer = stringBuilder9;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        tokeniser7.emit(charArray14);
        org.jsoup.parser.Token.Comment comment17 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean20 = characterReader19.matchesLetter();
        miniSoupTokeniserState0.read(tokeniser7, characterReader19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        org.jsoup.parser.Token.Tag tag31 = tokeniser28.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype32 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype33 = doctype32.asDoctype();
        java.lang.String str34 = doctype32.tokenType();
        tokeniser28.emit((org.jsoup.parser.Token) doctype32);
        org.jsoup.parser.ITokeniserState iTokeniserState36 = tokeniser28.getState();
        org.jsoup.parser.Token.Comment comment37 = new org.jsoup.parser.Token.Comment();
        java.lang.String str38 = comment37.toString();
        java.lang.StringBuilder stringBuilder39 = comment37.data;
        boolean boolean40 = comment37.isEndTag();
        boolean boolean41 = comment37.isComment();
        tokeniser28.commentPending = comment37;
        org.jsoup.parser.CharacterReader characterReader44 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean46 = characterReader44.matches('\000');
        characterReader44.mark();
        boolean boolean48 = characterReader44.isEmpty();
        java.lang.String str49 = characterReader44.consumeToEnd();
        miniSoupTokeniserState0.read(tokeniser28, characterReader44);
        org.jsoup.parser.CharacterReader characterReader51 = null;
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream54 = parseErrorList53.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList53.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor56 = parseErrorList53.iterator();
        org.jsoup.parser.Tokeniser tokeniser57 = new org.jsoup.parser.Tokeniser(characterReader51, parseErrorList53);
        org.jsoup.parser.Token.Tag tag58 = tokeniser57.tagPending;
        tokeniser57.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag62 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType63 = startTag62.type;
        startTag62.appendTagName('#');
        tokeniser57.tagPending = startTag62;
        tokeniser57.acknowledgeSelfClosingFlag();
        org.jsoup.parser.CharacterReader characterReader69 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean71 = characterReader69.matches('\uffff');
        miniSoupTokeniserState0.read(tokeniser57, characterReader69);
        boolean boolean74 = characterReader69.containsIgnoreCase("</hi![]>");
        java.lang.String str75 = characterReader69.toString();
        java.lang.String str76 = characterReader69.consumeDigitSequence();
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertNotNull(doctype33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Doctype" + "'", str34, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<!---->" + "'", str38, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder39);
        org.junit.Assert.assertEquals(stringBuilder39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "StartTag" + "'", str49, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertNotNull(parseErrorStream54);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertNotNull(parseErrorItor56);
        org.junit.Assert.assertNull(tag58);
        org.junit.Assert.assertTrue("'" + tokenType63 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType63.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "StartTag" + "'", str75, "StartTag");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        boolean boolean13 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.ParseErrorList parseErrorList18 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        htmlTreeBuilder0.initialiseParse("</hi![]>", "0: []", parseErrorList18);
        htmlTreeBuilder0.resetInsertionMode();
        org.jsoup.parser.Token.Doctype doctype21 = new org.jsoup.parser.Token.Doctype();
        boolean boolean22 = doctype21.isCharacter();
        java.lang.StringBuilder stringBuilder23 = doctype21.systemIdentifier;
        org.jsoup.parser.Token.StartTag startTag25 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType26 = startTag25.type;
        doctype21.type = tokenType26;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = htmlTreeBuilder0.process((org.jsoup.parser.Token) doctype21);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$StartTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(stringBuilder23);
        org.junit.Assert.assertEquals(stringBuilder23.toString(), "");
        org.junit.Assert.assertTrue("'" + tokenType26 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType26.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.EndTag endTag7 = new org.jsoup.parser.Token.EndTag();
        char[] charArray10 = new char[] { '#', '#' };
        endTag7.appendAttributeValue(charArray10);
        endTag7.appendAttributeValue(' ');
        char[] charArray15 = new char[] { '4' };
        endTag7.appendAttributeValue(charArray15);
        tokeniser6.emit(charArray15);
        org.jsoup.parser.Token.Tag tag18 = tokeniser6.tagPending;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder19 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        org.jsoup.nodes.Document document25 = htmlTreeBuilder19.parse("0: Doctype", "hi!", parseErrorList23);
        boolean boolean26 = htmlTreeBuilder19.framesetOk();
        org.jsoup.parser.Parser parser27 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser29 = parser27.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document32 = parser27.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document35 = parser27.parseInput("<hi!>", "[]");
        htmlTreeBuilder19.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.parser.Token.Doctype doctype37 = new org.jsoup.parser.Token.Doctype();
        boolean boolean38 = doctype37.isCharacter();
        boolean boolean39 = doctype37.isEndTag();
        htmlTreeBuilder19.currentToken = doctype37;
        tokeniser6.emit((org.jsoup.parser.Token) doctype37);
        org.jsoup.parser.TokeniserState tokeniserState42 = org.jsoup.parser.TokeniserState.Rcdata;
        tokeniser6.error((org.jsoup.parser.ITokeniserState) tokeniserState42);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4]");
        org.junit.Assert.assertNull(tag18);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(parser27);
        org.junit.Assert.assertNotNull(parser29);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(tokeniserState42);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking((int) (byte) 0);
        org.jsoup.parser.Token.EndTag endTag8 = new org.jsoup.parser.Token.EndTag();
        char[] charArray11 = new char[] { '#', '#' };
        endTag8.appendAttributeValue(charArray11);
        endTag8.finaliseTag();
        boolean boolean14 = endTag8.isSelfClosing();
        org.jsoup.parser.Tag tag16 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean17 = tag16.isFormListed();
        org.jsoup.parser.Tag tag18 = tag16.setSelfClosing();
        boolean boolean19 = tag16.isKnownTag();
        java.lang.Object[] objArray21 = new java.lang.Object[] { boolean14, tag16, "Doctype" };
        org.jsoup.parser.ParseError parseError22 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray21);
        org.jsoup.parser.ParseError parseError23 = new org.jsoup.parser.ParseError((int) (short) -1, "[]", objArray21);
        org.jsoup.parser.ParseError parseError24 = new org.jsoup.parser.ParseError((int) (byte) 10, "", objArray21);
        boolean boolean25 = parseErrorList1.add(parseError24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList1.listIterator(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(tag16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(tag18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        org.jsoup.parser.Token.StartTag startTag19 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes20 = startTag19.getAttributes();
        org.jsoup.parser.Token.StartTag startTag21 = new org.jsoup.parser.Token.StartTag("<!---->", attributes20);
        org.jsoup.nodes.Element element22 = htmlTreeBuilder0.insert(startTag21);
        boolean boolean24 = htmlTreeBuilder0.inScope("[]");
        org.jsoup.parser.Tokeniser tokeniser25 = htmlTreeBuilder0.tokeniser;
        tokeniser25.createCommentPending();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(attributes20);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(tokeniser25);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        java.util.List<org.jsoup.parser.ParseError> parseErrorList2 = parser1.getErrors();
        org.jsoup.nodes.Document document5 = parser1.parseInput("\uffff", "tartTag");
        org.junit.Assert.assertNull(parseErrorList2);
        org.junit.Assert.assertNotNull(document5);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.jsoup.parser.ParseError parseError2 = new org.jsoup.parser.ParseError((int) (byte) 1, "Doctype");
        java.lang.String str3 = parseError2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1: Doctype" + "'", str3, "1: Doctype");
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        boolean boolean25 = parseErrorList18.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23);
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList23);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList23.iterator();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("[]", "Doctype", parseErrorList23);
        org.jsoup.parser.CharacterReader characterReader31 = null;
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream34 = parseErrorList33.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList33.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor36 = parseErrorList33.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int39 = parseErrorList38.getMaxSize();
        boolean boolean40 = parseErrorList33.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        org.jsoup.parser.Tokeniser tokeniser41 = new org.jsoup.parser.Tokeniser(characterReader31, parseErrorList38);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        boolean boolean45 = parseErrorList43.canAddError();
        boolean boolean46 = parseErrorList38.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        org.jsoup.nodes.Document document47 = htmlTreeBuilder0.parse("hi!", "<!---->", parseErrorList43);
        org.jsoup.parser.Tokeniser tokeniser48 = htmlTreeBuilder0.tokeniser;
        org.jsoup.parser.Parser parser49 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser51 = parser49.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document54 = parser49.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document57 = parser49.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document57);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder59 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList63 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int64 = parseErrorList63.getMaxSize();
        org.jsoup.nodes.Document document65 = htmlTreeBuilder59.parse("0: Doctype", "hi!", parseErrorList63);
        boolean boolean66 = htmlTreeBuilder59.framesetOk();
        org.jsoup.nodes.Document document69 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder59.setHeadElement((org.jsoup.nodes.Element) document69);
        org.jsoup.nodes.Document document73 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder59.setHeadElement((org.jsoup.nodes.Element) document73);
        boolean boolean75 = htmlTreeBuilder0.onStack((org.jsoup.nodes.Element) document73);
        boolean boolean77 = htmlTreeBuilder0.inListItemScope("Comment");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertNotNull(parseErrorStream34);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNotNull(parseErrorItor36);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(tokeniser48);
        org.junit.Assert.assertNotNull(parser49);
        org.junit.Assert.assertNotNull(parser51);
        org.junit.Assert.assertNotNull(document54);
        org.junit.Assert.assertNotNull(document57);
        org.junit.Assert.assertNotNull(parseErrorList63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(document69);
        org.junit.Assert.assertNotNull(document73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isSelfClosing();
        java.lang.String str5 = tag1.toString();
        boolean boolean6 = tag1.isFormSubmittable();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.preserveWhitespace();
        boolean boolean3 = tag1.isKnownTag();
        java.lang.String str4 = tag1.toString();
        boolean boolean5 = tag1.preserveWhitespace();
        java.lang.String str6 = tag1.toString();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        java.lang.String str2 = org.jsoup.parser.Parser.unescapeEntities("<hi!#>", true);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "<hi!#>" + "'", str2, "<hi!#>");
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        startTag0.appendAttributeValue("hi!");
        startTag0.finaliseTag();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Character character4 = startTag0.asCharacter();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Character");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        boolean boolean15 = parseErrorList10.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        java.lang.Object[] objArray16 = parseErrorList10.toArray();
        parseErrorList10.clear();
        org.jsoup.parser.ParseError[] parseErrorArray18 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList19 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19, parseErrorArray18);
        boolean boolean21 = parseErrorList10.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        boolean boolean22 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        parseErrorList19.ensureCapacity((int) (byte) 10);
        boolean boolean25 = parseErrorList19.isEmpty();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        htmlTreeBuilder0.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document32);
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        org.jsoup.parser.CharacterReader characterReader35 = htmlTreeBuilder0.reader;
        java.lang.String str37 = characterReader35.consumeTo('\ufffd');
        boolean boolean39 = characterReader35.matches(' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = characterReader35.containsIgnoreCase("");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(characterReader35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        htmlTreeBuilder0.newPendingTableCharacters();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder13.error(htmlTreeBuilderState21);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState23 = null;
        htmlTreeBuilder13.transition(htmlTreeBuilderState23);
        htmlTreeBuilder13.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement27 = htmlTreeBuilder13.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        boolean boolean40 = parseErrorList38.canAddError();
        org.jsoup.nodes.Document document41 = htmlTreeBuilder28.parse("EndTag", "hi!#", parseErrorList38);
        java.lang.String[] strArray49 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean50 = htmlTreeBuilder28.inScope("hi!#", strArray49);
        org.jsoup.parser.ParseErrorList parseErrorList55 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document56 = htmlTreeBuilder28.parse("0: Doctype", "", parseErrorList55);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder57 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document58 = xmlTreeBuilder57.doc;
        org.jsoup.parser.ParseErrorList parseErrorList62 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int63 = parseErrorList62.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray64 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList65 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList65, parseErrorArray64);
        org.jsoup.parser.ParseError[] parseErrorArray67 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList68 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList68, parseErrorArray67);
        boolean boolean70 = parseErrorList65.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList68);
        org.jsoup.parser.ParseError[] parseErrorArray71 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList72 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList72, parseErrorArray71);
        boolean boolean74 = parseErrorList68.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList72);
        parseErrorList72.clear();
        boolean boolean76 = parseErrorList62.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList72);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor77 = parseErrorList62.iterator();
        org.jsoup.nodes.Document document78 = xmlTreeBuilder57.parse("<hi!>", "0: []", parseErrorList62);
        htmlTreeBuilder28.push((org.jsoup.nodes.Element) document78);
        htmlTreeBuilder13.setHeadElement((org.jsoup.nodes.Element) document78);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder81 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList85 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int86 = parseErrorList85.getMaxSize();
        org.jsoup.nodes.Document document87 = htmlTreeBuilder81.parse("0: Doctype", "hi!", parseErrorList85);
        boolean boolean88 = htmlTreeBuilder81.framesetOk();
        org.jsoup.nodes.Element element89 = htmlTreeBuilder81.currentElement();
        boolean boolean90 = htmlTreeBuilder13.isInActiveFormattingElements(element89);
        htmlTreeBuilder0.maybeSetBaseUri(element89);
        htmlTreeBuilder0.reconstructFormattingElements();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState21);
        org.junit.Assert.assertNull(formElement27);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(document56);
        org.junit.Assert.assertNull(document58);
        org.junit.Assert.assertNotNull(parseErrorList62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(parseErrorArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(parseErrorArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(parseErrorItor77);
        org.junit.Assert.assertNotNull(document78);
        org.junit.Assert.assertNotNull(parseErrorList85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(document87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(element89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token token1 = xmlTreeBuilder0.currentToken;
        org.jsoup.parser.CharacterReader characterReader2 = null;
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.iterator();
        org.jsoup.parser.Tokeniser tokeniser8 = new org.jsoup.parser.Tokeniser(characterReader2, parseErrorList4);
        org.jsoup.parser.Token.Tag tag9 = tokeniser8.tagPending;
        org.jsoup.parser.Token.Tag tag11 = tokeniser8.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype12 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype13 = doctype12.asDoctype();
        java.lang.String str14 = doctype12.tokenType();
        tokeniser8.emit((org.jsoup.parser.Token) doctype12);
        org.jsoup.parser.Token.Tag tag17 = tokeniser8.createTagPending(true);
        xmlTreeBuilder0.tokeniser = tokeniser8;
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        java.lang.StringBuilder stringBuilder27 = null;
        tokeniser25.dataBuffer = stringBuilder27;
        org.jsoup.parser.Token.Tag tag30 = tokeniser25.createTagPending(false);
        org.jsoup.parser.Token.Tag tag32 = tag30.name("hi!#");
        tokeniser8.tagPending = tag30;
        tokeniser8.emit("\uffff");
        org.junit.Assert.assertNull(token1);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNull(tag9);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(doctype13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Doctype" + "'", str14, "Doctype");
        org.junit.Assert.assertNotNull(tag17);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag30);
        org.junit.Assert.assertNotNull(tag32);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        java.lang.String str1 = org.jsoup.parser.TokenQueue.unescape("\uffff");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uffff" + "'", str1, "\uffff");
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        htmlTreeBuilder0.newPendingTableCharacters();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder13.error(htmlTreeBuilderState21);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState23 = null;
        htmlTreeBuilder13.transition(htmlTreeBuilderState23);
        htmlTreeBuilder13.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement27 = htmlTreeBuilder13.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        boolean boolean40 = parseErrorList38.canAddError();
        org.jsoup.nodes.Document document41 = htmlTreeBuilder28.parse("EndTag", "hi!#", parseErrorList38);
        java.lang.String[] strArray49 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean50 = htmlTreeBuilder28.inScope("hi!#", strArray49);
        org.jsoup.parser.ParseErrorList parseErrorList55 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document56 = htmlTreeBuilder28.parse("0: Doctype", "", parseErrorList55);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder57 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document58 = xmlTreeBuilder57.doc;
        org.jsoup.parser.ParseErrorList parseErrorList62 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int63 = parseErrorList62.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray64 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList65 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList65, parseErrorArray64);
        org.jsoup.parser.ParseError[] parseErrorArray67 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList68 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList68, parseErrorArray67);
        boolean boolean70 = parseErrorList65.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList68);
        org.jsoup.parser.ParseError[] parseErrorArray71 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList72 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList72, parseErrorArray71);
        boolean boolean74 = parseErrorList68.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList72);
        parseErrorList72.clear();
        boolean boolean76 = parseErrorList62.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList72);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor77 = parseErrorList62.iterator();
        org.jsoup.nodes.Document document78 = xmlTreeBuilder57.parse("<hi!>", "0: []", parseErrorList62);
        htmlTreeBuilder28.push((org.jsoup.nodes.Element) document78);
        htmlTreeBuilder13.setHeadElement((org.jsoup.nodes.Element) document78);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder81 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList85 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int86 = parseErrorList85.getMaxSize();
        org.jsoup.nodes.Document document87 = htmlTreeBuilder81.parse("0: Doctype", "hi!", parseErrorList85);
        boolean boolean88 = htmlTreeBuilder81.framesetOk();
        org.jsoup.nodes.Element element89 = htmlTreeBuilder81.currentElement();
        boolean boolean90 = htmlTreeBuilder13.isInActiveFormattingElements(element89);
        htmlTreeBuilder0.maybeSetBaseUri(element89);
        htmlTreeBuilder0.clearStackToTableContext();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState21);
        org.junit.Assert.assertNull(formElement27);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(document56);
        org.junit.Assert.assertNull(document58);
        org.junit.Assert.assertNotNull(parseErrorList62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(parseErrorArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(parseErrorArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(parseErrorItor77);
        org.junit.Assert.assertNotNull(document78);
        org.junit.Assert.assertNotNull(parseErrorList85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(document87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(element89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.parser.Token token10 = htmlTreeBuilder0.currentToken;
        htmlTreeBuilder0.framesetOk(true);
        boolean boolean13 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder14 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int19 = parseErrorList18.getMaxSize();
        org.jsoup.nodes.Document document20 = htmlTreeBuilder14.parse("0: Doctype", "hi!", parseErrorList18);
        htmlTreeBuilder14.generateImpliedEndTags("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder23 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList27 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int28 = parseErrorList27.getMaxSize();
        org.jsoup.nodes.Document document29 = htmlTreeBuilder23.parse("0: Doctype", "hi!", parseErrorList27);
        boolean boolean30 = htmlTreeBuilder23.framesetOk();
        org.jsoup.nodes.Document document33 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder23.setHeadElement((org.jsoup.nodes.Element) document33);
        org.jsoup.nodes.Document document37 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder23.setHeadElement((org.jsoup.nodes.Element) document37);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder40 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int45 = parseErrorList44.getMaxSize();
        org.jsoup.nodes.Document document46 = htmlTreeBuilder40.parse("0: Doctype", "hi!", parseErrorList44);
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream51 = parseErrorList50.stream();
        boolean boolean52 = parseErrorList50.canAddError();
        org.jsoup.nodes.Document document53 = htmlTreeBuilder40.parse("EndTag", "hi!#", parseErrorList50);
        java.lang.String[] strArray61 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean62 = htmlTreeBuilder40.inScope("hi!#", strArray61);
        boolean boolean63 = htmlTreeBuilder23.inScope("hi!#", strArray61);
        htmlTreeBuilder14.popStackToClose(strArray61);
        org.jsoup.nodes.Document document65 = htmlTreeBuilder14.doc;
        htmlTreeBuilder0.push((org.jsoup.nodes.Element) document65);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(token10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNotNull(parseErrorList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(document46);
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertNotNull(parseErrorStream51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(document65);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean4 = tokenQueue1.matchChomp("<hi!>");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.CharacterReader characterReader3 = null;
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream6 = parseErrorList5.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList5.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList5.iterator();
        org.jsoup.parser.Tokeniser tokeniser9 = new org.jsoup.parser.Tokeniser(characterReader3, parseErrorList5);
        org.jsoup.parser.Token.Tag tag10 = tokeniser9.tagPending;
        org.jsoup.parser.Token.Tag tag12 = tokeniser9.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype13 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype14 = doctype13.asDoctype();
        java.lang.String str15 = doctype13.tokenType();
        tokeniser9.emit((org.jsoup.parser.Token) doctype13);
        boolean boolean17 = tag1.equals((java.lang.Object) doctype13);
        boolean boolean18 = tag1.isKnownTag();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorStream6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNull(tag10);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertNotNull(doctype14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Doctype" + "'", str15, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        boolean boolean9 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList7);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        boolean boolean14 = parseErrorList12.canAddError();
        boolean boolean15 = parseErrorList7.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        parseErrorList12.ensureCapacity((int) ' ');
        boolean boolean18 = parseErrorList12.isEmpty();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        tokenQueue1.advance();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder8 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int13 = parseErrorList12.getMaxSize();
        org.jsoup.nodes.Document document14 = htmlTreeBuilder8.parse("0: Doctype", "hi!", parseErrorList12);
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        boolean boolean20 = parseErrorList18.canAddError();
        org.jsoup.nodes.Document document21 = htmlTreeBuilder8.parse("EndTag", "hi!#", parseErrorList18);
        java.lang.String[] strArray29 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean30 = htmlTreeBuilder8.inScope("hi!#", strArray29);
        java.lang.String str31 = tokenQueue1.consumeToAny(strArray29);
        boolean boolean32 = tokenQueue1.isEmpty();
        boolean boolean33 = tokenQueue1.matchesWord();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        org.jsoup.parser.Token.Tag tag15 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.EndTag endTag16 = new org.jsoup.parser.Token.EndTag();
        endTag16.newAttribute();
        tokeniser6.tagPending = endTag16;
        org.jsoup.parser.Token.Doctype doctype19 = tokeniser6.doctypePending;
        java.lang.StringBuilder stringBuilder20 = tokeniser6.dataBuffer;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder21 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int26 = parseErrorList25.getMaxSize();
        org.jsoup.nodes.Document document27 = htmlTreeBuilder21.parse("0: Doctype", "hi!", parseErrorList25);
        boolean boolean28 = htmlTreeBuilder21.framesetOk();
        org.jsoup.parser.Parser parser29 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser31 = parser29.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document34 = parser29.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document37 = parser29.parseInput("<hi!>", "[]");
        htmlTreeBuilder21.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document37);
        boolean boolean39 = htmlTreeBuilder21.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder40 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList45 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList47 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream48 = parseErrorList47.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList47.iterator();
        boolean boolean50 = parseErrorList45.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList47);
        xmlTreeBuilder40.initialiseParse("<!---->", "hi!", parseErrorList45);
        org.jsoup.parser.ParseErrorList parseErrorList55 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document56 = xmlTreeBuilder40.parse("", "[]", parseErrorList55);
        boolean boolean57 = htmlTreeBuilder21.isInActiveFormattingElements((org.jsoup.nodes.Element) document56);
        org.jsoup.nodes.Element element59 = htmlTreeBuilder21.insert("<!---->");
        org.jsoup.parser.Token.StartTag startTag61 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag61.appendTagName("hi!");
        startTag61.appendAttributeName('4');
        boolean boolean66 = htmlTreeBuilder21.process((org.jsoup.parser.Token) startTag61);
        org.jsoup.parser.Token.EndTag endTag67 = new org.jsoup.parser.Token.EndTag();
        char[] charArray70 = new char[] { '#', '#' };
        endTag67.appendAttributeValue(charArray70);
        endTag67.appendAttributeValue(' ');
        char[] charArray75 = new char[] { '4' };
        endTag67.appendAttributeValue(charArray75);
        startTag61.appendAttributeValue(charArray75);
        tokeniser6.emit(charArray75);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertNotNull(tag15);
        org.junit.Assert.assertNull(doctype19);
        org.junit.Assert.assertNull(stringBuilder20);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(parser29);
        org.junit.Assert.assertNotNull(parser31);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(parseErrorList47);
        org.junit.Assert.assertNotNull(parseErrorStream48);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(parseErrorList55);
        org.junit.Assert.assertNotNull(document56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(element59);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[#, #]");
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[4]");
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("<!---->");
        boolean boolean2 = tokenQueue1.consumeWhitespace();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Token token8 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState9 = org.jsoup.parser.HtmlTreeBuilderState.InTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState9);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder11 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int16 = parseErrorList15.getMaxSize();
        org.jsoup.nodes.Document document17 = htmlTreeBuilder11.parse("0: Doctype", "hi!", parseErrorList15);
        boolean boolean18 = htmlTreeBuilder11.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState19 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder11.error(htmlTreeBuilderState19);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = null;
        htmlTreeBuilder11.transition(htmlTreeBuilderState21);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList23 = htmlTreeBuilder11.stack;
        org.jsoup.parser.Token.StartTag startTag25 = new org.jsoup.parser.Token.StartTag("<!---->");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState26 = org.jsoup.parser.HtmlTreeBuilderState.AfterFrameset;
        boolean boolean27 = htmlTreeBuilder11.process((org.jsoup.parser.Token) startTag25, htmlTreeBuilderState26);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        boolean boolean35 = htmlTreeBuilder28.framesetOk();
        org.jsoup.parser.Parser parser36 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser38 = parser36.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document41 = parser36.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document44 = parser36.parseInput("<hi!>", "[]");
        htmlTreeBuilder28.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document44);
        java.lang.String[] strArray46 = new java.lang.String[] {};
        boolean boolean47 = htmlTreeBuilder28.inScope(strArray46);
        htmlTreeBuilder28.markInsertionMode();
        boolean boolean50 = htmlTreeBuilder28.inScope("StartTag");
        org.jsoup.parser.Token.StartTag startTag51 = new org.jsoup.parser.Token.StartTag();
        startTag51.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag55 = startTag51.name("hi!#");
        boolean boolean56 = startTag51.isStartTag();
        startTag51.appendTagName('a');
        org.jsoup.nodes.Element element59 = htmlTreeBuilder28.insertEmpty(startTag51);
        htmlTreeBuilder11.removeFromActiveFormattingElements(element59);
        org.jsoup.nodes.Document document63 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder11.pushActiveFormattingElements((org.jsoup.nodes.Element) document63);
        boolean boolean65 = htmlTreeBuilder0.removeFromStack((org.jsoup.nodes.Element) document63);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(token8);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState9);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState19);
        org.junit.Assert.assertNotNull(elementList23);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(parser36);
        org.junit.Assert.assertNotNull(parser38);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(tag55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(element59);
        org.junit.Assert.assertNotNull(document63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        boolean boolean3 = parseErrorList1.canAddError();
        org.jsoup.parser.ParseError parseError6 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str7 = parseError6.getErrorMessage();
        boolean boolean8 = parseErrorList1.add(parseError6);
        int int9 = parseErrorList1.size();
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.toString();
        java.lang.String str6 = tokenQueue1.toString();
        java.lang.String str8 = tokenQueue1.chompTo("EOF");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag3.preserveWhitespace();
        java.lang.String str5 = tag3.toString();
        boolean boolean6 = tag3.isData();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        java.lang.String str16 = startTag11.tagName;
        java.lang.String str17 = startTag11.tagName;
        startTag11.appendTagName("");
        org.jsoup.parser.Token.Tag tag21 = startTag11.name("");
        tag21.selfClosing = false;
        tag21.newAttribute();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Doctype doctype25 = tag21.asDoctype();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Doctype");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!#" + "'", str16, "hi!#");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!#" + "'", str17, "hi!#");
        org.junit.Assert.assertNotNull(tag21);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.CharacterReader characterReader16 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean18 = characterReader16.matches("[100: ]");
        htmlTreeBuilder0.reader = characterReader16;
        characterReader16.unconsume();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = characterReader16.consumeDigitSequence();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        boolean boolean1 = org.jsoup.parser.Tag.isKnownTag("-1: []");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList4.stream();
        org.jsoup.parser.Token.EndTag endTag17 = new org.jsoup.parser.Token.EndTag();
        char[] charArray20 = new char[] { '#', '#' };
        endTag17.appendAttributeValue(charArray20);
        endTag17.finaliseTag();
        boolean boolean23 = endTag17.isSelfClosing();
        org.jsoup.parser.Tag tag25 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean26 = tag25.isFormListed();
        org.jsoup.parser.Tag tag27 = tag25.setSelfClosing();
        boolean boolean28 = tag25.isKnownTag();
        java.lang.Object[] objArray30 = new java.lang.Object[] { boolean23, tag25, "Doctype" };
        org.jsoup.parser.ParseError parseError31 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray30);
        org.jsoup.parser.ParseError parseError32 = new org.jsoup.parser.ParseError((int) (byte) 0, "Doctype", objArray30);
        parseErrorList4.add((int) (short) 0, parseError32);
        org.jsoup.parser.ParseError[] parseErrorArray34 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList35 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList35, parseErrorArray34);
        org.jsoup.parser.ParseError[] parseErrorArray37 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList38 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38, parseErrorArray37);
        boolean boolean40 = parseErrorList35.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        int int42 = parseErrorList38.lastIndexOf((java.lang.Object) (byte) -1);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.noTracking();
        boolean boolean44 = parseErrorList38.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList38.parallelStream();
        boolean boolean46 = parseErrorList4.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder47 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList52 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList54 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream55 = parseErrorList54.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor56 = parseErrorList54.iterator();
        boolean boolean57 = parseErrorList52.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54);
        xmlTreeBuilder47.initialiseParse("<!---->", "hi!", parseErrorList52);
        int int60 = parseErrorList52.indexOf((java.lang.Object) '#');
        boolean boolean61 = parseErrorList38.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList52);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(tag25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(tag27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[false, hi!, Doctype]");
        org.junit.Assert.assertNotNull(parseErrorArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parseErrorArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(parseErrorList54);
        org.junit.Assert.assertNotNull(parseErrorStream55);
        org.junit.Assert.assertNotNull(parseErrorItor56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement14 = htmlTreeBuilder0.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder15 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        org.jsoup.nodes.Document document21 = htmlTreeBuilder15.parse("0: Doctype", "hi!", parseErrorList19);
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream26 = parseErrorList25.stream();
        boolean boolean27 = parseErrorList25.canAddError();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder15.parse("EndTag", "hi!#", parseErrorList25);
        java.lang.String[] strArray36 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean37 = htmlTreeBuilder15.inScope("hi!#", strArray36);
        org.jsoup.parser.ParseErrorList parseErrorList42 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document43 = htmlTreeBuilder15.parse("0: Doctype", "", parseErrorList42);
        boolean boolean44 = htmlTreeBuilder0.onStack((org.jsoup.nodes.Element) document43);
        org.jsoup.nodes.FormElement formElement45 = htmlTreeBuilder0.getFormElement();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState46 = htmlTreeBuilder0.state();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(formElement14);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertNotNull(parseErrorStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(formElement45);
        org.junit.Assert.assertNull(htmlTreeBuilderState46);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.jsoup.nodes.Element element1 = null;
        java.util.List<org.jsoup.nodes.Node> nodeList3 = org.jsoup.parser.Parser.parseFragment("1: Doctype", element1, "[]");
        org.junit.Assert.assertNotNull(nodeList3);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        boolean boolean3 = tag1.canContainBlock();
        java.lang.String str4 = tag1.getName();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder13.error(htmlTreeBuilderState21);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState23 = null;
        htmlTreeBuilder13.transition(htmlTreeBuilderState23);
        htmlTreeBuilder13.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList27 = htmlTreeBuilder13.getPendingTableCharacters();
        htmlTreeBuilder0.setPendingTableCharacters(characterList27);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder29 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int34 = parseErrorList33.getMaxSize();
        org.jsoup.nodes.Document document35 = htmlTreeBuilder29.parse("0: Doctype", "hi!", parseErrorList33);
        htmlTreeBuilder29.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray38 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList39 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList39, characterArray38);
        htmlTreeBuilder29.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList39);
        boolean boolean42 = htmlTreeBuilder29.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag44 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement46 = htmlTreeBuilder29.insertForm(startTag44, true);
        htmlTreeBuilder29.baseUri = "[]";
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState49 = org.jsoup.parser.HtmlTreeBuilderState.InTableText;
        htmlTreeBuilder29.error(htmlTreeBuilderState49);
        htmlTreeBuilder0.error(htmlTreeBuilderState49);
        org.jsoup.parser.ParseErrorList parseErrorList52 = htmlTreeBuilder0.errors;
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream53 = parseErrorList52.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError55 = parseErrorList52.remove(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState21);
        org.junit.Assert.assertNotNull(characterList27);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNotNull(characterArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(formElement46);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState49);
        org.junit.Assert.assertNotNull(parseErrorList52);
        org.junit.Assert.assertNotNull(parseErrorStream53);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("[100: ]", "hi!");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        int int9 = parseErrorList4.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag13 = new org.jsoup.parser.Token.EndTag();
        char[] charArray16 = new char[] { '#', '#' };
        endTag13.appendAttributeValue(charArray16);
        endTag13.finaliseTag();
        boolean boolean19 = endTag13.isSelfClosing();
        org.jsoup.parser.Tag tag21 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean22 = tag21.isFormListed();
        org.jsoup.parser.Tag tag23 = tag21.setSelfClosing();
        boolean boolean24 = tag21.isKnownTag();
        java.lang.Object[] objArray26 = new java.lang.Object[] { boolean19, tag21, "Doctype" };
        org.jsoup.parser.ParseError parseError27 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray26);
        parseErrorList4.add(0, parseError27);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream29 = parseErrorList4.parallelStream();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(tag21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(tag23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[false, hi!, Doctype]");
        org.junit.Assert.assertNotNull(parseErrorStream29);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        xmlTreeBuilder0.initialiseParse("a", "[]", parseErrorList18);
        org.jsoup.parser.CharacterReader characterReader21 = null;
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream24 = parseErrorList23.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList23.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList23.iterator();
        org.jsoup.parser.Tokeniser tokeniser27 = new org.jsoup.parser.Tokeniser(characterReader21, parseErrorList23);
        org.jsoup.parser.Token.Tag tag28 = tokeniser27.tagPending;
        tokeniser27.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype31 = tokeniser27.doctypePending;
        tokeniser27.createCommentPending();
        org.jsoup.parser.Token.Comment comment33 = tokeniser27.commentPending;
        boolean boolean34 = parseErrorList18.remove((java.lang.Object) tokeniser27);
        org.jsoup.parser.ITokeniserState iTokeniserState35 = tokeniser27.getState();
        // The following exception was thrown during execution in test generation
        try {
            tokeniser27.emitDoctypePending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertNotNull(parseErrorStream24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNull(tag28);
        org.junit.Assert.assertNull(doctype31);
        org.junit.Assert.assertNotNull(comment33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(iTokeniserState35);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList8.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        java.lang.Object[] objArray14 = parseErrorList8.toArray();
        parseErrorList8.clear();
        org.jsoup.parser.ParseError[] parseErrorArray16 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList17 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17, parseErrorArray16);
        org.jsoup.parser.ParseError[] parseErrorArray19 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList20 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20, parseErrorArray19);
        boolean boolean22 = parseErrorList17.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20);
        java.lang.Object[] objArray23 = parseErrorList17.toArray();
        parseErrorList17.clear();
        org.jsoup.parser.ParseError[] parseErrorArray25 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList26 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26, parseErrorArray25);
        boolean boolean28 = parseErrorList17.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        boolean boolean29 = parseErrorList8.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        java.lang.Object[] objArray30 = parseErrorList26.toArray();
        boolean boolean31 = parseErrorList4.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        java.lang.String str32 = parseErrorList4.toString();
        java.util.Spliterator<org.jsoup.parser.ParseError> parseErrorSpliterator33 = parseErrorList4.spliterator();
        java.lang.Object[] objArray34 = parseErrorList4.toArray();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(parseErrorSpliterator33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        tokenQueue1.addFirst((java.lang.Character) '\uffff');
        boolean boolean8 = tokenQueue1.matchesWhitespace();
        char char9 = tokenQueue1.consume();
        // The following exception was thrown during execution in test generation
        try {
            tokenQueue1.consume("1: Doctype");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Queue did not match expected sequence");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + '\uffff' + "'", char9 == '\uffff');
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        boolean boolean10 = parseErrorList5.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        xmlTreeBuilder0.initialiseParse("<!---->", "hi!", parseErrorList5);
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document16 = xmlTreeBuilder0.parse("", "[]", parseErrorList15);
        org.jsoup.parser.Token.StartTag startTag18 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType19 = startTag18.type;
        java.lang.String str20 = startTag18.toString();
        boolean boolean21 = xmlTreeBuilder0.process((org.jsoup.parser.Token) startTag18);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList28 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int29 = parseErrorList28.getMaxSize();
        org.jsoup.nodes.Document document30 = htmlTreeBuilder24.parse("0: Doctype", "hi!", parseErrorList28);
        boolean boolean31 = htmlTreeBuilder24.framesetOk();
        org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder24.setHeadElement((org.jsoup.nodes.Element) document34);
        org.jsoup.parser.CharacterReader characterReader38 = null;
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream41 = parseErrorList40.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList40.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList40.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList45 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int46 = parseErrorList45.getMaxSize();
        boolean boolean47 = parseErrorList40.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList45);
        org.jsoup.parser.Tokeniser tokeniser48 = new org.jsoup.parser.Tokeniser(characterReader38, parseErrorList45);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList45.iterator();
        htmlTreeBuilder24.initialiseParse("hi!", "hi!#", parseErrorList45);
        java.util.List<org.jsoup.nodes.Node> nodeList51 = xmlTreeBuilder0.parseFragment("S", "<Doctype>", parseErrorList45);
        org.jsoup.parser.ParseErrorList parseErrorList55 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int56 = parseErrorList55.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray57 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList58 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList58, parseErrorArray57);
        org.jsoup.parser.ParseError[] parseErrorArray60 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList61 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList61, parseErrorArray60);
        boolean boolean63 = parseErrorList58.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList61);
        org.jsoup.parser.ParseError[] parseErrorArray64 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList65 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList65, parseErrorArray64);
        boolean boolean67 = parseErrorList61.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList65);
        parseErrorList65.clear();
        boolean boolean69 = parseErrorList55.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList65);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor70 = parseErrorList55.iterator();
        xmlTreeBuilder0.initialiseParse("[100: ]", "<hi!>", parseErrorList55);
        org.jsoup.parser.CharacterReader characterReader72 = null;
        org.jsoup.parser.ParseErrorList parseErrorList74 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream75 = parseErrorList74.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor76 = parseErrorList74.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor77 = parseErrorList74.iterator();
        org.jsoup.parser.Tokeniser tokeniser78 = new org.jsoup.parser.Tokeniser(characterReader72, parseErrorList74);
        org.jsoup.parser.Token.Tag tag79 = tokeniser78.tagPending;
        tokeniser78.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag83 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType84 = startTag83.type;
        startTag83.appendTagName('#');
        tokeniser78.tagPending = startTag83;
        java.lang.String str88 = startTag83.tagName;
        org.jsoup.nodes.Attributes attributes89 = null;
        startTag83.attributes = attributes89;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element91 = xmlTreeBuilder0.insert(startTag83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + tokenType19 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType19.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<hi!>" + "'", str20, "<hi!>");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(parseErrorList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertNotNull(parseErrorStream41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNotNull(parseErrorList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertNotNull(parseErrorList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(parseErrorArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(parseErrorArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(parseErrorItor70);
        org.junit.Assert.assertNotNull(parseErrorList74);
        org.junit.Assert.assertNotNull(parseErrorStream75);
        org.junit.Assert.assertNotNull(parseErrorItor76);
        org.junit.Assert.assertNotNull(parseErrorItor77);
        org.junit.Assert.assertNull(tag79);
        org.junit.Assert.assertTrue("'" + tokenType84 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType84.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!#" + "'", str88, "hi!#");
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token token1 = xmlTreeBuilder0.currentToken;
        org.jsoup.parser.CharacterReader characterReader2 = null;
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.iterator();
        org.jsoup.parser.Tokeniser tokeniser8 = new org.jsoup.parser.Tokeniser(characterReader2, parseErrorList4);
        org.jsoup.parser.Token.Tag tag9 = tokeniser8.tagPending;
        org.jsoup.parser.Token.Tag tag11 = tokeniser8.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype12 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype13 = doctype12.asDoctype();
        java.lang.String str14 = doctype12.tokenType();
        tokeniser8.emit((org.jsoup.parser.Token) doctype12);
        org.jsoup.parser.Token.Tag tag17 = tokeniser8.createTagPending(true);
        xmlTreeBuilder0.tokeniser = tokeniser8;
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        java.lang.StringBuilder stringBuilder27 = null;
        tokeniser25.dataBuffer = stringBuilder27;
        org.jsoup.parser.Token.Tag tag30 = tokeniser25.createTagPending(false);
        org.jsoup.parser.Token.Tag tag32 = tag30.name("hi!#");
        tokeniser8.tagPending = tag30;
        boolean boolean34 = tokeniser8.currentNodeInHtmlNS();
        org.jsoup.parser.Token.Tag tag36 = tokeniser8.createTagPending(true);
        tag36.appendAttributeValue("-1: []");
        boolean boolean39 = tag36.selfClosing;
        org.junit.Assert.assertNull(token1);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNull(tag9);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(doctype13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Doctype" + "'", str14, "Doctype");
        org.junit.Assert.assertNotNull(tag17);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag30);
        org.junit.Assert.assertNotNull(tag32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(tag36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        org.jsoup.nodes.Element element16 = htmlTreeBuilder0.getHeadElement();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(element16);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        boolean boolean19 = doctype18.isCharacter();
        boolean boolean20 = doctype18.isEndTag();
        htmlTreeBuilder0.currentToken = doctype18;
        org.jsoup.nodes.Element element22 = htmlTreeBuilder0.pop();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder23 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList27 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int28 = parseErrorList27.getMaxSize();
        org.jsoup.nodes.Document document29 = htmlTreeBuilder23.parse("0: Doctype", "hi!", parseErrorList27);
        boolean boolean30 = htmlTreeBuilder23.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState31 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder23.error(htmlTreeBuilderState31);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder33 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList37 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int38 = parseErrorList37.getMaxSize();
        org.jsoup.nodes.Document document39 = htmlTreeBuilder33.parse("0: Doctype", "hi!", parseErrorList37);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        boolean boolean45 = parseErrorList43.canAddError();
        org.jsoup.nodes.Document document46 = htmlTreeBuilder33.parse("EndTag", "hi!#", parseErrorList43);
        java.lang.String[] strArray54 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean55 = htmlTreeBuilder33.inScope("hi!#", strArray54);
        boolean boolean56 = htmlTreeBuilder23.inScope(strArray54);
        boolean boolean57 = htmlTreeBuilder0.inScope(strArray54);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNotNull(parseErrorList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState31);
        org.junit.Assert.assertNotNull(parseErrorList37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(document46);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isEmpty();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder17 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        org.jsoup.nodes.Document document23 = htmlTreeBuilder17.parse("0: Doctype", "hi!", parseErrorList21);
        org.jsoup.parser.ParseErrorList parseErrorList27 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream28 = parseErrorList27.stream();
        boolean boolean29 = parseErrorList27.canAddError();
        org.jsoup.nodes.Document document30 = htmlTreeBuilder17.parse("EndTag", "hi!#", parseErrorList27);
        java.lang.String[] strArray38 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean39 = htmlTreeBuilder17.inScope("hi!#", strArray38);
        boolean boolean40 = htmlTreeBuilder0.inScope("hi!#", strArray38);
        org.jsoup.nodes.FormElement formElement41 = htmlTreeBuilder0.getFormElement();
        org.jsoup.parser.CharacterReader characterReader42 = null;
        htmlTreeBuilder0.reader = characterReader42;
        java.lang.String str44 = htmlTreeBuilder0.getBaseUri();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(parseErrorList27);
        org.junit.Assert.assertNotNull(parseErrorStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(formElement41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.resetInsertionMode();
        htmlTreeBuilder0.popStackToBefore("EndTag");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = htmlTreeBuilder0.state();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder11 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int16 = parseErrorList15.getMaxSize();
        org.jsoup.nodes.Document document17 = htmlTreeBuilder11.parse("0: Doctype", "hi!", parseErrorList15);
        boolean boolean18 = htmlTreeBuilder11.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState19 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder11.error(htmlTreeBuilderState19);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState21 = null;
        htmlTreeBuilder11.transition(htmlTreeBuilderState21);
        org.jsoup.parser.Parser parser23 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.nodes.Document document26 = parser23.parseInput("", "hi!");
        org.jsoup.nodes.Document document29 = parser23.parseInput("hi!", "hi!");
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parse("hi!", "<!---->");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder33 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList37 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int38 = parseErrorList37.getMaxSize();
        org.jsoup.nodes.Document document39 = htmlTreeBuilder33.parse("0: Doctype", "hi!", parseErrorList37);
        boolean boolean40 = htmlTreeBuilder33.framesetOk();
        org.jsoup.parser.Parser parser41 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser43 = parser41.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document46 = parser41.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document49 = parser41.parseInput("<hi!>", "[]");
        htmlTreeBuilder33.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document49);
        org.jsoup.nodes.Document document53 = org.jsoup.parser.Parser.parse("", "Doctype");
        org.jsoup.nodes.Element[] elementArray54 = new org.jsoup.nodes.Element[] { document29, document32, document49, document53 };
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList55 = new org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.jsoup.nodes.Element>) elementList55, elementArray54);
        htmlTreeBuilder11.stack = elementList55;
        htmlTreeBuilder0.stack = elementList55;
        htmlTreeBuilder0.popStackToClose("\uffff");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState10);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState19);
        org.junit.Assert.assertNotNull(parser23);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(parseErrorList37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parser41);
        org.junit.Assert.assertNotNull(parser43);
        org.junit.Assert.assertNotNull(document46);
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertNotNull(elementArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        tokenQueue1.advance();
        boolean boolean6 = tokenQueue1.matchesWhitespace();
        java.lang.String str8 = tokenQueue1.consumeToIgnoreCase("StartTag");
        java.lang.String str9 = tokenQueue1.consumeTagName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        java.lang.String[] strArray10 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str11 = tokenQueue1.consumeToAny(strArray10);
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.Tokeniser tokeniser18 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList14);
        org.jsoup.parser.Token.Tag tag19 = tokeniser18.tagPending;
        java.lang.StringBuilder stringBuilder20 = null;
        tokeniser18.dataBuffer = stringBuilder20;
        org.jsoup.parser.Token.EndTag endTag22 = new org.jsoup.parser.Token.EndTag();
        char[] charArray25 = new char[] { '#', '#' };
        endTag22.appendAttributeValue(charArray25);
        tokeniser18.emit(charArray25);
        boolean boolean28 = tokenQueue1.matchesAny(charArray25);
        java.lang.String str29 = tokenQueue1.consumeCssIdentifier();
        java.lang.String str31 = tokenQueue1.consumeTo("\uffff");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNull(tag19);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.matchesStartTag();
        char[] charArray9 = new char[] { ' ', '4', '\000', ' ', '\uffff', 'a' };
        boolean boolean10 = tokenQueue1.matchesAny(charArray9);
        // The following exception was thrown during execution in test generation
        try {
            tokenQueue1.consume("<hi!#>");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Queue did not match expected sequence");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray9);
// flaky:         org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " 4\000\uffffa");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " 4\000\uffffa");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , 4, \000\uffff, a]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        org.jsoup.parser.Token.StartTag startTag19 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes20 = startTag19.getAttributes();
        org.jsoup.parser.Token.StartTag startTag21 = new org.jsoup.parser.Token.StartTag("<!---->", attributes20);
        org.jsoup.nodes.Element element22 = htmlTreeBuilder0.insert(startTag21);
        org.jsoup.nodes.Element element23 = null;
        htmlTreeBuilder0.setHeadElement(element23);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(attributes20);
        org.junit.Assert.assertNotNull(element22);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        java.lang.String[] strArray10 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str11 = tokenQueue1.consumeToAny(strArray10);
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.Tokeniser tokeniser18 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList14);
        org.jsoup.parser.Token.Tag tag19 = tokeniser18.tagPending;
        java.lang.StringBuilder stringBuilder20 = null;
        tokeniser18.dataBuffer = stringBuilder20;
        org.jsoup.parser.Token.EndTag endTag22 = new org.jsoup.parser.Token.EndTag();
        char[] charArray25 = new char[] { '#', '#' };
        endTag22.appendAttributeValue(charArray25);
        tokeniser18.emit(charArray25);
        boolean boolean28 = tokenQueue1.matchesAny(charArray25);
        java.lang.String str29 = tokenQueue1.consumeCssIdentifier();
        java.lang.String str31 = tokenQueue1.chompTo("a");
        java.lang.String str32 = tokenQueue1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNull(tag19);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        java.lang.String str2 = characterReader1.consumeToEnd();
        int int4 = characterReader1.nextIndexOf((java.lang.CharSequence) "StartTag");
        characterReader1.unconsume();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "StartTag" + "'", str2, "StartTag");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag3.preserveWhitespace();
        boolean boolean5 = tag3.isFormListed();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        boolean boolean11 = endTag1.selfClosing;
        endTag1.appendAttributeValue("hi!#");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Comment comment14 = endTag1.asComment();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Comment");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        boolean boolean10 = parseErrorList5.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        xmlTreeBuilder0.initialiseParse("<!---->", "hi!", parseErrorList5);
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document16 = xmlTreeBuilder0.parse("", "[]", parseErrorList15);
        org.jsoup.parser.Token.StartTag startTag18 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType19 = startTag18.type;
        java.lang.String str20 = startTag18.toString();
        boolean boolean21 = xmlTreeBuilder0.process((org.jsoup.parser.Token) startTag18);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList28 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int29 = parseErrorList28.getMaxSize();
        org.jsoup.nodes.Document document30 = htmlTreeBuilder24.parse("0: Doctype", "hi!", parseErrorList28);
        boolean boolean31 = htmlTreeBuilder24.framesetOk();
        org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder24.setHeadElement((org.jsoup.nodes.Element) document34);
        org.jsoup.parser.CharacterReader characterReader38 = null;
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream41 = parseErrorList40.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList40.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList40.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList45 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int46 = parseErrorList45.getMaxSize();
        boolean boolean47 = parseErrorList40.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList45);
        org.jsoup.parser.Tokeniser tokeniser48 = new org.jsoup.parser.Tokeniser(characterReader38, parseErrorList45);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList45.iterator();
        htmlTreeBuilder24.initialiseParse("hi!", "hi!#", parseErrorList45);
        java.util.List<org.jsoup.nodes.Node> nodeList51 = xmlTreeBuilder0.parseFragment("S", "<Doctype>", parseErrorList45);
        org.jsoup.parser.ParseErrorList parseErrorList55 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int56 = parseErrorList55.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray57 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList58 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList58, parseErrorArray57);
        org.jsoup.parser.ParseError[] parseErrorArray60 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList61 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList61, parseErrorArray60);
        boolean boolean63 = parseErrorList58.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList61);
        org.jsoup.parser.ParseError[] parseErrorArray64 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList65 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList65, parseErrorArray64);
        boolean boolean67 = parseErrorList61.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList65);
        parseErrorList65.clear();
        boolean boolean69 = parseErrorList55.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList65);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor70 = parseErrorList55.iterator();
        xmlTreeBuilder0.initialiseParse("[100: ]", "<hi!>", parseErrorList55);
        org.jsoup.parser.Token.Character character73 = new org.jsoup.parser.Token.Character("100: ");
        java.lang.String str74 = character73.toString();
        xmlTreeBuilder0.insert(character73);
        java.lang.String str76 = character73.getData();
        java.lang.String str77 = character73.toString();
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + tokenType19 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType19.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<hi!>" + "'", str20, "<hi!>");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(parseErrorList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertNotNull(parseErrorStream41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNotNull(parseErrorList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertNotNull(parseErrorList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(parseErrorArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(parseErrorArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(parseErrorItor70);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "100: " + "'", str74, "100: ");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "100: " + "'", str76, "100: ");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "100: " + "'", str77, "100: ");
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        boolean boolean12 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList10.parallelStream();
        java.lang.Object[] objArray14 = parseErrorList10.toArray();
        org.jsoup.parser.ParseError parseError17 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        boolean boolean18 = parseErrorList10.add(parseError17);
        java.util.Spliterator<org.jsoup.parser.ParseError> parseErrorSpliterator19 = parseErrorList10.spliterator();
        parseErrorList10.trimToSize();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(parseErrorSpliterator19);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("[]");
        characterReader1.rewindToMark();
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        boolean boolean2 = startTag1.isCharacter();
        org.jsoup.parser.Token.TokenType tokenType3 = startTag1.type;
        startTag1.appendAttributeName("ndTag");
        startTag1.appendAttributeName("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + tokenType3 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType3.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.Token.StartTag startTag19 = new org.jsoup.parser.Token.StartTag();
        startTag19.appendAttributeValue("hi!");
        startTag19.appendAttributeValue("");
        org.jsoup.nodes.Attributes attributes24 = null;
        startTag19.attributes = attributes24;
        startTag19.appendAttributeValue("StartTag");
        htmlTreeBuilder0.currentToken = startTag19;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder29 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int34 = parseErrorList33.getMaxSize();
        org.jsoup.nodes.Document document35 = htmlTreeBuilder29.parse("0: Doctype", "hi!", parseErrorList33);
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream40 = parseErrorList39.stream();
        boolean boolean41 = parseErrorList39.canAddError();
        org.jsoup.nodes.Document document42 = htmlTreeBuilder29.parse("EndTag", "hi!#", parseErrorList39);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState43 = null;
        htmlTreeBuilder29.transition(htmlTreeBuilderState43);
        org.jsoup.parser.CharacterReader characterReader45 = null;
        org.jsoup.parser.ParseErrorList parseErrorList47 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream48 = parseErrorList47.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList47.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor50 = parseErrorList47.iterator();
        org.jsoup.parser.Tokeniser tokeniser51 = new org.jsoup.parser.Tokeniser(characterReader45, parseErrorList47);
        org.jsoup.parser.Token.Tag tag52 = tokeniser51.tagPending;
        tokeniser51.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype55 = tokeniser51.doctypePending;
        tokeniser51.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype57 = tokeniser51.doctypePending;
        htmlTreeBuilder29.tokeniser = tokeniser51;
        org.jsoup.parser.Token.Comment comment59 = tokeniser51.commentPending;
        htmlTreeBuilder0.tokeniser = tokeniser51;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertNotNull(parseErrorStream40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertNotNull(parseErrorList47);
        org.junit.Assert.assertNotNull(parseErrorStream48);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertNotNull(parseErrorItor50);
        org.junit.Assert.assertNull(tag52);
        org.junit.Assert.assertNull(doctype55);
        org.junit.Assert.assertNull(doctype57);
        org.junit.Assert.assertNotNull(comment59);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        boolean boolean13 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.parser.ParseErrorList parseErrorList15 = htmlTreeBuilder0.errors;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder16 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.nodes.Document document22 = htmlTreeBuilder16.parse("0: Doctype", "hi!", parseErrorList20);
        org.jsoup.parser.ParseError[] parseErrorArray23 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList24 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24, parseErrorArray23);
        org.jsoup.parser.ParseError[] parseErrorArray26 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList27 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList27, parseErrorArray26);
        boolean boolean29 = parseErrorList24.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList27);
        java.lang.Object[] objArray30 = parseErrorList24.toArray();
        parseErrorList24.clear();
        org.jsoup.parser.ParseError[] parseErrorArray32 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList33 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33, parseErrorArray32);
        org.jsoup.parser.ParseError[] parseErrorArray35 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList36 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36, parseErrorArray35);
        boolean boolean38 = parseErrorList33.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36);
        java.lang.Object[] objArray39 = parseErrorList33.toArray();
        parseErrorList33.clear();
        org.jsoup.parser.ParseError[] parseErrorArray41 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList42 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList42, parseErrorArray41);
        boolean boolean44 = parseErrorList33.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList42);
        boolean boolean45 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList42);
        java.lang.Object[] objArray46 = parseErrorList42.toArray();
        boolean boolean47 = parseErrorList20.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList42);
        java.lang.String str48 = parseErrorList20.toString();
        java.util.Spliterator<org.jsoup.parser.ParseError> parseErrorSpliterator49 = parseErrorList20.spliterator();
        boolean boolean50 = parseErrorList15.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20);
        parseErrorList15.clear();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(parseErrorArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(parseErrorArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertNotNull(parseErrorSpliterator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        java.lang.StringBuilder stringBuilder9 = null;
        tokeniser7.dataBuffer = stringBuilder9;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        tokeniser7.emit(charArray14);
        org.jsoup.parser.Token.Comment comment17 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean20 = characterReader19.matchesLetter();
        miniSoupTokeniserState0.read(tokeniser7, characterReader19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        org.jsoup.parser.Token.Tag tag31 = tokeniser28.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype32 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype33 = doctype32.asDoctype();
        java.lang.String str34 = doctype32.tokenType();
        tokeniser28.emit((org.jsoup.parser.Token) doctype32);
        org.jsoup.parser.ITokeniserState iTokeniserState36 = tokeniser28.getState();
        org.jsoup.parser.Token.Comment comment37 = new org.jsoup.parser.Token.Comment();
        java.lang.String str38 = comment37.toString();
        java.lang.StringBuilder stringBuilder39 = comment37.data;
        boolean boolean40 = comment37.isEndTag();
        boolean boolean41 = comment37.isComment();
        tokeniser28.commentPending = comment37;
        org.jsoup.parser.CharacterReader characterReader44 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean46 = characterReader44.matches('\000');
        characterReader44.mark();
        boolean boolean48 = characterReader44.isEmpty();
        java.lang.String str49 = characterReader44.consumeToEnd();
        miniSoupTokeniserState0.read(tokeniser28, characterReader44);
        org.jsoup.parser.CharacterReader characterReader51 = null;
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream54 = parseErrorList53.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList53.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor56 = parseErrorList53.iterator();
        org.jsoup.parser.Tokeniser tokeniser57 = new org.jsoup.parser.Tokeniser(characterReader51, parseErrorList53);
        org.jsoup.parser.Token.Tag tag58 = tokeniser57.tagPending;
        tokeniser57.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag62 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType63 = startTag62.type;
        startTag62.appendTagName('#');
        tokeniser57.tagPending = startTag62;
        tokeniser57.acknowledgeSelfClosingFlag();
        org.jsoup.parser.CharacterReader characterReader69 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean71 = characterReader69.matches('\uffff');
        miniSoupTokeniserState0.read(tokeniser57, characterReader69);
        boolean boolean74 = characterReader69.containsIgnoreCase("</hi![]>");
        boolean boolean75 = characterReader69.isEmpty();
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertNotNull(doctype33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Doctype" + "'", str34, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<!---->" + "'", str38, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder39);
        org.junit.Assert.assertEquals(stringBuilder39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "StartTag" + "'", str49, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertNotNull(parseErrorStream54);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertNotNull(parseErrorItor56);
        org.junit.Assert.assertNull(tag58);
        org.junit.Assert.assertTrue("'" + tokenType63 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType63.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor2 = parseErrorList1.listIterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor3 = parseErrorList1.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList1.listIterator((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorItor2);
        org.junit.Assert.assertNotNull(parseErrorItor3);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        boolean boolean12 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.Parser parser13 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser15 = parser13.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder16 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document17 = xmlTreeBuilder16.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder18 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList23 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream26 = parseErrorList25.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList25.iterator();
        boolean boolean28 = parseErrorList23.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList25);
        xmlTreeBuilder18.initialiseParse("<!---->", "hi!", parseErrorList23);
        xmlTreeBuilder16.errors = parseErrorList23;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList31 = xmlTreeBuilder16.stack;
        org.jsoup.parser.Parser parser32 = parser15.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder16);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder16.errors = parseErrorList34;
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream40 = parseErrorList39.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor41 = parseErrorList39.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList39.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int45 = parseErrorList44.getMaxSize();
        boolean boolean46 = parseErrorList39.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        xmlTreeBuilder16.initialiseParse("<!---->", "", parseErrorList39);
        htmlTreeBuilder0.errors = parseErrorList39;
        org.jsoup.parser.CharacterReader characterReader49 = htmlTreeBuilder0.reader;
        org.jsoup.parser.CharacterReader characterReader50 = null;
        org.jsoup.parser.ParseErrorList parseErrorList52 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream53 = parseErrorList52.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor54 = parseErrorList52.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList52.iterator();
        org.jsoup.parser.Tokeniser tokeniser56 = new org.jsoup.parser.Tokeniser(characterReader50, parseErrorList52);
        org.jsoup.parser.Token.Tag tag57 = tokeniser56.tagPending;
        tokeniser56.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype60 = tokeniser56.doctypePending;
        tokeniser56.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype62 = tokeniser56.doctypePending;
        org.jsoup.parser.Token.Comment comment63 = new org.jsoup.parser.Token.Comment();
        java.lang.String str64 = comment63.toString();
        java.lang.StringBuilder stringBuilder65 = comment63.data;
        boolean boolean66 = comment63.isEndTag();
        java.lang.String str67 = comment63.toString();
        tokeniser56.commentPending = comment63;
        java.lang.StringBuilder stringBuilder69 = comment63.data;
        // The following exception was thrown during execution in test generation
        try {
            int int70 = characterReader49.nextIndexOf((java.lang.CharSequence) stringBuilder69);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parser13);
        org.junit.Assert.assertNotNull(parser15);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertNotNull(parseErrorStream26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(elementList31);
        org.junit.Assert.assertNotNull(parser32);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertNotNull(parseErrorStream40);
        org.junit.Assert.assertNotNull(parseErrorItor41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(characterReader49);
        org.junit.Assert.assertNotNull(parseErrorList52);
        org.junit.Assert.assertNotNull(parseErrorStream53);
        org.junit.Assert.assertNotNull(parseErrorItor54);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertNull(tag57);
        org.junit.Assert.assertNull(doctype60);
        org.junit.Assert.assertNull(doctype62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "<!---->" + "'", str64, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder65);
        org.junit.Assert.assertEquals(stringBuilder65.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "<!---->" + "'", str67, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder69);
        org.junit.Assert.assertEquals(stringBuilder69.toString(), "");
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        endTag0.tagName = "hi!";
        endTag0.selfClosing = false;
        endTag0.appendAttributeName(" EndTag");
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.jsoup.parser.Token.Comment comment0 = new org.jsoup.parser.Token.Comment();
        org.jsoup.parser.Token.TokenType tokenType1 = comment0.type;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.StartTag startTag2 = comment0.asStartTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$StartTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + tokenType1 + "' != '" + org.jsoup.parser.Token.TokenType.Comment + "'", tokenType1.equals(org.jsoup.parser.Token.TokenType.Comment));
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        int int9 = parseErrorList4.lastIndexOf((java.lang.Object) 1.0d);
        int int10 = parseErrorList4.size();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError12 = parseErrorList4.remove(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        org.jsoup.parser.Token.Tag tag15 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.EndTag endTag16 = new org.jsoup.parser.Token.EndTag();
        endTag16.newAttribute();
        tokeniser6.tagPending = endTag16;
        org.jsoup.parser.TokeniserState tokeniserState19 = org.jsoup.parser.TokeniserState.ScriptDataEscapedEndTagName;
        tokeniser6.eofError((org.jsoup.parser.ITokeniserState) tokeniserState19);
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState21 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        java.lang.StringBuilder stringBuilder30 = null;
        tokeniser28.dataBuffer = stringBuilder30;
        org.jsoup.parser.Token.EndTag endTag32 = new org.jsoup.parser.Token.EndTag();
        char[] charArray35 = new char[] { '#', '#' };
        endTag32.appendAttributeValue(charArray35);
        tokeniser28.emit(charArray35);
        org.jsoup.parser.Token.Comment comment38 = tokeniser28.commentPending;
        org.jsoup.parser.CharacterReader characterReader40 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean41 = characterReader40.matchesLetter();
        miniSoupTokeniserState21.read(tokeniser28, characterReader40);
        org.jsoup.parser.CharacterReader characterReader43 = null;
        org.jsoup.parser.ParseErrorList parseErrorList45 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream46 = parseErrorList45.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList45.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor48 = parseErrorList45.iterator();
        org.jsoup.parser.Tokeniser tokeniser49 = new org.jsoup.parser.Tokeniser(characterReader43, parseErrorList45);
        org.jsoup.parser.Token.Tag tag50 = tokeniser49.tagPending;
        org.jsoup.parser.Token.Tag tag52 = tokeniser49.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype53 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype54 = doctype53.asDoctype();
        java.lang.String str55 = doctype53.tokenType();
        tokeniser49.emit((org.jsoup.parser.Token) doctype53);
        org.jsoup.parser.ITokeniserState iTokeniserState57 = tokeniser49.getState();
        org.jsoup.parser.Token.Comment comment58 = new org.jsoup.parser.Token.Comment();
        java.lang.String str59 = comment58.toString();
        java.lang.StringBuilder stringBuilder60 = comment58.data;
        boolean boolean61 = comment58.isEndTag();
        boolean boolean62 = comment58.isComment();
        tokeniser49.commentPending = comment58;
        org.jsoup.parser.CharacterReader characterReader65 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean67 = characterReader65.matches('\000');
        characterReader65.mark();
        boolean boolean69 = characterReader65.isEmpty();
        java.lang.String str70 = characterReader65.consumeToEnd();
        miniSoupTokeniserState21.read(tokeniser49, characterReader65);
        org.jsoup.parser.CharacterReader characterReader72 = null;
        org.jsoup.parser.ParseErrorList parseErrorList74 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream75 = parseErrorList74.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor76 = parseErrorList74.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor77 = parseErrorList74.iterator();
        org.jsoup.parser.Tokeniser tokeniser78 = new org.jsoup.parser.Tokeniser(characterReader72, parseErrorList74);
        org.jsoup.parser.Token.Tag tag79 = tokeniser78.tagPending;
        tokeniser78.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag83 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType84 = startTag83.type;
        startTag83.appendTagName('#');
        tokeniser78.tagPending = startTag83;
        tokeniser78.acknowledgeSelfClosingFlag();
        org.jsoup.parser.CharacterReader characterReader90 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean92 = characterReader90.matches('\uffff');
        miniSoupTokeniserState21.read(tokeniser78, characterReader90);
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.advanceTransition((org.jsoup.parser.ITokeniserState) miniSoupTokeniserState21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertNotNull(tag15);
        org.junit.Assert.assertNotNull(tokeniserState19);
        org.junit.Assert.assertNotNull(miniSoupTokeniserState21);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#, #]");
        org.junit.Assert.assertNull(comment38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(parseErrorList45);
        org.junit.Assert.assertNotNull(parseErrorStream46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNotNull(parseErrorItor48);
        org.junit.Assert.assertNull(tag50);
        org.junit.Assert.assertNotNull(tag52);
        org.junit.Assert.assertNotNull(doctype54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Doctype" + "'", str55, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "<!---->" + "'", str59, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder60);
        org.junit.Assert.assertEquals(stringBuilder60.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "StartTag" + "'", str70, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList74);
        org.junit.Assert.assertNotNull(parseErrorStream75);
        org.junit.Assert.assertNotNull(parseErrorItor76);
        org.junit.Assert.assertNotNull(parseErrorItor77);
        org.junit.Assert.assertNull(tag79);
        org.junit.Assert.assertTrue("'" + tokenType84 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType84.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype1 = doctype0.asDoctype();
        org.jsoup.parser.Token.TokenType tokenType2 = org.jsoup.parser.Token.TokenType.StartTag;
        doctype0.type = tokenType2;
        org.junit.Assert.assertNotNull(doctype1);
        org.junit.Assert.assertTrue("'" + tokenType2 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType2.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement14 = htmlTreeBuilder0.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder15 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        org.jsoup.nodes.Document document21 = htmlTreeBuilder15.parse("0: Doctype", "hi!", parseErrorList19);
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream26 = parseErrorList25.stream();
        boolean boolean27 = parseErrorList25.canAddError();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder15.parse("EndTag", "hi!#", parseErrorList25);
        java.lang.String[] strArray36 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean37 = htmlTreeBuilder15.inScope("hi!#", strArray36);
        org.jsoup.parser.ParseErrorList parseErrorList42 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document43 = htmlTreeBuilder15.parse("0: Doctype", "", parseErrorList42);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder44 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document45 = xmlTreeBuilder44.doc;
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int50 = parseErrorList49.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray51 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList52 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList52, parseErrorArray51);
        org.jsoup.parser.ParseError[] parseErrorArray54 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList55 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList55, parseErrorArray54);
        boolean boolean57 = parseErrorList52.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList55);
        org.jsoup.parser.ParseError[] parseErrorArray58 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList59 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59, parseErrorArray58);
        boolean boolean61 = parseErrorList55.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59);
        parseErrorList59.clear();
        boolean boolean63 = parseErrorList49.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor64 = parseErrorList49.iterator();
        org.jsoup.nodes.Document document65 = xmlTreeBuilder44.parse("<hi!>", "0: []", parseErrorList49);
        htmlTreeBuilder15.push((org.jsoup.nodes.Element) document65);
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document65);
        htmlTreeBuilder0.generateImpliedEndTags();
        htmlTreeBuilder0.baseUri = "StartTaga";
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = htmlTreeBuilder0.inScope("StartTaga");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Should not be reachable");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(formElement14);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertNotNull(parseErrorStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertNull(document45);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(parseErrorArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(parseErrorArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(parseErrorItor64);
        org.junit.Assert.assertNotNull(document65);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token token1 = xmlTreeBuilder0.currentToken;
        org.jsoup.parser.CharacterReader characterReader2 = null;
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.iterator();
        org.jsoup.parser.Tokeniser tokeniser8 = new org.jsoup.parser.Tokeniser(characterReader2, parseErrorList4);
        org.jsoup.parser.Token.Tag tag9 = tokeniser8.tagPending;
        org.jsoup.parser.Token.Tag tag11 = tokeniser8.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype12 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype13 = doctype12.asDoctype();
        java.lang.String str14 = doctype12.tokenType();
        tokeniser8.emit((org.jsoup.parser.Token) doctype12);
        org.jsoup.parser.Token.Tag tag17 = tokeniser8.createTagPending(true);
        xmlTreeBuilder0.tokeniser = tokeniser8;
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        java.lang.StringBuilder stringBuilder27 = null;
        tokeniser25.dataBuffer = stringBuilder27;
        org.jsoup.parser.Token.Tag tag30 = tokeniser25.createTagPending(false);
        org.jsoup.parser.Token.Tag tag32 = tag30.name("hi!#");
        tokeniser8.tagPending = tag30;
        boolean boolean34 = tokeniser8.currentNodeInHtmlNS();
        org.jsoup.parser.Token.Tag tag36 = tokeniser8.createTagPending(true);
        org.jsoup.parser.Token.Tag tag38 = tokeniser8.createTagPending(false);
        org.junit.Assert.assertNull(token1);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNull(tag9);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(doctype13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Doctype" + "'", str14, "Doctype");
        org.junit.Assert.assertNotNull(tag17);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag30);
        org.junit.Assert.assertNotNull(tag32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(tag36);
        org.junit.Assert.assertNotNull(tag38);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\uffff');
        java.lang.String str4 = characterReader1.consumeDigitSequence();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.Tag tag11 = tokeniser6.createTagPending(false);
        tokeniser6.acknowledgeSelfClosingFlag();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag11);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList(10, (int) '#');
        java.lang.Object obj3 = parseErrorList2.clone();
        org.jsoup.parser.ParseError parseError7 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        int int8 = parseError7.getPosition();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError9 = parseErrorList2.set((int) '\uffff', parseError7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 65535, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.jsoup.parser.Token.Character character1 = new org.jsoup.parser.Token.Character("100: ");
        java.lang.String str2 = character1.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.StartTag startTag3 = character1.asStartTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Character cannot be cast to org.jsoup.parser.Token$StartTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "100: " + "'", str2, "100: ");
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        boolean boolean7 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        parseErrorList4.ensureCapacity((int) (short) 1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder10 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document11 = xmlTreeBuilder10.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder12 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream20 = parseErrorList19.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList19.iterator();
        boolean boolean22 = parseErrorList17.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        xmlTreeBuilder12.initialiseParse("<!---->", "hi!", parseErrorList17);
        xmlTreeBuilder10.errors = parseErrorList17;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList25 = xmlTreeBuilder10.stack;
        boolean boolean26 = parseErrorList4.equals((java.lang.Object) elementList25);
        org.jsoup.parser.ParseError[] parseErrorArray27 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList28 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList28, parseErrorArray27);
        org.jsoup.parser.ParseError[] parseErrorArray30 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList31 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31, parseErrorArray30);
        boolean boolean33 = parseErrorList28.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        java.lang.Object[] objArray34 = parseErrorList28.toArray();
        parseErrorList28.clear();
        org.jsoup.parser.ParseError[] parseErrorArray36 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList37 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList37, parseErrorArray36);
        boolean boolean39 = parseErrorList28.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList37);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream40 = parseErrorList37.parallelStream();
        java.lang.Object[] objArray41 = parseErrorList37.toArray();
        org.jsoup.parser.ParseError parseError44 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        boolean boolean45 = parseErrorList37.add(parseError44);
        boolean boolean46 = parseErrorList4.add(parseError44);
        java.lang.String str47 = parseError44.getErrorMessage();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(document11);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertNotNull(parseErrorStream20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(elementList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(parseErrorArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(parseErrorStream40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader2 = new org.jsoup.parser.CharacterReader("StartTag");
        int int4 = characterReader2.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean5 = characterReader2.matchesDigit();
        java.lang.String str6 = characterReader2.toString();
        xmlTreeBuilder0.reader = characterReader2;
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int12 = parseErrorList11.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray13 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList14 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList14, parseErrorArray13);
        org.jsoup.parser.ParseError[] parseErrorArray16 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList17 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17, parseErrorArray16);
        boolean boolean19 = parseErrorList14.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17);
        org.jsoup.parser.ParseError[] parseErrorArray20 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList21 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21, parseErrorArray20);
        boolean boolean23 = parseErrorList17.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        parseErrorList21.clear();
        boolean boolean25 = parseErrorList11.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        xmlTreeBuilder0.initialiseParse("<Doctype>", "a", parseErrorList11);
        parseErrorList11.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "StartTag" + "'", str6, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        boolean boolean5 = tokenQueue1.matchChomp("<!---->");
        tokenQueue1.addFirst("</hi![]>");
        java.lang.String str8 = tokenQueue1.consumeElementSelector();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.nodes.Document document39 = htmlTreeBuilder0.parse("EndTag", "0: []");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(document39);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList(0, (int) (byte) 0);
        htmlTreeBuilder0.initialiseParse("<hi!>", "hi!#", parseErrorList5);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder7 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int12 = parseErrorList11.getMaxSize();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder7.parse("0: Doctype", "hi!", parseErrorList11);
        htmlTreeBuilder7.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray16 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList17 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList17, characterArray16);
        htmlTreeBuilder7.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList17);
        boolean boolean20 = htmlTreeBuilder7.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag22 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement24 = htmlTreeBuilder7.insertForm(startTag22, true);
        htmlTreeBuilder0.setFormElement(formElement24);
        org.jsoup.parser.Token.Comment comment26 = new org.jsoup.parser.Token.Comment();
        java.lang.String str27 = comment26.toString();
        java.lang.StringBuilder stringBuilder28 = comment26.data;
        boolean boolean29 = comment26.isEndTag();
        boolean boolean30 = comment26.isComment();
        java.lang.String str31 = comment26.toString();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState32 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = htmlTreeBuilder0.process((org.jsoup.parser.Token) comment26, htmlTreeBuilderState32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(characterArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(formElement24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "<!---->" + "'", str27, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder28);
        org.junit.Assert.assertEquals(stringBuilder28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<!---->" + "'", str31, "<!---->");
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.framesetOk(false);
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        org.jsoup.nodes.Element element23 = htmlTreeBuilder0.currentElement();
        htmlTreeBuilder0.clearStackToTableContext();
        org.jsoup.parser.Token token25 = htmlTreeBuilder0.currentToken;
        boolean boolean26 = token25.isEndTag();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(token25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("<!---->");
        boolean boolean10 = tokeniser6.currentNodeInHtmlNS();
        tokeniser6.createTempBuffer();
        tokeniser6.acknowledgeSelfClosingFlag();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
        org.jsoup.parser.TreeBuilder treeBuilder2 = null;
        org.jsoup.parser.Parser parser3 = parser1.setTreeBuilder(treeBuilder2);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder4 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document5 = xmlTreeBuilder4.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder6 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        boolean boolean16 = parseErrorList11.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        xmlTreeBuilder6.initialiseParse("<!---->", "hi!", parseErrorList11);
        xmlTreeBuilder4.errors = parseErrorList11;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList19 = xmlTreeBuilder4.stack;
        org.jsoup.parser.CharacterReader characterReader20 = null;
        xmlTreeBuilder4.reader = characterReader20;
        org.jsoup.parser.Parser parser22 = parser1.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder4);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder23 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document24 = xmlTreeBuilder23.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder25 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream33 = parseErrorList32.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor34 = parseErrorList32.iterator();
        boolean boolean35 = parseErrorList30.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32);
        xmlTreeBuilder25.initialiseParse("<!---->", "hi!", parseErrorList30);
        xmlTreeBuilder23.errors = parseErrorList30;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList38 = xmlTreeBuilder23.stack;
        org.jsoup.parser.CharacterReader characterReader39 = null;
        xmlTreeBuilder23.reader = characterReader39;
        org.jsoup.parser.Parser parser41 = parser22.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder23);
        org.jsoup.parser.CharacterReader characterReader42 = null;
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList44.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList44.iterator();
        org.jsoup.parser.Tokeniser tokeniser48 = new org.jsoup.parser.Tokeniser(characterReader42, parseErrorList44);
        org.jsoup.parser.Token.Tag tag49 = tokeniser48.tagPending;
        org.jsoup.parser.Token.Tag tag51 = tokeniser48.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype52 = new org.jsoup.parser.Token.Doctype();
        boolean boolean53 = doctype52.isCharacter();
        boolean boolean54 = doctype52.isEndTag();
        boolean boolean55 = doctype52.isCharacter();
        tokeniser48.emit((org.jsoup.parser.Token) doctype52);
        org.jsoup.parser.TokeniserState tokeniserState57 = org.jsoup.parser.TokeniserState.ScriptData;
        tokeniser48.eofError((org.jsoup.parser.ITokeniserState) tokeniserState57);
        xmlTreeBuilder23.tokeniser = tokeniser48;
        org.jsoup.parser.Token.Comment comment60 = new org.jsoup.parser.Token.Comment();
        java.lang.String str61 = comment60.toString();
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder23.insert(comment60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNull(document5);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(elementList19);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNull(document24);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertNotNull(parseErrorStream33);
        org.junit.Assert.assertNotNull(parseErrorItor34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(elementList38);
        org.junit.Assert.assertNotNull(parser41);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNull(tag49);
        org.junit.Assert.assertNotNull(tag51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(tokeniserState57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "<!---->" + "'", str61, "<!---->");
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        boolean boolean24 = parseErrorList21.isEmpty();
        java.lang.Object obj25 = parseErrorList21.clone();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "[]");
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        boolean boolean15 = parseErrorList10.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        java.lang.Object[] objArray16 = parseErrorList10.toArray();
        parseErrorList10.clear();
        org.jsoup.parser.ParseError[] parseErrorArray18 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList19 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19, parseErrorArray18);
        boolean boolean21 = parseErrorList10.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        boolean boolean22 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        java.lang.Object[] objArray23 = parseErrorList19.toArray();
        parseErrorList19.trimToSize();
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        boolean boolean16 = htmlTreeBuilder9.framesetOk();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder9.setHeadElement((org.jsoup.nodes.Element) document19);
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder9.setHeadElement((org.jsoup.nodes.Element) document23);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder26 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int31 = parseErrorList30.getMaxSize();
        org.jsoup.nodes.Document document32 = htmlTreeBuilder26.parse("0: Doctype", "hi!", parseErrorList30);
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream37 = parseErrorList36.stream();
        boolean boolean38 = parseErrorList36.canAddError();
        org.jsoup.nodes.Document document39 = htmlTreeBuilder26.parse("EndTag", "hi!#", parseErrorList36);
        java.lang.String[] strArray47 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean48 = htmlTreeBuilder26.inScope("hi!#", strArray47);
        boolean boolean49 = htmlTreeBuilder9.inScope("hi!#", strArray47);
        htmlTreeBuilder0.popStackToClose(strArray47);
        org.jsoup.nodes.Element element52 = htmlTreeBuilder0.getActiveFormattingElement("<Doctype>");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder53 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList57 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int58 = parseErrorList57.getMaxSize();
        org.jsoup.nodes.Document document59 = htmlTreeBuilder53.parse("0: Doctype", "hi!", parseErrorList57);
        boolean boolean60 = htmlTreeBuilder53.framesetOk();
        org.jsoup.parser.Parser parser61 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser63 = parser61.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document66 = parser61.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document69 = parser61.parseInput("<hi!>", "[]");
        htmlTreeBuilder53.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document69);
        boolean boolean71 = htmlTreeBuilder53.isFragmentParsing();
        org.jsoup.parser.Parser parser72 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder53);
        org.jsoup.parser.CharacterReader characterReader73 = null;
        org.jsoup.parser.ParseErrorList parseErrorList75 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream76 = parseErrorList75.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor77 = parseErrorList75.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor78 = parseErrorList75.iterator();
        org.jsoup.parser.Tokeniser tokeniser79 = new org.jsoup.parser.Tokeniser(characterReader73, parseErrorList75);
        org.jsoup.parser.Token.Tag tag80 = tokeniser79.tagPending;
        tokeniser79.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag84 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType85 = startTag84.type;
        startTag84.appendTagName('#');
        tokeniser79.tagPending = startTag84;
        org.jsoup.parser.Token.StartTag startTag90 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType91 = startTag90.type;
        java.lang.String str92 = startTag90.toString();
        tokeniser79.emit((org.jsoup.parser.Token) startTag90);
        org.jsoup.nodes.FormElement formElement95 = htmlTreeBuilder53.insertForm(startTag90, true);
        htmlTreeBuilder0.insert((org.jsoup.nodes.Element) formElement95);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(parseErrorList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertNotNull(parseErrorStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(element52);
        org.junit.Assert.assertNotNull(parseErrorList57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(parser61);
        org.junit.Assert.assertNotNull(parser63);
        org.junit.Assert.assertNotNull(document66);
        org.junit.Assert.assertNotNull(document69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(parseErrorList75);
        org.junit.Assert.assertNotNull(parseErrorStream76);
        org.junit.Assert.assertNotNull(parseErrorItor77);
        org.junit.Assert.assertNotNull(parseErrorItor78);
        org.junit.Assert.assertNull(tag80);
        org.junit.Assert.assertTrue("'" + tokenType85 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType85.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + tokenType91 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType91.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "<hi!>" + "'", str92, "<hi!>");
        org.junit.Assert.assertNotNull(formElement95);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        int int8 = parseErrorList4.size();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        htmlTreeBuilder9.newPendingTableCharacters();
        boolean boolean17 = parseErrorList4.equals((java.lang.Object) htmlTreeBuilder9);
        org.jsoup.nodes.Document document18 = htmlTreeBuilder9.getDocument();
        htmlTreeBuilder9.popStackToBefore("100: ");
        boolean boolean21 = htmlTreeBuilder9.isFragmentParsing();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder9.parse("tartTag", "1: Doctype");
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(document24);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
        org.jsoup.parser.TreeBuilder treeBuilder2 = null;
        org.jsoup.parser.Parser parser3 = parser1.setTreeBuilder(treeBuilder2);
        java.util.List<org.jsoup.parser.ParseError> parseErrorList4 = parser3.getErrors();
        org.jsoup.parser.Parser parser6 = parser3.setTrackErrors((int) 'E');
        boolean boolean7 = parser3.isTrackErrors();
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parser6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        org.jsoup.parser.ITokeniserState iTokeniserState11 = tokeniser6.getState();
        tokeniser6.createCommentPending();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNotNull(iTokeniserState11);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isData();
        boolean boolean3 = tag1.isFormListed();
        boolean boolean4 = tag1.isFormListed();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        boolean boolean12 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.Parser parser13 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser15 = parser13.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder16 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document17 = xmlTreeBuilder16.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder18 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList23 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream26 = parseErrorList25.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList25.iterator();
        boolean boolean28 = parseErrorList23.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList25);
        xmlTreeBuilder18.initialiseParse("<!---->", "hi!", parseErrorList23);
        xmlTreeBuilder16.errors = parseErrorList23;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList31 = xmlTreeBuilder16.stack;
        org.jsoup.parser.Parser parser32 = parser15.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder16);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder16.errors = parseErrorList34;
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream40 = parseErrorList39.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor41 = parseErrorList39.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList39.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int45 = parseErrorList44.getMaxSize();
        boolean boolean46 = parseErrorList39.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        xmlTreeBuilder16.initialiseParse("<!---->", "", parseErrorList39);
        htmlTreeBuilder0.errors = parseErrorList39;
        htmlTreeBuilder0.generateImpliedEndTags("</hi![]>");
        boolean boolean52 = htmlTreeBuilder0.inButtonScope("-1: []");
        org.jsoup.parser.Token.StartTag startTag54 = new org.jsoup.parser.Token.StartTag("Doctype");
        org.jsoup.parser.Token.Tag tag56 = startTag54.name("hi!#");
        org.jsoup.nodes.FormElement formElement58 = htmlTreeBuilder0.insertForm(startTag54, false);
        org.jsoup.parser.Tokeniser tokeniser59 = null;
        htmlTreeBuilder0.tokeniser = tokeniser59;
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parser13);
        org.junit.Assert.assertNotNull(parser15);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertNotNull(parseErrorStream26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(elementList31);
        org.junit.Assert.assertNotNull(parser32);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertNotNull(parseErrorStream40);
        org.junit.Assert.assertNotNull(parseErrorItor41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(tag56);
        org.junit.Assert.assertNotNull(formElement58);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token token1 = xmlTreeBuilder0.currentToken;
        org.jsoup.parser.CharacterReader characterReader2 = null;
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.iterator();
        org.jsoup.parser.Tokeniser tokeniser8 = new org.jsoup.parser.Tokeniser(characterReader2, parseErrorList4);
        org.jsoup.parser.Token.Tag tag9 = tokeniser8.tagPending;
        org.jsoup.parser.Token.Tag tag11 = tokeniser8.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype12 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype13 = doctype12.asDoctype();
        java.lang.String str14 = doctype12.tokenType();
        tokeniser8.emit((org.jsoup.parser.Token) doctype12);
        org.jsoup.parser.Token.Tag tag17 = tokeniser8.createTagPending(true);
        xmlTreeBuilder0.tokeniser = tokeniser8;
        org.jsoup.parser.Token.Doctype doctype19 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype20 = doctype19.asDoctype();
        boolean boolean21 = doctype19.isEOF();
        java.lang.StringBuilder stringBuilder22 = doctype19.name;
        java.lang.StringBuilder stringBuilder23 = doctype19.publicIdentifier;
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(doctype19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(token1);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNull(tag9);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(doctype13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Doctype" + "'", str14, "Doctype");
        org.junit.Assert.assertNotNull(tag17);
        org.junit.Assert.assertNotNull(doctype20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(stringBuilder22);
        org.junit.Assert.assertEquals(stringBuilder22.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder23);
        org.junit.Assert.assertEquals(stringBuilder23.toString(), "");
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        java.lang.StringBuilder stringBuilder9 = null;
        tokeniser7.dataBuffer = stringBuilder9;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        tokeniser7.emit(charArray14);
        org.jsoup.parser.Token.Comment comment17 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean20 = characterReader19.matchesLetter();
        miniSoupTokeniserState0.read(tokeniser7, characterReader19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        org.jsoup.parser.Token.Tag tag31 = tokeniser28.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype32 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype33 = doctype32.asDoctype();
        java.lang.String str34 = doctype32.tokenType();
        tokeniser28.emit((org.jsoup.parser.Token) doctype32);
        org.jsoup.parser.ITokeniserState iTokeniserState36 = tokeniser28.getState();
        org.jsoup.parser.Token.Comment comment37 = new org.jsoup.parser.Token.Comment();
        java.lang.String str38 = comment37.toString();
        java.lang.StringBuilder stringBuilder39 = comment37.data;
        boolean boolean40 = comment37.isEndTag();
        boolean boolean41 = comment37.isComment();
        tokeniser28.commentPending = comment37;
        org.jsoup.parser.CharacterReader characterReader44 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean46 = characterReader44.matches('\000');
        characterReader44.mark();
        boolean boolean48 = characterReader44.isEmpty();
        java.lang.String str49 = characterReader44.consumeToEnd();
        miniSoupTokeniserState0.read(tokeniser28, characterReader44);
        org.jsoup.parser.CharacterReader characterReader51 = null;
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream54 = parseErrorList53.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList53.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor56 = parseErrorList53.iterator();
        org.jsoup.parser.Tokeniser tokeniser57 = new org.jsoup.parser.Tokeniser(characterReader51, parseErrorList53);
        org.jsoup.parser.Token.Tag tag58 = tokeniser57.tagPending;
        tokeniser57.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag62 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType63 = startTag62.type;
        startTag62.appendTagName('#');
        tokeniser57.tagPending = startTag62;
        tokeniser57.acknowledgeSelfClosingFlag();
        org.jsoup.parser.CharacterReader characterReader69 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean71 = characterReader69.matches('\uffff');
        miniSoupTokeniserState0.read(tokeniser57, characterReader69);
        boolean boolean74 = characterReader69.containsIgnoreCase("</hi![]>");
        boolean boolean76 = characterReader69.matches("");
        boolean boolean77 = characterReader69.matchesLetter();
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertNotNull(doctype33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Doctype" + "'", str34, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<!---->" + "'", str38, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder39);
        org.junit.Assert.assertEquals(stringBuilder39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "StartTag" + "'", str49, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertNotNull(parseErrorStream54);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertNotNull(parseErrorItor56);
        org.junit.Assert.assertNull(tag58);
        org.junit.Assert.assertTrue("'" + tokenType63 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType63.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        boolean boolean15 = parseErrorList10.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        java.lang.Object[] objArray16 = parseErrorList10.toArray();
        parseErrorList10.clear();
        org.jsoup.parser.ParseError[] parseErrorArray18 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList19 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19, parseErrorArray18);
        boolean boolean21 = parseErrorList10.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        boolean boolean22 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        org.jsoup.parser.ParseError[] parseErrorArray23 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList24 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24, parseErrorArray23);
        org.jsoup.parser.ParseError[] parseErrorArray26 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList27 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList27, parseErrorArray26);
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList27);
        org.jsoup.parser.ParseError[] parseErrorArray30 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList31 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31, parseErrorArray30);
        boolean boolean33 = parseErrorList27.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        parseErrorList31.clear();
        boolean boolean35 = parseErrorList31.isEmpty();
        org.jsoup.parser.ParseErrorList parseErrorList37 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream38 = parseErrorList37.stream();
        boolean boolean39 = parseErrorList37.canAddError();
        org.jsoup.parser.ParseError parseError42 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str43 = parseError42.getErrorMessage();
        boolean boolean44 = parseErrorList37.add(parseError42);
        org.jsoup.parser.CharacterReader characterReader45 = null;
        org.jsoup.parser.ParseErrorList parseErrorList47 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream48 = parseErrorList47.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList47.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor50 = parseErrorList47.iterator();
        org.jsoup.parser.Tokeniser tokeniser51 = new org.jsoup.parser.Tokeniser(characterReader45, parseErrorList47);
        org.jsoup.parser.Token.Tag tag52 = tokeniser51.tagPending;
        org.jsoup.parser.Token.Tag tag54 = tokeniser51.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype55 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype56 = doctype55.asDoctype();
        java.lang.String str57 = doctype55.tokenType();
        tokeniser51.emit((org.jsoup.parser.Token) doctype55);
        org.jsoup.parser.ITokeniserState iTokeniserState59 = tokeniser51.getState();
        org.jsoup.parser.Token.Comment comment60 = new org.jsoup.parser.Token.Comment();
        java.lang.String str61 = comment60.toString();
        java.lang.StringBuilder stringBuilder62 = comment60.data;
        boolean boolean63 = comment60.isEndTag();
        boolean boolean64 = comment60.isComment();
        tokeniser51.commentPending = comment60;
        int int66 = parseErrorList37.lastIndexOf((java.lang.Object) comment60);
        boolean boolean67 = parseErrorList31.contains((java.lang.Object) comment60);
        boolean boolean68 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(parseErrorArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(parseErrorList37);
        org.junit.Assert.assertNotNull(parseErrorStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(parseErrorList47);
        org.junit.Assert.assertNotNull(parseErrorStream48);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertNotNull(parseErrorItor50);
        org.junit.Assert.assertNull(tag52);
        org.junit.Assert.assertNotNull(tag54);
        org.junit.Assert.assertNotNull(doctype56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Doctype" + "'", str57, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "<!---->" + "'", str61, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder62);
        org.junit.Assert.assertEquals(stringBuilder62.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.Token.Tag tag10 = tokeniser7.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype11 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype12 = doctype11.asDoctype();
        java.lang.String str13 = doctype11.tokenType();
        tokeniser7.emit((org.jsoup.parser.Token) doctype11);
        org.jsoup.parser.Token.Tag tag16 = tokeniser7.createTagPending(true);
        xmlTreeBuilder0.currentToken = tag16;
        org.jsoup.parser.Token.Tag tag19 = tag16.name("");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.EndTag endTag20 = tag16.asEndTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$EndTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(tag10);
        org.junit.Assert.assertNotNull(doctype12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Doctype" + "'", str13, "Doctype");
        org.junit.Assert.assertNotNull(tag16);
        org.junit.Assert.assertNotNull(tag19);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag3.formatAsBlock();
        boolean boolean5 = tag3.isFormSubmittable();
        boolean boolean6 = tag3.isBlock();
        boolean boolean7 = tag3.preserveWhitespace();
        boolean boolean8 = tag3.formatAsBlock();
        boolean boolean9 = tag3.canContainBlock();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder21 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int26 = parseErrorList25.getMaxSize();
        org.jsoup.nodes.Document document27 = htmlTreeBuilder21.parse("0: Doctype", "hi!", parseErrorList25);
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document27);
        org.jsoup.parser.CharacterReader characterReader29 = null;
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream32 = parseErrorList31.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor33 = parseErrorList31.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor34 = parseErrorList31.iterator();
        org.jsoup.parser.Tokeniser tokeniser35 = new org.jsoup.parser.Tokeniser(characterReader29, parseErrorList31);
        org.jsoup.parser.Token.Tag tag36 = tokeniser35.tagPending;
        org.jsoup.parser.Token.Tag tag38 = tokeniser35.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype39 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype40 = doctype39.asDoctype();
        java.lang.String str41 = doctype39.tokenType();
        tokeniser35.emit((org.jsoup.parser.Token) doctype39);
        org.jsoup.parser.ITokeniserState iTokeniserState43 = tokeniser35.getState();
        org.jsoup.parser.Token.Comment comment44 = new org.jsoup.parser.Token.Comment();
        java.lang.String str45 = comment44.toString();
        java.lang.StringBuilder stringBuilder46 = comment44.data;
        boolean boolean47 = comment44.isEndTag();
        boolean boolean48 = comment44.isComment();
        tokeniser35.commentPending = comment44;
        htmlTreeBuilder0.insert(comment44);
        org.jsoup.nodes.Document document51 = htmlTreeBuilder0.doc;
        htmlTreeBuilder0.clearStackToTableBodyContext();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertNotNull(parseErrorStream32);
        org.junit.Assert.assertNotNull(parseErrorItor33);
        org.junit.Assert.assertNotNull(parseErrorItor34);
        org.junit.Assert.assertNull(tag36);
        org.junit.Assert.assertNotNull(tag38);
        org.junit.Assert.assertNotNull(doctype40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Doctype" + "'", str41, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "<!---->" + "'", str45, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder46);
        org.junit.Assert.assertEquals(stringBuilder46.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(document51);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.framesetOk(false);
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        boolean boolean23 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        org.jsoup.parser.Token.Tag tag12 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Tag tag13 = tokeniser6.tagPending;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = tokeniser6.appropriateEndTagName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertNotNull(tag13);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Element element13 = htmlTreeBuilder0.getActiveFormattingElement("0: Doctype");
        htmlTreeBuilder0.runParser();
        java.lang.String str15 = htmlTreeBuilder0.toString();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(element13);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype12 = tokeniser6.doctypePending;
        org.jsoup.parser.Token.Comment comment13 = new org.jsoup.parser.Token.Comment();
        java.lang.String str14 = comment13.toString();
        java.lang.StringBuilder stringBuilder15 = comment13.data;
        boolean boolean16 = comment13.isEndTag();
        java.lang.String str17 = comment13.toString();
        tokeniser6.commentPending = comment13;
        tokeniser6.createCommentPending();
        org.jsoup.parser.ITokeniserState iTokeniserState20 = tokeniser6.getState();
        boolean boolean21 = tokeniser6.currentNodeInHtmlNS();
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitDoctypePending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNull(doctype12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "<!---->" + "'", str14, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<!---->" + "'", str17, "<!---->");
        org.junit.Assert.assertNotNull(iTokeniserState20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
        org.jsoup.parser.TreeBuilder treeBuilder2 = null;
        org.jsoup.parser.Parser parser3 = parser1.setTreeBuilder(treeBuilder2);
        java.util.List<org.jsoup.parser.ParseError> parseErrorList4 = parser3.getErrors();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder5 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int10 = parseErrorList9.getMaxSize();
        org.jsoup.nodes.Document document11 = htmlTreeBuilder5.parse("0: Doctype", "hi!", parseErrorList9);
        boolean boolean12 = htmlTreeBuilder5.framesetOk();
        org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder5.setHeadElement((org.jsoup.nodes.Element) document15);
        org.jsoup.parser.Token.Comment comment17 = new org.jsoup.parser.Token.Comment();
        java.lang.String str18 = comment17.toString();
        boolean boolean19 = comment17.isCharacter();
        htmlTreeBuilder5.insert(comment17);
        org.jsoup.parser.Parser parser21 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder5);
        org.jsoup.parser.Parser parser22 = parser3.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder5);
        java.util.List<org.jsoup.parser.ParseError> parseErrorList23 = parser3.getErrors();
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<!---->" + "'", str18, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNull(parseErrorList23);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.jsoup.parser.ParseError[] parseErrorArray1 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList2 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList2, parseErrorArray1);
        org.jsoup.parser.ParseError[] parseErrorArray4 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList5 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList5, parseErrorArray4);
        boolean boolean7 = parseErrorList2.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList5);
        java.lang.Object[] objArray8 = parseErrorList2.toArray();
        parseErrorList2.clear();
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList2.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        java.lang.String str14 = parseErrorList2.toString();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList2.stream();
        java.lang.Object[] objArray16 = parseErrorList2.toArray();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder17 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        org.jsoup.nodes.Document document23 = htmlTreeBuilder17.parse("0: Doctype", "hi!", parseErrorList21);
        boolean boolean24 = htmlTreeBuilder17.framesetOk();
        org.jsoup.parser.Parser parser25 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser27 = parser25.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document30 = parser25.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document33 = parser25.parseInput("<hi!>", "[]");
        htmlTreeBuilder17.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document33);
        boolean boolean35 = htmlTreeBuilder17.isFragmentParsing();
        htmlTreeBuilder17.clearStackToTableContext();
        int int37 = parseErrorList2.indexOf((java.lang.Object) htmlTreeBuilder17);
        org.jsoup.nodes.Document document38 = htmlTreeBuilder17.getDocument();
        java.util.List<org.jsoup.nodes.Node> nodeList40 = org.jsoup.parser.Parser.parseFragment("[]", (org.jsoup.nodes.Element) document38, "<hi!#>");
        org.junit.Assert.assertNotNull(parseErrorArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(parseErrorArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(parser25);
        org.junit.Assert.assertNotNull(parser27);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNotNull(nodeList40);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        java.lang.String str14 = doctype10.getPublicIdentifier();
        boolean boolean15 = doctype10.forceQuirks;
        boolean boolean16 = doctype10.isForceQuirks();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        boolean boolean11 = doctype10.isCharacter();
        boolean boolean12 = doctype10.isEndTag();
        boolean boolean13 = doctype10.isCharacter();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitCommentPending();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: There is an unread token pending!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        org.jsoup.parser.ITokeniserState iTokeniserState14 = tokeniser6.getState();
        org.jsoup.parser.Token.Comment comment15 = new org.jsoup.parser.Token.Comment();
        java.lang.String str16 = comment15.toString();
        java.lang.StringBuilder stringBuilder17 = comment15.data;
        boolean boolean18 = comment15.isEndTag();
        boolean boolean19 = comment15.isComment();
        tokeniser6.commentPending = comment15;
        boolean boolean21 = tokeniser6.isAppropriateEndTagToken();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray24 = tokeniser6.consumeCharacterReference((java.lang.Character) 'S', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<!---->" + "'", str16, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder17);
        org.junit.Assert.assertEquals(stringBuilder17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str1 = doctype0.getSystemIdentifier();
        java.lang.StringBuilder stringBuilder2 = doctype0.name;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(stringBuilder2);
        org.junit.Assert.assertEquals(stringBuilder2.toString(), "");
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList7 = null;
        htmlTreeBuilder0.stack = elementList7;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder9 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int14 = parseErrorList13.getMaxSize();
        org.jsoup.nodes.Document document15 = htmlTreeBuilder9.parse("0: Doctype", "hi!", parseErrorList13);
        boolean boolean16 = htmlTreeBuilder9.framesetOk();
        org.jsoup.parser.Parser parser17 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser19 = parser17.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document22 = parser17.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document25 = parser17.parseInput("<hi!>", "[]");
        htmlTreeBuilder9.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document25);
        org.jsoup.parser.Token.StartTag startTag28 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes29 = startTag28.getAttributes();
        org.jsoup.parser.Token.StartTag startTag30 = new org.jsoup.parser.Token.StartTag("<!---->", attributes29);
        org.jsoup.nodes.Element element31 = htmlTreeBuilder9.insert(startTag30);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder32 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader33 = null;
        org.jsoup.parser.ParseErrorList parseErrorList35 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream36 = parseErrorList35.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor37 = parseErrorList35.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor38 = parseErrorList35.iterator();
        org.jsoup.parser.Tokeniser tokeniser39 = new org.jsoup.parser.Tokeniser(characterReader33, parseErrorList35);
        org.jsoup.parser.Token.Tag tag40 = tokeniser39.tagPending;
        org.jsoup.parser.Token.Tag tag42 = tokeniser39.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype43 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype44 = doctype43.asDoctype();
        java.lang.String str45 = doctype43.tokenType();
        tokeniser39.emit((org.jsoup.parser.Token) doctype43);
        org.jsoup.parser.Token.Tag tag48 = tokeniser39.createTagPending(true);
        xmlTreeBuilder32.currentToken = tag48;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder50 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList54 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int55 = parseErrorList54.getMaxSize();
        org.jsoup.nodes.Document document56 = htmlTreeBuilder50.parse("0: Doctype", "hi!", parseErrorList54);
        boolean boolean57 = htmlTreeBuilder50.framesetOk();
        org.jsoup.nodes.Document document60 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder50.setHeadElement((org.jsoup.nodes.Element) document60);
        xmlTreeBuilder32.doc = document60;
        boolean boolean63 = htmlTreeBuilder9.removeFromStack((org.jsoup.nodes.Element) document60);
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document60);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = htmlTreeBuilder0.inScope("\uffff");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(parser17);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(attributes29);
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertNotNull(parseErrorList35);
        org.junit.Assert.assertNotNull(parseErrorStream36);
        org.junit.Assert.assertNotNull(parseErrorItor37);
        org.junit.Assert.assertNotNull(parseErrorItor38);
        org.junit.Assert.assertNull(tag40);
        org.junit.Assert.assertNotNull(tag42);
        org.junit.Assert.assertNotNull(doctype44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Doctype" + "'", str45, "Doctype");
        org.junit.Assert.assertNotNull(tag48);
        org.junit.Assert.assertNotNull(parseErrorList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(document56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(document60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        org.jsoup.parser.ParseError[] parseErrorArray9 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList10 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10, parseErrorArray9);
        boolean boolean12 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList10);
        java.lang.String str13 = parseErrorList1.toString();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList1.stream();
        java.lang.Object[] objArray15 = parseErrorList1.toArray();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder16 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.nodes.Document document22 = htmlTreeBuilder16.parse("0: Doctype", "hi!", parseErrorList20);
        boolean boolean23 = htmlTreeBuilder16.framesetOk();
        org.jsoup.parser.Parser parser24 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser26 = parser24.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document29 = parser24.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document32 = parser24.parseInput("<hi!>", "[]");
        htmlTreeBuilder16.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document32);
        boolean boolean34 = htmlTreeBuilder16.isFragmentParsing();
        htmlTreeBuilder16.clearStackToTableContext();
        int int36 = parseErrorList1.indexOf((java.lang.Object) htmlTreeBuilder16);
        org.jsoup.nodes.Document document37 = htmlTreeBuilder16.getDocument();
        org.jsoup.nodes.Element element39 = htmlTreeBuilder16.getFromStack("EndTag");
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parser24);
        org.junit.Assert.assertNotNull(parser26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertNull(element39);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        tokeniser7.createCommentPending();
        org.jsoup.parser.Token.Comment comment10 = tokeniser7.commentPending;
        java.lang.String str11 = comment10.tokenType();
        java.lang.StringBuilder stringBuilder12 = comment10.data;
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(comment10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Comment" + "'", str11, "Comment");
        org.junit.Assert.assertNotNull(stringBuilder12);
        org.junit.Assert.assertEquals(stringBuilder12.toString(), "");
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
        org.jsoup.parser.TreeBuilder treeBuilder2 = null;
        org.jsoup.parser.Parser parser3 = parser1.setTreeBuilder(treeBuilder2);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder4 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document5 = xmlTreeBuilder4.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder6 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        boolean boolean16 = parseErrorList11.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        xmlTreeBuilder6.initialiseParse("<!---->", "hi!", parseErrorList11);
        xmlTreeBuilder4.errors = parseErrorList11;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList19 = xmlTreeBuilder4.stack;
        org.jsoup.parser.CharacterReader characterReader20 = null;
        xmlTreeBuilder4.reader = characterReader20;
        org.jsoup.parser.Parser parser22 = parser1.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder4);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder23 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser24 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder23);
        boolean boolean25 = htmlTreeBuilder23.isFosterInserts();
        htmlTreeBuilder23.clearFormattingElementsToLastMarker();
        htmlTreeBuilder23.newPendingTableCharacters();
        htmlTreeBuilder23.clearFormattingElementsToLastMarker();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState29 = htmlTreeBuilder23.originalState();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder30 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int35 = parseErrorList34.getMaxSize();
        org.jsoup.nodes.Document document36 = htmlTreeBuilder30.parse("0: Doctype", "hi!", parseErrorList34);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder37 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int42 = parseErrorList41.getMaxSize();
        org.jsoup.nodes.Document document43 = htmlTreeBuilder37.parse("0: Doctype", "hi!", parseErrorList41);
        boolean boolean44 = htmlTreeBuilder37.framesetOk();
        org.jsoup.nodes.Document document47 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder37.setHeadElement((org.jsoup.nodes.Element) document47);
        org.jsoup.nodes.Element element49 = htmlTreeBuilder37.pop();
        htmlTreeBuilder30.pushActiveFormattingElements(element49);
        boolean boolean51 = htmlTreeBuilder23.isInActiveFormattingElements(element49);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState52 = org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup;
        htmlTreeBuilder23.transition(htmlTreeBuilderState52);
        htmlTreeBuilder23.markInsertionMode();
        org.jsoup.parser.Parser parser55 = parser1.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder23);
        org.jsoup.nodes.Document document58 = parser1.parseInput("a", "StartTaga");
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNull(document5);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(elementList19);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(htmlTreeBuilderState29);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(element49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState52);
        org.junit.Assert.assertNotNull(parser55);
        org.junit.Assert.assertNotNull(document58);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isKnownTag();
        boolean boolean5 = tag1.isKnownTag();
        org.jsoup.parser.Tag tag6 = tag1.setSelfClosing();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(tag6);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        htmlTreeBuilder0.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        org.jsoup.nodes.Element element31 = htmlTreeBuilder18.getActiveFormattingElement("0: Doctype");
        htmlTreeBuilder18.runParser();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder35 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader36 = null;
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList38.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor41 = parseErrorList38.iterator();
        org.jsoup.parser.Tokeniser tokeniser42 = new org.jsoup.parser.Tokeniser(characterReader36, parseErrorList38);
        org.jsoup.parser.Token.Tag tag43 = tokeniser42.tagPending;
        org.jsoup.parser.Token.Tag tag45 = tokeniser42.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype46 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype47 = doctype46.asDoctype();
        java.lang.String str48 = doctype46.tokenType();
        tokeniser42.emit((org.jsoup.parser.Token) doctype46);
        org.jsoup.parser.Token.Tag tag51 = tokeniser42.createTagPending(true);
        xmlTreeBuilder35.currentToken = tag51;
        org.jsoup.nodes.Attributes attributes53 = tag51.attributes;
        org.jsoup.parser.Token.StartTag startTag54 = new org.jsoup.parser.Token.StartTag("", attributes53);
        org.jsoup.parser.Token.StartTag startTag55 = new org.jsoup.parser.Token.StartTag("0: Doctype", attributes53);
        startTag55.appendAttributeName('\uffff');
        org.jsoup.nodes.FormElement formElement59 = htmlTreeBuilder18.insertForm(startTag55, true);
        htmlTreeBuilder0.setFormElement(formElement59);
        org.jsoup.parser.Token.EndTag endTag62 = new org.jsoup.parser.Token.EndTag("Doctype");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder63 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList67 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int68 = parseErrorList67.getMaxSize();
        org.jsoup.nodes.Document document69 = htmlTreeBuilder63.parse("0: Doctype", "hi!", parseErrorList67);
        boolean boolean70 = htmlTreeBuilder63.framesetOk();
        org.jsoup.nodes.Document document73 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder63.setHeadElement((org.jsoup.nodes.Element) document73);
        org.jsoup.parser.Token.StartTag startTag76 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType77 = startTag76.type;
        startTag76.appendTagName('#');
        boolean boolean80 = htmlTreeBuilder63.process((org.jsoup.parser.Token) startTag76);
        org.jsoup.parser.CharacterReader characterReader82 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader82.advance();
        boolean boolean85 = characterReader82.matchConsume("<hi!>");
        htmlTreeBuilder63.reader = characterReader82;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState87 = htmlTreeBuilder63.state();
        boolean boolean88 = htmlTreeBuilder0.process((org.jsoup.parser.Token) endTag62, htmlTreeBuilderState87);
        boolean boolean89 = endTag62.isEOF();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNull(element31);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
        org.junit.Assert.assertNotNull(parseErrorItor41);
        org.junit.Assert.assertNull(tag43);
        org.junit.Assert.assertNotNull(tag45);
        org.junit.Assert.assertNotNull(doctype47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Doctype" + "'", str48, "Doctype");
        org.junit.Assert.assertNotNull(tag51);
        org.junit.Assert.assertNotNull(attributes53);
        org.junit.Assert.assertNotNull(formElement59);
        org.junit.Assert.assertNotNull(parseErrorList67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(document69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(document73);
        org.junit.Assert.assertTrue("'" + tokenType77 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType77.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader2 = new org.jsoup.parser.CharacterReader("StartTag");
        int int4 = characterReader2.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean5 = characterReader2.matchesDigit();
        java.lang.String str6 = characterReader2.toString();
        xmlTreeBuilder0.reader = characterReader2;
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int12 = parseErrorList11.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray13 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList14 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList14, parseErrorArray13);
        org.jsoup.parser.ParseError[] parseErrorArray16 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList17 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17, parseErrorArray16);
        boolean boolean19 = parseErrorList14.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17);
        org.jsoup.parser.ParseError[] parseErrorArray20 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList21 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21, parseErrorArray20);
        boolean boolean23 = parseErrorList17.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        parseErrorList21.clear();
        boolean boolean25 = parseErrorList11.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        xmlTreeBuilder0.initialiseParse("<Doctype>", "a", parseErrorList11);
        org.jsoup.parser.Token.Character character28 = new org.jsoup.parser.Token.Character("100: ");
        xmlTreeBuilder0.insert(character28);
        java.lang.String str30 = character28.getData();
        java.lang.String str31 = character28.getData();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "StartTag" + "'", str6, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100: " + "'", str30, "100: ");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100: " + "'", str31, "100: ");
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype12 = tokeniser6.doctypePending;
        org.jsoup.parser.Token.Comment comment13 = new org.jsoup.parser.Token.Comment();
        java.lang.String str14 = comment13.toString();
        java.lang.StringBuilder stringBuilder15 = comment13.data;
        boolean boolean16 = comment13.isEndTag();
        java.lang.String str17 = comment13.toString();
        tokeniser6.commentPending = comment13;
        org.jsoup.parser.ITokeniserState iTokeniserState19 = tokeniser6.getState();
        java.lang.Class<?> wildcardClass20 = iTokeniserState19.getClass();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNull(doctype12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "<!---->" + "'", str14, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<!---->" + "'", str17, "<!---->");
        org.junit.Assert.assertNotNull(iTokeniserState19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("EndTag", "");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        boolean boolean8 = tokenQueue1.matchesCS("StartTag");
        boolean boolean9 = tokenQueue1.consumeWhitespace();
        char char10 = tokenQueue1.peek();
        java.lang.String str12 = tokenQueue1.consumeTo("StartTaga");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + '\000' + "'", char10 == '\000');
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("EOF");
        boolean boolean2 = tag1.isData();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Element element13 = htmlTreeBuilder0.getActiveFormattingElement("");
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.nodes.Element element15 = null;
        htmlTreeBuilder0.pushActiveFormattingElements(element15);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(element13);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        char char5 = tokenQueue1.peek();
        boolean boolean6 = tokenQueue1.matchesWhitespace();
        boolean boolean7 = tokenQueue1.matchesStartTag();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\000' + "'", char5 == '\000');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        java.lang.String[] strArray10 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str11 = tokenQueue1.consumeToAny(strArray10);
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.Tokeniser tokeniser18 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList14);
        org.jsoup.parser.Token.Tag tag19 = tokeniser18.tagPending;
        java.lang.StringBuilder stringBuilder20 = null;
        tokeniser18.dataBuffer = stringBuilder20;
        org.jsoup.parser.Token.EndTag endTag22 = new org.jsoup.parser.Token.EndTag();
        char[] charArray25 = new char[] { '#', '#' };
        endTag22.appendAttributeValue(charArray25);
        tokeniser18.emit(charArray25);
        boolean boolean28 = tokenQueue1.matchesAny(charArray25);
        java.lang.String str29 = tokenQueue1.consumeCssIdentifier();
        java.lang.String str31 = tokenQueue1.chompTo("a");
        java.lang.String str32 = tokenQueue1.remainder();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNull(tag19);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        java.lang.String[] strArray21 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean22 = htmlTreeBuilder0.inScope("hi!#", strArray21);
        org.jsoup.parser.ParseErrorList parseErrorList27 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("0: Doctype", "", parseErrorList27);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder29 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document30 = xmlTreeBuilder29.doc;
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int35 = parseErrorList34.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray36 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList37 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList37, parseErrorArray36);
        org.jsoup.parser.ParseError[] parseErrorArray39 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList40 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40, parseErrorArray39);
        boolean boolean42 = parseErrorList37.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40);
        org.jsoup.parser.ParseError[] parseErrorArray43 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList44 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44, parseErrorArray43);
        boolean boolean46 = parseErrorList40.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        parseErrorList44.clear();
        boolean boolean48 = parseErrorList34.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList34.iterator();
        org.jsoup.nodes.Document document50 = xmlTreeBuilder29.parse("<hi!>", "0: []", parseErrorList34);
        htmlTreeBuilder0.push((org.jsoup.nodes.Element) document50);
        org.jsoup.nodes.FormElement formElement52 = htmlTreeBuilder0.getFormElement();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNull(document30);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parseErrorArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(parseErrorArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertNull(formElement52);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder1 = new org.jsoup.parser.HtmlTreeBuilder();
        htmlTreeBuilder1.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder5 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int10 = parseErrorList9.getMaxSize();
        org.jsoup.nodes.Document document11 = htmlTreeBuilder5.parse("0: Doctype", "hi!", parseErrorList9);
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        org.jsoup.parser.ParseError[] parseErrorArray15 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList16 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16, parseErrorArray15);
        boolean boolean18 = parseErrorList13.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16);
        java.lang.Object[] objArray19 = parseErrorList13.toArray();
        parseErrorList13.clear();
        org.jsoup.parser.ParseError[] parseErrorArray21 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList22 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList22, parseErrorArray21);
        org.jsoup.parser.ParseError[] parseErrorArray24 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList25 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList25, parseErrorArray24);
        boolean boolean27 = parseErrorList22.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList25);
        java.lang.Object[] objArray28 = parseErrorList22.toArray();
        parseErrorList22.clear();
        org.jsoup.parser.ParseError[] parseErrorArray30 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList31 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31, parseErrorArray30);
        boolean boolean33 = parseErrorList22.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        boolean boolean34 = parseErrorList13.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        java.lang.Object[] objArray35 = parseErrorList31.toArray();
        boolean boolean36 = parseErrorList9.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        org.jsoup.parser.ParseError[] parseErrorArray37 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList38 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38, parseErrorArray37);
        org.jsoup.parser.ParseError[] parseErrorArray40 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList41 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList41, parseErrorArray40);
        boolean boolean43 = parseErrorList38.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList41);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor44 = parseErrorList41.listIterator();
        int int46 = parseErrorList41.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag50 = new org.jsoup.parser.Token.EndTag();
        char[] charArray53 = new char[] { '#', '#' };
        endTag50.appendAttributeValue(charArray53);
        endTag50.finaliseTag();
        boolean boolean56 = endTag50.isSelfClosing();
        org.jsoup.parser.Tag tag58 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean59 = tag58.isFormListed();
        org.jsoup.parser.Tag tag60 = tag58.setSelfClosing();
        boolean boolean61 = tag58.isKnownTag();
        java.lang.Object[] objArray63 = new java.lang.Object[] { boolean56, tag58, "Doctype" };
        org.jsoup.parser.ParseError parseError64 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray63);
        parseErrorList41.add(0, parseError64);
        boolean boolean66 = parseErrorList9.add(parseError64);
        org.jsoup.nodes.Document document67 = htmlTreeBuilder1.parse("\uffff", "", parseErrorList9);
        org.jsoup.parser.Parser parser68 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.nodes.Document document71 = parser68.parseInput("", "hi!");
        org.jsoup.nodes.Document document74 = parser68.parseInput("<hi!>", "[]");
        htmlTreeBuilder1.insertInFosterParent((org.jsoup.nodes.Node) document74);
        java.util.List<org.jsoup.nodes.Node> nodeList77 = org.jsoup.parser.Parser.parseFragment("t", (org.jsoup.nodes.Element) document74, "EndTag");
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parseErrorArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(parseErrorArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(parseErrorArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(parseErrorItor44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(tag58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(tag60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(document67);
        org.junit.Assert.assertNotNull(parser68);
        org.junit.Assert.assertNotNull(document71);
        org.junit.Assert.assertNotNull(document74);
        org.junit.Assert.assertNotNull(nodeList77);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.nodes.Document document16 = htmlTreeBuilder0.doc;
        boolean boolean18 = htmlTreeBuilder0.inTableScope("<!---->");
        org.jsoup.parser.Token.StartTag startTag20 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType21 = startTag20.type;
        startTag20.appendTagName('#');
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder24 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader25 = null;
        org.jsoup.parser.ParseErrorList parseErrorList27 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream28 = parseErrorList27.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor29 = parseErrorList27.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor30 = parseErrorList27.iterator();
        org.jsoup.parser.Tokeniser tokeniser31 = new org.jsoup.parser.Tokeniser(characterReader25, parseErrorList27);
        org.jsoup.parser.Token.Tag tag32 = tokeniser31.tagPending;
        org.jsoup.parser.Token.Tag tag34 = tokeniser31.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype35 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype36 = doctype35.asDoctype();
        java.lang.String str37 = doctype35.tokenType();
        tokeniser31.emit((org.jsoup.parser.Token) doctype35);
        org.jsoup.parser.Token.Tag tag40 = tokeniser31.createTagPending(true);
        xmlTreeBuilder24.currentToken = tag40;
        org.jsoup.nodes.Attributes attributes42 = tag40.attributes;
        startTag20.attributes = attributes42;
        java.lang.String str44 = startTag20.toString();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + tokenType21 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType21.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(parseErrorList27);
        org.junit.Assert.assertNotNull(parseErrorStream28);
        org.junit.Assert.assertNotNull(parseErrorItor29);
        org.junit.Assert.assertNotNull(parseErrorItor30);
        org.junit.Assert.assertNull(tag32);
        org.junit.Assert.assertNotNull(tag34);
        org.junit.Assert.assertNotNull(doctype36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Doctype" + "'", str37, "Doctype");
        org.junit.Assert.assertNotNull(tag40);
        org.junit.Assert.assertNotNull(attributes42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "<hi!#>" + "'", str44, "<hi!#>");
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token token1 = xmlTreeBuilder0.currentToken;
        org.jsoup.parser.Parser parser3 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser5 = parser3.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document8 = parser3.parseInput("Doctype", "[]");
        java.util.List<org.jsoup.nodes.Node> nodeList10 = org.jsoup.parser.Parser.parseFragment("", (org.jsoup.nodes.Element) document8, "<hi!>");
        org.jsoup.nodes.Element[] elementArray11 = new org.jsoup.nodes.Element[] { document8 };
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList12 = new org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<org.jsoup.nodes.Element>) elementList12, elementArray11);
        xmlTreeBuilder0.stack = elementList12;
        org.jsoup.parser.Token.Character character16 = new org.jsoup.parser.Token.Character("-1: []");
        xmlTreeBuilder0.insert(character16);
        java.lang.String str18 = character16.getData();
        java.lang.String str19 = character16.getData();
        org.junit.Assert.assertNull(token1);
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNotNull(parser5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNotNull(elementArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1: []" + "'", str18, "-1: []");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1: []" + "'", str19, "-1: []");
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList9 = xmlTreeBuilder0.stack;
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        boolean boolean21 = parseErrorList14.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList19);
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        boolean boolean26 = parseErrorList24.canAddError();
        boolean boolean27 = parseErrorList19.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
        java.util.List<org.jsoup.nodes.Node> nodeList28 = xmlTreeBuilder0.parseFragment("StartTag", "<!---->", parseErrorList24);
        org.jsoup.parser.ParseError[] parseErrorArray29 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList30 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30, parseErrorArray29);
        org.jsoup.parser.ParseError[] parseErrorArray32 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList33 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33, parseErrorArray32);
        boolean boolean35 = parseErrorList30.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33);
        boolean boolean36 = parseErrorList24.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream37 = parseErrorList24.parallelStream();
        boolean boolean38 = parseErrorList24.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError40 = parseErrorList24.remove((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(elementList9);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertNotNull(parseErrorArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(parseErrorArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parseErrorStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        tokeniser6.createTempBuffer();
        tokeniser6.emitTagPending();
        org.jsoup.parser.Token.Tag tag12 = tokeniser6.tagPending;
        org.jsoup.parser.TokeniserState tokeniserState13 = org.jsoup.parser.TokeniserState.RCDATAEndTagOpen;
        tokeniser6.error((org.jsoup.parser.ITokeniserState) tokeniserState13);
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitTagPending();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: There is an unread token pending!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertNotNull(tokeniserState13);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.Tokeniser tokeniser9 = xmlTreeBuilder0.tokeniser;
        org.jsoup.nodes.Document document10 = xmlTreeBuilder0.doc;
        org.jsoup.parser.Token.Doctype doctype11 = null;
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(doctype11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(tokeniser9);
        org.junit.Assert.assertNull(document10);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        char char3 = tokenQueue1.peek();
        boolean boolean5 = tokenQueue1.matches("hi!#");
        boolean boolean6 = tokenQueue1.consumeWhitespace();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'E' + "'", char3 == 'E');
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        char char6 = tokenQueue1.peek();
        boolean boolean8 = tokenQueue1.matchChomp("<hi!#>");
        boolean boolean9 = tokenQueue1.consumeWhitespace();
        tokenQueue1.advance();
        java.lang.String str11 = tokenQueue1.consumeElementSelector();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\000' + "'", char6 == '\000');
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\000');
        characterReader1.mark();
        boolean boolean5 = characterReader1.isEmpty();
        org.jsoup.parser.TokenQueue tokenQueue7 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str9 = tokenQueue7.chompTo("Doctype");
        java.lang.String str10 = tokenQueue7.consumeWord();
        boolean boolean11 = tokenQueue7.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag12 = new org.jsoup.parser.Token.EndTag();
        char[] charArray15 = new char[] { '#', '#' };
        endTag12.appendAttributeValue(charArray15);
        boolean boolean17 = tokenQueue7.matchesAny(charArray15);
        boolean boolean18 = characterReader1.matchesAny(charArray15);
        boolean boolean19 = characterReader1.matchesLetter();
        boolean boolean20 = characterReader1.matchesDigit();
        java.lang.String str21 = characterReader1.consumeDigitSequence();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "EndTag" + "'", str9, "EndTag");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState7 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState7);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder12 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader13 = null;
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream16 = parseErrorList15.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList15.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList15.iterator();
        org.jsoup.parser.Tokeniser tokeniser19 = new org.jsoup.parser.Tokeniser(characterReader13, parseErrorList15);
        org.jsoup.parser.Token.Tag tag20 = tokeniser19.tagPending;
        org.jsoup.parser.Token.Tag tag22 = tokeniser19.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype23 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype24 = doctype23.asDoctype();
        java.lang.String str25 = doctype23.tokenType();
        tokeniser19.emit((org.jsoup.parser.Token) doctype23);
        org.jsoup.parser.Token.Tag tag28 = tokeniser19.createTagPending(true);
        xmlTreeBuilder12.currentToken = tag28;
        org.jsoup.nodes.Attributes attributes30 = tag28.attributes;
        org.jsoup.parser.Token.StartTag startTag31 = new org.jsoup.parser.Token.StartTag("", attributes30);
        org.jsoup.parser.Token.StartTag startTag32 = new org.jsoup.parser.Token.StartTag("0: Doctype", attributes30);
        org.jsoup.parser.Token.StartTag startTag33 = new org.jsoup.parser.Token.StartTag("", attributes30);
        htmlTreeBuilder0.currentToken = startTag33;
        org.jsoup.parser.Token.TokenType tokenType35 = startTag33.type;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = startTag33.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be false");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(parseErrorStream16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNull(tag20);
        org.junit.Assert.assertNotNull(tag22);
        org.junit.Assert.assertNotNull(doctype24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Doctype" + "'", str25, "Doctype");
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(attributes30);
        org.junit.Assert.assertTrue("'" + tokenType35 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType35.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        boolean boolean8 = tokenQueue1.matchesCS("StartTag");
        tokenQueue1.addFirst((java.lang.Character) 'a');
        java.lang.String str11 = tokenQueue1.consumeElementSelector();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "a" + "'", str11, "a");
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        tokenQueue1.advance();
        java.lang.String str6 = tokenQueue1.consumeCssIdentifier();
        java.lang.String str7 = tokenQueue1.consumeCssIdentifier();
        // The following exception was thrown during execution in test generation
        try {
            char char8 = tokenQueue1.consume();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 6");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("Doctype");
        boolean boolean2 = startTag1.isDoctype();
        org.jsoup.parser.CharacterReader characterReader3 = null;
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream6 = parseErrorList5.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList5.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList5.iterator();
        org.jsoup.parser.Tokeniser tokeniser9 = new org.jsoup.parser.Tokeniser(characterReader3, parseErrorList5);
        org.jsoup.parser.Token.Tag tag10 = tokeniser9.tagPending;
        tokeniser9.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag14 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType15 = startTag14.type;
        startTag14.appendTagName('#');
        tokeniser9.tagPending = startTag14;
        org.jsoup.parser.TokeniserState tokeniserState19 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser9.transition((org.jsoup.parser.ITokeniserState) tokeniserState19);
        org.jsoup.parser.Token.Doctype doctype21 = new org.jsoup.parser.Token.Doctype();
        boolean boolean22 = doctype21.isCharacter();
        tokeniser9.doctypePending = doctype21;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState24 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype25 = new org.jsoup.parser.Token.Doctype();
        boolean boolean26 = doctype25.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder27 = null;
        boolean boolean28 = htmlTreeBuilderState24.process((org.jsoup.parser.Token) doctype25, htmlTreeBuilder27);
        java.lang.StringBuilder stringBuilder29 = doctype25.name;
        tokeniser9.dataBuffer = stringBuilder29;
        org.jsoup.parser.Token.EndTag endTag31 = new org.jsoup.parser.Token.EndTag();
        char[] charArray34 = new char[] { '#', '#' };
        endTag31.appendAttributeValue(charArray34);
        endTag31.appendAttributeValue(' ');
        char[] charArray39 = new char[] { '4' };
        endTag31.appendAttributeValue(charArray39);
        tokeniser9.emit(charArray39);
        startTag1.appendAttributeValue(charArray39);
        java.lang.String str43 = startTag1.toString();
        boolean boolean44 = startTag1.selfClosing;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.Comment comment45 = startTag1.asComment();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Comment");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorStream6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNull(tag10);
        org.junit.Assert.assertTrue("'" + tokenType15 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType15.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(stringBuilder29);
        org.junit.Assert.assertEquals(stringBuilder29.toString(), "");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, #]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[4]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "<Doctype>" + "'", str43, "<Doctype>");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag1.appendTagName("hi!");
        startTag1.appendAttributeName('4');
        startTag1.appendAttributeName('\000');
        startTag1.appendAttributeValue('#');
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.EndTag endTag10 = startTag1.asEndTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$EndTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream2 = parseErrorList1.stream();
        boolean boolean3 = parseErrorList1.canAddError();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList1.iterator();
        org.jsoup.parser.Token.Doctype doctype5 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype6 = doctype5.asDoctype();
        java.lang.StringBuilder stringBuilder7 = doctype6.name;
        org.jsoup.parser.Token.Doctype doctype8 = new org.jsoup.parser.Token.Doctype();
        java.lang.StringBuilder stringBuilder9 = doctype8.systemIdentifier;
        org.jsoup.parser.Token.Comment comment10 = new org.jsoup.parser.Token.Comment();
        java.lang.String str11 = comment10.toString();
        java.lang.StringBuilder stringBuilder12 = comment10.data;
        org.jsoup.parser.CharacterReader characterReader13 = null;
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream16 = parseErrorList15.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList15.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList15.iterator();
        org.jsoup.parser.Tokeniser tokeniser19 = new org.jsoup.parser.Tokeniser(characterReader13, parseErrorList15);
        org.jsoup.parser.Token.Tag tag20 = tokeniser19.tagPending;
        tokeniser19.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag24 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType25 = startTag24.type;
        startTag24.appendTagName('#');
        tokeniser19.tagPending = startTag24;
        org.jsoup.parser.TokeniserState tokeniserState29 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser19.transition((org.jsoup.parser.ITokeniserState) tokeniserState29);
        org.jsoup.parser.Token.Doctype doctype31 = new org.jsoup.parser.Token.Doctype();
        boolean boolean32 = doctype31.isCharacter();
        tokeniser19.doctypePending = doctype31;
        org.jsoup.parser.Token.Doctype doctype34 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype35 = doctype34.asDoctype();
        java.lang.StringBuilder stringBuilder36 = doctype35.name;
        tokeniser19.dataBuffer = stringBuilder36;
        org.jsoup.parser.Token.Comment comment38 = new org.jsoup.parser.Token.Comment();
        java.lang.String str39 = comment38.toString();
        java.lang.StringBuilder stringBuilder40 = comment38.data;
        org.jsoup.parser.CharacterReader characterReader41 = null;
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor45 = parseErrorList43.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList43.iterator();
        org.jsoup.parser.Tokeniser tokeniser47 = new org.jsoup.parser.Tokeniser(characterReader41, parseErrorList43);
        org.jsoup.parser.Token.Tag tag48 = tokeniser47.tagPending;
        tokeniser47.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag52 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType53 = startTag52.type;
        startTag52.appendTagName('#');
        tokeniser47.tagPending = startTag52;
        org.jsoup.parser.TokeniserState tokeniserState57 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser47.transition((org.jsoup.parser.ITokeniserState) tokeniserState57);
        org.jsoup.parser.Token.Doctype doctype59 = new org.jsoup.parser.Token.Doctype();
        boolean boolean60 = doctype59.isCharacter();
        tokeniser47.doctypePending = doctype59;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState62 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype63 = new org.jsoup.parser.Token.Doctype();
        boolean boolean64 = doctype63.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder65 = null;
        boolean boolean66 = htmlTreeBuilderState62.process((org.jsoup.parser.Token) doctype63, htmlTreeBuilder65);
        java.lang.StringBuilder stringBuilder67 = doctype63.name;
        tokeniser47.dataBuffer = stringBuilder67;
        java.lang.Appendable[] appendableArray69 = new java.lang.Appendable[] { stringBuilder7, stringBuilder9, stringBuilder12, stringBuilder36, stringBuilder40, stringBuilder67 };
        java.lang.Appendable[] appendableArray70 = parseErrorList1.toArray(appendableArray69);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.parser.ParseError> parseErrorList73 = parseErrorList1.subList(0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertNotNull(parseErrorStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(doctype6);
        org.junit.Assert.assertNotNull(stringBuilder7);
        org.junit.Assert.assertEquals(stringBuilder7.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder9);
        org.junit.Assert.assertEquals(stringBuilder9.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<!---->" + "'", str11, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder12);
        org.junit.Assert.assertEquals(stringBuilder12.toString(), "");
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(parseErrorStream16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNull(tag20);
        org.junit.Assert.assertTrue("'" + tokenType25 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType25.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doctype35);
        org.junit.Assert.assertNotNull(stringBuilder36);
        org.junit.Assert.assertEquals(stringBuilder36.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "<!---->" + "'", str39, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder40);
        org.junit.Assert.assertEquals(stringBuilder40.toString(), "");
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertNotNull(parseErrorItor45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertNull(tag48);
        org.junit.Assert.assertTrue("'" + tokenType53 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType53.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(stringBuilder67);
        org.junit.Assert.assertEquals(stringBuilder67.toString(), "");
        org.junit.Assert.assertNotNull(appendableArray69);
        org.junit.Assert.assertNotNull(appendableArray70);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        boolean boolean1 = doctype0.isCharacter();
        org.jsoup.parser.Token.TokenType tokenType2 = org.jsoup.parser.Token.TokenType.StartTag;
        doctype0.type = tokenType2;
        java.lang.String str4 = doctype0.getPublicIdentifier();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + tokenType2 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType2.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document14);
        htmlTreeBuilder0.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        org.jsoup.nodes.Element element31 = htmlTreeBuilder18.getActiveFormattingElement("0: Doctype");
        htmlTreeBuilder18.runParser();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder35 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader36 = null;
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList38.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor41 = parseErrorList38.iterator();
        org.jsoup.parser.Tokeniser tokeniser42 = new org.jsoup.parser.Tokeniser(characterReader36, parseErrorList38);
        org.jsoup.parser.Token.Tag tag43 = tokeniser42.tagPending;
        org.jsoup.parser.Token.Tag tag45 = tokeniser42.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype46 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype47 = doctype46.asDoctype();
        java.lang.String str48 = doctype46.tokenType();
        tokeniser42.emit((org.jsoup.parser.Token) doctype46);
        org.jsoup.parser.Token.Tag tag51 = tokeniser42.createTagPending(true);
        xmlTreeBuilder35.currentToken = tag51;
        org.jsoup.nodes.Attributes attributes53 = tag51.attributes;
        org.jsoup.parser.Token.StartTag startTag54 = new org.jsoup.parser.Token.StartTag("", attributes53);
        org.jsoup.parser.Token.StartTag startTag55 = new org.jsoup.parser.Token.StartTag("0: Doctype", attributes53);
        startTag55.appendAttributeName('\uffff');
        org.jsoup.nodes.FormElement formElement59 = htmlTreeBuilder18.insertForm(startTag55, true);
        htmlTreeBuilder0.setFormElement(formElement59);
        org.jsoup.nodes.FormElement formElement61 = htmlTreeBuilder0.getFormElement();
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList62 = htmlTreeBuilder0.getStack();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder63 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList67 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int68 = parseErrorList67.getMaxSize();
        org.jsoup.nodes.Document document69 = htmlTreeBuilder63.parse("0: Doctype", "hi!", parseErrorList67);
        boolean boolean70 = htmlTreeBuilder63.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState71 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder63.error(htmlTreeBuilderState71);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState73 = null;
        htmlTreeBuilder63.transition(htmlTreeBuilderState73);
        htmlTreeBuilder63.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList77 = htmlTreeBuilder63.getPendingTableCharacters();
        htmlTreeBuilder0.setPendingTableCharacters(characterList77);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNull(element31);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
        org.junit.Assert.assertNotNull(parseErrorItor41);
        org.junit.Assert.assertNull(tag43);
        org.junit.Assert.assertNotNull(tag45);
        org.junit.Assert.assertNotNull(doctype47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Doctype" + "'", str48, "Doctype");
        org.junit.Assert.assertNotNull(tag51);
        org.junit.Assert.assertNotNull(attributes53);
        org.junit.Assert.assertNotNull(formElement59);
        org.junit.Assert.assertNotNull(formElement61);
        org.junit.Assert.assertNotNull(elementList62);
        org.junit.Assert.assertNotNull(parseErrorList67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(document69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState71);
        org.junit.Assert.assertNotNull(characterList77);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("\ufffd>");
        org.jsoup.parser.Tag tag2 = tag1.setSelfClosing();
        boolean boolean3 = tag2.isBlock();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertNotNull(tag2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.framesetOk(false);
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        boolean boolean23 = htmlTreeBuilder0.isFosterInserts();
        boolean boolean25 = htmlTreeBuilder0.inSelectScope("0: []");
        java.util.List<org.jsoup.parser.Token.Character> characterList26 = htmlTreeBuilder0.getPendingTableCharacters();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(characterList26);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        java.lang.String str16 = startTag11.tagName;
        org.jsoup.nodes.Attributes attributes17 = null;
        startTag11.attributes = attributes17;
        org.jsoup.nodes.Attributes attributes19 = startTag11.getAttributes();
        boolean boolean20 = startTag11.isSelfClosing();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!#" + "'", str16, "hi!#");
        org.junit.Assert.assertNull(attributes19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Token token8 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState9 = org.jsoup.parser.HtmlTreeBuilderState.InTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState9);
        org.jsoup.parser.Token token11 = null;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState20 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder12.error(htmlTreeBuilderState20);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState22 = null;
        htmlTreeBuilder12.transition(htmlTreeBuilderState22);
        htmlTreeBuilder12.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement26 = htmlTreeBuilder12.getFormElement();
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList27 = htmlTreeBuilder12.getStack();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        boolean boolean35 = htmlTreeBuilder28.framesetOk();
        org.jsoup.parser.Parser parser36 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser38 = parser36.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document41 = parser36.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document44 = parser36.parseInput("<hi!>", "[]");
        htmlTreeBuilder28.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document44);
        java.lang.String[] strArray46 = new java.lang.String[] {};
        boolean boolean47 = htmlTreeBuilder28.inScope(strArray46);
        htmlTreeBuilder28.markInsertionMode();
        boolean boolean50 = htmlTreeBuilder28.inScope("StartTag");
        htmlTreeBuilder28.markInsertionMode();
        org.jsoup.nodes.Document document54 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder28.setHeadElement((org.jsoup.nodes.Element) document54);
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document54);
        org.jsoup.parser.Token.EndTag endTag57 = new org.jsoup.parser.Token.EndTag();
        java.lang.String str58 = endTag57.tagName;
        htmlTreeBuilder12.currentToken = endTag57;
        htmlTreeBuilder12.popStackToClose("Doctype");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = htmlTreeBuilderState9.process(token11, htmlTreeBuilder12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(token8);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState9);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState20);
        org.junit.Assert.assertNull(formElement26);
        org.junit.Assert.assertNotNull(elementList27);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(parser36);
        org.junit.Assert.assertNotNull(parser38);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(document54);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        parseErrorList21.trimToSize();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        parseErrorList21.clear();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorItor24);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking((int) (short) 10);
        org.junit.Assert.assertNotNull(parseErrorList1);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        java.lang.String str7 = tokenQueue1.remainder();
        boolean boolean9 = tokenQueue1.matches("<hi!#>");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.InTable;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder1 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int6 = parseErrorList5.getMaxSize();
        org.jsoup.nodes.Document document7 = htmlTreeBuilder1.parse("0: Doctype", "hi!", parseErrorList5);
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream12 = parseErrorList11.stream();
        boolean boolean13 = parseErrorList11.canAddError();
        org.jsoup.nodes.Document document14 = htmlTreeBuilder1.parse("EndTag", "hi!#", parseErrorList11);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState15 = null;
        htmlTreeBuilder1.transition(htmlTreeBuilderState15);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState26 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder18.error(htmlTreeBuilderState26);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        boolean boolean40 = parseErrorList38.canAddError();
        org.jsoup.nodes.Document document41 = htmlTreeBuilder28.parse("EndTag", "hi!#", parseErrorList38);
        java.lang.String[] strArray49 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean50 = htmlTreeBuilder28.inScope("hi!#", strArray49);
        boolean boolean51 = htmlTreeBuilder18.inScope(strArray49);
        boolean boolean52 = htmlTreeBuilder1.inScope("t", strArray49);
        org.jsoup.parser.Token.StartTag startTag54 = new org.jsoup.parser.Token.StartTag("10: ");
        htmlTreeBuilder1.currentToken = startTag54;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder56 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList60 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int61 = parseErrorList60.getMaxSize();
        org.jsoup.nodes.Document document62 = htmlTreeBuilder56.parse("0: Doctype", "hi!", parseErrorList60);
        htmlTreeBuilder56.generateImpliedEndTags("hi!#");
        htmlTreeBuilder56.generateImpliedEndTags();
        java.lang.String str66 = htmlTreeBuilder56.toString();
        org.jsoup.parser.Parser parser67 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser69 = parser67.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder70 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document71 = xmlTreeBuilder70.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder72 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList77 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList79 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream80 = parseErrorList79.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor81 = parseErrorList79.iterator();
        boolean boolean82 = parseErrorList77.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList79);
        xmlTreeBuilder72.initialiseParse("<!---->", "hi!", parseErrorList77);
        xmlTreeBuilder70.errors = parseErrorList77;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList85 = xmlTreeBuilder70.stack;
        org.jsoup.parser.Parser parser86 = parser69.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder70);
        org.jsoup.nodes.Document document89 = parser86.parseInput("hi!", "[]");
        htmlTreeBuilder56.pushActiveFormattingElements((org.jsoup.nodes.Element) document89);
        boolean boolean91 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) startTag54, htmlTreeBuilder56);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertNotNull(parseErrorStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState26);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(parseErrorList60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(document62);
        org.junit.Assert.assertNotNull(parser67);
        org.junit.Assert.assertNotNull(parser69);
        org.junit.Assert.assertNull(document71);
        org.junit.Assert.assertNotNull(parseErrorList79);
        org.junit.Assert.assertNotNull(parseErrorStream80);
        org.junit.Assert.assertNotNull(parseErrorItor81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(elementList85);
        org.junit.Assert.assertNotNull(parser86);
        org.junit.Assert.assertNotNull(document89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.isInline();
        java.lang.String str6 = tag1.getName();
        boolean boolean7 = tag1.isData();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder3.errors = parseErrorList21;
        org.jsoup.parser.Token.StartTag startTag23 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes24 = startTag23.getAttributes();
        xmlTreeBuilder3.currentToken = startTag23;
        org.jsoup.parser.Token token26 = null;
        xmlTreeBuilder3.currentToken = token26;
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(attributes24);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        parseErrorList8.clear();
        boolean boolean12 = parseErrorList8.isEmpty();
        org.jsoup.parser.Token.Doctype doctype13 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype14 = doctype13.asDoctype();
        boolean boolean15 = doctype13.isEOF();
        boolean boolean16 = doctype13.isForceQuirks();
        boolean boolean17 = doctype13.isEndTag();
        boolean boolean18 = parseErrorList8.remove((java.lang.Object) boolean17);
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int27 = parseErrorList26.getMaxSize();
        boolean boolean28 = parseErrorList21.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        org.jsoup.parser.Tokeniser tokeniser29 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList26);
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream32 = parseErrorList31.stream();
        boolean boolean33 = parseErrorList31.canAddError();
        boolean boolean34 = parseErrorList26.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        boolean boolean35 = parseErrorList8.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream36 = parseErrorList8.stream();
        java.util.function.UnaryOperator<org.jsoup.parser.ParseError> parseErrorUnaryOperator37 = null;
        // The following exception was thrown during execution in test generation
        try {
            parseErrorList8.replaceAll(parseErrorUnaryOperator37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doctype14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertNotNull(parseErrorStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(parseErrorStream36);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        org.jsoup.parser.ParseErrorList parseErrorList18 = htmlTreeBuilder0.errors;
        java.lang.String str19 = htmlTreeBuilder0.getBaseUri();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        boolean boolean3 = tag1.formatAsBlock();
        boolean boolean4 = tag1.isBlock();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        char[] charArray3 = new char[] { '#', '#' };
        endTag0.appendAttributeValue(charArray3);
        endTag0.finaliseTag();
        boolean boolean6 = endTag0.isSelfClosing();
        endTag0.finaliseTag();
        endTag0.appendAttributeName("ndTag");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList3 = null;
        xmlTreeBuilder0.initialiseParse("0: []", "t", parseErrorList3);
        java.lang.Class<?> wildcardClass5 = xmlTreeBuilder0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder4 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList8 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int9 = parseErrorList8.getMaxSize();
        org.jsoup.nodes.Document document10 = htmlTreeBuilder4.parse("0: Doctype", "hi!", parseErrorList8);
        org.jsoup.parser.ParseError[] parseErrorArray11 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList12 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12, parseErrorArray11);
        org.jsoup.parser.ParseError[] parseErrorArray14 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList15 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15, parseErrorArray14);
        boolean boolean17 = parseErrorList12.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList15);
        java.lang.Object[] objArray18 = parseErrorList12.toArray();
        parseErrorList12.clear();
        org.jsoup.parser.ParseError[] parseErrorArray20 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList21 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21, parseErrorArray20);
        org.jsoup.parser.ParseError[] parseErrorArray23 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList24 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24, parseErrorArray23);
        boolean boolean26 = parseErrorList21.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
        java.lang.Object[] objArray27 = parseErrorList21.toArray();
        parseErrorList21.clear();
        org.jsoup.parser.ParseError[] parseErrorArray29 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList30 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30, parseErrorArray29);
        boolean boolean32 = parseErrorList21.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        boolean boolean33 = parseErrorList12.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        java.lang.Object[] objArray34 = parseErrorList30.toArray();
        boolean boolean35 = parseErrorList8.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        org.jsoup.parser.ParseError[] parseErrorArray36 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList37 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList37, parseErrorArray36);
        org.jsoup.parser.ParseError[] parseErrorArray39 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList40 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40, parseErrorArray39);
        boolean boolean42 = parseErrorList37.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList40.listIterator();
        int int45 = parseErrorList40.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag49 = new org.jsoup.parser.Token.EndTag();
        char[] charArray52 = new char[] { '#', '#' };
        endTag49.appendAttributeValue(charArray52);
        endTag49.finaliseTag();
        boolean boolean55 = endTag49.isSelfClosing();
        org.jsoup.parser.Tag tag57 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean58 = tag57.isFormListed();
        org.jsoup.parser.Tag tag59 = tag57.setSelfClosing();
        boolean boolean60 = tag57.isKnownTag();
        java.lang.Object[] objArray62 = new java.lang.Object[] { boolean55, tag57, "Doctype" };
        org.jsoup.parser.ParseError parseError63 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray62);
        parseErrorList40.add(0, parseError63);
        boolean boolean65 = parseErrorList8.add(parseError63);
        org.jsoup.nodes.Document document66 = htmlTreeBuilder0.parse("\uffff", "", parseErrorList8);
        org.jsoup.parser.Parser parser67 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.nodes.Document document70 = parser67.parseInput("", "hi!");
        org.jsoup.nodes.Document document73 = parser67.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.insertInFosterParent((org.jsoup.nodes.Node) document73);
        java.lang.String str75 = htmlTreeBuilder0.toString();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder76 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList81 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList83 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream84 = parseErrorList83.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor85 = parseErrorList83.iterator();
        boolean boolean86 = parseErrorList81.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList83);
        xmlTreeBuilder76.initialiseParse("<!---->", "hi!", parseErrorList81);
        org.jsoup.parser.ParseErrorList parseErrorList91 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document92 = xmlTreeBuilder76.parse("", "[]", parseErrorList91);
        org.jsoup.nodes.Document document93 = xmlTreeBuilder76.doc;
        htmlTreeBuilder0.insert((org.jsoup.nodes.Element) document93);
        org.junit.Assert.assertNotNull(parseErrorList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parseErrorArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(parseErrorArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(parseErrorArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parseErrorArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(tag57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(tag59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(document66);
        org.junit.Assert.assertNotNull(parser67);
        org.junit.Assert.assertNotNull(document70);
        org.junit.Assert.assertNotNull(document73);
        org.junit.Assert.assertNotNull(parseErrorList83);
        org.junit.Assert.assertNotNull(parseErrorStream84);
        org.junit.Assert.assertNotNull(parseErrorItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(parseErrorList91);
        org.junit.Assert.assertNotNull(document92);
        org.junit.Assert.assertNotNull(document93);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWhitespace();
        java.lang.String str7 = tokenQueue1.consumeWord();
        tokenQueue1.addFirst((java.lang.Character) ' ');
        char[] charArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = tokenQueue1.matchesAny(charArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.parser.TokenQueue tokenQueue38 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean39 = tokenQueue38.isEmpty();
        boolean boolean40 = tokenQueue38.consumeWhitespace();
        java.lang.String str41 = tokenQueue38.consumeWord();
        boolean boolean42 = tokenQueue38.matchesWhitespace();
        java.lang.String[] strArray47 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str48 = tokenQueue38.consumeToAny(strArray47);
        boolean boolean49 = htmlTreeBuilder0.inScope(strArray47);
        org.jsoup.parser.CharacterReader characterReader50 = null;
        org.jsoup.parser.ParseErrorList parseErrorList52 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream53 = parseErrorList52.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor54 = parseErrorList52.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList52.iterator();
        org.jsoup.parser.Tokeniser tokeniser56 = new org.jsoup.parser.Tokeniser(characterReader50, parseErrorList52);
        org.jsoup.parser.Token.Tag tag57 = tokeniser56.tagPending;
        tokeniser56.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag61 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType62 = startTag61.type;
        startTag61.appendTagName('#');
        tokeniser56.tagPending = startTag61;
        org.jsoup.parser.TokeniserState tokeniserState66 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser56.transition((org.jsoup.parser.ITokeniserState) tokeniserState66);
        org.jsoup.parser.Token.Doctype doctype68 = new org.jsoup.parser.Token.Doctype();
        boolean boolean69 = doctype68.isCharacter();
        tokeniser56.doctypePending = doctype68;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState71 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype72 = new org.jsoup.parser.Token.Doctype();
        boolean boolean73 = doctype72.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder74 = null;
        boolean boolean75 = htmlTreeBuilderState71.process((org.jsoup.parser.Token) doctype72, htmlTreeBuilder74);
        java.lang.StringBuilder stringBuilder76 = doctype72.name;
        tokeniser56.dataBuffer = stringBuilder76;
        org.jsoup.parser.Token.EndTag endTag78 = new org.jsoup.parser.Token.EndTag();
        char[] charArray81 = new char[] { '#', '#' };
        endTag78.appendAttributeValue(charArray81);
        endTag78.appendAttributeValue(' ');
        char[] charArray86 = new char[] { '4' };
        endTag78.appendAttributeValue(charArray86);
        tokeniser56.emit(charArray86);
        htmlTreeBuilder0.tokeniser = tokeniser56;
        htmlTreeBuilder0.clearStackToTableBodyContext();
        org.jsoup.parser.Token.Comment comment91 = new org.jsoup.parser.Token.Comment();
        java.lang.String str92 = comment91.getData();
        htmlTreeBuilder0.insert(comment91);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "EndTag" + "'", str41, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(parseErrorList52);
        org.junit.Assert.assertNotNull(parseErrorStream53);
        org.junit.Assert.assertNotNull(parseErrorItor54);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertNull(tag57);
        org.junit.Assert.assertTrue("'" + tokenType62 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType62.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(stringBuilder76);
        org.junit.Assert.assertEquals(stringBuilder76.toString(), "");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[#, #]");
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[4]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.CharacterReader characterReader14 = null;
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList16.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList16.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor19 = parseErrorList16.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        boolean boolean23 = parseErrorList16.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        org.jsoup.parser.Tokeniser tokeniser24 = new org.jsoup.parser.Tokeniser(characterReader14, parseErrorList21);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList21.iterator();
        htmlTreeBuilder0.initialiseParse("hi!", "hi!#", parseErrorList21);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder27 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        org.jsoup.nodes.Document document33 = htmlTreeBuilder27.parse("0: Doctype", "hi!", parseErrorList31);
        htmlTreeBuilder27.resetInsertionMode();
        org.jsoup.nodes.Element element35 = htmlTreeBuilder27.currentElement();
        int int36 = parseErrorList21.lastIndexOf((java.lang.Object) htmlTreeBuilder27);
        parseErrorList21.ensureCapacity((int) (byte) -1);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList21.stream();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNotNull(parseErrorItor19);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(parseErrorStream39);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream7 = parseErrorList1.stream();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder8 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int13 = parseErrorList12.getMaxSize();
        org.jsoup.nodes.Document document14 = htmlTreeBuilder8.parse("0: Doctype", "hi!", parseErrorList12);
        boolean boolean15 = htmlTreeBuilder8.framesetOk();
        org.jsoup.parser.Parser parser16 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser18 = parser16.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document21 = parser16.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document24 = parser16.parseInput("<hi!>", "[]");
        htmlTreeBuilder8.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document24);
        org.jsoup.parser.Token.Doctype doctype26 = new org.jsoup.parser.Token.Doctype();
        boolean boolean27 = doctype26.isCharacter();
        boolean boolean28 = doctype26.isEndTag();
        htmlTreeBuilder8.currentToken = doctype26;
        java.lang.StringBuilder stringBuilder30 = doctype26.name;
        boolean boolean31 = parseErrorList1.remove((java.lang.Object) stringBuilder30);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorStream7);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parser16);
        org.junit.Assert.assertNotNull(parser18);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(stringBuilder30);
        org.junit.Assert.assertEquals(stringBuilder30.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.nodes.Document document22 = parser19.parseInput("hi!", "[]");
        org.jsoup.parser.TreeBuilder treeBuilder23 = parser19.getTreeBuilder();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = new org.jsoup.parser.HtmlTreeBuilder();
        htmlTreeBuilder24.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        org.jsoup.parser.ParseError[] parseErrorArray35 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList36 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36, parseErrorArray35);
        org.jsoup.parser.ParseError[] parseErrorArray38 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList39 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList39, parseErrorArray38);
        boolean boolean41 = parseErrorList36.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList39);
        java.lang.Object[] objArray42 = parseErrorList36.toArray();
        parseErrorList36.clear();
        org.jsoup.parser.ParseError[] parseErrorArray44 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList45 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList45, parseErrorArray44);
        org.jsoup.parser.ParseError[] parseErrorArray47 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList48 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList48, parseErrorArray47);
        boolean boolean50 = parseErrorList45.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList48);
        java.lang.Object[] objArray51 = parseErrorList45.toArray();
        parseErrorList45.clear();
        org.jsoup.parser.ParseError[] parseErrorArray53 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList54 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54, parseErrorArray53);
        boolean boolean56 = parseErrorList45.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54);
        boolean boolean57 = parseErrorList36.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54);
        java.lang.Object[] objArray58 = parseErrorList54.toArray();
        boolean boolean59 = parseErrorList32.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54);
        org.jsoup.parser.ParseError[] parseErrorArray60 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList61 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList61, parseErrorArray60);
        org.jsoup.parser.ParseError[] parseErrorArray63 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList64 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList64, parseErrorArray63);
        boolean boolean66 = parseErrorList61.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList64);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor67 = parseErrorList64.listIterator();
        int int69 = parseErrorList64.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag73 = new org.jsoup.parser.Token.EndTag();
        char[] charArray76 = new char[] { '#', '#' };
        endTag73.appendAttributeValue(charArray76);
        endTag73.finaliseTag();
        boolean boolean79 = endTag73.isSelfClosing();
        org.jsoup.parser.Tag tag81 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean82 = tag81.isFormListed();
        org.jsoup.parser.Tag tag83 = tag81.setSelfClosing();
        boolean boolean84 = tag81.isKnownTag();
        java.lang.Object[] objArray86 = new java.lang.Object[] { boolean79, tag81, "Doctype" };
        org.jsoup.parser.ParseError parseError87 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray86);
        parseErrorList64.add(0, parseError87);
        boolean boolean89 = parseErrorList32.add(parseError87);
        org.jsoup.nodes.Document document90 = htmlTreeBuilder24.parse("\uffff", "", parseErrorList32);
        org.jsoup.parser.Parser parser91 = parser19.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder24);
        boolean boolean92 = parser91.isTrackErrors();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(treeBuilder23);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(parseErrorArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(parseErrorArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(parseErrorArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(parseErrorArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(parseErrorArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(parseErrorItor67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(tag81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(tag83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(document90);
        org.junit.Assert.assertNotNull(parser91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = htmlTreeBuilder0.originalState();
        org.jsoup.nodes.Element element15 = htmlTreeBuilder0.pop();
        org.jsoup.parser.ParseErrorList parseErrorList18 = null;
        org.jsoup.nodes.Document document19 = htmlTreeBuilder0.parse("[]", "35: hi!#", parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(htmlTreeBuilderState14);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(document19);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.jsoup.parser.ParseErrorList parseErrorList2 = new org.jsoup.parser.ParseErrorList((int) (byte) 10, (int) ' ');
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement14 = htmlTreeBuilder0.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder15 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        org.jsoup.nodes.Document document21 = htmlTreeBuilder15.parse("0: Doctype", "hi!", parseErrorList19);
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream26 = parseErrorList25.stream();
        boolean boolean27 = parseErrorList25.canAddError();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder15.parse("EndTag", "hi!#", parseErrorList25);
        java.lang.String[] strArray36 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean37 = htmlTreeBuilder15.inScope("hi!#", strArray36);
        org.jsoup.parser.ParseErrorList parseErrorList42 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document43 = htmlTreeBuilder15.parse("0: Doctype", "", parseErrorList42);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder44 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document45 = xmlTreeBuilder44.doc;
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int50 = parseErrorList49.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray51 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList52 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList52, parseErrorArray51);
        org.jsoup.parser.ParseError[] parseErrorArray54 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList55 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList55, parseErrorArray54);
        boolean boolean57 = parseErrorList52.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList55);
        org.jsoup.parser.ParseError[] parseErrorArray58 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList59 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59, parseErrorArray58);
        boolean boolean61 = parseErrorList55.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59);
        parseErrorList59.clear();
        boolean boolean63 = parseErrorList49.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor64 = parseErrorList49.iterator();
        org.jsoup.nodes.Document document65 = xmlTreeBuilder44.parse("<hi!>", "0: []", parseErrorList49);
        htmlTreeBuilder15.push((org.jsoup.nodes.Element) document65);
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document65);
        htmlTreeBuilder0.generateImpliedEndTags();
        htmlTreeBuilder0.baseUri = "StartTaga";
        htmlTreeBuilder0.clearStackToTableBodyContext();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(formElement14);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertNotNull(parseErrorStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertNull(document45);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(parseErrorArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(parseErrorArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(parseErrorItor64);
        org.junit.Assert.assertNotNull(document65);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        boolean boolean25 = parseErrorList18.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23);
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList23);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList23.iterator();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("[]", "Doctype", parseErrorList23);
        org.jsoup.parser.CharacterReader characterReader31 = null;
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream34 = parseErrorList33.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor35 = parseErrorList33.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor36 = parseErrorList33.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int39 = parseErrorList38.getMaxSize();
        boolean boolean40 = parseErrorList33.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        org.jsoup.parser.Tokeniser tokeniser41 = new org.jsoup.parser.Tokeniser(characterReader31, parseErrorList38);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        boolean boolean45 = parseErrorList43.canAddError();
        boolean boolean46 = parseErrorList38.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        org.jsoup.nodes.Document document47 = htmlTreeBuilder0.parse("hi!", "<!---->", parseErrorList43);
        org.jsoup.parser.Tokeniser tokeniser48 = htmlTreeBuilder0.tokeniser;
        org.jsoup.parser.Parser parser49 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser51 = parser49.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document54 = parser49.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document57 = parser49.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document57);
        boolean boolean59 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Element element61 = htmlTreeBuilder0.getActiveFormattingElement("10: ");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertNotNull(parseErrorStream34);
        org.junit.Assert.assertNotNull(parseErrorItor35);
        org.junit.Assert.assertNotNull(parseErrorItor36);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(tokeniser48);
        org.junit.Assert.assertNotNull(parser49);
        org.junit.Assert.assertNotNull(parser51);
        org.junit.Assert.assertNotNull(document54);
        org.junit.Assert.assertNotNull(document57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(element61);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.Parser parser19 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.parser.Token.StartTag startTag20 = new org.jsoup.parser.Token.StartTag();
        startTag20.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag24 = startTag20.name("hi!#");
        boolean boolean25 = startTag20.selfClosing;
        java.lang.String str26 = startTag20.toString();
        org.jsoup.nodes.Element element27 = htmlTreeBuilder0.insertEmpty(startTag20);
        java.lang.String str28 = startTag20.tagName;
        java.lang.String str29 = startTag20.tokenType();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(tag24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<hi!#>" + "'", str26, "<hi!#>");
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!#" + "'", str28, "hi!#");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "StartTag" + "'", str29, "StartTag");
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.Tag tag11 = tokeniser6.createTagPending(false);
        org.jsoup.parser.Token.Tag tag13 = tag11.name("hi!#");
        org.jsoup.parser.Token.TokenType tokenType14 = tag11.type;
        char[] charArray21 = new char[] { 'a', 'S', 't', 't', '\000', 't' };
        tag11.appendAttributeValue(charArray21);
        tag11.appendAttributeName("St");
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(tag13);
        org.junit.Assert.assertTrue("'" + tokenType14 + "' != '" + org.jsoup.parser.Token.TokenType.EndTag + "'", tokenType14.equals(org.jsoup.parser.Token.TokenType.EndTag));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "aStt\000t");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "aStt\000t");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, S, t, t, \000, t]");
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        boolean boolean20 = parser19.isTrackErrors();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.parser.Token token10 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        boolean boolean21 = parseErrorList14.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        org.jsoup.nodes.Document document22 = htmlTreeBuilder0.parse("[]", "hi!", parseErrorList19);
        org.jsoup.parser.ParseError[] parseErrorArray23 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList24 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24, parseErrorArray23);
        org.jsoup.parser.ParseError[] parseErrorArray26 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList27 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList27, parseErrorArray26);
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList27);
        org.jsoup.parser.ParseError[] parseErrorArray30 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList31 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31, parseErrorArray30);
        boolean boolean33 = parseErrorList27.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        parseErrorList31.clear();
        boolean boolean35 = parseErrorList31.isEmpty();
        org.jsoup.parser.ParseErrorList parseErrorList37 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream38 = parseErrorList37.stream();
        boolean boolean39 = parseErrorList37.canAddError();
        org.jsoup.parser.ParseError parseError42 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str43 = parseError42.getErrorMessage();
        boolean boolean44 = parseErrorList37.add(parseError42);
        org.jsoup.parser.CharacterReader characterReader45 = null;
        org.jsoup.parser.ParseErrorList parseErrorList47 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream48 = parseErrorList47.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList47.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor50 = parseErrorList47.iterator();
        org.jsoup.parser.Tokeniser tokeniser51 = new org.jsoup.parser.Tokeniser(characterReader45, parseErrorList47);
        org.jsoup.parser.Token.Tag tag52 = tokeniser51.tagPending;
        org.jsoup.parser.Token.Tag tag54 = tokeniser51.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype55 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype56 = doctype55.asDoctype();
        java.lang.String str57 = doctype55.tokenType();
        tokeniser51.emit((org.jsoup.parser.Token) doctype55);
        org.jsoup.parser.ITokeniserState iTokeniserState59 = tokeniser51.getState();
        org.jsoup.parser.Token.Comment comment60 = new org.jsoup.parser.Token.Comment();
        java.lang.String str61 = comment60.toString();
        java.lang.StringBuilder stringBuilder62 = comment60.data;
        boolean boolean63 = comment60.isEndTag();
        boolean boolean64 = comment60.isComment();
        tokeniser51.commentPending = comment60;
        int int66 = parseErrorList37.lastIndexOf((java.lang.Object) comment60);
        boolean boolean67 = parseErrorList31.contains((java.lang.Object) comment60);
        org.jsoup.parser.Token.Doctype doctype68 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str69 = doctype68.getSystemIdentifier();
        org.jsoup.parser.Token.TokenType tokenType70 = doctype68.type;
        comment60.type = tokenType70;
        int int72 = parseErrorList19.lastIndexOf((java.lang.Object) tokenType70);
        org.jsoup.parser.ParseError parseError76 = new org.jsoup.parser.ParseError((int) (short) 10, "<hi!>");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError77 = parseErrorList19.set((int) (short) -1, parseError76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(token10);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(parseErrorArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(parseErrorList37);
        org.junit.Assert.assertNotNull(parseErrorStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(parseErrorList47);
        org.junit.Assert.assertNotNull(parseErrorStream48);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertNotNull(parseErrorItor50);
        org.junit.Assert.assertNull(tag52);
        org.junit.Assert.assertNotNull(tag54);
        org.junit.Assert.assertNotNull(doctype56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Doctype" + "'", str57, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "<!---->" + "'", str61, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder62);
        org.junit.Assert.assertEquals(stringBuilder62.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + tokenType70 + "' != '" + org.jsoup.parser.Token.TokenType.Doctype + "'", tokenType70.equals(org.jsoup.parser.Token.TokenType.Doctype));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        java.lang.StringBuilder stringBuilder9 = null;
        tokeniser7.dataBuffer = stringBuilder9;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        tokeniser7.emit(charArray14);
        org.jsoup.parser.Token.Comment comment17 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean20 = characterReader19.matchesLetter();
        miniSoupTokeniserState0.read(tokeniser7, characterReader19);
        int int22 = characterReader19.pos();
        java.lang.String str24 = characterReader19.consumeTo("<0: Doctype>");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = characterReader19.consumeAsString();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 9");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "StartTag" + "'", str24, "StartTag");
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.nodes.Document document22 = parser19.parseInput("hi!", "[]");
        org.jsoup.parser.TreeBuilder treeBuilder23 = parser19.getTreeBuilder();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = new org.jsoup.parser.HtmlTreeBuilder();
        htmlTreeBuilder24.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        org.jsoup.parser.ParseError[] parseErrorArray35 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList36 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36, parseErrorArray35);
        org.jsoup.parser.ParseError[] parseErrorArray38 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList39 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList39, parseErrorArray38);
        boolean boolean41 = parseErrorList36.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList39);
        java.lang.Object[] objArray42 = parseErrorList36.toArray();
        parseErrorList36.clear();
        org.jsoup.parser.ParseError[] parseErrorArray44 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList45 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList45, parseErrorArray44);
        org.jsoup.parser.ParseError[] parseErrorArray47 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList48 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList48, parseErrorArray47);
        boolean boolean50 = parseErrorList45.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList48);
        java.lang.Object[] objArray51 = parseErrorList45.toArray();
        parseErrorList45.clear();
        org.jsoup.parser.ParseError[] parseErrorArray53 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList54 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54, parseErrorArray53);
        boolean boolean56 = parseErrorList45.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54);
        boolean boolean57 = parseErrorList36.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54);
        java.lang.Object[] objArray58 = parseErrorList54.toArray();
        boolean boolean59 = parseErrorList32.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54);
        org.jsoup.parser.ParseError[] parseErrorArray60 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList61 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList61, parseErrorArray60);
        org.jsoup.parser.ParseError[] parseErrorArray63 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList64 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList64, parseErrorArray63);
        boolean boolean66 = parseErrorList61.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList64);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor67 = parseErrorList64.listIterator();
        int int69 = parseErrorList64.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag73 = new org.jsoup.parser.Token.EndTag();
        char[] charArray76 = new char[] { '#', '#' };
        endTag73.appendAttributeValue(charArray76);
        endTag73.finaliseTag();
        boolean boolean79 = endTag73.isSelfClosing();
        org.jsoup.parser.Tag tag81 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean82 = tag81.isFormListed();
        org.jsoup.parser.Tag tag83 = tag81.setSelfClosing();
        boolean boolean84 = tag81.isKnownTag();
        java.lang.Object[] objArray86 = new java.lang.Object[] { boolean79, tag81, "Doctype" };
        org.jsoup.parser.ParseError parseError87 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray86);
        parseErrorList64.add(0, parseError87);
        boolean boolean89 = parseErrorList32.add(parseError87);
        org.jsoup.nodes.Document document90 = htmlTreeBuilder24.parse("\uffff", "", parseErrorList32);
        org.jsoup.parser.Parser parser91 = parser19.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder24);
        htmlTreeBuilder24.popStackToClose("35: hi!#");
        org.jsoup.nodes.Document document96 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("[100: ]", "<hi!>");
        boolean boolean97 = htmlTreeBuilder24.isInActiveFormattingElements((org.jsoup.nodes.Element) document96);
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(treeBuilder23);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(parseErrorArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(parseErrorArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(parseErrorArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(parseErrorArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(parseErrorArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(parseErrorItor67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(tag81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(tag83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(document90);
        org.junit.Assert.assertNotNull(parser91);
        org.junit.Assert.assertNotNull(document96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\000');
        characterReader1.mark();
        boolean boolean5 = characterReader1.isEmpty();
        boolean boolean7 = characterReader1.matches("<!---->");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        char[] charArray3 = new char[] { '#', '#' };
        endTag0.appendAttributeValue(charArray3);
        endTag0.appendAttributeValue(' ');
        char[] charArray8 = new char[] { '4' };
        endTag0.appendAttributeValue(charArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.StartTag startTag10 = endTag0.asStartTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$StartTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#, #]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4]");
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isData();
        boolean boolean5 = tag1.preserveWhitespace();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList8.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        java.lang.Object[] objArray14 = parseErrorList8.toArray();
        parseErrorList8.clear();
        org.jsoup.parser.ParseError[] parseErrorArray16 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList17 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17, parseErrorArray16);
        org.jsoup.parser.ParseError[] parseErrorArray19 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList20 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20, parseErrorArray19);
        boolean boolean22 = parseErrorList17.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList20);
        java.lang.Object[] objArray23 = parseErrorList17.toArray();
        parseErrorList17.clear();
        org.jsoup.parser.ParseError[] parseErrorArray25 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList26 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26, parseErrorArray25);
        boolean boolean28 = parseErrorList17.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        boolean boolean29 = parseErrorList8.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        java.lang.Object[] objArray30 = parseErrorList26.toArray();
        boolean boolean31 = parseErrorList4.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        java.lang.String str32 = parseErrorList4.toString();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder33 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList37 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int38 = parseErrorList37.getMaxSize();
        org.jsoup.nodes.Document document39 = htmlTreeBuilder33.parse("0: Doctype", "hi!", parseErrorList37);
        org.jsoup.parser.ParseError[] parseErrorArray40 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList41 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList41, parseErrorArray40);
        org.jsoup.parser.ParseError[] parseErrorArray43 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList44 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44, parseErrorArray43);
        boolean boolean46 = parseErrorList41.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        java.lang.Object[] objArray47 = parseErrorList41.toArray();
        parseErrorList41.clear();
        org.jsoup.parser.ParseError[] parseErrorArray49 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList50 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList50, parseErrorArray49);
        org.jsoup.parser.ParseError[] parseErrorArray52 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList53 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList53, parseErrorArray52);
        boolean boolean55 = parseErrorList50.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList53);
        java.lang.Object[] objArray56 = parseErrorList50.toArray();
        parseErrorList50.clear();
        org.jsoup.parser.ParseError[] parseErrorArray58 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList59 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59, parseErrorArray58);
        boolean boolean61 = parseErrorList50.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59);
        boolean boolean62 = parseErrorList41.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59);
        java.lang.Object[] objArray63 = parseErrorList59.toArray();
        boolean boolean64 = parseErrorList37.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59);
        int int65 = parseErrorList4.indexOf((java.lang.Object) boolean64);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream66 = parseErrorList4.parallelStream();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(parseErrorList37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(parseErrorArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(parseErrorArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(parseErrorArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(parseErrorStream66);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        boolean boolean10 = parseErrorList5.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        xmlTreeBuilder0.initialiseParse("<!---->", "hi!", parseErrorList5);
        org.jsoup.parser.CharacterReader characterReader13 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean15 = characterReader13.matches('\000');
        characterReader13.mark();
        int int17 = parseErrorList5.indexOf((java.lang.Object) characterReader13);
        java.lang.String str19 = characterReader13.consumeTo("artTag");
        char char20 = characterReader13.current();
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "St" + "'", str19, "St");
        org.junit.Assert.assertTrue("'" + char20 + "' != '" + 'a' + "'", char20 == 'a');
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        startTag0.appendAttributeValue("hi!");
        boolean boolean3 = startTag0.selfClosing;
        java.lang.String str4 = startTag0.tokenType();
        org.jsoup.nodes.Attributes attributes5 = startTag0.getAttributes();
        startTag0.finaliseTag();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "StartTag" + "'", str4, "StartTag");
        org.junit.Assert.assertNotNull(attributes5);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        tokeniser6.createTempBuffer();
        tokeniser6.emitTagPending();
        tokeniser6.createDoctypePending();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState13 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype14 = new org.jsoup.parser.Token.Doctype();
        boolean boolean15 = doctype14.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder16 = null;
        boolean boolean17 = htmlTreeBuilderState13.process((org.jsoup.parser.Token) doctype14, htmlTreeBuilder16);
        java.lang.StringBuilder stringBuilder18 = doctype14.name;
        java.lang.StringBuilder stringBuilder19 = doctype14.name;
        tokeniser6.dataBuffer = stringBuilder19;
        org.jsoup.parser.Token.Tag tag22 = tokeniser6.createTagPending(false);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(stringBuilder18);
        org.junit.Assert.assertEquals(stringBuilder18.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder19);
        org.junit.Assert.assertEquals(stringBuilder19.toString(), "");
        org.junit.Assert.assertNotNull(tag22);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.jsoup.parser.ParseError parseError2 = new org.jsoup.parser.ParseError(0, "<hi!>");
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        boolean boolean25 = parseErrorList18.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList23);
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList23);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList23.iterator();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("[]", "Doctype", parseErrorList23);
        org.jsoup.parser.Token.Comment comment29 = new org.jsoup.parser.Token.Comment();
        java.lang.String str30 = comment29.toString();
        java.lang.StringBuilder stringBuilder31 = comment29.data;
        boolean boolean32 = comment29.isEndTag();
        java.lang.String str33 = comment29.toString();
        htmlTreeBuilder0.currentToken = comment29;
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "<!---->" + "'", str30, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder31);
        org.junit.Assert.assertEquals(stringBuilder31.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "<!---->" + "'", str33, "<!---->");
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        java.lang.String str1 = org.jsoup.parser.TokenQueue.unescape("StartTag");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "StartTag" + "'", str1, "StartTag");
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        htmlTreeBuilder0.newPendingTableCharacters();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList16.listIterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor18 = parseErrorList16.iterator();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder0.parse("StartTag", "[100: ]", parseErrorList16);
        org.jsoup.nodes.Element element21 = htmlTreeBuilder0.getActiveFormattingElement("-1: []");
        htmlTreeBuilder0.baseUri = "EOF";
        htmlTreeBuilder0.resetInsertionMode();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorItor18);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNull(element21);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.markInsertionMode();
        htmlTreeBuilder0.clearStackToTableContext();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList14 = htmlTreeBuilder0.stack;
        java.util.List<org.jsoup.parser.Token.Character> characterList15 = htmlTreeBuilder0.getPendingTableCharacters();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(elementList14);
        org.junit.Assert.assertNotNull(characterList15);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        parseErrorList1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor10 = parseErrorList1.listIterator(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag6 = new org.jsoup.parser.Token.EndTag();
        char[] charArray9 = new char[] { '#', '#' };
        endTag6.appendAttributeValue(charArray9);
        boolean boolean11 = tokenQueue1.matchesAny(charArray9);
        boolean boolean13 = tokenQueue1.matchesCS("<hi!>");
        org.jsoup.parser.Parser parser14 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser16 = parser14.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder17 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document18 = xmlTreeBuilder17.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        xmlTreeBuilder17.errors = parseErrorList24;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList32 = xmlTreeBuilder17.stack;
        org.jsoup.parser.Parser parser33 = parser16.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder17);
        org.jsoup.parser.ParseErrorList parseErrorList35 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder17.errors = parseErrorList35;
        org.jsoup.parser.Token.StartTag startTag37 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes38 = startTag37.getAttributes();
        xmlTreeBuilder17.currentToken = startTag37;
        org.jsoup.parser.Token.EndTag endTag40 = new org.jsoup.parser.Token.EndTag();
        char[] charArray43 = new char[] { '#', '#' };
        endTag40.appendAttributeValue(charArray43);
        endTag40.appendAttributeValue(' ');
        char[] charArray48 = new char[] { '4' };
        endTag40.appendAttributeValue(charArray48);
        startTag37.appendAttributeValue(charArray48);
        boolean boolean51 = tokenQueue1.matchesAny(charArray48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(parser14);
        org.junit.Assert.assertNotNull(parser16);
        org.junit.Assert.assertNull(document18);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(elementList32);
        org.junit.Assert.assertNotNull(parser33);
        org.junit.Assert.assertNotNull(parseErrorList35);
        org.junit.Assert.assertNotNull(attributes38);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#, #]");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[4]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("artTag");
        org.junit.Assert.assertNotNull(tag1);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        htmlTreeBuilder0.newPendingTableCharacters();
        org.jsoup.nodes.Element element5 = htmlTreeBuilder0.getHeadElement();
        java.util.List<org.jsoup.parser.Token.Character> characterList6 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.nodes.Element element7 = htmlTreeBuilder0.getHeadElement();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState9 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag10 = new org.jsoup.parser.Token.EndTag();
        endTag10.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilderState9.process((org.jsoup.parser.Token) endTag10, htmlTreeBuilder12);
        org.jsoup.nodes.FormElement formElement20 = htmlTreeBuilder12.getFormElement();
        boolean boolean22 = htmlTreeBuilder12.inListItemScope("0: []");
        org.jsoup.nodes.Document document25 = org.jsoup.parser.Parser.parse("hi!", "<!---->");
        boolean boolean26 = htmlTreeBuilder12.isSpecial((org.jsoup.nodes.Element) document25);
        org.jsoup.parser.ParseErrorList parseErrorList30 = new org.jsoup.parser.ParseErrorList((int) (byte) 0, 35);
        java.util.List<org.jsoup.nodes.Node> nodeList31 = htmlTreeBuilder0.parseFragment("tartTag", (org.jsoup.nodes.Element) document25, "a", parseErrorList30);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(element5);
        org.junit.Assert.assertNotNull(characterList6);
        org.junit.Assert.assertNull(element7);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState9);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(formElement20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeList31);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList4.stream();
        org.jsoup.parser.ParseError parseError15 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        parseErrorList4.add((int) (byte) 0, parseError15);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList4.stream();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState23 = org.jsoup.parser.MiniSoupTokeniserState.Data;
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState24 = org.jsoup.parser.MiniSoupTokeniserState.Data;
        org.jsoup.parser.MiniSoupTokeniserState[] miniSoupTokeniserStateArray25 = new org.jsoup.parser.MiniSoupTokeniserState[] { miniSoupTokeniserState23, miniSoupTokeniserState24 };
        org.jsoup.parser.MiniSoupTokeniserState[] miniSoupTokeniserStateArray26 = parseErrorList21.toArray(miniSoupTokeniserStateArray25);
        org.jsoup.parser.ParseError parseError27 = new org.jsoup.parser.ParseError(10, "", (java.lang.Object[]) miniSoupTokeniserStateArray25);
        boolean boolean28 = parseErrorList4.add(parseError27);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(miniSoupTokeniserState23);
        org.junit.Assert.assertNotNull(miniSoupTokeniserState24);
        org.junit.Assert.assertNotNull(miniSoupTokeniserStateArray25);
        org.junit.Assert.assertNotNull(miniSoupTokeniserStateArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype12 = tokeniser6.doctypePending;
        org.jsoup.parser.Token.Comment comment13 = new org.jsoup.parser.Token.Comment();
        java.lang.String str14 = comment13.toString();
        java.lang.StringBuilder stringBuilder15 = comment13.data;
        boolean boolean16 = comment13.isEndTag();
        java.lang.String str17 = comment13.toString();
        tokeniser6.commentPending = comment13;
        tokeniser6.createCommentPending();
        boolean boolean20 = tokeniser6.currentNodeInHtmlNS();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNull(doctype12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "<!---->" + "'", str14, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<!---->" + "'", str17, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.CharacterReader characterReader3 = null;
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream6 = parseErrorList5.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList5.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList5.iterator();
        org.jsoup.parser.Tokeniser tokeniser9 = new org.jsoup.parser.Tokeniser(characterReader3, parseErrorList5);
        org.jsoup.parser.Token.Tag tag10 = tokeniser9.tagPending;
        org.jsoup.parser.Token.Tag tag12 = tokeniser9.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype13 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype14 = doctype13.asDoctype();
        java.lang.String str15 = doctype13.tokenType();
        tokeniser9.emit((org.jsoup.parser.Token) doctype13);
        boolean boolean17 = tag1.equals((java.lang.Object) doctype13);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder18 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        org.jsoup.parser.Token.Tag tag28 = tokeniser25.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype29 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype30 = doctype29.asDoctype();
        java.lang.String str31 = doctype29.tokenType();
        tokeniser25.emit((org.jsoup.parser.Token) doctype29);
        org.jsoup.parser.Token.Tag tag34 = tokeniser25.createTagPending(true);
        xmlTreeBuilder18.currentToken = tag34;
        boolean boolean36 = tag1.equals((java.lang.Object) tag34);
        java.lang.String str37 = tag1.getName();
        boolean boolean38 = tag1.isFormSubmittable();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorStream6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNull(tag10);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertNotNull(doctype14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Doctype" + "'", str15, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(doctype30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Doctype" + "'", str31, "Doctype");
        org.junit.Assert.assertNotNull(tag34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\000');
        characterReader1.mark();
        boolean boolean5 = characterReader1.isEmpty();
        org.jsoup.parser.TokenQueue tokenQueue7 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str9 = tokenQueue7.chompTo("Doctype");
        java.lang.String str10 = tokenQueue7.consumeWord();
        boolean boolean11 = tokenQueue7.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag12 = new org.jsoup.parser.Token.EndTag();
        char[] charArray15 = new char[] { '#', '#' };
        endTag12.appendAttributeValue(charArray15);
        boolean boolean17 = tokenQueue7.matchesAny(charArray15);
        boolean boolean18 = characterReader1.matchesAny(charArray15);
        boolean boolean19 = characterReader1.matchesLetter();
        characterReader1.rewindToMark();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "EndTag" + "'", str9, "EndTag");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList15 = xmlTreeBuilder0.stack;
        org.jsoup.parser.CharacterReader characterReader16 = null;
        xmlTreeBuilder0.reader = characterReader16;
        java.lang.String str18 = xmlTreeBuilder0.baseUri;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState19 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype20 = new org.jsoup.parser.Token.Doctype();
        boolean boolean21 = doctype20.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder22 = null;
        boolean boolean23 = htmlTreeBuilderState19.process((org.jsoup.parser.Token) doctype20, htmlTreeBuilder22);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = xmlTreeBuilder0.process((org.jsoup.parser.Token) doctype20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(elementList15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        htmlTreeBuilder0.markInsertionMode();
        java.lang.String str2 = htmlTreeBuilder0.getBaseUri();
        org.jsoup.nodes.FormElement formElement3 = htmlTreeBuilder0.getFormElement();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(formElement3);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        java.lang.StringBuilder stringBuilder14 = doctype10.publicIdentifier;
        java.lang.String str15 = doctype10.getSystemIdentifier();
        boolean boolean16 = doctype10.isForceQuirks();
        doctype10.forceQuirks = false;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertNotNull(stringBuilder14);
        org.junit.Assert.assertEquals(stringBuilder14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype12 = tokeniser6.doctypePending;
        boolean boolean13 = tokeniser6.currentNodeInHtmlNS();
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitTagPending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNull(doctype12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader1.advance();
        characterReader1.advance();
        java.lang.String str4 = characterReader1.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "artTag" + "'", str4, "artTag");
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.AfterDoctypeSystemIdentifier;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        tokeniser7.emit("<!---->");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder11 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.Tokeniser tokeniser18 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList14);
        org.jsoup.parser.Token.Tag tag19 = tokeniser18.tagPending;
        org.jsoup.parser.Token.Tag tag21 = tokeniser18.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype22 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype23 = doctype22.asDoctype();
        java.lang.String str24 = doctype22.tokenType();
        tokeniser18.emit((org.jsoup.parser.Token) doctype22);
        org.jsoup.parser.Token.Tag tag27 = tokeniser18.createTagPending(true);
        xmlTreeBuilder11.currentToken = tag27;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder29 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList33 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int34 = parseErrorList33.getMaxSize();
        org.jsoup.nodes.Document document35 = htmlTreeBuilder29.parse("0: Doctype", "hi!", parseErrorList33);
        boolean boolean36 = htmlTreeBuilder29.framesetOk();
        org.jsoup.nodes.Document document39 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder29.setHeadElement((org.jsoup.nodes.Element) document39);
        xmlTreeBuilder11.doc = document39;
        org.jsoup.parser.ParseErrorList parseErrorList45 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream46 = parseErrorList45.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList45.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor48 = parseErrorList45.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int51 = parseErrorList50.getMaxSize();
        boolean boolean52 = parseErrorList45.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList50);
        xmlTreeBuilder11.initialiseParse("hi!#", "0: []", parseErrorList50);
        org.jsoup.parser.Token.Comment comment54 = new org.jsoup.parser.Token.Comment();
        java.lang.String str55 = comment54.getData();
        xmlTreeBuilder11.insert(comment54);
        java.lang.StringBuilder stringBuilder57 = comment54.data;
        tokeniser7.commentPending = comment54;
        org.jsoup.parser.CharacterReader characterReader60 = new org.jsoup.parser.CharacterReader("StartTag");
        int int62 = characterReader60.nextIndexOf((java.lang.CharSequence) "[]");
        java.lang.String str63 = characterReader60.consumeAsString();
        tokeniserState0.read(tokeniser7, characterReader60);
        tokeniser7.createDoctypePending();
        org.jsoup.parser.TokeniserState tokeniserState66 = org.jsoup.parser.TokeniserState.ScriptDataEndTagOpen;
        tokeniser7.transition((org.jsoup.parser.ITokeniserState) tokeniserState66);
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNull(tag19);
        org.junit.Assert.assertNotNull(tag21);
        org.junit.Assert.assertNotNull(doctype23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Doctype" + "'", str24, "Doctype");
        org.junit.Assert.assertNotNull(tag27);
        org.junit.Assert.assertNotNull(parseErrorList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(parseErrorList45);
        org.junit.Assert.assertNotNull(parseErrorStream46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNotNull(parseErrorItor48);
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(stringBuilder57);
        org.junit.Assert.assertEquals(stringBuilder57.toString(), "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "S" + "'", str63, "S");
        org.junit.Assert.assertNotNull(tokeniserState66);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.EndTag endTag1 = startTag0.asEndTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$EndTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.CharacterReader characterReader3 = null;
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream6 = parseErrorList5.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList5.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList5.iterator();
        org.jsoup.parser.Tokeniser tokeniser9 = new org.jsoup.parser.Tokeniser(characterReader3, parseErrorList5);
        org.jsoup.parser.Token.Tag tag10 = tokeniser9.tagPending;
        org.jsoup.parser.Token.Tag tag12 = tokeniser9.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype13 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype14 = doctype13.asDoctype();
        java.lang.String str15 = doctype13.tokenType();
        tokeniser9.emit((org.jsoup.parser.Token) doctype13);
        boolean boolean17 = tag1.equals((java.lang.Object) doctype13);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder18 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        org.jsoup.parser.Token.Tag tag28 = tokeniser25.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype29 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype30 = doctype29.asDoctype();
        java.lang.String str31 = doctype29.tokenType();
        tokeniser25.emit((org.jsoup.parser.Token) doctype29);
        org.jsoup.parser.Token.Tag tag34 = tokeniser25.createTagPending(true);
        xmlTreeBuilder18.currentToken = tag34;
        boolean boolean36 = tag1.equals((java.lang.Object) tag34);
        boolean boolean37 = tag1.isFormListed();
        boolean boolean38 = tag1.isKnownTag();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorStream6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNull(tag10);
        org.junit.Assert.assertNotNull(tag12);
        org.junit.Assert.assertNotNull(doctype14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Doctype" + "'", str15, "Doctype");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(doctype30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Doctype" + "'", str31, "Doctype");
        org.junit.Assert.assertNotNull(tag34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        java.lang.String[] strArray21 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean22 = htmlTreeBuilder0.inScope("hi!#", strArray21);
        org.jsoup.parser.ParseErrorList parseErrorList27 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document28 = htmlTreeBuilder0.parse("0: Doctype", "", parseErrorList27);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder29 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document30 = xmlTreeBuilder29.doc;
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int35 = parseErrorList34.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray36 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList37 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList37, parseErrorArray36);
        org.jsoup.parser.ParseError[] parseErrorArray39 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList40 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40, parseErrorArray39);
        boolean boolean42 = parseErrorList37.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40);
        org.jsoup.parser.ParseError[] parseErrorArray43 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList44 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44, parseErrorArray43);
        boolean boolean46 = parseErrorList40.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        parseErrorList44.clear();
        boolean boolean48 = parseErrorList34.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList44);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList34.iterator();
        org.jsoup.nodes.Document document50 = xmlTreeBuilder29.parse("<hi!>", "0: []", parseErrorList34);
        htmlTreeBuilder0.push((org.jsoup.nodes.Element) document50);
        boolean boolean52 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder53 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList57 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int58 = parseErrorList57.getMaxSize();
        org.jsoup.nodes.Document document59 = htmlTreeBuilder53.parse("0: Doctype", "hi!", parseErrorList57);
        boolean boolean60 = htmlTreeBuilder53.framesetOk();
        org.jsoup.nodes.Document document63 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder53.setHeadElement((org.jsoup.nodes.Element) document63);
        org.jsoup.nodes.Element element66 = htmlTreeBuilder53.getActiveFormattingElement("0: Doctype");
        htmlTreeBuilder53.runParser();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder70 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader71 = null;
        org.jsoup.parser.ParseErrorList parseErrorList73 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream74 = parseErrorList73.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor75 = parseErrorList73.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor76 = parseErrorList73.iterator();
        org.jsoup.parser.Tokeniser tokeniser77 = new org.jsoup.parser.Tokeniser(characterReader71, parseErrorList73);
        org.jsoup.parser.Token.Tag tag78 = tokeniser77.tagPending;
        org.jsoup.parser.Token.Tag tag80 = tokeniser77.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype81 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype82 = doctype81.asDoctype();
        java.lang.String str83 = doctype81.tokenType();
        tokeniser77.emit((org.jsoup.parser.Token) doctype81);
        org.jsoup.parser.Token.Tag tag86 = tokeniser77.createTagPending(true);
        xmlTreeBuilder70.currentToken = tag86;
        org.jsoup.nodes.Attributes attributes88 = tag86.attributes;
        org.jsoup.parser.Token.StartTag startTag89 = new org.jsoup.parser.Token.StartTag("", attributes88);
        org.jsoup.parser.Token.StartTag startTag90 = new org.jsoup.parser.Token.StartTag("0: Doctype", attributes88);
        startTag90.appendAttributeName('\uffff');
        org.jsoup.nodes.FormElement formElement94 = htmlTreeBuilder53.insertForm(startTag90, true);
        org.jsoup.nodes.FormElement formElement96 = htmlTreeBuilder0.insertForm(startTag90, false);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNull(document30);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parseErrorArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(parseErrorArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(parseErrorList57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(document63);
        org.junit.Assert.assertNull(element66);
        org.junit.Assert.assertNotNull(parseErrorList73);
        org.junit.Assert.assertNotNull(parseErrorStream74);
        org.junit.Assert.assertNotNull(parseErrorItor75);
        org.junit.Assert.assertNotNull(parseErrorItor76);
        org.junit.Assert.assertNull(tag78);
        org.junit.Assert.assertNotNull(tag80);
        org.junit.Assert.assertNotNull(doctype82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Doctype" + "'", str83, "Doctype");
        org.junit.Assert.assertNotNull(tag86);
        org.junit.Assert.assertNotNull(attributes88);
        org.junit.Assert.assertNotNull(formElement94);
        org.junit.Assert.assertNotNull(formElement96);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList12 = htmlTreeBuilder0.stack;
        org.jsoup.parser.Token.StartTag startTag14 = new org.jsoup.parser.Token.StartTag("<!---->");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState15 = org.jsoup.parser.HtmlTreeBuilderState.AfterFrameset;
        boolean boolean16 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag14, htmlTreeBuilderState15);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder17 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int22 = parseErrorList21.getMaxSize();
        org.jsoup.nodes.Document document23 = htmlTreeBuilder17.parse("0: Doctype", "hi!", parseErrorList21);
        boolean boolean24 = htmlTreeBuilder17.framesetOk();
        org.jsoup.parser.Parser parser25 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser27 = parser25.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document30 = parser25.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document33 = parser25.parseInput("<hi!>", "[]");
        htmlTreeBuilder17.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document33);
        java.lang.String[] strArray35 = new java.lang.String[] {};
        boolean boolean36 = htmlTreeBuilder17.inScope(strArray35);
        htmlTreeBuilder17.markInsertionMode();
        boolean boolean39 = htmlTreeBuilder17.inScope("StartTag");
        org.jsoup.parser.Token.StartTag startTag40 = new org.jsoup.parser.Token.StartTag();
        startTag40.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag44 = startTag40.name("hi!#");
        boolean boolean45 = startTag40.isStartTag();
        startTag40.appendTagName('a');
        org.jsoup.nodes.Element element48 = htmlTreeBuilder17.insertEmpty(startTag40);
        htmlTreeBuilder0.removeFromActiveFormattingElements(element48);
        htmlTreeBuilder0.reconstructFormattingElements();
        org.jsoup.parser.ParseErrorList parseErrorList54 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int55 = parseErrorList54.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray56 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList57 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList57, parseErrorArray56);
        org.jsoup.parser.ParseError[] parseErrorArray59 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList60 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList60, parseErrorArray59);
        boolean boolean62 = parseErrorList57.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList60);
        org.jsoup.parser.ParseError[] parseErrorArray63 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList64 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList64, parseErrorArray63);
        boolean boolean66 = parseErrorList60.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList64);
        parseErrorList64.clear();
        boolean boolean68 = parseErrorList54.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList64);
        int int69 = parseErrorList54.getMaxSize();
        htmlTreeBuilder0.initialiseParse("\ufffd>", "ndTag", parseErrorList54);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(elementList12);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(parser25);
        org.junit.Assert.assertNotNull(parser27);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(tag44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(element48);
        org.junit.Assert.assertNotNull(parseErrorList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(parseErrorArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(parseErrorArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag3.preserveWhitespace();
        java.lang.Object obj5 = null;
        boolean boolean6 = tag3.equals(obj5);
        java.lang.String str7 = tag3.toString();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.jsoup.parser.TokeniserState tokeniserState0 = org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedLessthanSign;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        tokeniser7.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag12 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType13 = startTag12.type;
        startTag12.appendTagName('#');
        tokeniser7.tagPending = startTag12;
        org.jsoup.parser.TokeniserState tokeniserState17 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser7.transition((org.jsoup.parser.ITokeniserState) tokeniserState17);
        org.jsoup.parser.Token.Doctype doctype19 = new org.jsoup.parser.Token.Doctype();
        boolean boolean20 = doctype19.isCharacter();
        tokeniser7.doctypePending = doctype19;
        org.jsoup.parser.Token.Comment comment22 = new org.jsoup.parser.Token.Comment();
        java.lang.String str23 = comment22.toString();
        java.lang.StringBuilder stringBuilder24 = comment22.data;
        tokeniser7.commentPending = comment22;
        org.jsoup.parser.CharacterReader characterReader27 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean29 = characterReader27.matches('\000');
        characterReader27.mark();
        boolean boolean31 = characterReader27.isEmpty();
        org.jsoup.parser.TokenQueue tokenQueue33 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str35 = tokenQueue33.chompTo("Doctype");
        java.lang.String str36 = tokenQueue33.consumeWord();
        boolean boolean37 = tokenQueue33.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag38 = new org.jsoup.parser.Token.EndTag();
        char[] charArray41 = new char[] { '#', '#' };
        endTag38.appendAttributeValue(charArray41);
        boolean boolean43 = tokenQueue33.matchesAny(charArray41);
        boolean boolean44 = characterReader27.matchesAny(charArray41);
        tokeniserState0.read(tokeniser7, characterReader27);
        int int47 = characterReader27.nextIndexOf('\ufffd');
        org.junit.Assert.assertNotNull(tokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertTrue("'" + tokenType13 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType13.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "<!---->" + "'", str23, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder24);
        org.junit.Assert.assertEquals(stringBuilder24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "EndTag" + "'", str35, "EndTag");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.parser.TokenQueue tokenQueue38 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean39 = tokenQueue38.isEmpty();
        boolean boolean40 = tokenQueue38.consumeWhitespace();
        java.lang.String str41 = tokenQueue38.consumeWord();
        boolean boolean42 = tokenQueue38.matchesWhitespace();
        java.lang.String[] strArray47 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str48 = tokenQueue38.consumeToAny(strArray47);
        boolean boolean49 = htmlTreeBuilder0.inScope(strArray47);
        org.jsoup.nodes.Document document52 = org.jsoup.parser.Parser.parse("", "<hi!>");
        htmlTreeBuilder0.pushActiveFormattingElements((org.jsoup.nodes.Element) document52);
        org.jsoup.nodes.Element element54 = htmlTreeBuilder0.pop();
        htmlTreeBuilder0.clearStackToTableBodyContext();
        boolean boolean56 = htmlTreeBuilder0.framesetOk();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "EndTag" + "'", str41, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertNotNull(element54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        java.lang.StringBuilder stringBuilder9 = null;
        tokeniser7.dataBuffer = stringBuilder9;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        tokeniser7.emit(charArray14);
        org.jsoup.parser.Token.Comment comment17 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean20 = characterReader19.matchesLetter();
        miniSoupTokeniserState0.read(tokeniser7, characterReader19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        org.jsoup.parser.Token.Tag tag31 = tokeniser28.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype32 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype33 = doctype32.asDoctype();
        java.lang.String str34 = doctype32.tokenType();
        tokeniser28.emit((org.jsoup.parser.Token) doctype32);
        org.jsoup.parser.ITokeniserState iTokeniserState36 = tokeniser28.getState();
        org.jsoup.parser.Token.Comment comment37 = new org.jsoup.parser.Token.Comment();
        java.lang.String str38 = comment37.toString();
        java.lang.StringBuilder stringBuilder39 = comment37.data;
        boolean boolean40 = comment37.isEndTag();
        boolean boolean41 = comment37.isComment();
        tokeniser28.commentPending = comment37;
        org.jsoup.parser.CharacterReader characterReader44 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean46 = characterReader44.matches('\000');
        characterReader44.mark();
        boolean boolean48 = characterReader44.isEmpty();
        java.lang.String str49 = characterReader44.consumeToEnd();
        miniSoupTokeniserState0.read(tokeniser28, characterReader44);
        org.jsoup.parser.TokenQueue tokenQueue52 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean53 = tokenQueue52.matchesStartTag();
        char[] charArray60 = new char[] { ' ', '4', '\000', ' ', '\uffff', 'a' };
        boolean boolean61 = tokenQueue52.matchesAny(charArray60);
        boolean boolean62 = characterReader44.matchesAny(charArray60);
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertNotNull(doctype33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Doctype" + "'", str34, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<!---->" + "'", str38, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder39);
        org.junit.Assert.assertEquals(stringBuilder39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "StartTag" + "'", str49, "StartTag");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(charArray60);
// flaky:         org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), " 4\000\uffffa");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), " 4\000\uffffa");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[ , 4, \000\uffff, a]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document10);
        org.jsoup.parser.Token.StartTag startTag13 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType14 = startTag13.type;
        startTag13.appendTagName('#');
        boolean boolean17 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag13);
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader19.advance();
        boolean boolean22 = characterReader19.matchConsume("<hi!>");
        htmlTreeBuilder0.reader = characterReader19;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState24 = htmlTreeBuilder0.state();
        htmlTreeBuilder0.clearStackToTableBodyContext();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder28 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader29 = null;
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream32 = parseErrorList31.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor33 = parseErrorList31.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor34 = parseErrorList31.iterator();
        org.jsoup.parser.Tokeniser tokeniser35 = new org.jsoup.parser.Tokeniser(characterReader29, parseErrorList31);
        org.jsoup.parser.Token.Tag tag36 = tokeniser35.tagPending;
        org.jsoup.parser.Token.Tag tag38 = tokeniser35.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype39 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype40 = doctype39.asDoctype();
        java.lang.String str41 = doctype39.tokenType();
        tokeniser35.emit((org.jsoup.parser.Token) doctype39);
        org.jsoup.parser.Token.Tag tag44 = tokeniser35.createTagPending(true);
        xmlTreeBuilder28.currentToken = tag44;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder46 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int51 = parseErrorList50.getMaxSize();
        org.jsoup.nodes.Document document52 = htmlTreeBuilder46.parse("0: Doctype", "hi!", parseErrorList50);
        boolean boolean53 = htmlTreeBuilder46.framesetOk();
        org.jsoup.nodes.Document document56 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder46.setHeadElement((org.jsoup.nodes.Element) document56);
        xmlTreeBuilder28.doc = document56;
        org.jsoup.parser.ParseErrorList parseErrorList62 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream63 = parseErrorList62.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor64 = parseErrorList62.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor65 = parseErrorList62.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList67 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int68 = parseErrorList67.getMaxSize();
        boolean boolean69 = parseErrorList62.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList67);
        xmlTreeBuilder28.initialiseParse("hi!#", "0: []", parseErrorList67);
        org.jsoup.parser.ParseErrorList parseErrorList71 = xmlTreeBuilder28.errors;
        htmlTreeBuilder0.initialiseParse("Doctype", "t", parseErrorList71);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertTrue("'" + tokenType14 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType14.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState24);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertNotNull(parseErrorStream32);
        org.junit.Assert.assertNotNull(parseErrorItor33);
        org.junit.Assert.assertNotNull(parseErrorItor34);
        org.junit.Assert.assertNull(tag36);
        org.junit.Assert.assertNotNull(tag38);
        org.junit.Assert.assertNotNull(doctype40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Doctype" + "'", str41, "Doctype");
        org.junit.Assert.assertNotNull(tag44);
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(document56);
        org.junit.Assert.assertNotNull(parseErrorList62);
        org.junit.Assert.assertNotNull(parseErrorStream63);
        org.junit.Assert.assertNotNull(parseErrorItor64);
        org.junit.Assert.assertNotNull(parseErrorItor65);
        org.junit.Assert.assertNotNull(parseErrorList67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(parseErrorList71);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        xmlTreeBuilder0.initialiseParse("a", "[]", parseErrorList18);
        org.jsoup.parser.CharacterReader characterReader21 = null;
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream24 = parseErrorList23.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList23.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList23.iterator();
        org.jsoup.parser.Tokeniser tokeniser27 = new org.jsoup.parser.Tokeniser(characterReader21, parseErrorList23);
        org.jsoup.parser.Token.Tag tag28 = tokeniser27.tagPending;
        tokeniser27.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype31 = tokeniser27.doctypePending;
        tokeniser27.createCommentPending();
        org.jsoup.parser.Token.Comment comment33 = tokeniser27.commentPending;
        boolean boolean34 = parseErrorList18.remove((java.lang.Object) tokeniser27);
        org.jsoup.parser.ParseError[] parseErrorArray36 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList37 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList37, parseErrorArray36);
        org.jsoup.parser.ParseError[] parseErrorArray39 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList40 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40, parseErrorArray39);
        boolean boolean42 = parseErrorList37.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList40);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList40.listIterator();
        java.lang.Object obj44 = parseErrorList40.clone();
        org.jsoup.parser.ParseError[] parseErrorArray47 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList48 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList48, parseErrorArray47);
        org.jsoup.parser.ParseError[] parseErrorArray50 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList51 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList51, parseErrorArray50);
        boolean boolean53 = parseErrorList48.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList51);
        java.lang.Object[] objArray54 = parseErrorList48.toArray();
        parseErrorList48.clear();
        org.jsoup.parser.ParseError[] parseErrorArray56 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList57 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList57, parseErrorArray56);
        org.jsoup.parser.ParseError[] parseErrorArray59 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList60 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList60, parseErrorArray59);
        boolean boolean62 = parseErrorList57.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList60);
        java.lang.Object[] objArray63 = parseErrorList57.toArray();
        parseErrorList57.clear();
        org.jsoup.parser.ParseError[] parseErrorArray65 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList66 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList66, parseErrorArray65);
        boolean boolean68 = parseErrorList57.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList66);
        boolean boolean69 = parseErrorList48.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList66);
        java.lang.Object[] objArray70 = parseErrorList66.toArray();
        org.jsoup.parser.ParseError parseError71 = new org.jsoup.parser.ParseError((int) '#', "hi!#", objArray70);
        boolean boolean72 = parseErrorList40.add(parseError71);
        java.lang.String str73 = parseError71.toString();
        // The following exception was thrown during execution in test generation
        try {
            parseErrorList18.add((int) (byte) -1, parseError71);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertNotNull(parseErrorStream24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNull(tag28);
        org.junit.Assert.assertNull(doctype31);
        org.junit.Assert.assertNotNull(comment33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(parseErrorArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parseErrorArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(parseErrorArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(parseErrorArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "35: hi!#" + "'", str73, "35: hi!#");
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        htmlTreeBuilder0.newPendingTableCharacters();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState6 = htmlTreeBuilder0.originalState();
        org.jsoup.nodes.Document document7 = htmlTreeBuilder0.doc;
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(htmlTreeBuilderState6);
        org.junit.Assert.assertNull(document7);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder7 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList12 = new org.jsoup.parser.ParseErrorList(0, (int) (byte) 0);
        htmlTreeBuilder7.initialiseParse("<hi!>", "hi!#", parseErrorList12);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder14 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int19 = parseErrorList18.getMaxSize();
        org.jsoup.nodes.Document document20 = htmlTreeBuilder14.parse("0: Doctype", "hi!", parseErrorList18);
        htmlTreeBuilder14.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray23 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList24 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList24, characterArray23);
        htmlTreeBuilder14.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList24);
        boolean boolean27 = htmlTreeBuilder14.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag29 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement31 = htmlTreeBuilder14.insertForm(startTag29, true);
        htmlTreeBuilder7.setFormElement(formElement31);
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) formElement31);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNotNull(characterArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(formElement31);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag6 = new org.jsoup.parser.Token.EndTag();
        char[] charArray9 = new char[] { '#', '#' };
        endTag6.appendAttributeValue(charArray9);
        boolean boolean11 = tokenQueue1.matchesAny(charArray9);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.parser.Parser parser20 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser22 = parser20.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document25 = parser20.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document28 = parser20.parseInput("<hi!>", "[]");
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document28);
        boolean boolean30 = htmlTreeBuilder12.isFragmentParsing();
        org.jsoup.parser.TokenQueue tokenQueue32 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean33 = tokenQueue32.isEmpty();
        boolean boolean34 = tokenQueue32.consumeWhitespace();
        java.lang.String str35 = tokenQueue32.consumeWord();
        boolean boolean36 = tokenQueue32.matchesWhitespace();
        java.lang.String[] strArray41 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str42 = tokenQueue32.consumeToAny(strArray41);
        boolean boolean43 = htmlTreeBuilder12.inScope(strArray41);
        java.lang.String str44 = tokenQueue1.consumeToAny(strArray41);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parser20);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "EndTag" + "'", str35, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype1 = doctype0.asDoctype();
        boolean boolean2 = doctype1.isForceQuirks();
        org.junit.Assert.assertNotNull(doctype1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.nodes.Document document16 = htmlTreeBuilder0.doc;
        boolean boolean18 = htmlTreeBuilder0.inTableScope("<!---->");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState19 = htmlTreeBuilder0.originalState();
        boolean boolean20 = htmlTreeBuilder0.isFragmentParsing();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(htmlTreeBuilderState19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.jsoup.parser.Token.Comment comment0 = new org.jsoup.parser.Token.Comment();
        java.lang.String str1 = comment0.toString();
        boolean boolean2 = comment0.isCharacter();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.Token.StartTag startTag3 = comment0.asStartTag();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$StartTag");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "<!---->" + "'", str1, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
        org.jsoup.parser.TreeBuilder treeBuilder2 = null;
        org.jsoup.parser.Parser parser3 = parser1.setTreeBuilder(treeBuilder2);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder4 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document5 = xmlTreeBuilder4.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder6 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        boolean boolean16 = parseErrorList11.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        xmlTreeBuilder6.initialiseParse("<!---->", "hi!", parseErrorList11);
        xmlTreeBuilder4.errors = parseErrorList11;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList19 = xmlTreeBuilder4.stack;
        org.jsoup.parser.CharacterReader characterReader20 = null;
        xmlTreeBuilder4.reader = characterReader20;
        org.jsoup.parser.Parser parser22 = parser1.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder4);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder23 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document24 = xmlTreeBuilder23.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder25 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream33 = parseErrorList32.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor34 = parseErrorList32.iterator();
        boolean boolean35 = parseErrorList30.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32);
        xmlTreeBuilder25.initialiseParse("<!---->", "hi!", parseErrorList30);
        xmlTreeBuilder23.errors = parseErrorList30;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList38 = xmlTreeBuilder23.stack;
        org.jsoup.parser.CharacterReader characterReader39 = null;
        xmlTreeBuilder23.reader = characterReader39;
        org.jsoup.parser.Parser parser41 = parser22.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder23);
        org.jsoup.parser.CharacterReader characterReader42 = null;
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList44.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList44.iterator();
        org.jsoup.parser.Tokeniser tokeniser48 = new org.jsoup.parser.Tokeniser(characterReader42, parseErrorList44);
        org.jsoup.parser.Token.Tag tag49 = tokeniser48.tagPending;
        org.jsoup.parser.Token.Tag tag51 = tokeniser48.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype52 = new org.jsoup.parser.Token.Doctype();
        boolean boolean53 = doctype52.isCharacter();
        boolean boolean54 = doctype52.isEndTag();
        boolean boolean55 = doctype52.isCharacter();
        tokeniser48.emit((org.jsoup.parser.Token) doctype52);
        org.jsoup.parser.TokeniserState tokeniserState57 = org.jsoup.parser.TokeniserState.ScriptData;
        tokeniser48.eofError((org.jsoup.parser.ITokeniserState) tokeniserState57);
        xmlTreeBuilder23.tokeniser = tokeniser48;
        org.jsoup.parser.Token.Comment comment60 = new org.jsoup.parser.Token.Comment();
        java.lang.String str61 = comment60.toString();
        java.lang.StringBuilder stringBuilder62 = comment60.data;
        boolean boolean63 = comment60.isEndTag();
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder23.insert(comment60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNull(document5);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(elementList19);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNull(document24);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertNotNull(parseErrorStream33);
        org.junit.Assert.assertNotNull(parseErrorItor34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(elementList38);
        org.junit.Assert.assertNotNull(parser41);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNull(tag49);
        org.junit.Assert.assertNotNull(tag51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(tokeniserState57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "<!---->" + "'", str61, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder62);
        org.junit.Assert.assertEquals(stringBuilder62.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\000');
        boolean boolean5 = characterReader1.matches('a');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\000');
        characterReader1.mark();
        boolean boolean5 = characterReader1.isEmpty();
        org.jsoup.parser.TokenQueue tokenQueue7 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str9 = tokenQueue7.chompTo("Doctype");
        java.lang.String str10 = tokenQueue7.consumeWord();
        boolean boolean11 = tokenQueue7.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag12 = new org.jsoup.parser.Token.EndTag();
        char[] charArray15 = new char[] { '#', '#' };
        endTag12.appendAttributeValue(charArray15);
        boolean boolean17 = tokenQueue7.matchesAny(charArray15);
        boolean boolean18 = characterReader1.matchesAny(charArray15);
        java.lang.String str20 = characterReader1.consumeTo('#');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "EndTag" + "'", str9, "EndTag");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "StartTag" + "'", str20, "StartTag");
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document5 = parser0.parseInput("Doctype", "[]");
        org.jsoup.parser.Parser parser7 = parser0.setTrackErrors((int) 'a');
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNotNull(parser7);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        boolean boolean10 = parseErrorList5.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        xmlTreeBuilder0.initialiseParse("<!---->", "hi!", parseErrorList5);
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document16 = xmlTreeBuilder0.parse("", "[]", parseErrorList15);
        org.jsoup.parser.Token.StartTag startTag18 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType19 = startTag18.type;
        java.lang.String str20 = startTag18.toString();
        boolean boolean21 = xmlTreeBuilder0.process((org.jsoup.parser.Token) startTag18);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList28 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int29 = parseErrorList28.getMaxSize();
        org.jsoup.nodes.Document document30 = htmlTreeBuilder24.parse("0: Doctype", "hi!", parseErrorList28);
        boolean boolean31 = htmlTreeBuilder24.framesetOk();
        org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder24.setHeadElement((org.jsoup.nodes.Element) document34);
        org.jsoup.parser.CharacterReader characterReader38 = null;
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream41 = parseErrorList40.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList40.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList40.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList45 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int46 = parseErrorList45.getMaxSize();
        boolean boolean47 = parseErrorList40.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList45);
        org.jsoup.parser.Tokeniser tokeniser48 = new org.jsoup.parser.Tokeniser(characterReader38, parseErrorList45);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList45.iterator();
        htmlTreeBuilder24.initialiseParse("hi!", "hi!#", parseErrorList45);
        java.util.List<org.jsoup.nodes.Node> nodeList51 = xmlTreeBuilder0.parseFragment("S", "<Doctype>", parseErrorList45);
        org.jsoup.parser.ParseErrorList parseErrorList55 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int56 = parseErrorList55.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray57 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList58 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList58, parseErrorArray57);
        org.jsoup.parser.ParseError[] parseErrorArray60 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList61 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList61, parseErrorArray60);
        boolean boolean63 = parseErrorList58.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList61);
        org.jsoup.parser.ParseError[] parseErrorArray64 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList65 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList65, parseErrorArray64);
        boolean boolean67 = parseErrorList61.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList65);
        parseErrorList65.clear();
        boolean boolean69 = parseErrorList55.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList65);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor70 = parseErrorList55.iterator();
        xmlTreeBuilder0.initialiseParse("[100: ]", "<hi!>", parseErrorList55);
        org.jsoup.parser.Token.Character character73 = new org.jsoup.parser.Token.Character("100: ");
        java.lang.String str74 = character73.toString();
        xmlTreeBuilder0.insert(character73);
        org.jsoup.parser.Token.StartTag startTag76 = new org.jsoup.parser.Token.StartTag();
        startTag76.appendAttributeValue("hi!");
        startTag76.appendAttributeValue("");
        org.jsoup.nodes.Attributes attributes81 = null;
        startTag76.attributes = attributes81;
        startTag76.appendAttributeValue("");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element85 = xmlTreeBuilder0.insert(startTag76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + tokenType19 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType19.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<hi!>" + "'", str20, "<hi!>");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(parseErrorList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertNotNull(parseErrorStream41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNotNull(parseErrorList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertNotNull(parseErrorList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(parseErrorArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(parseErrorArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(parseErrorItor70);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "100: " + "'", str74, "100: ");
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.Tag tag11 = tokeniser6.createTagPending(false);
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.Tokeniser tokeniser18 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList14);
        org.jsoup.parser.Token.Tag tag19 = tokeniser18.tagPending;
        tokeniser18.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype22 = tokeniser18.doctypePending;
        tokeniser18.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype24 = tokeniser18.doctypePending;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState25 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype26 = new org.jsoup.parser.Token.Doctype();
        boolean boolean27 = doctype26.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = null;
        boolean boolean29 = htmlTreeBuilderState25.process((org.jsoup.parser.Token) doctype26, htmlTreeBuilder28);
        tokeniser18.doctypePending = doctype26;
        tokeniser6.doctypePending = doctype26;
        tokeniser6.emitTagPending();
        org.jsoup.parser.CharacterReader characterReader33 = null;
        org.jsoup.parser.ParseErrorList parseErrorList35 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream36 = parseErrorList35.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor37 = parseErrorList35.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor38 = parseErrorList35.iterator();
        org.jsoup.parser.Tokeniser tokeniser39 = new org.jsoup.parser.Tokeniser(characterReader33, parseErrorList35);
        org.jsoup.parser.Token.Tag tag40 = tokeniser39.tagPending;
        java.lang.StringBuilder stringBuilder41 = null;
        tokeniser39.dataBuffer = stringBuilder41;
        org.jsoup.parser.Token.EndTag endTag43 = new org.jsoup.parser.Token.EndTag();
        char[] charArray46 = new char[] { '#', '#' };
        endTag43.appendAttributeValue(charArray46);
        tokeniser39.emit(charArray46);
        tokeniser6.emit(charArray46);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNull(tag19);
        org.junit.Assert.assertNull(doctype22);
        org.junit.Assert.assertNull(doctype24);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(parseErrorList35);
        org.junit.Assert.assertNotNull(parseErrorStream36);
        org.junit.Assert.assertNotNull(parseErrorItor37);
        org.junit.Assert.assertNotNull(parseErrorItor38);
        org.junit.Assert.assertNull(tag40);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[#, #]");
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.jsoup.parser.Token.EndTag endTag0 = new org.jsoup.parser.Token.EndTag();
        endTag0.tagName = "hi!";
        endTag0.selfClosing = false;
        endTag0.appendTagName("[]");
        java.lang.String str7 = endTag0.toString();
        boolean boolean8 = endTag0.isEOF();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "</hi![]>" + "'", str7, "</hi![]>");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        boolean boolean11 = doctype10.isCharacter();
        boolean boolean12 = doctype10.isEndTag();
        boolean boolean13 = doctype10.isCharacter();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        org.jsoup.parser.Token.Doctype doctype15 = tokeniser6.doctypePending;
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray18 = tokeniser6.consumeCharacterReference((java.lang.Character) '\uffff', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(doctype15);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        java.lang.StringBuilder stringBuilder9 = null;
        tokeniser7.dataBuffer = stringBuilder9;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        tokeniser7.emit(charArray14);
        org.jsoup.parser.Token.Comment comment17 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean20 = characterReader19.matchesLetter();
        miniSoupTokeniserState0.read(tokeniser7, characterReader19);
        int int22 = characterReader19.pos();
        boolean boolean23 = characterReader19.matchesDigit();
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        java.lang.String[] strArray13 = null;
        boolean boolean14 = htmlTreeBuilder0.inScope("EndTag", strArray13);
        org.jsoup.parser.ParseErrorList parseErrorList15 = htmlTreeBuilder0.errors;
        boolean boolean17 = htmlTreeBuilder0.inListItemScope("St");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState18 = htmlTreeBuilder0.originalState();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(htmlTreeBuilderState18);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.Parser parser4 = parser2.setTrackErrors((int) ' ');
        org.jsoup.nodes.Document document7 = parser4.parseInput("artTag", "<hi!#>");
        boolean boolean8 = parser4.isTrackErrors();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNotNull(parser4);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.preserveWhitespace();
        boolean boolean3 = tag1.isKnownTag();
        boolean boolean4 = tag1.isBlock();
        org.jsoup.parser.Tag tag6 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean7 = tag6.isFormListed();
        org.jsoup.parser.Tag tag8 = tag6.setSelfClosing();
        boolean boolean9 = tag6.isKnownTag();
        boolean boolean10 = tag6.isKnownTag();
        boolean boolean11 = tag1.equals((java.lang.Object) boolean10);
        java.lang.String str12 = tag1.toString();
        org.jsoup.parser.Tag tag13 = tag1.setSelfClosing();
        org.jsoup.parser.CharacterReader characterReader15 = new org.jsoup.parser.CharacterReader("StartTag");
        java.lang.String str16 = characterReader15.consumeToEnd();
        int int18 = characterReader15.nextIndexOf('a');
        java.lang.String str19 = characterReader15.consumeDigitSequence();
        boolean boolean20 = tag1.equals((java.lang.Object) str19);
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(tag6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(tag8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(tag13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "StartTag" + "'", str16, "StartTag");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("a");
        char char2 = tokenQueue1.consume();
        // The following exception was thrown during execution in test generation
        try {
            tokenQueue1.consume("35: hi!#");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Queue did not match expected sequence");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + char2 + "' != '" + 'a' + "'", char2 == 'a');
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder1 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int6 = parseErrorList5.getMaxSize();
        org.jsoup.nodes.Document document7 = htmlTreeBuilder1.parse("0: Doctype", "hi!", parseErrorList5);
        boolean boolean8 = htmlTreeBuilder1.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState9 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder1.error(htmlTreeBuilderState9);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState11 = null;
        htmlTreeBuilder1.transition(htmlTreeBuilderState11);
        org.jsoup.parser.Parser parser13 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.nodes.Document document16 = parser13.parseInput("", "hi!");
        htmlTreeBuilder1.maybeSetBaseUri((org.jsoup.nodes.Element) document16);
        java.util.List<org.jsoup.nodes.Node> nodeList19 = org.jsoup.parser.Parser.parseFragment("S", (org.jsoup.nodes.Element) document16, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState9);
        org.junit.Assert.assertNotNull(parser13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(nodeList19);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag1.appendTagName("hi!");
        org.jsoup.nodes.Attributes attributes4 = startTag1.getAttributes();
        java.lang.String str5 = startTag1.tokenType();
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "StartTag" + "'", str5, "StartTag");
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.resetInsertionMode();
        htmlTreeBuilder0.popStackToBefore("EndTag");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = htmlTreeBuilder0.state();
        htmlTreeBuilder0.runParser();
        org.jsoup.parser.Tokeniser tokeniser12 = htmlTreeBuilder0.tokeniser;
        org.jsoup.parser.TokeniserState tokeniserState13 = org.jsoup.parser.TokeniserState.RawtextLessthanSign;
        tokeniser12.transition((org.jsoup.parser.ITokeniserState) tokeniserState13);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState10);
        org.junit.Assert.assertNotNull(tokeniser12);
        org.junit.Assert.assertNotNull(tokeniserState13);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        int int9 = parseErrorList4.lastIndexOf((java.lang.Object) 1.0d);
        int int10 = parseErrorList4.size();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder11 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int16 = parseErrorList15.getMaxSize();
        org.jsoup.nodes.Document document17 = htmlTreeBuilder11.parse("0: Doctype", "hi!", parseErrorList15);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState18 = null;
        htmlTreeBuilder11.transition(htmlTreeBuilderState18);
        int int20 = parseErrorList4.lastIndexOf((java.lang.Object) htmlTreeBuilder11);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        java.lang.String str1 = org.jsoup.parser.TokenQueue.unescape("<0: Doctype>");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "<0: Doctype>" + "'", str1, "<0: Doctype>");
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.nodes.Element element38 = htmlTreeBuilder0.insert("<!---->");
        org.jsoup.parser.Token.StartTag startTag40 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag40.appendTagName("hi!");
        startTag40.appendAttributeName('4');
        boolean boolean45 = htmlTreeBuilder0.process((org.jsoup.parser.Token) startTag40);
        org.jsoup.parser.Token.EndTag endTag46 = new org.jsoup.parser.Token.EndTag();
        endTag46.tagName = "hi!";
        endTag46.tagName = "[]";
        endTag46.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder52 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList56 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int57 = parseErrorList56.getMaxSize();
        org.jsoup.nodes.Document document58 = htmlTreeBuilder52.parse("0: Doctype", "hi!", parseErrorList56);
        htmlTreeBuilder52.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray61 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList62 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList62, characterArray61);
        htmlTreeBuilder52.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList62);
        boolean boolean65 = htmlTreeBuilder52.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag67 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState68 = org.jsoup.parser.HtmlTreeBuilderState.InRow;
        boolean boolean69 = htmlTreeBuilder52.process((org.jsoup.parser.Token) startTag67, htmlTreeBuilderState68);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState70 = htmlTreeBuilder52.state();
        boolean boolean71 = htmlTreeBuilder0.process((org.jsoup.parser.Token) endTag46, htmlTreeBuilderState70);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(element38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(parseErrorList56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(document58);
        org.junit.Assert.assertNotNull(characterArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        org.jsoup.nodes.FormElement formElement11 = htmlTreeBuilder3.getFormElement();
        boolean boolean13 = htmlTreeBuilder3.inListItemScope("0: []");
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "<!---->");
        boolean boolean17 = htmlTreeBuilder3.isSpecial((org.jsoup.nodes.Element) document16);
        org.jsoup.parser.Token.StartTag startTag19 = new org.jsoup.parser.Token.StartTag("hi!");
        boolean boolean20 = startTag19.isCharacter();
        startTag19.selfClosing = false;
        startTag19.newAttribute();
        startTag19.appendTagName("a");
        startTag19.appendTagName('\000');
        org.jsoup.nodes.Element element28 = htmlTreeBuilder3.insert(startTag19);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(formElement11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(element28);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader2 = new org.jsoup.parser.CharacterReader("StartTag");
        int int4 = characterReader2.nextIndexOf((java.lang.CharSequence) "[]");
        boolean boolean5 = characterReader2.matchesDigit();
        java.lang.String str6 = characterReader2.toString();
        xmlTreeBuilder0.reader = characterReader2;
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int12 = parseErrorList11.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray13 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList14 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList14, parseErrorArray13);
        org.jsoup.parser.ParseError[] parseErrorArray16 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList17 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17, parseErrorArray16);
        boolean boolean19 = parseErrorList14.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList17);
        org.jsoup.parser.ParseError[] parseErrorArray20 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList21 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21, parseErrorArray20);
        boolean boolean23 = parseErrorList17.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        parseErrorList21.clear();
        boolean boolean25 = parseErrorList11.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        xmlTreeBuilder0.initialiseParse("<Doctype>", "a", parseErrorList11);
        org.jsoup.parser.Token.Character character28 = new org.jsoup.parser.Token.Character("100: ");
        xmlTreeBuilder0.insert(character28);
        org.jsoup.parser.ParseErrorList parseErrorList30 = xmlTreeBuilder0.errors;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError32 = parseErrorList30.remove((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "StartTag" + "'", str6, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(parseErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseErrorArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parseErrorList30);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag1.appendTagName("hi!");
        java.lang.String str4 = startTag1.name();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!hi!" + "'", str4, "hi!hi!");
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.lang.Object[] objArray7 = parseErrorList1.toArray();
        int int9 = parseErrorList1.indexOf((java.lang.Object) 10.0f);
        org.jsoup.parser.CharacterReader characterReader11 = null;
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList13.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int19 = parseErrorList18.getMaxSize();
        boolean boolean20 = parseErrorList13.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList18);
        org.jsoup.parser.Tokeniser tokeniser21 = new org.jsoup.parser.Tokeniser(characterReader11, parseErrorList18);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor22 = parseErrorList18.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.listIterator();
        parseErrorList24.clear();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream28 = parseErrorList24.parallelStream();
        boolean boolean29 = parseErrorList18.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = parseErrorList1.addAll((-1), (java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList18);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(parseErrorItor22);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        htmlTreeBuilder0.newPendingTableCharacters();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState6 = htmlTreeBuilder0.originalState();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder7 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int12 = parseErrorList11.getMaxSize();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder7.parse("0: Doctype", "hi!", parseErrorList11);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder14 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int19 = parseErrorList18.getMaxSize();
        org.jsoup.nodes.Document document20 = htmlTreeBuilder14.parse("0: Doctype", "hi!", parseErrorList18);
        boolean boolean21 = htmlTreeBuilder14.framesetOk();
        org.jsoup.nodes.Document document24 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder14.setHeadElement((org.jsoup.nodes.Element) document24);
        org.jsoup.nodes.Element element26 = htmlTreeBuilder14.pop();
        htmlTreeBuilder7.pushActiveFormattingElements(element26);
        boolean boolean28 = htmlTreeBuilder0.isInActiveFormattingElements(element26);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState29 = org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup;
        htmlTreeBuilder0.transition(htmlTreeBuilderState29);
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.parser.CharacterReader characterReader33 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean35 = characterReader33.matches("[100: ]");
        htmlTreeBuilder0.reader = characterReader33;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(htmlTreeBuilderState6);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        boolean boolean8 = tokenQueue1.matchesCS("StartTag");
        char char9 = tokenQueue1.peek();
        java.lang.String str11 = tokenQueue1.chompTo("");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.parser.Parser parser20 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser22 = parser20.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document25 = parser20.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document28 = parser20.parseInput("<hi!>", "[]");
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document28);
        boolean boolean30 = htmlTreeBuilder12.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder31 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList38 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream39 = parseErrorList38.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor40 = parseErrorList38.iterator();
        boolean boolean41 = parseErrorList36.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList38);
        xmlTreeBuilder31.initialiseParse("<!---->", "hi!", parseErrorList36);
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document47 = xmlTreeBuilder31.parse("", "[]", parseErrorList46);
        boolean boolean48 = htmlTreeBuilder12.isInActiveFormattingElements((org.jsoup.nodes.Element) document47);
        boolean boolean49 = htmlTreeBuilder12.isFosterInserts();
        org.jsoup.parser.TokenQueue tokenQueue51 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str53 = tokenQueue51.chompTo("Doctype");
        java.lang.String str54 = tokenQueue51.consumeWord();
        boolean boolean55 = tokenQueue51.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag56 = new org.jsoup.parser.Token.EndTag();
        char[] charArray59 = new char[] { '#', '#' };
        endTag56.appendAttributeValue(charArray59);
        boolean boolean61 = tokenQueue51.matchesAny(charArray59);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder62 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList66 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int67 = parseErrorList66.getMaxSize();
        org.jsoup.nodes.Document document68 = htmlTreeBuilder62.parse("0: Doctype", "hi!", parseErrorList66);
        boolean boolean69 = htmlTreeBuilder62.framesetOk();
        org.jsoup.parser.Parser parser70 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser72 = parser70.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document75 = parser70.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document78 = parser70.parseInput("<hi!>", "[]");
        htmlTreeBuilder62.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document78);
        java.lang.String[] strArray80 = new java.lang.String[] {};
        boolean boolean81 = htmlTreeBuilder62.inScope(strArray80);
        boolean boolean82 = tokenQueue51.matchesAny(strArray80);
        htmlTreeBuilder12.popStackToClose(strArray80);
        boolean boolean84 = tokenQueue1.matchesAny(strArray80);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + '\000' + "'", char9 == '\000');
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parser20);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parseErrorList38);
        org.junit.Assert.assertNotNull(parseErrorStream39);
        org.junit.Assert.assertNotNull(parseErrorItor40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "EndTag" + "'", str53, "EndTag");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(parseErrorList66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(document68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(parser70);
        org.junit.Assert.assertNotNull(parser72);
        org.junit.Assert.assertNotNull(document75);
        org.junit.Assert.assertNotNull(document78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToBefore("StartTag");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = htmlTreeBuilder0.inScope("0: Doctype");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Should not be reachable");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList(0, (int) (byte) 0);
        htmlTreeBuilder0.initialiseParse("<hi!>", "hi!#", parseErrorList5);
        org.jsoup.parser.Parser parser7 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean8 = parser7.isTrackErrors();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.parser.Token token10 = htmlTreeBuilder0.currentToken;
        org.jsoup.nodes.Document document11 = htmlTreeBuilder0.getDocument();
        htmlTreeBuilder0.baseUri = "[]";
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(token10);
        org.junit.Assert.assertNotNull(document11);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        boolean boolean13 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag15 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement17 = htmlTreeBuilder0.insertForm(startTag15, true);
        htmlTreeBuilder0.baseUri = "";
        htmlTreeBuilder0.clearStackToTableRowContext();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(formElement17);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        xmlTreeBuilder0.initialiseParse("a", "[]", parseErrorList18);
        org.jsoup.parser.Token.Character character22 = new org.jsoup.parser.Token.Character("-1: []");
        xmlTreeBuilder0.insert(character22);
        org.jsoup.parser.Token.StartTag startTag24 = new org.jsoup.parser.Token.StartTag();
        startTag24.appendAttributeValue("hi!");
        startTag24.appendAttributeValue("");
        org.jsoup.nodes.Attributes attributes29 = null;
        startTag24.attributes = attributes29;
        startTag24.appendAttributeValue("StartTag");
        boolean boolean33 = startTag24.selfClosing;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element34 = xmlTreeBuilder0.insert(startTag24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        org.jsoup.parser.Token.Comment comment15 = new org.jsoup.parser.Token.Comment();
        java.lang.String str16 = comment15.toString();
        boolean boolean17 = comment15.isCharacter();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = xmlTreeBuilder0.process((org.jsoup.parser.Token) comment15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<!---->" + "'", str16, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder13 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList17 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int18 = parseErrorList17.getMaxSize();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder13.parse("0: Doctype", "hi!", parseErrorList17);
        boolean boolean20 = htmlTreeBuilder13.framesetOk();
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder13.setHeadElement((org.jsoup.nodes.Element) document23);
        org.jsoup.nodes.Element element25 = htmlTreeBuilder13.pop();
        htmlTreeBuilder0.push(element25);
        org.jsoup.parser.Token token27 = htmlTreeBuilder0.currentToken;
        boolean boolean29 = htmlTreeBuilder0.inScope("");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseErrorList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(token27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        org.jsoup.parser.Token.Tag tag10 = tokeniser7.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype11 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype12 = doctype11.asDoctype();
        java.lang.String str13 = doctype11.tokenType();
        tokeniser7.emit((org.jsoup.parser.Token) doctype11);
        org.jsoup.parser.Token.Tag tag16 = tokeniser7.createTagPending(true);
        xmlTreeBuilder0.currentToken = tag16;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder18 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int23 = parseErrorList22.getMaxSize();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder18.parse("0: Doctype", "hi!", parseErrorList22);
        boolean boolean25 = htmlTreeBuilder18.framesetOk();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder18.setHeadElement((org.jsoup.nodes.Element) document28);
        xmlTreeBuilder0.doc = document28;
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream35 = parseErrorList34.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor36 = parseErrorList34.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor37 = parseErrorList34.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int40 = parseErrorList39.getMaxSize();
        boolean boolean41 = parseErrorList34.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList39);
        xmlTreeBuilder0.initialiseParse("hi!#", "0: []", parseErrorList39);
        org.jsoup.parser.Tokeniser tokeniser43 = xmlTreeBuilder0.tokeniser;
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(tag10);
        org.junit.Assert.assertNotNull(doctype12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Doctype" + "'", str13, "Doctype");
        org.junit.Assert.assertNotNull(tag16);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(parseErrorStream35);
        org.junit.Assert.assertNotNull(parseErrorItor36);
        org.junit.Assert.assertNotNull(parseErrorItor37);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(tokeniser43);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
        org.jsoup.parser.TreeBuilder treeBuilder2 = null;
        org.jsoup.parser.Parser parser3 = parser1.setTreeBuilder(treeBuilder2);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder4 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document5 = xmlTreeBuilder4.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder6 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        boolean boolean16 = parseErrorList11.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        xmlTreeBuilder6.initialiseParse("<!---->", "hi!", parseErrorList11);
        xmlTreeBuilder4.errors = parseErrorList11;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList19 = xmlTreeBuilder4.stack;
        org.jsoup.parser.CharacterReader characterReader20 = null;
        xmlTreeBuilder4.reader = characterReader20;
        org.jsoup.parser.Parser parser22 = parser1.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder4);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder23 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document24 = xmlTreeBuilder23.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder25 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList30 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream33 = parseErrorList32.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor34 = parseErrorList32.iterator();
        boolean boolean35 = parseErrorList30.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList32);
        xmlTreeBuilder25.initialiseParse("<!---->", "hi!", parseErrorList30);
        xmlTreeBuilder23.errors = parseErrorList30;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList38 = xmlTreeBuilder23.stack;
        org.jsoup.parser.CharacterReader characterReader39 = null;
        xmlTreeBuilder23.reader = characterReader39;
        org.jsoup.parser.Parser parser41 = parser22.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder23);
        java.util.List<org.jsoup.parser.ParseError> parseErrorList42 = parser41.getErrors();
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNull(document5);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(elementList19);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNull(document24);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertNotNull(parseErrorStream33);
        org.junit.Assert.assertNotNull(parseErrorItor34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(elementList38);
        org.junit.Assert.assertNotNull(parser41);
        org.junit.Assert.assertNull(parseErrorList42);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking((int) '\ufffd');
        org.junit.Assert.assertNotNull(parseErrorList1);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        tokenQueue1.advance();
        java.lang.String str8 = tokenQueue1.consumeWord();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag("<hi!#>");
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement14 = htmlTreeBuilder0.getFormElement();
        org.jsoup.parser.ParseErrorList parseErrorList19 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        htmlTreeBuilder0.initialiseParse("StartTaga", "a", parseErrorList19);
        java.util.function.UnaryOperator<org.jsoup.parser.ParseError> parseErrorUnaryOperator21 = null;
        // The following exception was thrown during execution in test generation
        try {
            parseErrorList19.replaceAll(parseErrorUnaryOperator21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(formElement14);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        boolean boolean37 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.CharacterReader characterReader38 = htmlTreeBuilder0.reader;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder39 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int44 = parseErrorList43.getMaxSize();
        org.jsoup.nodes.Document document45 = htmlTreeBuilder39.parse("0: Doctype", "hi!", parseErrorList43);
        boolean boolean46 = htmlTreeBuilder39.framesetOk();
        org.jsoup.parser.Token token47 = htmlTreeBuilder39.currentToken;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState48 = org.jsoup.parser.HtmlTreeBuilderState.InTable;
        htmlTreeBuilder39.error(htmlTreeBuilderState48);
        org.jsoup.nodes.Document document53 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        java.util.List<org.jsoup.nodes.Node> nodeList55 = org.jsoup.parser.Parser.parseFragment("EndTag", (org.jsoup.nodes.Element) document53, "<hi!>");
        boolean boolean56 = htmlTreeBuilder39.isInActiveFormattingElements((org.jsoup.nodes.Element) document53);
        htmlTreeBuilder39.generateImpliedEndTags();
        org.jsoup.nodes.Element element58 = htmlTreeBuilder39.getHeadElement();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder59 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document60 = xmlTreeBuilder59.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder61 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList66 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList68 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream69 = parseErrorList68.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor70 = parseErrorList68.iterator();
        boolean boolean71 = parseErrorList66.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList68);
        xmlTreeBuilder61.initialiseParse("<!---->", "hi!", parseErrorList66);
        xmlTreeBuilder59.errors = parseErrorList66;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList74 = xmlTreeBuilder59.stack;
        org.jsoup.parser.CharacterReader characterReader75 = null;
        org.jsoup.parser.ParseErrorList parseErrorList77 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream78 = parseErrorList77.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor79 = parseErrorList77.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor80 = parseErrorList77.iterator();
        org.jsoup.parser.Tokeniser tokeniser81 = new org.jsoup.parser.Tokeniser(characterReader75, parseErrorList77);
        org.jsoup.parser.Token.Tag tag82 = tokeniser81.tagPending;
        org.jsoup.parser.Token.Tag tag84 = tokeniser81.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype85 = tokeniser81.doctypePending;
        xmlTreeBuilder59.tokeniser = tokeniser81;
        org.jsoup.nodes.Document document89 = xmlTreeBuilder59.parse("Doctype", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder0.replaceActiveFormattingElement(element58, (org.jsoup.nodes.Element) document89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(characterReader38);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(token47);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState48);
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertNotNull(nodeList55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(element58);
        org.junit.Assert.assertNull(document60);
        org.junit.Assert.assertNotNull(parseErrorList68);
        org.junit.Assert.assertNotNull(parseErrorStream69);
        org.junit.Assert.assertNotNull(parseErrorItor70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(elementList74);
        org.junit.Assert.assertNotNull(parseErrorList77);
        org.junit.Assert.assertNotNull(parseErrorStream78);
        org.junit.Assert.assertNotNull(parseErrorItor79);
        org.junit.Assert.assertNotNull(parseErrorItor80);
        org.junit.Assert.assertNull(tag82);
        org.junit.Assert.assertNotNull(tag84);
        org.junit.Assert.assertNull(doctype85);
        org.junit.Assert.assertNotNull(document89);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\000');
        characterReader1.mark();
        boolean boolean6 = characterReader1.containsIgnoreCase("a");
        characterReader1.mark();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        boolean boolean1 = org.jsoup.parser.Tag.isKnownTag("ndTag");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.TokeniserState tokeniserState16 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState16);
        org.jsoup.parser.Token.Doctype doctype18 = new org.jsoup.parser.Token.Doctype();
        boolean boolean19 = doctype18.isCharacter();
        tokeniser6.doctypePending = doctype18;
        java.lang.String str21 = doctype18.getPublicIdentifier();
        java.lang.StringBuilder stringBuilder22 = doctype18.systemIdentifier;
        java.lang.StringBuilder stringBuilder23 = doctype18.name;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(stringBuilder22);
        org.junit.Assert.assertEquals(stringBuilder22.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder23);
        org.junit.Assert.assertEquals(stringBuilder23.toString(), "");
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        java.lang.String[] strArray21 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean22 = htmlTreeBuilder0.inScope("hi!#", strArray21);
        htmlTreeBuilder0.clearStackToTableContext();
        htmlTreeBuilder0.popStackToBefore("-1: []");
        boolean boolean26 = htmlTreeBuilder0.isFosterInserts();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\000');
        characterReader1.mark();
        boolean boolean6 = characterReader1.containsIgnoreCase("a");
        characterReader1.rewindToMark();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        boolean boolean6 = tokenQueue1.matchesWord();
        boolean boolean8 = tokenQueue1.matchesCS("StartTag");
        java.lang.String str11 = tokenQueue1.chompBalanced('E', '#');
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.Tokeniser tokeniser18 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList14);
        org.jsoup.parser.Token.EndTag endTag19 = new org.jsoup.parser.Token.EndTag();
        char[] charArray22 = new char[] { '#', '#' };
        endTag19.appendAttributeValue(charArray22);
        endTag19.appendAttributeValue(' ');
        char[] charArray27 = new char[] { '4' };
        endTag19.appendAttributeValue(charArray27);
        tokeniser18.emit(charArray27);
        boolean boolean30 = tokenQueue1.matchesAny(charArray27);
        // The following exception was thrown during execution in test generation
        try {
            tokenQueue1.consume("<!---->");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Queue did not match expected sequence");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.EndTagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        tokeniser7.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag12 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType13 = startTag12.type;
        startTag12.appendTagName('#');
        tokeniser7.tagPending = startTag12;
        org.jsoup.parser.TokeniserState tokeniserState17 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser7.transition((org.jsoup.parser.ITokeniserState) tokeniserState17);
        tokeniser7.createDoctypePending();
        org.jsoup.parser.CharacterReader characterReader21 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean23 = characterReader21.matches('\000');
        characterReader21.mark();
        boolean boolean25 = characterReader21.isEmpty();
        org.jsoup.parser.TokenQueue tokenQueue27 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str29 = tokenQueue27.chompTo("Doctype");
        java.lang.String str30 = tokenQueue27.consumeWord();
        boolean boolean31 = tokenQueue27.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag32 = new org.jsoup.parser.Token.EndTag();
        char[] charArray35 = new char[] { '#', '#' };
        endTag32.appendAttributeValue(charArray35);
        boolean boolean37 = tokenQueue27.matchesAny(charArray35);
        boolean boolean38 = characterReader21.matchesAny(charArray35);
        miniSoupTokeniserState0.read(tokeniser7, characterReader21);
        java.lang.String str40 = characterReader21.consumeToEnd();
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertTrue("'" + tokenType13 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType13.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "EndTag" + "'", str29, "EndTag");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "StartTag" + "'", str40, "StartTag");
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        java.util.List<org.jsoup.parser.ParseError> parseErrorList13 = parseErrorList8.subList(0, 0);
        org.jsoup.parser.Token.EndTag endTag23 = new org.jsoup.parser.Token.EndTag();
        char[] charArray26 = new char[] { '#', '#' };
        endTag23.appendAttributeValue(charArray26);
        endTag23.finaliseTag();
        boolean boolean29 = endTag23.isSelfClosing();
        org.jsoup.parser.Tag tag31 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean32 = tag31.isFormListed();
        org.jsoup.parser.Tag tag33 = tag31.setSelfClosing();
        boolean boolean34 = tag31.isKnownTag();
        java.lang.Object[] objArray36 = new java.lang.Object[] { boolean29, tag31, "Doctype" };
        org.jsoup.parser.ParseError parseError37 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray36);
        org.jsoup.parser.ParseError parseError38 = new org.jsoup.parser.ParseError((int) (short) -1, "[]", objArray36);
        org.jsoup.parser.ParseError parseError39 = new org.jsoup.parser.ParseError((int) (byte) 10, "", objArray36);
        org.jsoup.parser.ParseError parseError40 = new org.jsoup.parser.ParseError((int) (short) 1, "", objArray36);
        // The following exception was thrown during execution in test generation
        try {
            parseErrorList8.add((-1), parseError40);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(tag33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[false, hi!, Doctype]");
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder37 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int42 = parseErrorList41.getMaxSize();
        org.jsoup.nodes.Document document43 = htmlTreeBuilder37.parse("0: Doctype", "hi!", parseErrorList41);
        org.jsoup.parser.ParseErrorList parseErrorList47 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream48 = parseErrorList47.stream();
        boolean boolean49 = parseErrorList47.canAddError();
        org.jsoup.nodes.Document document50 = htmlTreeBuilder37.parse("EndTag", "hi!#", parseErrorList47);
        java.lang.String[] strArray58 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean59 = htmlTreeBuilder37.inScope("hi!#", strArray58);
        org.jsoup.parser.ParseErrorList parseErrorList64 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document65 = htmlTreeBuilder37.parse("0: Doctype", "", parseErrorList64);
        htmlTreeBuilder0.pushActiveFormattingElements((org.jsoup.nodes.Element) document65);
        htmlTreeBuilder0.framesetOk(true);
        boolean boolean70 = htmlTreeBuilder0.inTableScope("10: ");
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertNotNull(parseErrorList47);
        org.junit.Assert.assertNotNull(parseErrorStream48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList12 = htmlTreeBuilder0.stack;
        org.jsoup.nodes.FormElement formElement13 = htmlTreeBuilder0.getFormElement();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(elementList12);
        org.junit.Assert.assertNull(formElement13);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype12 = tokeniser6.doctypePending;
        org.jsoup.parser.Token.Comment comment13 = new org.jsoup.parser.Token.Comment();
        java.lang.String str14 = comment13.toString();
        java.lang.StringBuilder stringBuilder15 = comment13.data;
        boolean boolean16 = comment13.isEndTag();
        java.lang.String str17 = comment13.toString();
        tokeniser6.commentPending = comment13;
        org.jsoup.parser.CharacterReader characterReader20 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean22 = characterReader20.matches('\000');
        characterReader20.mark();
        boolean boolean24 = characterReader20.isEmpty();
        org.jsoup.parser.TokenQueue tokenQueue26 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str28 = tokenQueue26.chompTo("Doctype");
        java.lang.String str29 = tokenQueue26.consumeWord();
        boolean boolean30 = tokenQueue26.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag31 = new org.jsoup.parser.Token.EndTag();
        char[] charArray34 = new char[] { '#', '#' };
        endTag31.appendAttributeValue(charArray34);
        boolean boolean36 = tokenQueue26.matchesAny(charArray34);
        boolean boolean37 = characterReader20.matchesAny(charArray34);
        tokeniser6.emit(charArray34);
        boolean boolean39 = tokeniser6.currentNodeInHtmlNS();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNull(doctype12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "<!---->" + "'", str14, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<!---->" + "'", str17, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "EndTag" + "'", str28, "EndTag");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        java.lang.String str3 = tag1.toString();
        boolean boolean4 = tag1.isSelfClosing();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        boolean boolean37 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.CharacterReader characterReader38 = null;
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream41 = parseErrorList40.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList40.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList40.iterator();
        org.jsoup.parser.Tokeniser tokeniser44 = new org.jsoup.parser.Tokeniser(characterReader38, parseErrorList40);
        org.jsoup.parser.Token.Tag tag45 = tokeniser44.tagPending;
        org.jsoup.parser.Token.Tag tag47 = tokeniser44.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype48 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype49 = doctype48.asDoctype();
        java.lang.String str50 = doctype48.tokenType();
        tokeniser44.emit((org.jsoup.parser.Token) doctype48);
        org.jsoup.parser.ITokeniserState iTokeniserState52 = tokeniser44.getState();
        org.jsoup.parser.Token token53 = tokeniser44.read();
        htmlTreeBuilder0.tokeniser = tokeniser44;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState55 = htmlTreeBuilder0.originalState();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertNotNull(parseErrorStream41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNull(tag45);
        org.junit.Assert.assertNotNull(tag47);
        org.junit.Assert.assertNotNull(doctype49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Doctype" + "'", str50, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState52);
        org.junit.Assert.assertNotNull(token53);
        org.junit.Assert.assertNull(htmlTreeBuilderState55);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.jsoup.parser.Token.Character character1 = new org.jsoup.parser.Token.Character("tartTag");
        java.lang.String str2 = character1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tartTag" + "'", str2, "tartTag");
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.Token token1 = xmlTreeBuilder0.currentToken;
        org.jsoup.parser.CharacterReader characterReader2 = null;
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream5 = parseErrorList4.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList4.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.iterator();
        org.jsoup.parser.Tokeniser tokeniser8 = new org.jsoup.parser.Tokeniser(characterReader2, parseErrorList4);
        org.jsoup.parser.Token.Tag tag9 = tokeniser8.tagPending;
        org.jsoup.parser.Token.Tag tag11 = tokeniser8.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype12 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype13 = doctype12.asDoctype();
        java.lang.String str14 = doctype12.tokenType();
        tokeniser8.emit((org.jsoup.parser.Token) doctype12);
        org.jsoup.parser.Token.Tag tag17 = tokeniser8.createTagPending(true);
        xmlTreeBuilder0.tokeniser = tokeniser8;
        org.jsoup.parser.Parser parser19 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser21 = parser19.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder22 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document23 = xmlTreeBuilder22.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder24 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList29 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream32 = parseErrorList31.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor33 = parseErrorList31.iterator();
        boolean boolean34 = parseErrorList29.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList31);
        xmlTreeBuilder24.initialiseParse("<!---->", "hi!", parseErrorList29);
        xmlTreeBuilder22.errors = parseErrorList29;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList37 = xmlTreeBuilder22.stack;
        org.jsoup.parser.Parser parser38 = parser21.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder22);
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder22.errors = parseErrorList40;
        org.jsoup.parser.Token.StartTag startTag42 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes43 = startTag42.getAttributes();
        xmlTreeBuilder22.currentToken = startTag42;
        tokeniser8.tagPending = startTag42;
        org.jsoup.parser.Parser parser46 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser48 = parser46.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder49 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document50 = xmlTreeBuilder49.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder51 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList56 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList58 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream59 = parseErrorList58.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor60 = parseErrorList58.iterator();
        boolean boolean61 = parseErrorList56.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList58);
        xmlTreeBuilder51.initialiseParse("<!---->", "hi!", parseErrorList56);
        xmlTreeBuilder49.errors = parseErrorList56;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList64 = xmlTreeBuilder49.stack;
        org.jsoup.parser.Parser parser65 = parser48.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder49);
        org.jsoup.parser.ParseErrorList parseErrorList67 = org.jsoup.parser.ParseErrorList.tracking(0);
        xmlTreeBuilder49.errors = parseErrorList67;
        org.jsoup.parser.Token.StartTag startTag69 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes70 = startTag69.getAttributes();
        xmlTreeBuilder49.currentToken = startTag69;
        org.jsoup.parser.Token.EndTag endTag72 = new org.jsoup.parser.Token.EndTag();
        char[] charArray75 = new char[] { '#', '#' };
        endTag72.appendAttributeValue(charArray75);
        endTag72.appendAttributeValue(' ');
        char[] charArray80 = new char[] { '4' };
        endTag72.appendAttributeValue(charArray80);
        startTag69.appendAttributeValue(charArray80);
        tokeniser8.emit(charArray80);
        org.junit.Assert.assertNull(token1);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorStream5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNull(tag9);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(doctype13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Doctype" + "'", str14, "Doctype");
        org.junit.Assert.assertNotNull(tag17);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parser21);
        org.junit.Assert.assertNull(document23);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertNotNull(parseErrorStream32);
        org.junit.Assert.assertNotNull(parseErrorItor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(elementList37);
        org.junit.Assert.assertNotNull(parser38);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertNotNull(attributes43);
        org.junit.Assert.assertNotNull(parser46);
        org.junit.Assert.assertNotNull(parser48);
        org.junit.Assert.assertNull(document50);
        org.junit.Assert.assertNotNull(parseErrorList58);
        org.junit.Assert.assertNotNull(parseErrorStream59);
        org.junit.Assert.assertNotNull(parseErrorItor60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(elementList64);
        org.junit.Assert.assertNotNull(parser65);
        org.junit.Assert.assertNotNull(parseErrorList67);
        org.junit.Assert.assertNotNull(attributes70);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[#, #]");
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[4]");
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("-1: []");
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.Tag tag11 = tokeniser6.createTagPending(false);
        org.jsoup.parser.Token.Tag tag13 = tokeniser6.createTagPending(false);
        org.jsoup.parser.Token.StartTag startTag15 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType16 = startTag15.type;
        startTag15.appendTagName('#');
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader20 = null;
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream23 = parseErrorList22.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList22.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList22.iterator();
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader20, parseErrorList22);
        org.jsoup.parser.Token.Tag tag27 = tokeniser26.tagPending;
        org.jsoup.parser.Token.Tag tag29 = tokeniser26.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype30 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype31 = doctype30.asDoctype();
        java.lang.String str32 = doctype30.tokenType();
        tokeniser26.emit((org.jsoup.parser.Token) doctype30);
        org.jsoup.parser.Token.Tag tag35 = tokeniser26.createTagPending(true);
        xmlTreeBuilder19.currentToken = tag35;
        org.jsoup.nodes.Attributes attributes37 = tag35.attributes;
        startTag15.attributes = attributes37;
        tokeniser6.tagPending = startTag15;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(tag13);
        org.junit.Assert.assertTrue("'" + tokenType16 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType16.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertNotNull(parseErrorStream23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNull(tag27);
        org.junit.Assert.assertNotNull(tag29);
        org.junit.Assert.assertNotNull(doctype31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Doctype" + "'", str32, "Doctype");
        org.junit.Assert.assertNotNull(tag35);
        org.junit.Assert.assertNotNull(attributes37);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse(" EndTag", "-1: []");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("t");
        boolean boolean3 = characterReader1.matchesIgnoreCase("hi!#");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.Token.Doctype doctype20 = new org.jsoup.parser.Token.Doctype();
        java.lang.StringBuilder stringBuilder21 = doctype20.systemIdentifier;
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder3.insert(doctype20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(stringBuilder21);
        org.junit.Assert.assertEquals(stringBuilder21.toString(), "");
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        htmlTreeBuilder0.generateImpliedEndTags();
        org.jsoup.parser.Token token10 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        boolean boolean21 = parseErrorList14.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        org.jsoup.nodes.Document document22 = htmlTreeBuilder0.parse("[]", "hi!", parseErrorList19);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState23 = org.jsoup.parser.HtmlTreeBuilderState.InTableBody;
        htmlTreeBuilder0.error(htmlTreeBuilderState23);
        org.jsoup.parser.Token.EndTag endTag26 = new org.jsoup.parser.Token.EndTag("<hi!>");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder27 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int32 = parseErrorList31.getMaxSize();
        org.jsoup.nodes.Document document33 = htmlTreeBuilder27.parse("0: Doctype", "hi!", parseErrorList31);
        htmlTreeBuilder27.generateImpliedEndTags("hi!#");
        htmlTreeBuilder27.generateImpliedEndTags();
        org.jsoup.parser.Token token37 = htmlTreeBuilder27.currentToken;
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream42 = parseErrorList41.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList41.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor44 = parseErrorList41.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int47 = parseErrorList46.getMaxSize();
        boolean boolean48 = parseErrorList41.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList46);
        org.jsoup.nodes.Document document49 = htmlTreeBuilder27.parse("[]", "hi!", parseErrorList46);
        org.jsoup.nodes.Element element50 = null;
        boolean boolean51 = htmlTreeBuilder27.removeFromStack(element50);
        boolean boolean52 = htmlTreeBuilderState23.process((org.jsoup.parser.Token) endTag26, htmlTreeBuilder27);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(token10);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState23);
        org.junit.Assert.assertNotNull(parseErrorList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(token37);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertNotNull(parseErrorStream42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNotNull(parseErrorItor44);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag("a");
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag1.appendTagName("hi!");
        startTag1.appendAttributeName('4');
        startTag1.appendAttributeName('\000');
        startTag1.appendAttributeValue('#');
        org.jsoup.parser.Token.StartTag startTag10 = startTag1.asStartTag();
        startTag10.tagName = "1: Doctype";
        org.junit.Assert.assertNotNull(startTag10);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
        org.jsoup.parser.TreeBuilder treeBuilder2 = null;
        org.jsoup.parser.Parser parser3 = parser1.setTreeBuilder(treeBuilder2);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder4 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document5 = xmlTreeBuilder4.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder6 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        boolean boolean16 = parseErrorList11.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        xmlTreeBuilder6.initialiseParse("<!---->", "hi!", parseErrorList11);
        xmlTreeBuilder4.errors = parseErrorList11;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList19 = xmlTreeBuilder4.stack;
        org.jsoup.parser.CharacterReader characterReader20 = null;
        xmlTreeBuilder4.reader = characterReader20;
        org.jsoup.parser.Parser parser22 = parser1.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder4);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder23 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser24 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder23);
        boolean boolean25 = htmlTreeBuilder23.isFosterInserts();
        htmlTreeBuilder23.clearFormattingElementsToLastMarker();
        htmlTreeBuilder23.newPendingTableCharacters();
        htmlTreeBuilder23.clearFormattingElementsToLastMarker();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState29 = htmlTreeBuilder23.originalState();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder30 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int35 = parseErrorList34.getMaxSize();
        org.jsoup.nodes.Document document36 = htmlTreeBuilder30.parse("0: Doctype", "hi!", parseErrorList34);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder37 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int42 = parseErrorList41.getMaxSize();
        org.jsoup.nodes.Document document43 = htmlTreeBuilder37.parse("0: Doctype", "hi!", parseErrorList41);
        boolean boolean44 = htmlTreeBuilder37.framesetOk();
        org.jsoup.nodes.Document document47 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder37.setHeadElement((org.jsoup.nodes.Element) document47);
        org.jsoup.nodes.Element element49 = htmlTreeBuilder37.pop();
        htmlTreeBuilder30.pushActiveFormattingElements(element49);
        boolean boolean51 = htmlTreeBuilder23.isInActiveFormattingElements(element49);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState52 = org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup;
        htmlTreeBuilder23.transition(htmlTreeBuilderState52);
        htmlTreeBuilder23.markInsertionMode();
        org.jsoup.parser.Parser parser55 = parser1.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder23);
        htmlTreeBuilder23.setFosterInserts(false);
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNull(document5);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(elementList19);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(htmlTreeBuilderState29);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(element49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState52);
        org.junit.Assert.assertNotNull(parser55);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("EndTag", "a");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document11);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(document11);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        startTag0.appendAttributeValue("hi!");
        boolean boolean3 = startTag0.selfClosing;
        java.lang.String str4 = startTag0.tokenType();
        org.jsoup.nodes.Attributes attributes5 = startTag0.getAttributes();
        boolean boolean6 = startTag0.isStartTag();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "StartTag" + "'", str4, "StartTag");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        boolean boolean5 = tokenQueue1.matchChomp("<!---->");
        boolean boolean7 = tokenQueue1.matchesCS("EndTag");
        java.lang.String str8 = tokenQueue1.consumeElementSelector();
        boolean boolean9 = tokenQueue1.matchesWhitespace();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "EndTag" + "'", str8, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        boolean boolean7 = tokeniser6.isAppropriateEndTagToken();
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream12 = parseErrorList11.stream();
        boolean boolean13 = parseErrorList11.canAddError();
        org.jsoup.parser.ParseError parseError16 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str17 = parseError16.getErrorMessage();
        boolean boolean18 = parseErrorList11.add(parseError16);
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        org.jsoup.parser.Token.Tag tag28 = tokeniser25.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype29 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype30 = doctype29.asDoctype();
        java.lang.String str31 = doctype29.tokenType();
        tokeniser25.emit((org.jsoup.parser.Token) doctype29);
        org.jsoup.parser.ITokeniserState iTokeniserState33 = tokeniser25.getState();
        org.jsoup.parser.Token.Comment comment34 = new org.jsoup.parser.Token.Comment();
        java.lang.String str35 = comment34.toString();
        java.lang.StringBuilder stringBuilder36 = comment34.data;
        boolean boolean37 = comment34.isEndTag();
        boolean boolean38 = comment34.isComment();
        tokeniser25.commentPending = comment34;
        int int40 = parseErrorList11.lastIndexOf((java.lang.Object) comment34);
        tokeniser6.commentPending = comment34;
        tokeniser6.createDoctypePending();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertNotNull(parseErrorStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(doctype30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Doctype" + "'", str31, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<!---->" + "'", str35, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder36);
        org.junit.Assert.assertEquals(stringBuilder36.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.jsoup.parser.Token.StartTag startTag0 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes1 = startTag0.getAttributes();
        java.lang.String str2 = startTag0.tagName;
        org.junit.Assert.assertNotNull(attributes1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.nodes.Document document3 = parser0.parseInput("", "hi!");
        org.jsoup.nodes.Document document6 = parser0.parseInput("hi!", "hi!");
        boolean boolean7 = parser0.isTrackErrors();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        java.lang.String[] strArray13 = null;
        boolean boolean14 = htmlTreeBuilder0.inScope("EndTag", strArray13);
        htmlTreeBuilder0.resetInsertionMode();
        boolean boolean17 = htmlTreeBuilder0.inListItemScope("Doctype");
        org.jsoup.parser.Token.EndTag endTag18 = new org.jsoup.parser.Token.EndTag();
        java.lang.String str19 = endTag18.tagName;
        org.jsoup.nodes.Attributes attributes20 = endTag18.attributes;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = htmlTreeBuilder0.process((org.jsoup.parser.Token) endTag18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(attributes20);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
        org.jsoup.parser.TreeBuilder treeBuilder2 = null;
        org.jsoup.parser.Parser parser3 = parser1.setTreeBuilder(treeBuilder2);
        java.util.List<org.jsoup.parser.ParseError> parseErrorList4 = parser3.getErrors();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder5 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int10 = parseErrorList9.getMaxSize();
        org.jsoup.nodes.Document document11 = htmlTreeBuilder5.parse("0: Doctype", "hi!", parseErrorList9);
        boolean boolean12 = htmlTreeBuilder5.framesetOk();
        org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder5.setHeadElement((org.jsoup.nodes.Element) document15);
        org.jsoup.parser.Token.Comment comment17 = new org.jsoup.parser.Token.Comment();
        java.lang.String str18 = comment17.toString();
        boolean boolean19 = comment17.isCharacter();
        htmlTreeBuilder5.insert(comment17);
        org.jsoup.parser.Parser parser21 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder5);
        org.jsoup.parser.Parser parser22 = parser3.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder5);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList28 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int29 = parseErrorList28.getMaxSize();
        org.jsoup.nodes.Document document30 = htmlTreeBuilder24.parse("0: Doctype", "hi!", parseErrorList28);
        boolean boolean31 = htmlTreeBuilder24.framesetOk();
        org.jsoup.parser.Token token32 = htmlTreeBuilder24.currentToken;
        org.jsoup.nodes.Document document33 = htmlTreeBuilder24.doc;
        java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("<!---->", (org.jsoup.nodes.Element) document33, "-1: []");
        htmlTreeBuilder5.pushActiveFormattingElements((org.jsoup.nodes.Element) document33);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder37 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int42 = parseErrorList41.getMaxSize();
        org.jsoup.nodes.Document document43 = htmlTreeBuilder37.parse("0: Doctype", "hi!", parseErrorList41);
        boolean boolean44 = htmlTreeBuilder37.framesetOk();
        org.jsoup.parser.Token token45 = htmlTreeBuilder37.currentToken;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState46 = org.jsoup.parser.HtmlTreeBuilderState.InTable;
        htmlTreeBuilder37.error(htmlTreeBuilderState46);
        org.jsoup.nodes.Document document51 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        java.util.List<org.jsoup.nodes.Node> nodeList53 = org.jsoup.parser.Parser.parseFragment("EndTag", (org.jsoup.nodes.Element) document51, "<hi!>");
        boolean boolean54 = htmlTreeBuilder37.isInActiveFormattingElements((org.jsoup.nodes.Element) document51);
        org.jsoup.parser.Parser parser55 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.nodes.Document document58 = parser55.parseInput("", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            htmlTreeBuilder5.replaceActiveFormattingElement((org.jsoup.nodes.Element) document51, (org.jsoup.nodes.Element) document58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNull(parseErrorList4);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<!---->" + "'", str18, "<!---->");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parser22);
        org.junit.Assert.assertNotNull(parseErrorList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(token32);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(nodeList35);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(token45);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState46);
        org.junit.Assert.assertNotNull(document51);
        org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(parser55);
        org.junit.Assert.assertNotNull(document58);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList9 = xmlTreeBuilder0.stack;
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        boolean boolean21 = parseErrorList14.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList19);
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        boolean boolean26 = parseErrorList24.canAddError();
        boolean boolean27 = parseErrorList19.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
        java.util.List<org.jsoup.nodes.Node> nodeList28 = xmlTreeBuilder0.parseFragment("StartTag", "<!---->", parseErrorList24);
        org.jsoup.parser.ParseError[] parseErrorArray29 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList30 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30, parseErrorArray29);
        org.jsoup.parser.ParseError[] parseErrorArray32 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList33 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33, parseErrorArray32);
        boolean boolean35 = parseErrorList30.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33);
        boolean boolean36 = parseErrorList24.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor37 = parseErrorList24.iterator();
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(elementList9);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertNotNull(parseErrorArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(parseErrorArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parseErrorItor37);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        java.lang.String str4 = tag1.getName();
        boolean boolean5 = tag1.formatAsBlock();
        boolean boolean6 = tag1.isKnownTag();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype12 = tokeniser6.doctypePending;
        org.jsoup.parser.Token.Comment comment13 = new org.jsoup.parser.Token.Comment();
        java.lang.String str14 = comment13.toString();
        java.lang.StringBuilder stringBuilder15 = comment13.data;
        boolean boolean16 = comment13.isEndTag();
        java.lang.String str17 = comment13.toString();
        tokeniser6.commentPending = comment13;
        org.jsoup.parser.CharacterReader characterReader19 = null;
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor23 = parseErrorList21.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList21.iterator();
        org.jsoup.parser.Tokeniser tokeniser25 = new org.jsoup.parser.Tokeniser(characterReader19, parseErrorList21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser25.tagPending;
        org.jsoup.parser.Token.Tag tag28 = tokeniser25.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype29 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype30 = doctype29.asDoctype();
        java.lang.String str31 = doctype29.tokenType();
        tokeniser25.emit((org.jsoup.parser.Token) doctype29);
        org.jsoup.parser.Token.Tag tag34 = tokeniser25.createTagPending(true);
        org.jsoup.parser.Token.EndTag endTag35 = new org.jsoup.parser.Token.EndTag();
        endTag35.newAttribute();
        tokeniser25.tagPending = endTag35;
        org.jsoup.parser.CharacterReader characterReader38 = null;
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream41 = parseErrorList40.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList40.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList40.iterator();
        org.jsoup.parser.Tokeniser tokeniser44 = new org.jsoup.parser.Tokeniser(characterReader38, parseErrorList40);
        org.jsoup.parser.Token.Tag tag45 = tokeniser44.tagPending;
        tokeniser44.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag49 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType50 = startTag49.type;
        startTag49.appendTagName('#');
        tokeniser44.tagPending = startTag49;
        org.jsoup.parser.TokeniserState tokeniserState54 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser44.transition((org.jsoup.parser.ITokeniserState) tokeniserState54);
        org.jsoup.parser.Token.Doctype doctype56 = new org.jsoup.parser.Token.Doctype();
        boolean boolean57 = doctype56.isCharacter();
        tokeniser44.doctypePending = doctype56;
        org.jsoup.parser.Token.Doctype doctype59 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype60 = doctype59.asDoctype();
        java.lang.StringBuilder stringBuilder61 = doctype60.name;
        tokeniser44.dataBuffer = stringBuilder61;
        tokeniser44.emitDoctypePending();
        org.jsoup.parser.TokeniserState tokeniserState64 = org.jsoup.parser.TokeniserState.AttributeValue_doubleQuoted;
        tokeniser44.eofError((org.jsoup.parser.ITokeniserState) tokeniserState64);
        tokeniser25.transition((org.jsoup.parser.ITokeniserState) tokeniserState64);
        tokeniser6.transition((org.jsoup.parser.ITokeniserState) tokeniserState64);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNull(doctype12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "<!---->" + "'", str14, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<!---->" + "'", str17, "<!---->");
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertNotNull(parseErrorItor23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNull(tag26);
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(doctype30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Doctype" + "'", str31, "Doctype");
        org.junit.Assert.assertNotNull(tag34);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertNotNull(parseErrorStream41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNull(tag45);
        org.junit.Assert.assertTrue("'" + tokenType50 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType50.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doctype60);
        org.junit.Assert.assertNotNull(stringBuilder61);
        org.junit.Assert.assertEquals(stringBuilder61.toString(), "");
        org.junit.Assert.assertNotNull(tokeniserState64);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("<!---->");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder10 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader11 = null;
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList13.iterator();
        org.jsoup.parser.Tokeniser tokeniser17 = new org.jsoup.parser.Tokeniser(characterReader11, parseErrorList13);
        org.jsoup.parser.Token.Tag tag18 = tokeniser17.tagPending;
        org.jsoup.parser.Token.Tag tag20 = tokeniser17.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype21 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype22 = doctype21.asDoctype();
        java.lang.String str23 = doctype21.tokenType();
        tokeniser17.emit((org.jsoup.parser.Token) doctype21);
        org.jsoup.parser.Token.Tag tag26 = tokeniser17.createTagPending(true);
        xmlTreeBuilder10.currentToken = tag26;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        boolean boolean35 = htmlTreeBuilder28.framesetOk();
        org.jsoup.nodes.Document document38 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder28.setHeadElement((org.jsoup.nodes.Element) document38);
        xmlTreeBuilder10.doc = document38;
        org.jsoup.parser.ParseErrorList parseErrorList44 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream45 = parseErrorList44.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor46 = parseErrorList44.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor47 = parseErrorList44.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int50 = parseErrorList49.getMaxSize();
        boolean boolean51 = parseErrorList44.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList49);
        xmlTreeBuilder10.initialiseParse("hi!#", "0: []", parseErrorList49);
        org.jsoup.parser.Token.Comment comment53 = new org.jsoup.parser.Token.Comment();
        java.lang.String str54 = comment53.getData();
        xmlTreeBuilder10.insert(comment53);
        java.lang.StringBuilder stringBuilder56 = comment53.data;
        tokeniser6.commentPending = comment53;
        tokeniser6.emitCommentPending();
        tokeniser6.emit(' ');
        // The following exception was thrown during execution in test generation
        try {
            tokeniser6.emitTagPending();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNull(tag18);
        org.junit.Assert.assertNotNull(tag20);
        org.junit.Assert.assertNotNull(doctype22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Doctype" + "'", str23, "Doctype");
        org.junit.Assert.assertNotNull(tag26);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNotNull(parseErrorList44);
        org.junit.Assert.assertNotNull(parseErrorStream45);
        org.junit.Assert.assertNotNull(parseErrorItor46);
        org.junit.Assert.assertNotNull(parseErrorItor47);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(stringBuilder56);
        org.junit.Assert.assertEquals(stringBuilder56.toString(), "");
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str3 = tokenQueue1.chompTo("Doctype");
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        char char6 = tokenQueue1.peek();
        boolean boolean8 = tokenQueue1.matchChomp("<hi!#>");
        boolean boolean9 = tokenQueue1.consumeWhitespace();
        tokenQueue1.advance();
        boolean boolean12 = tokenQueue1.matchChomp("<!---->");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EndTag" + "'", str3, "EndTag");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\000' + "'", char6 == '\000');
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.jsoup.parser.ParseErrorList parseErrorList0 = org.jsoup.parser.ParseErrorList.noTracking();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor2 = parseErrorList0.listIterator((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList0);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        java.lang.String[] strArray10 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str11 = tokenQueue1.consumeToAny(strArray10);
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.Tokeniser tokeniser18 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList14);
        org.jsoup.parser.Token.Tag tag19 = tokeniser18.tagPending;
        java.lang.StringBuilder stringBuilder20 = null;
        tokeniser18.dataBuffer = stringBuilder20;
        org.jsoup.parser.Token.EndTag endTag22 = new org.jsoup.parser.Token.EndTag();
        char[] charArray25 = new char[] { '#', '#' };
        endTag22.appendAttributeValue(charArray25);
        tokeniser18.emit(charArray25);
        boolean boolean28 = tokenQueue1.matchesAny(charArray25);
        java.lang.String str29 = tokenQueue1.consumeCssIdentifier();
        tokenQueue1.addFirst("ndTag");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder32 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int37 = parseErrorList36.getMaxSize();
        org.jsoup.nodes.Document document38 = htmlTreeBuilder32.parse("0: Doctype", "hi!", parseErrorList36);
        boolean boolean39 = htmlTreeBuilder32.framesetOk();
        org.jsoup.parser.Parser parser40 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser42 = parser40.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document45 = parser40.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document48 = parser40.parseInput("<hi!>", "[]");
        htmlTreeBuilder32.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document48);
        boolean boolean50 = htmlTreeBuilder32.isFragmentParsing();
        org.jsoup.parser.TokenQueue tokenQueue52 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean53 = tokenQueue52.isEmpty();
        boolean boolean54 = tokenQueue52.consumeWhitespace();
        java.lang.String str55 = tokenQueue52.consumeWord();
        boolean boolean56 = tokenQueue52.matchesWhitespace();
        java.lang.String[] strArray61 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str62 = tokenQueue52.consumeToAny(strArray61);
        boolean boolean63 = htmlTreeBuilder32.inScope(strArray61);
        boolean boolean64 = tokenQueue1.matchesAny(strArray61);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNull(tag19);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(parser40);
        org.junit.Assert.assertNotNull(parser42);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "EndTag" + "'", str55, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.CharacterReader characterReader20 = null;
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream23 = parseErrorList22.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList22.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList22.iterator();
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader20, parseErrorList22);
        org.jsoup.parser.Token.Tag tag27 = tokeniser26.tagPending;
        org.jsoup.parser.Token.Tag tag29 = tokeniser26.createTagPending(true);
        java.lang.StringBuilder stringBuilder30 = tokeniser26.dataBuffer;
        tokeniser26.createTempBuffer();
        xmlTreeBuilder3.tokeniser = tokeniser26;
        tokeniser26.emitTagPending();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertNotNull(parseErrorStream23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNull(tag27);
        org.junit.Assert.assertNotNull(tag29);
        org.junit.Assert.assertNull(stringBuilder30);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag("\uffff");
        java.lang.String str2 = endTag1.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uffff>" + "'", str2, "\uffff>");
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList(0, (int) (byte) 0);
        htmlTreeBuilder0.initialiseParse("<hi!>", "hi!#", parseErrorList5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.parser.ParseError> parseErrorList9 = parseErrorList5.subList((int) 'S', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(83) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.CharacterReader characterReader16 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean18 = characterReader16.matches("[100: ]");
        htmlTreeBuilder0.reader = characterReader16;
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        org.jsoup.parser.CharacterReader characterReader22 = new org.jsoup.parser.CharacterReader("StartTag");
        characterReader22.advance();
        characterReader22.advance();
        java.lang.String str26 = characterReader22.consumeTo('E');
        htmlTreeBuilder0.reader = characterReader22;
        java.lang.String str28 = characterReader22.toString();
        java.lang.String str29 = characterReader22.consumeLetterSequence();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "artTag" + "'", str26, "artTag");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        java.lang.String str6 = tokenQueue1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype11 = doctype10.asDoctype();
        java.lang.String str12 = doctype10.tokenType();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        org.jsoup.parser.ITokeniserState iTokeniserState14 = tokeniser6.getState();
        org.jsoup.parser.Token token15 = tokeniser6.read();
        org.jsoup.parser.Token.StartTag startTag17 = new org.jsoup.parser.Token.StartTag("hi!");
        startTag17.appendTagName("hi!");
        startTag17.appendAttributeName('4');
        org.jsoup.parser.Token.TokenType tokenType22 = startTag17.type;
        token15.type = tokenType22;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertNotNull(doctype11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Doctype" + "'", str12, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState14);
        org.junit.Assert.assertNotNull(token15);
        org.junit.Assert.assertTrue("'" + tokenType22 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType22.equals(org.jsoup.parser.Token.TokenType.StartTag));
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        boolean boolean37 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.CharacterReader characterReader38 = null;
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream41 = parseErrorList40.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList40.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList40.iterator();
        org.jsoup.parser.Tokeniser tokeniser44 = new org.jsoup.parser.Tokeniser(characterReader38, parseErrorList40);
        org.jsoup.parser.Token.Tag tag45 = tokeniser44.tagPending;
        org.jsoup.parser.Token.Tag tag47 = tokeniser44.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype48 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype49 = doctype48.asDoctype();
        java.lang.String str50 = doctype48.tokenType();
        tokeniser44.emit((org.jsoup.parser.Token) doctype48);
        org.jsoup.parser.ITokeniserState iTokeniserState52 = tokeniser44.getState();
        org.jsoup.parser.Token token53 = tokeniser44.read();
        htmlTreeBuilder0.tokeniser = tokeniser44;
        org.jsoup.parser.CharacterReader characterReader55 = null;
        org.jsoup.parser.ParseErrorList parseErrorList57 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream58 = parseErrorList57.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor59 = parseErrorList57.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor60 = parseErrorList57.iterator();
        org.jsoup.parser.Tokeniser tokeniser61 = new org.jsoup.parser.Tokeniser(characterReader55, parseErrorList57);
        boolean boolean62 = tokeniser61.isAppropriateEndTagToken();
        org.jsoup.parser.Token.Tag tag64 = tokeniser61.createTagPending(true);
        org.jsoup.parser.ParseErrorList parseErrorList66 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream67 = parseErrorList66.stream();
        boolean boolean68 = parseErrorList66.canAddError();
        org.jsoup.parser.ParseError parseError71 = new org.jsoup.parser.ParseError((int) (byte) 100, "");
        java.lang.String str72 = parseError71.getErrorMessage();
        boolean boolean73 = parseErrorList66.add(parseError71);
        org.jsoup.parser.CharacterReader characterReader74 = null;
        org.jsoup.parser.ParseErrorList parseErrorList76 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream77 = parseErrorList76.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor78 = parseErrorList76.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor79 = parseErrorList76.iterator();
        org.jsoup.parser.Tokeniser tokeniser80 = new org.jsoup.parser.Tokeniser(characterReader74, parseErrorList76);
        org.jsoup.parser.Token.Tag tag81 = tokeniser80.tagPending;
        org.jsoup.parser.Token.Tag tag83 = tokeniser80.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype84 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype85 = doctype84.asDoctype();
        java.lang.String str86 = doctype84.tokenType();
        tokeniser80.emit((org.jsoup.parser.Token) doctype84);
        org.jsoup.parser.ITokeniserState iTokeniserState88 = tokeniser80.getState();
        org.jsoup.parser.Token.Comment comment89 = new org.jsoup.parser.Token.Comment();
        java.lang.String str90 = comment89.toString();
        java.lang.StringBuilder stringBuilder91 = comment89.data;
        boolean boolean92 = comment89.isEndTag();
        boolean boolean93 = comment89.isComment();
        tokeniser80.commentPending = comment89;
        int int95 = parseErrorList66.lastIndexOf((java.lang.Object) comment89);
        tokeniser61.commentPending = comment89;
        org.jsoup.parser.TokeniserState tokeniserState97 = org.jsoup.parser.TokeniserState.RawtextLessthanSign;
        tokeniser61.transition((org.jsoup.parser.ITokeniserState) tokeniserState97);
        tokeniser44.error((org.jsoup.parser.ITokeniserState) tokeniserState97);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertNotNull(parseErrorStream41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNull(tag45);
        org.junit.Assert.assertNotNull(tag47);
        org.junit.Assert.assertNotNull(doctype49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Doctype" + "'", str50, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState52);
        org.junit.Assert.assertNotNull(token53);
        org.junit.Assert.assertNotNull(parseErrorList57);
        org.junit.Assert.assertNotNull(parseErrorStream58);
        org.junit.Assert.assertNotNull(parseErrorItor59);
        org.junit.Assert.assertNotNull(parseErrorItor60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(tag64);
        org.junit.Assert.assertNotNull(parseErrorList66);
        org.junit.Assert.assertNotNull(parseErrorStream67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(parseErrorList76);
        org.junit.Assert.assertNotNull(parseErrorStream77);
        org.junit.Assert.assertNotNull(parseErrorItor78);
        org.junit.Assert.assertNotNull(parseErrorItor79);
        org.junit.Assert.assertNull(tag81);
        org.junit.Assert.assertNotNull(tag83);
        org.junit.Assert.assertNotNull(doctype85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Doctype" + "'", str86, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "<!---->" + "'", str90, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder91);
        org.junit.Assert.assertEquals(stringBuilder91.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertNotNull(tokeniserState97);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        boolean boolean18 = htmlTreeBuilder0.isFragmentParsing();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder19 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList26 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream27 = parseErrorList26.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor28 = parseErrorList26.iterator();
        boolean boolean29 = parseErrorList24.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26);
        xmlTreeBuilder19.initialiseParse("<!---->", "hi!", parseErrorList24);
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document35 = xmlTreeBuilder19.parse("", "[]", parseErrorList34);
        boolean boolean36 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document35);
        org.jsoup.parser.ParseErrorList parseErrorList41 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList43 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream44 = parseErrorList43.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor45 = parseErrorList43.iterator();
        boolean boolean46 = parseErrorList41.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList43);
        boolean boolean47 = parseErrorList41.canAddError();
        org.jsoup.parser.CharacterReader characterReader48 = null;
        org.jsoup.parser.ParseErrorList parseErrorList50 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream51 = parseErrorList50.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor52 = parseErrorList50.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor53 = parseErrorList50.iterator();
        org.jsoup.parser.Tokeniser tokeniser54 = new org.jsoup.parser.Tokeniser(characterReader48, parseErrorList50);
        org.jsoup.parser.Token.Tag tag55 = tokeniser54.tagPending;
        java.lang.StringBuilder stringBuilder56 = null;
        tokeniser54.dataBuffer = stringBuilder56;
        org.jsoup.parser.Token.EndTag endTag58 = new org.jsoup.parser.Token.EndTag();
        char[] charArray61 = new char[] { '#', '#' };
        endTag58.appendAttributeValue(charArray61);
        tokeniser54.emit(charArray61);
        boolean boolean64 = parseErrorList41.remove((java.lang.Object) tokeniser54);
        org.jsoup.nodes.Document document65 = htmlTreeBuilder0.parse("<!---->", "\uffff", parseErrorList41);
        org.jsoup.parser.Parser parser66 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList26);
        org.junit.Assert.assertNotNull(parseErrorStream27);
        org.junit.Assert.assertNotNull(parseErrorItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parseErrorList43);
        org.junit.Assert.assertNotNull(parseErrorStream44);
        org.junit.Assert.assertNotNull(parseErrorItor45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(parseErrorList50);
        org.junit.Assert.assertNotNull(parseErrorStream51);
        org.junit.Assert.assertNotNull(parseErrorItor52);
        org.junit.Assert.assertNotNull(parseErrorItor53);
        org.junit.Assert.assertNull(tag55);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(document65);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        java.util.List<org.jsoup.parser.ParseError> parseErrorList20 = parser19.getErrors();
        boolean boolean21 = parser19.isTrackErrors();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.nodes.Document document3 = parser0.parseInput("", "hi!");
        org.jsoup.nodes.Document document6 = parser0.parseInput("S", "a");
        java.util.List<org.jsoup.parser.ParseError> parseErrorList7 = parser0.getErrors();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList7);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        org.jsoup.parser.ParseErrorList parseErrorList18 = htmlTreeBuilder0.errors;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder19 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList23 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int24 = parseErrorList23.getMaxSize();
        org.jsoup.nodes.Document document25 = htmlTreeBuilder19.parse("0: Doctype", "hi!", parseErrorList23);
        boolean boolean26 = htmlTreeBuilder19.framesetOk();
        org.jsoup.nodes.Document document29 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder19.setHeadElement((org.jsoup.nodes.Element) document29);
        org.jsoup.nodes.Element element32 = htmlTreeBuilder19.getActiveFormattingElement("0: Doctype");
        htmlTreeBuilder19.runParser();
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder36 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader37 = null;
        org.jsoup.parser.ParseErrorList parseErrorList39 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream40 = parseErrorList39.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor41 = parseErrorList39.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList39.iterator();
        org.jsoup.parser.Tokeniser tokeniser43 = new org.jsoup.parser.Tokeniser(characterReader37, parseErrorList39);
        org.jsoup.parser.Token.Tag tag44 = tokeniser43.tagPending;
        org.jsoup.parser.Token.Tag tag46 = tokeniser43.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype47 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype48 = doctype47.asDoctype();
        java.lang.String str49 = doctype47.tokenType();
        tokeniser43.emit((org.jsoup.parser.Token) doctype47);
        org.jsoup.parser.Token.Tag tag52 = tokeniser43.createTagPending(true);
        xmlTreeBuilder36.currentToken = tag52;
        org.jsoup.nodes.Attributes attributes54 = tag52.attributes;
        org.jsoup.parser.Token.StartTag startTag55 = new org.jsoup.parser.Token.StartTag("", attributes54);
        org.jsoup.parser.Token.StartTag startTag56 = new org.jsoup.parser.Token.StartTag("0: Doctype", attributes54);
        startTag56.appendAttributeName('\uffff');
        org.jsoup.nodes.FormElement formElement60 = htmlTreeBuilder19.insertForm(startTag56, true);
        java.lang.String str61 = startTag56.toString();
        int int62 = parseErrorList18.indexOf((java.lang.Object) str61);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNull(element32);
        org.junit.Assert.assertNotNull(parseErrorList39);
        org.junit.Assert.assertNotNull(parseErrorStream40);
        org.junit.Assert.assertNotNull(parseErrorItor41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNull(tag44);
        org.junit.Assert.assertNotNull(tag46);
        org.junit.Assert.assertNotNull(doctype48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Doctype" + "'", str49, "Doctype");
        org.junit.Assert.assertNotNull(tag52);
        org.junit.Assert.assertNotNull(attributes54);
        org.junit.Assert.assertNotNull(formElement60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "<0: Doctype>" + "'", str61, "<0: Doctype>");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document1 = xmlTreeBuilder0.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder2 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList9 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList9.iterator();
        boolean boolean12 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList9);
        xmlTreeBuilder2.initialiseParse("<!---->", "hi!", parseErrorList7);
        xmlTreeBuilder0.errors = parseErrorList7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList15 = xmlTreeBuilder0.stack;
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList18);
        org.jsoup.parser.Token.Tag tag23 = tokeniser22.tagPending;
        org.jsoup.parser.Token.Tag tag25 = tokeniser22.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype26 = tokeniser22.doctypePending;
        xmlTreeBuilder0.tokeniser = tokeniser22;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder28 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document29 = xmlTreeBuilder28.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder30 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList35 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList37 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream38 = parseErrorList37.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor39 = parseErrorList37.iterator();
        boolean boolean40 = parseErrorList35.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList37);
        xmlTreeBuilder30.initialiseParse("<!---->", "hi!", parseErrorList35);
        xmlTreeBuilder28.errors = parseErrorList35;
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream47 = parseErrorList46.stream();
        xmlTreeBuilder28.initialiseParse("a", "[]", parseErrorList46);
        org.jsoup.parser.Token.Character character50 = new org.jsoup.parser.Token.Character("-1: []");
        xmlTreeBuilder28.insert(character50);
        java.lang.String str52 = character50.toString();
        java.lang.String str53 = character50.getData();
        // The following exception was thrown during execution in test generation
        try {
            xmlTreeBuilder0.insert(character50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(elementList15);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNull(tag23);
        org.junit.Assert.assertNotNull(tag25);
        org.junit.Assert.assertNull(doctype26);
        org.junit.Assert.assertNull(document29);
        org.junit.Assert.assertNotNull(parseErrorList37);
        org.junit.Assert.assertNotNull(parseErrorStream38);
        org.junit.Assert.assertNotNull(parseErrorItor39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(parseErrorStream47);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-1: []" + "'", str52, "-1: []");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1: []" + "'", str53, "-1: []");
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray9 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList10 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList10, characterArray9);
        htmlTreeBuilder0.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList10);
        boolean boolean13 = htmlTreeBuilder0.isFosterInserts();
        org.jsoup.parser.ParseErrorList parseErrorList18 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        htmlTreeBuilder0.initialiseParse("</hi![]>", "0: []", parseErrorList18);
        htmlTreeBuilder0.runParser();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(characterArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        boolean boolean2 = htmlTreeBuilder0.isFosterInserts();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        htmlTreeBuilder0.newPendingTableCharacters();
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState6 = htmlTreeBuilder0.originalState();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder7 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int12 = parseErrorList11.getMaxSize();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder7.parse("0: Doctype", "hi!", parseErrorList11);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder14 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int19 = parseErrorList18.getMaxSize();
        org.jsoup.nodes.Document document20 = htmlTreeBuilder14.parse("0: Doctype", "hi!", parseErrorList18);
        boolean boolean21 = htmlTreeBuilder14.framesetOk();
        org.jsoup.nodes.Document document24 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder14.setHeadElement((org.jsoup.nodes.Element) document24);
        org.jsoup.nodes.Element element26 = htmlTreeBuilder14.pop();
        htmlTreeBuilder7.pushActiveFormattingElements(element26);
        boolean boolean28 = htmlTreeBuilder0.isInActiveFormattingElements(element26);
        org.jsoup.parser.Token.StartTag startTag29 = new org.jsoup.parser.Token.StartTag();
        startTag29.appendAttributeValue("hi!");
        startTag29.appendAttributeValue("");
        org.jsoup.nodes.Attributes attributes34 = null;
        startTag29.attributes = attributes34;
        startTag29.appendAttributeValue("StartTag");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.FormElement formElement39 = htmlTreeBuilder0.insertForm(startTag29, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(htmlTreeBuilderState6);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        java.lang.StringBuilder stringBuilder8 = null;
        tokeniser6.dataBuffer = stringBuilder8;
        org.jsoup.parser.Token.Tag tag11 = tokeniser6.createTagPending(false);
        org.jsoup.parser.Token.Tag tag13 = tokeniser6.createTagPending(false);
        tag13.appendAttributeValue("\ufffd>");
        boolean boolean16 = tag13.selfClosing;
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(tag13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.EndTagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        tokeniser7.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag12 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType13 = startTag12.type;
        startTag12.appendTagName('#');
        tokeniser7.tagPending = startTag12;
        org.jsoup.parser.TokeniserState tokeniserState17 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser7.transition((org.jsoup.parser.ITokeniserState) tokeniserState17);
        tokeniser7.createDoctypePending();
        org.jsoup.parser.CharacterReader characterReader21 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean23 = characterReader21.matches('\000');
        characterReader21.mark();
        boolean boolean25 = characterReader21.isEmpty();
        org.jsoup.parser.TokenQueue tokenQueue27 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str29 = tokenQueue27.chompTo("Doctype");
        java.lang.String str30 = tokenQueue27.consumeWord();
        boolean boolean31 = tokenQueue27.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag32 = new org.jsoup.parser.Token.EndTag();
        char[] charArray35 = new char[] { '#', '#' };
        endTag32.appendAttributeValue(charArray35);
        boolean boolean37 = tokenQueue27.matchesAny(charArray35);
        boolean boolean38 = characterReader21.matchesAny(charArray35);
        miniSoupTokeniserState0.read(tokeniser7, characterReader21);
        org.jsoup.parser.CharacterReader characterReader40 = null;
        org.jsoup.parser.ParseErrorList parseErrorList42 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream43 = parseErrorList42.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor44 = parseErrorList42.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor45 = parseErrorList42.iterator();
        org.jsoup.parser.Tokeniser tokeniser46 = new org.jsoup.parser.Tokeniser(characterReader40, parseErrorList42);
        org.jsoup.parser.Token.Tag tag47 = tokeniser46.tagPending;
        tokeniser46.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag51 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType52 = startTag51.type;
        startTag51.appendTagName('#');
        tokeniser46.tagPending = startTag51;
        org.jsoup.parser.TokeniserState tokeniserState56 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser46.transition((org.jsoup.parser.ITokeniserState) tokeniserState56);
        tokeniser46.createDoctypePending();
        tokeniser46.emit("100: ");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder61 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList66 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList68 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream69 = parseErrorList68.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor70 = parseErrorList68.iterator();
        boolean boolean71 = parseErrorList66.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList68);
        xmlTreeBuilder61.initialiseParse("<!---->", "hi!", parseErrorList66);
        org.jsoup.parser.CharacterReader characterReader74 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean76 = characterReader74.matches('\000');
        characterReader74.mark();
        int int78 = parseErrorList66.indexOf((java.lang.Object) characterReader74);
        miniSoupTokeniserState0.read(tokeniser46, characterReader74);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = tokeniser46.appropriateEndTagName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertTrue("'" + tokenType13 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType13.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "EndTag" + "'", str29, "EndTag");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parseErrorList42);
        org.junit.Assert.assertNotNull(parseErrorStream43);
        org.junit.Assert.assertNotNull(parseErrorItor44);
        org.junit.Assert.assertNotNull(parseErrorItor45);
        org.junit.Assert.assertNull(tag47);
        org.junit.Assert.assertTrue("'" + tokenType52 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType52.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState56);
        org.junit.Assert.assertNotNull(parseErrorList68);
        org.junit.Assert.assertNotNull(parseErrorStream69);
        org.junit.Assert.assertNotNull(parseErrorItor70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Token token8 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState9 = org.jsoup.parser.HtmlTreeBuilderState.InTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState9);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder11 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int16 = parseErrorList15.getMaxSize();
        org.jsoup.nodes.Document document17 = htmlTreeBuilder11.parse("0: Doctype", "hi!", parseErrorList15);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream22 = parseErrorList21.stream();
        boolean boolean23 = parseErrorList21.canAddError();
        org.jsoup.nodes.Document document24 = htmlTreeBuilder11.parse("EndTag", "hi!#", parseErrorList21);
        java.lang.String[] strArray32 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean33 = htmlTreeBuilder11.inScope("hi!#", strArray32);
        org.jsoup.parser.ParseErrorList parseErrorList38 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document39 = htmlTreeBuilder11.parse("0: Doctype", "", parseErrorList38);
        java.lang.String str40 = htmlTreeBuilder11.getBaseUri();
        org.jsoup.nodes.Element element41 = htmlTreeBuilder11.pop();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder42 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int47 = parseErrorList46.getMaxSize();
        org.jsoup.nodes.Document document48 = htmlTreeBuilder42.parse("0: Doctype", "hi!", parseErrorList46);
        boolean boolean49 = htmlTreeBuilder42.framesetOk();
        org.jsoup.nodes.Document document52 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder42.setHeadElement((org.jsoup.nodes.Element) document52);
        org.jsoup.parser.Token.StartTag startTag55 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType56 = startTag55.type;
        startTag55.appendTagName('#');
        boolean boolean59 = htmlTreeBuilder42.process((org.jsoup.parser.Token) startTag55);
        org.jsoup.nodes.Element element60 = htmlTreeBuilder11.insert(startTag55);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder61 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList65 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int66 = parseErrorList65.getMaxSize();
        org.jsoup.nodes.Document document67 = htmlTreeBuilder61.parse("0: Doctype", "hi!", parseErrorList65);
        htmlTreeBuilder61.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray70 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList71 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList71, characterArray70);
        htmlTreeBuilder61.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList71);
        boolean boolean74 = htmlTreeBuilder61.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag76 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement78 = htmlTreeBuilder61.insertForm(startTag76, true);
        htmlTreeBuilder11.setFormElement(formElement78);
        htmlTreeBuilder0.setFormElement(formElement78);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(token8);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState9);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertNotNull(parseErrorStream22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(element41);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertTrue("'" + tokenType56 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType56.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(element60);
        org.junit.Assert.assertNotNull(parseErrorList65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(document67);
        org.junit.Assert.assertNotNull(characterArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(formElement78);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder0.getPendingTableCharacters();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = htmlTreeBuilder0.toString();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(characterList14);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag11 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType12 = startTag11.type;
        startTag11.appendTagName('#');
        tokeniser6.tagPending = startTag11;
        org.jsoup.parser.Token.StartTag startTag17 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType18 = startTag17.type;
        java.lang.String str19 = startTag17.toString();
        tokeniser6.emit((org.jsoup.parser.Token) startTag17);
        startTag17.appendAttributeName('S');
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertTrue("'" + tokenType12 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType12.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + tokenType18 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType18.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<hi!>" + "'", str19, "<hi!>");
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        int int9 = parseErrorList4.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag13 = new org.jsoup.parser.Token.EndTag();
        char[] charArray16 = new char[] { '#', '#' };
        endTag13.appendAttributeValue(charArray16);
        endTag13.finaliseTag();
        boolean boolean19 = endTag13.isSelfClosing();
        org.jsoup.parser.Tag tag21 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean22 = tag21.isFormListed();
        org.jsoup.parser.Tag tag23 = tag21.setSelfClosing();
        boolean boolean24 = tag21.isKnownTag();
        java.lang.Object[] objArray26 = new java.lang.Object[] { boolean19, tag21, "Doctype" };
        org.jsoup.parser.ParseError parseError27 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray26);
        parseErrorList4.add(0, parseError27);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream29 = parseErrorList4.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor31 = parseErrorList4.listIterator((int) 't');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 116");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(tag21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(tag23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[false, hi!, Doctype]");
        org.junit.Assert.assertNotNull(parseErrorStream29);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        boolean boolean7 = tokenQueue1.matches("S");
        java.lang.String str8 = tokenQueue1.consumeCssIdentifier();
        boolean boolean9 = tokenQueue1.matchesStartTag();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag();
        endTag1.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        org.jsoup.nodes.Document document9 = htmlTreeBuilder3.parse("0: Doctype", "hi!", parseErrorList7);
        boolean boolean10 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) endTag1, htmlTreeBuilder3);
        htmlTreeBuilder3.clearStackToTableContext();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder12 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int17 = parseErrorList16.getMaxSize();
        org.jsoup.nodes.Document document18 = htmlTreeBuilder12.parse("0: Doctype", "hi!", parseErrorList16);
        boolean boolean19 = htmlTreeBuilder12.framesetOk();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder12.setHeadElement((org.jsoup.nodes.Element) document22);
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder12.setHeadElement((org.jsoup.nodes.Element) document26);
        htmlTreeBuilder12.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder30 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList34 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int35 = parseErrorList34.getMaxSize();
        org.jsoup.nodes.Document document36 = htmlTreeBuilder30.parse("0: Doctype", "hi!", parseErrorList34);
        boolean boolean37 = htmlTreeBuilder30.framesetOk();
        org.jsoup.nodes.Document document40 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder30.setHeadElement((org.jsoup.nodes.Element) document40);
        org.jsoup.nodes.Document document44 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder30.setHeadElement((org.jsoup.nodes.Element) document44);
        htmlTreeBuilder12.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document44);
        htmlTreeBuilder3.push((org.jsoup.nodes.Element) document44);
        java.lang.String str48 = htmlTreeBuilder3.toString();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder49 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int54 = parseErrorList53.getMaxSize();
        org.jsoup.nodes.Document document55 = htmlTreeBuilder49.parse("0: Doctype", "hi!", parseErrorList53);
        htmlTreeBuilder49.generateImpliedEndTags("hi!#");
        htmlTreeBuilder49.generateImpliedEndTags();
        org.jsoup.parser.Token token59 = htmlTreeBuilder49.currentToken;
        org.jsoup.nodes.Document document60 = htmlTreeBuilder49.getDocument();
        boolean boolean61 = htmlTreeBuilder3.isSpecial((org.jsoup.nodes.Element) document60);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(parseErrorList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNotNull(token59);
        org.junit.Assert.assertNotNull(document60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.jsoup.parser.ParseErrorList parseErrorList1 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int2 = parseErrorList1.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        org.jsoup.parser.ParseError[] parseErrorArray6 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList7 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7, parseErrorArray6);
        boolean boolean9 = parseErrorList4.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10);
        boolean boolean13 = parseErrorList7.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        parseErrorList11.clear();
        boolean boolean15 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.parser.ParseError parseError17 = parseErrorList11.remove(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(parseErrorArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        boolean boolean11 = doctype10.isCharacter();
        boolean boolean12 = doctype10.isEndTag();
        boolean boolean13 = doctype10.isCharacter();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        org.jsoup.parser.Token.Doctype doctype15 = tokeniser6.doctypePending;
        org.jsoup.parser.Token.Tag tag17 = tokeniser6.createTagPending(true);
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(doctype15);
        org.junit.Assert.assertNotNull(tag17);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.jsoup.parser.MiniSoupTokeniserState miniSoupTokeniserState0 = org.jsoup.parser.MiniSoupTokeniserState.TagOpen;
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        org.jsoup.parser.Token.Tag tag8 = tokeniser7.tagPending;
        java.lang.StringBuilder stringBuilder9 = null;
        tokeniser7.dataBuffer = stringBuilder9;
        org.jsoup.parser.Token.EndTag endTag11 = new org.jsoup.parser.Token.EndTag();
        char[] charArray14 = new char[] { '#', '#' };
        endTag11.appendAttributeValue(charArray14);
        tokeniser7.emit(charArray14);
        org.jsoup.parser.Token.Comment comment17 = tokeniser7.commentPending;
        org.jsoup.parser.CharacterReader characterReader19 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean20 = characterReader19.matchesLetter();
        miniSoupTokeniserState0.read(tokeniser7, characterReader19);
        org.jsoup.parser.CharacterReader characterReader22 = null;
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor26 = parseErrorList24.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor27 = parseErrorList24.iterator();
        org.jsoup.parser.Tokeniser tokeniser28 = new org.jsoup.parser.Tokeniser(characterReader22, parseErrorList24);
        org.jsoup.parser.Token.Tag tag29 = tokeniser28.tagPending;
        org.jsoup.parser.Token.Tag tag31 = tokeniser28.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype32 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype33 = doctype32.asDoctype();
        java.lang.String str34 = doctype32.tokenType();
        tokeniser28.emit((org.jsoup.parser.Token) doctype32);
        org.jsoup.parser.ITokeniserState iTokeniserState36 = tokeniser28.getState();
        org.jsoup.parser.Token.Comment comment37 = new org.jsoup.parser.Token.Comment();
        java.lang.String str38 = comment37.toString();
        java.lang.StringBuilder stringBuilder39 = comment37.data;
        boolean boolean40 = comment37.isEndTag();
        boolean boolean41 = comment37.isComment();
        tokeniser28.commentPending = comment37;
        org.jsoup.parser.CharacterReader characterReader44 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean46 = characterReader44.matches('\000');
        characterReader44.mark();
        boolean boolean48 = characterReader44.isEmpty();
        java.lang.String str49 = characterReader44.consumeToEnd();
        miniSoupTokeniserState0.read(tokeniser28, characterReader44);
        org.jsoup.parser.CharacterReader characterReader51 = null;
        org.jsoup.parser.ParseErrorList parseErrorList53 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream54 = parseErrorList53.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor55 = parseErrorList53.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor56 = parseErrorList53.iterator();
        org.jsoup.parser.Tokeniser tokeniser57 = new org.jsoup.parser.Tokeniser(characterReader51, parseErrorList53);
        org.jsoup.parser.Token.Tag tag58 = tokeniser57.tagPending;
        tokeniser57.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag62 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType63 = startTag62.type;
        startTag62.appendTagName('#');
        tokeniser57.tagPending = startTag62;
        tokeniser57.acknowledgeSelfClosingFlag();
        org.jsoup.parser.CharacterReader characterReader69 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean71 = characterReader69.matches('\uffff');
        miniSoupTokeniserState0.read(tokeniser57, characterReader69);
        java.lang.String str73 = characterReader69.consumeDigitSequence();
        java.lang.String str74 = characterReader69.consumeDigitSequence();
        characterReader69.rewindToMark();
        org.junit.Assert.assertNotNull(miniSoupTokeniserState0);
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(tag8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, #]");
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertNotNull(parseErrorItor26);
        org.junit.Assert.assertNotNull(parseErrorItor27);
        org.junit.Assert.assertNull(tag29);
        org.junit.Assert.assertNotNull(tag31);
        org.junit.Assert.assertNotNull(doctype33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Doctype" + "'", str34, "Doctype");
        org.junit.Assert.assertNotNull(iTokeniserState36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<!---->" + "'", str38, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder39);
        org.junit.Assert.assertEquals(stringBuilder39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "StartTag" + "'", str49, "StartTag");
        org.junit.Assert.assertNotNull(parseErrorList53);
        org.junit.Assert.assertNotNull(parseErrorStream54);
        org.junit.Assert.assertNotNull(parseErrorItor55);
        org.junit.Assert.assertNotNull(parseErrorItor56);
        org.junit.Assert.assertNull(tag58);
        org.junit.Assert.assertTrue("'" + tokenType63 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType63.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\000');
        java.lang.String str4 = characterReader1.consumeHexSequence();
        char char5 = characterReader1.current();
        boolean boolean6 = characterReader1.matchesLetter();
        boolean boolean8 = characterReader1.containsIgnoreCase("100: ");
        boolean boolean10 = characterReader1.containsIgnoreCase("StartTag");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + 'S' + "'", char5 == 'S');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        org.jsoup.parser.Token.Tag tag9 = tokeniser6.createTagPending(true);
        org.jsoup.parser.Token.Doctype doctype10 = new org.jsoup.parser.Token.Doctype();
        boolean boolean11 = doctype10.isCharacter();
        boolean boolean12 = doctype10.isEndTag();
        boolean boolean13 = doctype10.isCharacter();
        tokeniser6.emit((org.jsoup.parser.Token) doctype10);
        java.lang.String str15 = doctype10.getSystemIdentifier();
        boolean boolean16 = doctype10.isEOF();
        boolean boolean17 = doctype10.isStartTag();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNotNull(tag9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.Tokeniser tokeniser6 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList2);
        org.jsoup.parser.Token.Tag tag7 = tokeniser6.tagPending;
        tokeniser6.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype10 = tokeniser6.doctypePending;
        tokeniser6.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype12 = tokeniser6.doctypePending;
        org.jsoup.parser.Token.Comment comment13 = new org.jsoup.parser.Token.Comment();
        java.lang.String str14 = comment13.toString();
        java.lang.StringBuilder stringBuilder15 = comment13.data;
        boolean boolean16 = comment13.isEndTag();
        java.lang.String str17 = comment13.toString();
        tokeniser6.commentPending = comment13;
        org.jsoup.parser.ITokeniserState iTokeniserState19 = tokeniser6.getState();
        org.jsoup.parser.Token.Tag tag21 = tokeniser6.createTagPending(true);
        tokeniser6.emitTagPending();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNull(tag7);
        org.junit.Assert.assertNull(doctype10);
        org.junit.Assert.assertNull(doctype12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "<!---->" + "'", str14, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<!---->" + "'", str17, "<!---->");
        org.junit.Assert.assertNotNull(iTokeniserState19);
        org.junit.Assert.assertNotNull(tag21);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        char char6 = tokenQueue1.peek();
        // The following exception was thrown during execution in test generation
        try {
            tokenQueue1.consume("<Doctype>");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Queue did not match expected sequence");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\000' + "'", char6 == '\000');
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.jsoup.parser.Token.StartTag startTag1 = new org.jsoup.parser.Token.StartTag("Doctype");
        boolean boolean2 = startTag1.isDoctype();
        org.jsoup.parser.CharacterReader characterReader3 = null;
        org.jsoup.parser.ParseErrorList parseErrorList5 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream6 = parseErrorList5.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList5.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor8 = parseErrorList5.iterator();
        org.jsoup.parser.Tokeniser tokeniser9 = new org.jsoup.parser.Tokeniser(characterReader3, parseErrorList5);
        org.jsoup.parser.Token.Tag tag10 = tokeniser9.tagPending;
        tokeniser9.emit("hi!");
        org.jsoup.parser.Token.StartTag startTag14 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType15 = startTag14.type;
        startTag14.appendTagName('#');
        tokeniser9.tagPending = startTag14;
        org.jsoup.parser.TokeniserState tokeniserState19 = org.jsoup.parser.TokeniserState.CommentEnd;
        tokeniser9.transition((org.jsoup.parser.ITokeniserState) tokeniserState19);
        org.jsoup.parser.Token.Doctype doctype21 = new org.jsoup.parser.Token.Doctype();
        boolean boolean22 = doctype21.isCharacter();
        tokeniser9.doctypePending = doctype21;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState24 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype25 = new org.jsoup.parser.Token.Doctype();
        boolean boolean26 = doctype25.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder27 = null;
        boolean boolean28 = htmlTreeBuilderState24.process((org.jsoup.parser.Token) doctype25, htmlTreeBuilder27);
        java.lang.StringBuilder stringBuilder29 = doctype25.name;
        tokeniser9.dataBuffer = stringBuilder29;
        org.jsoup.parser.Token.EndTag endTag31 = new org.jsoup.parser.Token.EndTag();
        char[] charArray34 = new char[] { '#', '#' };
        endTag31.appendAttributeValue(charArray34);
        endTag31.appendAttributeValue(' ');
        char[] charArray39 = new char[] { '4' };
        endTag31.appendAttributeValue(charArray39);
        tokeniser9.emit(charArray39);
        startTag1.appendAttributeValue(charArray39);
        java.lang.String str43 = startTag1.toString();
        boolean boolean44 = startTag1.selfClosing;
        java.lang.String str45 = startTag1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorList5);
        org.junit.Assert.assertNotNull(parseErrorStream6);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertNotNull(parseErrorItor8);
        org.junit.Assert.assertNull(tag10);
        org.junit.Assert.assertTrue("'" + tokenType15 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType15.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertNotNull(tokeniserState19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(stringBuilder29);
        org.junit.Assert.assertEquals(stringBuilder29.toString(), "");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, #]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[4]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "<Doctype>" + "'", str43, "<Doctype>");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "<Doctype>" + "'", str45, "<Doctype>");
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        org.jsoup.parser.ParseError[] parseErrorArray7 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList8 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8, parseErrorArray7);
        boolean boolean10 = parseErrorList4.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList8);
        parseErrorList8.clear();
        boolean boolean12 = parseErrorList8.isEmpty();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState13 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.EndTag endTag14 = new org.jsoup.parser.Token.EndTag();
        endTag14.newAttribute();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder16 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList20 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int21 = parseErrorList20.getMaxSize();
        org.jsoup.nodes.Document document22 = htmlTreeBuilder16.parse("0: Doctype", "hi!", parseErrorList20);
        boolean boolean23 = htmlTreeBuilderState13.process((org.jsoup.parser.Token) endTag14, htmlTreeBuilder16);
        htmlTreeBuilder16.clearStackToTableContext();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder25 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList29 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int30 = parseErrorList29.getMaxSize();
        org.jsoup.nodes.Document document31 = htmlTreeBuilder25.parse("0: Doctype", "hi!", parseErrorList29);
        boolean boolean32 = htmlTreeBuilder25.framesetOk();
        org.jsoup.nodes.Document document35 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder25.setHeadElement((org.jsoup.nodes.Element) document35);
        org.jsoup.nodes.Document document39 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder25.setHeadElement((org.jsoup.nodes.Element) document39);
        htmlTreeBuilder25.setFosterInserts(false);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder43 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList47 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int48 = parseErrorList47.getMaxSize();
        org.jsoup.nodes.Document document49 = htmlTreeBuilder43.parse("0: Doctype", "hi!", parseErrorList47);
        boolean boolean50 = htmlTreeBuilder43.framesetOk();
        org.jsoup.nodes.Document document53 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder43.setHeadElement((org.jsoup.nodes.Element) document53);
        org.jsoup.nodes.Document document57 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder43.setHeadElement((org.jsoup.nodes.Element) document57);
        htmlTreeBuilder25.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document57);
        htmlTreeBuilder16.push((org.jsoup.nodes.Element) document57);
        org.jsoup.parser.Token.Comment comment61 = new org.jsoup.parser.Token.Comment();
        java.lang.String str62 = comment61.toString();
        java.lang.StringBuilder stringBuilder63 = comment61.data;
        boolean boolean64 = comment61.isEndTag();
        boolean boolean65 = comment61.isEOF();
        htmlTreeBuilder16.insert(comment61);
        org.jsoup.parser.ParseError[] parseErrorArray67 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList68 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList68, parseErrorArray67);
        org.jsoup.parser.ParseError[] parseErrorArray70 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList71 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList71, parseErrorArray70);
        boolean boolean73 = parseErrorList68.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList71);
        int int75 = parseErrorList71.lastIndexOf((java.lang.Object) (byte) -1);
        org.jsoup.parser.ParseErrorList parseErrorList76 = org.jsoup.parser.ParseErrorList.noTracking();
        boolean boolean77 = parseErrorList71.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList76);
        htmlTreeBuilder16.errors = parseErrorList76;
        boolean boolean79 = parseErrorList8.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList76);
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState13);
        org.junit.Assert.assertNotNull(parseErrorList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(parseErrorList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(parseErrorList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertNotNull(document57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "<!---->" + "'", str62, "<!---->");
        org.junit.Assert.assertNotNull(stringBuilder63);
        org.junit.Assert.assertEquals(stringBuilder63.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(parseErrorArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(parseErrorArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(parseErrorList76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.jsoup.parser.CharacterReader characterReader1 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean3 = characterReader1.matches('\000');
        characterReader1.mark();
        boolean boolean5 = characterReader1.isEmpty();
        org.jsoup.parser.TokenQueue tokenQueue7 = new org.jsoup.parser.TokenQueue("EndTag");
        java.lang.String str9 = tokenQueue7.chompTo("Doctype");
        java.lang.String str10 = tokenQueue7.consumeWord();
        boolean boolean11 = tokenQueue7.matchesStartTag();
        org.jsoup.parser.Token.EndTag endTag12 = new org.jsoup.parser.Token.EndTag();
        char[] charArray15 = new char[] { '#', '#' };
        endTag12.appendAttributeValue(charArray15);
        boolean boolean17 = tokenQueue7.matchesAny(charArray15);
        boolean boolean18 = characterReader1.matchesAny(charArray15);
        java.lang.String str19 = characterReader1.consumeDigitSequence();
        boolean boolean21 = characterReader1.matchConsume("\uffff");
        boolean boolean22 = characterReader1.matchesDigit();
        java.lang.String str23 = characterReader1.consumeLetterSequence();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "EndTag" + "'", str9, "EndTag");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "StartTag" + "'", str23, "StartTag");
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        htmlTreeBuilder0.resetInsertionMode();
        htmlTreeBuilder0.markInsertionMode();
        java.lang.String str9 = htmlTreeBuilder0.toString();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.parser.Tokeniser tokeniser9 = xmlTreeBuilder0.tokeniser;
        org.jsoup.parser.ITokeniserState iTokeniserState10 = tokeniser9.getState();
        tokeniser9.createCommentPending();
        boolean boolean12 = tokeniser9.currentNodeInHtmlNS();
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNotNull(tokeniser9);
        org.junit.Assert.assertNotNull(iTokeniserState10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        tokenQueue1.addFirst((java.lang.Character) '\uffff');
        boolean boolean8 = tokenQueue1.matchesWhitespace();
        java.lang.String str10 = tokenQueue1.consumeToIgnoreCase("-1: []");
        boolean boolean11 = tokenQueue1.matchesStartTag();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\uffff" + "'", str10, "\uffff");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        java.util.List<org.jsoup.parser.Token.Character> characterList14 = htmlTreeBuilder0.getPendingTableCharacters();
        org.jsoup.parser.CharacterReader characterReader16 = new org.jsoup.parser.CharacterReader("StartTag");
        boolean boolean18 = characterReader16.matches("[100: ]");
        htmlTreeBuilder0.reader = characterReader16;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder20 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int25 = parseErrorList24.getMaxSize();
        org.jsoup.nodes.Document document26 = htmlTreeBuilder20.parse("0: Doctype", "hi!", parseErrorList24);
        htmlTreeBuilder20.generateImpliedEndTags("hi!#");
        org.jsoup.parser.Token.Character[] characterArray29 = new org.jsoup.parser.Token.Character[] {};
        java.util.ArrayList<org.jsoup.parser.Token.Character> characterList30 = new java.util.ArrayList<org.jsoup.parser.Token.Character>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.Token.Character>) characterList30, characterArray29);
        htmlTreeBuilder20.setPendingTableCharacters((java.util.List<org.jsoup.parser.Token.Character>) characterList30);
        boolean boolean33 = htmlTreeBuilder20.isFosterInserts();
        org.jsoup.parser.Token.StartTag startTag35 = new org.jsoup.parser.Token.StartTag("[100: ]");
        org.jsoup.nodes.FormElement formElement37 = htmlTreeBuilder20.insertForm(startTag35, true);
        htmlTreeBuilder0.setFormElement(formElement37);
        org.jsoup.nodes.Element element39 = null;
        htmlTreeBuilder0.pushActiveFormattingElements(element39);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNotNull(characterList14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(characterArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(formElement37);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        boolean boolean3 = parser2.isTrackErrors();
        org.jsoup.parser.Parser parser5 = parser2.setTrackErrors(0);
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(parser5);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0);
        org.jsoup.parser.ParseError[] parseErrorArray3 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList4 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4, parseErrorArray3);
        boolean boolean6 = parseErrorList1.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList4);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor7 = parseErrorList4.listIterator();
        int int9 = parseErrorList4.lastIndexOf((java.lang.Object) 1.0d);
        int int10 = parseErrorList4.size();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList4.iterator();
        parseErrorList4.clear();
        java.util.Collection<org.jsoup.parser.ParseError> parseErrorCollection13 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = parseErrorList4.containsAll(parseErrorCollection13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(parseErrorArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parseErrorItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(parseErrorItor11);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        boolean boolean1 = org.jsoup.parser.Tag.isKnownTag("St");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isFormListed();
        org.jsoup.parser.Tag tag3 = tag1.setSelfClosing();
        boolean boolean4 = tag1.isEmpty();
        boolean boolean5 = tag1.formatAsBlock();
        boolean boolean6 = tag1.isKnownTag();
        boolean boolean7 = tag1.isKnownTag();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Token token8 = htmlTreeBuilder0.currentToken;
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState9 = org.jsoup.parser.HtmlTreeBuilderState.InTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState9);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        java.util.List<org.jsoup.nodes.Node> nodeList16 = org.jsoup.parser.Parser.parseFragment("EndTag", (org.jsoup.nodes.Element) document14, "<hi!>");
        boolean boolean17 = htmlTreeBuilder0.isInActiveFormattingElements((org.jsoup.nodes.Element) document14);
        htmlTreeBuilder0.generateImpliedEndTags();
        htmlTreeBuilder0.runParser();
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(token8);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState9);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState0 = org.jsoup.parser.HtmlTreeBuilderState.Text;
        org.jsoup.parser.Token.Doctype doctype1 = new org.jsoup.parser.Token.Doctype();
        boolean boolean2 = doctype1.isCharacter();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder3 = null;
        boolean boolean4 = htmlTreeBuilderState0.process((org.jsoup.parser.Token) doctype1, htmlTreeBuilder3);
        java.lang.String str5 = doctype1.getName();
        boolean boolean6 = doctype1.forceQuirks;
        org.junit.Assert.assertNotNull(htmlTreeBuilderState0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder7 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int12 = parseErrorList11.getMaxSize();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder7.parse("0: Doctype", "hi!", parseErrorList11);
        boolean boolean14 = htmlTreeBuilder7.framesetOk();
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder7.setHeadElement((org.jsoup.nodes.Element) document17);
        org.jsoup.nodes.Element element19 = htmlTreeBuilder7.pop();
        htmlTreeBuilder0.pushActiveFormattingElements(element19);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder21 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int26 = parseErrorList25.getMaxSize();
        org.jsoup.nodes.Document document27 = htmlTreeBuilder21.parse("0: Doctype", "hi!", parseErrorList25);
        boolean boolean28 = htmlTreeBuilder21.framesetOk();
        org.jsoup.parser.Parser parser29 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser31 = parser29.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document34 = parser29.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document37 = parser29.parseInput("<hi!>", "[]");
        htmlTreeBuilder21.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document37);
        boolean boolean39 = htmlTreeBuilder21.isFragmentParsing();
        org.jsoup.parser.Parser parser40 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder21);
        org.jsoup.parser.Token.StartTag startTag41 = new org.jsoup.parser.Token.StartTag();
        startTag41.appendAttributeValue("hi!");
        org.jsoup.parser.Token.Tag tag45 = startTag41.name("hi!#");
        boolean boolean46 = startTag41.selfClosing;
        java.lang.String str47 = startTag41.toString();
        org.jsoup.nodes.Element element48 = htmlTreeBuilder21.insertEmpty(startTag41);
        htmlTreeBuilder0.pushActiveFormattingElements(element48);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(parser29);
        org.junit.Assert.assertNotNull(parser31);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(tag45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<hi!#>" + "'", str47, "<hi!#>");
        org.junit.Assert.assertNotNull(element48);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.jsoup.parser.Token.Doctype doctype0 = new org.jsoup.parser.Token.Doctype();
        boolean boolean1 = doctype0.isCharacter();
        java.lang.StringBuilder stringBuilder2 = doctype0.systemIdentifier;
        java.lang.String str3 = doctype0.getPublicIdentifier();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(stringBuilder2);
        org.junit.Assert.assertEquals(stringBuilder2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.CharacterReader characterReader1 = null;
        org.jsoup.parser.ParseErrorList parseErrorList3 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream4 = parseErrorList3.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList3.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor6 = parseErrorList3.iterator();
        org.jsoup.parser.Tokeniser tokeniser7 = new org.jsoup.parser.Tokeniser(characterReader1, parseErrorList3);
        xmlTreeBuilder0.tokeniser = tokeniser7;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList9 = xmlTreeBuilder0.stack;
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        boolean boolean21 = parseErrorList14.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList19);
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList19);
        org.jsoup.parser.ParseErrorList parseErrorList24 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream25 = parseErrorList24.stream();
        boolean boolean26 = parseErrorList24.canAddError();
        boolean boolean27 = parseErrorList19.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList24);
        java.util.List<org.jsoup.nodes.Node> nodeList28 = xmlTreeBuilder0.parseFragment("StartTag", "<!---->", parseErrorList24);
        org.jsoup.parser.ParseError[] parseErrorArray29 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList30 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30, parseErrorArray29);
        org.jsoup.parser.ParseError[] parseErrorArray32 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList33 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33, parseErrorArray32);
        boolean boolean35 = parseErrorList30.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33);
        boolean boolean36 = parseErrorList24.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList30);
        org.jsoup.parser.ParseErrorList parseErrorList40 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList42 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream43 = parseErrorList42.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor44 = parseErrorList42.iterator();
        boolean boolean45 = parseErrorList40.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList42);
        parseErrorList42.ensureCapacity((int) (short) 1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder48 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document49 = xmlTreeBuilder48.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder50 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList55 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList57 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream58 = parseErrorList57.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor59 = parseErrorList57.iterator();
        boolean boolean60 = parseErrorList55.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList57);
        xmlTreeBuilder50.initialiseParse("<!---->", "hi!", parseErrorList55);
        xmlTreeBuilder48.errors = parseErrorList55;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList63 = xmlTreeBuilder48.stack;
        boolean boolean64 = parseErrorList42.equals((java.lang.Object) elementList63);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean65 = parseErrorList30.addAll((int) (short) 10, (java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList42);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList3);
        org.junit.Assert.assertNotNull(parseErrorStream4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorItor6);
        org.junit.Assert.assertNull(elementList9);
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(parseErrorList24);
        org.junit.Assert.assertNotNull(parseErrorStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertNotNull(parseErrorArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(parseErrorArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(parseErrorList42);
        org.junit.Assert.assertNotNull(parseErrorStream43);
        org.junit.Assert.assertNotNull(parseErrorItor44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(document49);
        org.junit.Assert.assertNotNull(parseErrorList57);
        org.junit.Assert.assertNotNull(parseErrorStream58);
        org.junit.Assert.assertNotNull(parseErrorItor59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(elementList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream11 = parseErrorList10.stream();
        boolean boolean12 = parseErrorList10.canAddError();
        org.jsoup.nodes.Document document13 = htmlTreeBuilder0.parse("EndTag", "hi!#", parseErrorList10);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState14 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState14);
        org.jsoup.parser.CharacterReader characterReader16 = null;
        org.jsoup.parser.ParseErrorList parseErrorList18 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList18.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor20 = parseErrorList18.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor21 = parseErrorList18.iterator();
        org.jsoup.parser.Tokeniser tokeniser22 = new org.jsoup.parser.Tokeniser(characterReader16, parseErrorList18);
        org.jsoup.parser.Token.Tag tag23 = tokeniser22.tagPending;
        tokeniser22.emit("hi!");
        org.jsoup.parser.Token.Doctype doctype26 = tokeniser22.doctypePending;
        tokeniser22.createCommentPending();
        org.jsoup.parser.Token.Doctype doctype28 = tokeniser22.doctypePending;
        htmlTreeBuilder0.tokeniser = tokeniser22;
        htmlTreeBuilder0.popStackToClose("10: ");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = htmlTreeBuilder0.toString();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertNotNull(parseErrorStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(parseErrorList18);
        org.junit.Assert.assertNotNull(parseErrorStream19);
        org.junit.Assert.assertNotNull(parseErrorItor20);
        org.junit.Assert.assertNotNull(parseErrorItor21);
        org.junit.Assert.assertNull(tag23);
        org.junit.Assert.assertNull(doctype26);
        org.junit.Assert.assertNull(doctype28);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.parser.CharacterReader characterReader20 = null;
        org.jsoup.parser.ParseErrorList parseErrorList22 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream23 = parseErrorList22.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor24 = parseErrorList22.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor25 = parseErrorList22.iterator();
        org.jsoup.parser.Tokeniser tokeniser26 = new org.jsoup.parser.Tokeniser(characterReader20, parseErrorList22);
        org.jsoup.parser.Token.Tag tag27 = tokeniser26.tagPending;
        org.jsoup.parser.Token.Tag tag29 = tokeniser26.createTagPending(true);
        java.lang.StringBuilder stringBuilder30 = tokeniser26.dataBuffer;
        tokeniser26.createTempBuffer();
        xmlTreeBuilder3.tokeniser = tokeniser26;
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder33 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList37 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int38 = parseErrorList37.getMaxSize();
        org.jsoup.nodes.Document document39 = htmlTreeBuilder33.parse("0: Doctype", "hi!", parseErrorList37);
        htmlTreeBuilder33.generateImpliedEndTags("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder42 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int47 = parseErrorList46.getMaxSize();
        org.jsoup.nodes.Document document48 = htmlTreeBuilder42.parse("0: Doctype", "hi!", parseErrorList46);
        boolean boolean49 = htmlTreeBuilder42.framesetOk();
        org.jsoup.nodes.Document document52 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder42.setHeadElement((org.jsoup.nodes.Element) document52);
        org.jsoup.nodes.Document document56 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder42.setHeadElement((org.jsoup.nodes.Element) document56);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder59 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList63 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int64 = parseErrorList63.getMaxSize();
        org.jsoup.nodes.Document document65 = htmlTreeBuilder59.parse("0: Doctype", "hi!", parseErrorList63);
        org.jsoup.parser.ParseErrorList parseErrorList69 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream70 = parseErrorList69.stream();
        boolean boolean71 = parseErrorList69.canAddError();
        org.jsoup.nodes.Document document72 = htmlTreeBuilder59.parse("EndTag", "hi!#", parseErrorList69);
        java.lang.String[] strArray80 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean81 = htmlTreeBuilder59.inScope("hi!#", strArray80);
        boolean boolean82 = htmlTreeBuilder42.inScope("hi!#", strArray80);
        htmlTreeBuilder33.popStackToClose(strArray80);
        org.jsoup.nodes.Element element85 = htmlTreeBuilder33.getActiveFormattingElement("<Doctype>");
        org.jsoup.parser.Token.StartTag startTag87 = new org.jsoup.parser.Token.StartTag("hi!");
        boolean boolean88 = startTag87.isCharacter();
        startTag87.selfClosing = false;
        org.jsoup.parser.Token.StartTag startTag91 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes92 = startTag91.getAttributes();
        startTag87.attributes = attributes92;
        java.lang.String str94 = startTag87.tokenType();
        org.jsoup.nodes.Element element95 = htmlTreeBuilder33.insert(startTag87);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = xmlTreeBuilder3.process((org.jsoup.parser.Token) startTag87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(parseErrorList22);
        org.junit.Assert.assertNotNull(parseErrorStream23);
        org.junit.Assert.assertNotNull(parseErrorItor24);
        org.junit.Assert.assertNotNull(parseErrorItor25);
        org.junit.Assert.assertNull(tag27);
        org.junit.Assert.assertNotNull(tag29);
        org.junit.Assert.assertNull(stringBuilder30);
        org.junit.Assert.assertNotNull(parseErrorList37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertNotNull(document56);
        org.junit.Assert.assertNotNull(parseErrorList63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertNotNull(parseErrorList69);
        org.junit.Assert.assertNotNull(parseErrorStream70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(document72);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(element85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(attributes92);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "StartTag" + "'", str94, "StartTag");
        org.junit.Assert.assertNotNull(element95);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder6 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int11 = parseErrorList10.getMaxSize();
        org.jsoup.nodes.Document document12 = htmlTreeBuilder6.parse("0: Doctype", "hi!", parseErrorList10);
        org.jsoup.parser.ParseErrorList parseErrorList16 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream17 = parseErrorList16.stream();
        boolean boolean18 = parseErrorList16.canAddError();
        org.jsoup.nodes.Document document19 = htmlTreeBuilder6.parse("EndTag", "hi!#", parseErrorList16);
        java.lang.String[] strArray27 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean28 = htmlTreeBuilder6.inScope("hi!#", strArray27);
        java.lang.String str29 = tokenQueue1.consumeToAny(strArray27);
        // The following exception was thrown during execution in test generation
        try {
            char char30 = tokenQueue1.consume();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 6");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(parseErrorList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertNotNull(parseErrorList16);
        org.junit.Assert.assertNotNull(parseErrorStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        boolean boolean3 = tokenQueue1.consumeWhitespace();
        java.lang.String str4 = tokenQueue1.consumeWord();
        boolean boolean5 = tokenQueue1.matchesWhitespace();
        java.lang.String[] strArray10 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str11 = tokenQueue1.consumeToAny(strArray10);
        org.jsoup.parser.CharacterReader characterReader12 = null;
        org.jsoup.parser.ParseErrorList parseErrorList14 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream15 = parseErrorList14.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor16 = parseErrorList14.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor17 = parseErrorList14.iterator();
        org.jsoup.parser.Tokeniser tokeniser18 = new org.jsoup.parser.Tokeniser(characterReader12, parseErrorList14);
        org.jsoup.parser.Token.Tag tag19 = tokeniser18.tagPending;
        java.lang.StringBuilder stringBuilder20 = null;
        tokeniser18.dataBuffer = stringBuilder20;
        org.jsoup.parser.Token.EndTag endTag22 = new org.jsoup.parser.Token.EndTag();
        char[] charArray25 = new char[] { '#', '#' };
        endTag22.appendAttributeValue(charArray25);
        tokeniser18.emit(charArray25);
        boolean boolean28 = tokenQueue1.matchesAny(charArray25);
        java.lang.String str29 = tokenQueue1.consumeCssIdentifier();
        java.lang.String str31 = tokenQueue1.chompTo("a");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder32 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList36 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int37 = parseErrorList36.getMaxSize();
        org.jsoup.nodes.Document document38 = htmlTreeBuilder32.parse("0: Doctype", "hi!", parseErrorList36);
        boolean boolean39 = htmlTreeBuilder32.framesetOk();
        org.jsoup.parser.Parser parser40 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser42 = parser40.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document45 = parser40.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document48 = parser40.parseInput("<hi!>", "[]");
        htmlTreeBuilder32.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document48);
        boolean boolean50 = htmlTreeBuilder32.isFragmentParsing();
        org.jsoup.parser.TokenQueue tokenQueue52 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean53 = tokenQueue52.isEmpty();
        boolean boolean54 = tokenQueue52.consumeWhitespace();
        java.lang.String str55 = tokenQueue52.consumeWord();
        boolean boolean56 = tokenQueue52.matchesWhitespace();
        java.lang.String[] strArray61 = new java.lang.String[] { "0: []", "StartTag", "EndTag", "" };
        java.lang.String str62 = tokenQueue52.consumeToAny(strArray61);
        boolean boolean63 = htmlTreeBuilder32.inScope(strArray61);
        java.lang.String str64 = tokenQueue1.consumeToAny(strArray61);
        boolean boolean66 = tokenQueue1.matchChomp("<0: Doctype>");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parseErrorList14);
        org.junit.Assert.assertNotNull(parseErrorStream15);
        org.junit.Assert.assertNotNull(parseErrorItor16);
        org.junit.Assert.assertNotNull(parseErrorItor17);
        org.junit.Assert.assertNull(tag19);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(parseErrorList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(parser40);
        org.junit.Assert.assertNotNull(parser42);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "EndTag" + "'", str55, "EndTag");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.jsoup.parser.CharacterReader characterReader0 = null;
        org.jsoup.parser.ParseErrorList parseErrorList2 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream3 = parseErrorList2.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor4 = parseErrorList2.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor5 = parseErrorList2.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int8 = parseErrorList7.getMaxSize();
        boolean boolean9 = parseErrorList2.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        org.jsoup.parser.Tokeniser tokeniser10 = new org.jsoup.parser.Tokeniser(characterReader0, parseErrorList7);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor11 = parseErrorList7.iterator();
        org.jsoup.parser.ParseError[] parseErrorArray12 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList13 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13, parseErrorArray12);
        org.jsoup.parser.ParseError[] parseErrorArray15 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList16 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16, parseErrorArray15);
        boolean boolean18 = parseErrorList13.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16);
        int int20 = parseErrorList16.lastIndexOf((java.lang.Object) (byte) -1);
        org.jsoup.parser.ParseErrorList parseErrorList21 = org.jsoup.parser.ParseErrorList.noTracking();
        boolean boolean22 = parseErrorList16.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList21);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream23 = parseErrorList16.parallelStream();
        boolean boolean24 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16);
        org.jsoup.parser.ParseError[] parseErrorArray25 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList26 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26, parseErrorArray25);
        org.jsoup.parser.ParseError[] parseErrorArray28 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList29 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList29, parseErrorArray28);
        boolean boolean31 = parseErrorList26.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList29);
        org.jsoup.parser.ParseError[] parseErrorArray32 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList33 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33, parseErrorArray32);
        boolean boolean35 = parseErrorList29.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33);
        parseErrorList33.clear();
        boolean boolean37 = parseErrorList33.isEmpty();
        org.jsoup.parser.Token.Doctype doctype38 = new org.jsoup.parser.Token.Doctype();
        org.jsoup.parser.Token.Doctype doctype39 = doctype38.asDoctype();
        boolean boolean40 = doctype38.isEOF();
        boolean boolean41 = doctype38.isForceQuirks();
        boolean boolean42 = doctype38.isEndTag();
        boolean boolean43 = parseErrorList33.remove((java.lang.Object) boolean42);
        org.jsoup.parser.CharacterReader characterReader44 = null;
        org.jsoup.parser.ParseErrorList parseErrorList46 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream47 = parseErrorList46.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor48 = parseErrorList46.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList46.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList51 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int52 = parseErrorList51.getMaxSize();
        boolean boolean53 = parseErrorList46.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList51);
        org.jsoup.parser.Tokeniser tokeniser54 = new org.jsoup.parser.Tokeniser(characterReader44, parseErrorList51);
        org.jsoup.parser.ParseErrorList parseErrorList56 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream57 = parseErrorList56.stream();
        boolean boolean58 = parseErrorList56.canAddError();
        boolean boolean59 = parseErrorList51.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList56);
        boolean boolean60 = parseErrorList33.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList51);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream61 = parseErrorList33.stream();
        boolean boolean62 = parseErrorList16.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList33);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor63 = parseErrorList33.iterator();
        org.junit.Assert.assertNotNull(parseErrorList2);
        org.junit.Assert.assertNotNull(parseErrorStream3);
        org.junit.Assert.assertNotNull(parseErrorItor4);
        org.junit.Assert.assertNotNull(parseErrorItor5);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parseErrorItor11);
        org.junit.Assert.assertNotNull(parseErrorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseErrorArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(parseErrorList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(parseErrorStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(parseErrorArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(parseErrorArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(parseErrorArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doctype39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(parseErrorList46);
        org.junit.Assert.assertNotNull(parseErrorStream47);
        org.junit.Assert.assertNotNull(parseErrorItor48);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertNotNull(parseErrorList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(parseErrorList56);
        org.junit.Assert.assertNotNull(parseErrorStream57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(parseErrorStream61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(parseErrorItor63);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.jsoup.parser.TreeBuilder treeBuilder0 = null;
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser(treeBuilder0);
        org.jsoup.parser.TreeBuilder treeBuilder2 = null;
        org.jsoup.parser.Parser parser3 = parser1.setTreeBuilder(treeBuilder2);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder4 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document5 = xmlTreeBuilder4.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder6 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList11 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList13 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream14 = parseErrorList13.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor15 = parseErrorList13.iterator();
        boolean boolean16 = parseErrorList11.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList13);
        xmlTreeBuilder6.initialiseParse("<!---->", "hi!", parseErrorList11);
        xmlTreeBuilder4.errors = parseErrorList11;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList19 = xmlTreeBuilder4.stack;
        org.jsoup.parser.CharacterReader characterReader20 = null;
        xmlTreeBuilder4.reader = characterReader20;
        org.jsoup.parser.Parser parser22 = parser1.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder4);
        xmlTreeBuilder4.baseUri = "Doctype";
        org.junit.Assert.assertNotNull(parser3);
        org.junit.Assert.assertNull(document5);
        org.junit.Assert.assertNotNull(parseErrorList13);
        org.junit.Assert.assertNotNull(parseErrorStream14);
        org.junit.Assert.assertNotNull(parseErrorItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(elementList19);
        org.junit.Assert.assertNotNull(parser22);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.Parser parser8 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser10 = parser8.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document13 = parser8.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document16 = parser8.parseInput("<hi!>", "[]");
        htmlTreeBuilder0.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        boolean boolean19 = htmlTreeBuilder0.inScope(strArray18);
        htmlTreeBuilder0.markInsertionMode();
        boolean boolean22 = htmlTreeBuilder0.inScope("StartTag");
        htmlTreeBuilder0.markInsertionMode();
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document26);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        htmlTreeBuilder28.generateImpliedEndTags("hi!#");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder37 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList41 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int42 = parseErrorList41.getMaxSize();
        org.jsoup.nodes.Document document43 = htmlTreeBuilder37.parse("0: Doctype", "hi!", parseErrorList41);
        boolean boolean44 = htmlTreeBuilder37.framesetOk();
        org.jsoup.nodes.Document document47 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder37.setHeadElement((org.jsoup.nodes.Element) document47);
        org.jsoup.nodes.Document document51 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!", "");
        htmlTreeBuilder37.setHeadElement((org.jsoup.nodes.Element) document51);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder54 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList58 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int59 = parseErrorList58.getMaxSize();
        org.jsoup.nodes.Document document60 = htmlTreeBuilder54.parse("0: Doctype", "hi!", parseErrorList58);
        org.jsoup.parser.ParseErrorList parseErrorList64 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream65 = parseErrorList64.stream();
        boolean boolean66 = parseErrorList64.canAddError();
        org.jsoup.nodes.Document document67 = htmlTreeBuilder54.parse("EndTag", "hi!#", parseErrorList64);
        java.lang.String[] strArray75 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean76 = htmlTreeBuilder54.inScope("hi!#", strArray75);
        boolean boolean77 = htmlTreeBuilder37.inScope("hi!#", strArray75);
        htmlTreeBuilder28.popStackToClose(strArray75);
        boolean boolean79 = htmlTreeBuilder0.inScope(strArray75);
        org.jsoup.parser.Token.Doctype doctype80 = new org.jsoup.parser.Token.Doctype();
        java.lang.String str81 = doctype80.getSystemIdentifier();
        boolean boolean82 = doctype80.forceQuirks;
        java.lang.String str83 = doctype80.getPublicIdentifier();
        java.lang.StringBuilder stringBuilder84 = doctype80.systemIdentifier;
        boolean boolean85 = htmlTreeBuilder0.process((org.jsoup.parser.Token) doctype80);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState86 = org.jsoup.parser.HtmlTreeBuilderState.BeforeHead;
        htmlTreeBuilder0.error(htmlTreeBuilderState86);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parser8);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(parseErrorList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNotNull(document51);
        org.junit.Assert.assertNotNull(parseErrorList58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(document60);
        org.junit.Assert.assertNotNull(parseErrorList64);
        org.junit.Assert.assertNotNull(parseErrorStream65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(document67);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(stringBuilder84);
        org.junit.Assert.assertEquals(stringBuilder84.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState86);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) -1);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder3 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document4 = xmlTreeBuilder3.doc;
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder5 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList10 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList12 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream13 = parseErrorList12.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor14 = parseErrorList12.iterator();
        boolean boolean15 = parseErrorList10.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList12);
        xmlTreeBuilder5.initialiseParse("<!---->", "hi!", parseErrorList10);
        xmlTreeBuilder3.errors = parseErrorList10;
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList18 = xmlTreeBuilder3.stack;
        org.jsoup.parser.Parser parser19 = parser2.setTreeBuilder((org.jsoup.parser.TreeBuilder) xmlTreeBuilder3);
        org.jsoup.nodes.Document document22 = parser19.parseInput("hi!", "[]");
        org.jsoup.parser.TreeBuilder treeBuilder23 = parser19.getTreeBuilder();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = new org.jsoup.parser.HtmlTreeBuilder();
        htmlTreeBuilder24.markInsertionMode();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder28 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList32 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int33 = parseErrorList32.getMaxSize();
        org.jsoup.nodes.Document document34 = htmlTreeBuilder28.parse("0: Doctype", "hi!", parseErrorList32);
        org.jsoup.parser.ParseError[] parseErrorArray35 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList36 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList36, parseErrorArray35);
        org.jsoup.parser.ParseError[] parseErrorArray38 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList39 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList39, parseErrorArray38);
        boolean boolean41 = parseErrorList36.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList39);
        java.lang.Object[] objArray42 = parseErrorList36.toArray();
        parseErrorList36.clear();
        org.jsoup.parser.ParseError[] parseErrorArray44 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList45 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList45, parseErrorArray44);
        org.jsoup.parser.ParseError[] parseErrorArray47 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList48 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList48, parseErrorArray47);
        boolean boolean50 = parseErrorList45.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList48);
        java.lang.Object[] objArray51 = parseErrorList45.toArray();
        parseErrorList45.clear();
        org.jsoup.parser.ParseError[] parseErrorArray53 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList54 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54, parseErrorArray53);
        boolean boolean56 = parseErrorList45.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54);
        boolean boolean57 = parseErrorList36.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54);
        java.lang.Object[] objArray58 = parseErrorList54.toArray();
        boolean boolean59 = parseErrorList32.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList54);
        org.jsoup.parser.ParseError[] parseErrorArray60 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList61 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList61, parseErrorArray60);
        org.jsoup.parser.ParseError[] parseErrorArray63 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList64 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList64, parseErrorArray63);
        boolean boolean66 = parseErrorList61.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList64);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor67 = parseErrorList64.listIterator();
        int int69 = parseErrorList64.lastIndexOf((java.lang.Object) 1.0d);
        org.jsoup.parser.Token.EndTag endTag73 = new org.jsoup.parser.Token.EndTag();
        char[] charArray76 = new char[] { '#', '#' };
        endTag73.appendAttributeValue(charArray76);
        endTag73.finaliseTag();
        boolean boolean79 = endTag73.isSelfClosing();
        org.jsoup.parser.Tag tag81 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean82 = tag81.isFormListed();
        org.jsoup.parser.Tag tag83 = tag81.setSelfClosing();
        boolean boolean84 = tag81.isKnownTag();
        java.lang.Object[] objArray86 = new java.lang.Object[] { boolean79, tag81, "Doctype" };
        org.jsoup.parser.ParseError parseError87 = new org.jsoup.parser.ParseError((int) (short) 0, "[]", objArray86);
        parseErrorList64.add(0, parseError87);
        boolean boolean89 = parseErrorList32.add(parseError87);
        org.jsoup.nodes.Document document90 = htmlTreeBuilder24.parse("\uffff", "", parseErrorList32);
        org.jsoup.parser.Parser parser91 = parser19.setTreeBuilder((org.jsoup.parser.TreeBuilder) htmlTreeBuilder24);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState92 = htmlTreeBuilder24.state();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(parseErrorList12);
        org.junit.Assert.assertNotNull(parseErrorStream13);
        org.junit.Assert.assertNotNull(parseErrorItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(elementList18);
        org.junit.Assert.assertNotNull(parser19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(treeBuilder23);
        org.junit.Assert.assertNotNull(parseErrorList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(parseErrorArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(parseErrorArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(parseErrorArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(parseErrorArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(parseErrorArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(parseErrorArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(parseErrorItor67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(tag81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(tag83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[false, hi!, Doctype]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[false, hi!, Doctype]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(document90);
        org.junit.Assert.assertNotNull(parser91);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState92);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList4 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int5 = parseErrorList4.getMaxSize();
        org.jsoup.nodes.Document document6 = htmlTreeBuilder0.parse("0: Doctype", "hi!", parseErrorList4);
        boolean boolean7 = htmlTreeBuilder0.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState8 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder0.error(htmlTreeBuilderState8);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState10 = null;
        htmlTreeBuilder0.transition(htmlTreeBuilderState10);
        htmlTreeBuilder0.popStackToClose("hi!");
        org.jsoup.nodes.FormElement formElement14 = htmlTreeBuilder0.getFormElement();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder15 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList19 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int20 = parseErrorList19.getMaxSize();
        org.jsoup.nodes.Document document21 = htmlTreeBuilder15.parse("0: Doctype", "hi!", parseErrorList19);
        org.jsoup.parser.ParseErrorList parseErrorList25 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream26 = parseErrorList25.stream();
        boolean boolean27 = parseErrorList25.canAddError();
        org.jsoup.nodes.Document document28 = htmlTreeBuilder15.parse("EndTag", "hi!#", parseErrorList25);
        java.lang.String[] strArray36 = new java.lang.String[] { "EndTag", "", "Doctype", "0: Doctype", "EndTag", "[]" };
        boolean boolean37 = htmlTreeBuilder15.inScope("hi!#", strArray36);
        org.jsoup.parser.ParseErrorList parseErrorList42 = new org.jsoup.parser.ParseErrorList((int) 'a', (int) (byte) -1);
        org.jsoup.nodes.Document document43 = htmlTreeBuilder15.parse("0: Doctype", "", parseErrorList42);
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder44 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.nodes.Document document45 = xmlTreeBuilder44.doc;
        org.jsoup.parser.ParseErrorList parseErrorList49 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int50 = parseErrorList49.getMaxSize();
        org.jsoup.parser.ParseError[] parseErrorArray51 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList52 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList52, parseErrorArray51);
        org.jsoup.parser.ParseError[] parseErrorArray54 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList55 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList55, parseErrorArray54);
        boolean boolean57 = parseErrorList52.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList55);
        org.jsoup.parser.ParseError[] parseErrorArray58 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList59 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59, parseErrorArray58);
        boolean boolean61 = parseErrorList55.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59);
        parseErrorList59.clear();
        boolean boolean63 = parseErrorList49.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList59);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor64 = parseErrorList49.iterator();
        org.jsoup.nodes.Document document65 = xmlTreeBuilder44.parse("<hi!>", "0: []", parseErrorList49);
        htmlTreeBuilder15.push((org.jsoup.nodes.Element) document65);
        htmlTreeBuilder0.setHeadElement((org.jsoup.nodes.Element) document65);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState68 = htmlTreeBuilder0.originalState();
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder69 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList73 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int74 = parseErrorList73.getMaxSize();
        org.jsoup.nodes.Document document75 = htmlTreeBuilder69.parse("0: Doctype", "hi!", parseErrorList73);
        boolean boolean76 = htmlTreeBuilder69.framesetOk();
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState77 = org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable;
        htmlTreeBuilder69.error(htmlTreeBuilderState77);
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState79 = null;
        htmlTreeBuilder69.transition(htmlTreeBuilderState79);
        org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> elementList81 = htmlTreeBuilder69.stack;
        org.jsoup.parser.Token.StartTag startTag83 = new org.jsoup.parser.Token.StartTag("<!---->");
        org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState84 = org.jsoup.parser.HtmlTreeBuilderState.AfterFrameset;
        boolean boolean85 = htmlTreeBuilder69.process((org.jsoup.parser.Token) startTag83, htmlTreeBuilderState84);
        org.jsoup.nodes.Element element86 = htmlTreeBuilder0.insertEmpty(startTag83);
        org.jsoup.parser.ParseErrorList parseErrorList90 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.ListIterator<org.jsoup.parser.ParseError> parseErrorItor91 = parseErrorList90.listIterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor92 = parseErrorList90.iterator();
        org.jsoup.nodes.Document document93 = htmlTreeBuilder0.parse("[100: ]", "</hi![]>", parseErrorList90);
        java.util.stream.Stream[] streamArray95 = new java.util.stream.Stream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.Stream<org.jsoup.parser.ParseError>[] parseErrorStreamArray96 = (java.util.stream.Stream<org.jsoup.parser.ParseError>[]) streamArray95;
        java.util.stream.Stream<org.jsoup.parser.ParseError>[] parseErrorStreamArray97 = parseErrorList90.toArray(parseErrorStreamArray96);
        org.junit.Assert.assertNotNull(parseErrorList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState8);
        org.junit.Assert.assertNull(formElement14);
        org.junit.Assert.assertNotNull(parseErrorList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNotNull(parseErrorList25);
        org.junit.Assert.assertNotNull(parseErrorStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertNull(document45);
        org.junit.Assert.assertNotNull(parseErrorList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(parseErrorArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(parseErrorArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(parseErrorArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(parseErrorItor64);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertNull(htmlTreeBuilderState68);
        org.junit.Assert.assertNotNull(parseErrorList73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(document75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState77);
        org.junit.Assert.assertNotNull(elementList81);
        org.junit.Assert.assertNotNull(htmlTreeBuilderState84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(element86);
        org.junit.Assert.assertNotNull(parseErrorList90);
        org.junit.Assert.assertNotNull(parseErrorItor91);
        org.junit.Assert.assertNotNull(parseErrorItor92);
        org.junit.Assert.assertNotNull(document93);
        org.junit.Assert.assertNotNull(streamArray95);
        org.junit.Assert.assertNotNull(parseErrorStreamArray96);
        org.junit.Assert.assertNotNull(parseErrorStreamArray97);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser2 = parser0.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document5 = parser0.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document8 = parser0.parseInput("<hi!>", "[]");
        java.util.List<org.jsoup.parser.ParseError> parseErrorList9 = parser0.getErrors();
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream10 = parseErrorList9.parallelStream();
        org.junit.Assert.assertNotNull(parser0);
        org.junit.Assert.assertNotNull(parser2);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNotNull(parseErrorList9);
        org.junit.Assert.assertNotNull(parseErrorStream10);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.jsoup.parser.Token.EndTag endTag1 = new org.jsoup.parser.Token.EndTag("Doctype");
        endTag1.appendTagName('\ufffd');
        java.lang.String str4 = endTag1.toString();
        org.jsoup.parser.Token.StartTag startTag6 = new org.jsoup.parser.Token.StartTag();
        startTag6.appendAttributeValue("hi!");
        org.jsoup.parser.Token.StartTag startTag9 = startTag6.asStartTag();
        org.jsoup.parser.Token.Tag tag11 = startTag9.name("");
        org.jsoup.parser.Token.StartTag startTag12 = new org.jsoup.parser.Token.StartTag();
        org.jsoup.nodes.Attributes attributes13 = startTag12.getAttributes();
        tag11.attributes = attributes13;
        org.jsoup.parser.Token.StartTag startTag15 = new org.jsoup.parser.Token.StartTag("-1: []", attributes13);
        endTag1.attributes = attributes13;
        endTag1.appendTagName('\ufffd');
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd>" + "'", str4, "\ufffd>");
        org.junit.Assert.assertNotNull(startTag9);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNotNull(attributes13);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("EndTag");
        boolean boolean2 = tokenQueue1.isEmpty();
        java.lang.String str4 = tokenQueue1.consumeToIgnoreCase("<hi!>");
        java.lang.String str5 = tokenQueue1.consumeTagName();
        tokenQueue1.addFirst((java.lang.Character) '\uffff');
        // The following exception was thrown during execution in test generation
        try {
            tokenQueue1.consume("St");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Queue did not match expected sequence");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EndTag" + "'", str4, "EndTag");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.Parser parser1 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder0);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder2 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList6 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int7 = parseErrorList6.getMaxSize();
        org.jsoup.nodes.Document document8 = htmlTreeBuilder2.parse("0: Doctype", "hi!", parseErrorList6);
        boolean boolean9 = htmlTreeBuilder2.framesetOk();
        org.jsoup.parser.Parser parser10 = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.parser.Parser parser12 = parser10.setTrackErrors((int) (byte) 100);
        org.jsoup.nodes.Document document15 = parser10.parseInput("Doctype", "[]");
        org.jsoup.nodes.Document document18 = parser10.parseInput("<hi!>", "[]");
        htmlTreeBuilder2.removeFromActiveFormattingElements((org.jsoup.nodes.Element) document18);
        java.lang.String[] strArray20 = new java.lang.String[] {};
        boolean boolean21 = htmlTreeBuilder2.inScope(strArray20);
        java.lang.String str22 = htmlTreeBuilder2.toString();
        org.jsoup.parser.Tokeniser tokeniser23 = htmlTreeBuilder2.tokeniser;
        java.util.List<org.jsoup.parser.Token.Character> characterList24 = htmlTreeBuilder2.getPendingTableCharacters();
        htmlTreeBuilder0.setPendingTableCharacters(characterList24);
        org.jsoup.parser.CharacterReader characterReader26 = htmlTreeBuilder0.reader;
        org.junit.Assert.assertNotNull(parseErrorList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(parser10);
        org.junit.Assert.assertNotNull(parser12);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(tokeniser23);
        org.junit.Assert.assertNotNull(characterList24);
        org.junit.Assert.assertNull(characterReader26);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.jsoup.parser.XmlTreeBuilder xmlTreeBuilder0 = new org.jsoup.parser.XmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList5 = new org.jsoup.parser.ParseErrorList((int) (byte) 100, (int) (byte) 10);
        org.jsoup.parser.ParseErrorList parseErrorList7 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream8 = parseErrorList7.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor9 = parseErrorList7.iterator();
        boolean boolean10 = parseErrorList5.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7);
        xmlTreeBuilder0.initialiseParse("<!---->", "hi!", parseErrorList5);
        org.jsoup.parser.ParseErrorList parseErrorList15 = org.jsoup.parser.ParseErrorList.tracking(0);
        org.jsoup.nodes.Document document16 = xmlTreeBuilder0.parse("", "[]", parseErrorList15);
        org.jsoup.parser.Token.StartTag startTag18 = new org.jsoup.parser.Token.StartTag("hi!");
        org.jsoup.parser.Token.TokenType tokenType19 = startTag18.type;
        java.lang.String str20 = startTag18.toString();
        boolean boolean21 = xmlTreeBuilder0.process((org.jsoup.parser.Token) startTag18);
        org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder24 = new org.jsoup.parser.HtmlTreeBuilder();
        org.jsoup.parser.ParseErrorList parseErrorList28 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int29 = parseErrorList28.getMaxSize();
        org.jsoup.nodes.Document document30 = htmlTreeBuilder24.parse("0: Doctype", "hi!", parseErrorList28);
        boolean boolean31 = htmlTreeBuilder24.framesetOk();
        org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", "");
        htmlTreeBuilder24.setHeadElement((org.jsoup.nodes.Element) document34);
        org.jsoup.parser.CharacterReader characterReader38 = null;
        org.jsoup.parser.ParseErrorList parseErrorList40 = org.jsoup.parser.ParseErrorList.tracking(0);
        java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream41 = parseErrorList40.stream();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor42 = parseErrorList40.iterator();
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor43 = parseErrorList40.iterator();
        org.jsoup.parser.ParseErrorList parseErrorList45 = org.jsoup.parser.ParseErrorList.tracking(0);
        int int46 = parseErrorList45.getMaxSize();
        boolean boolean47 = parseErrorList40.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList45);
        org.jsoup.parser.Tokeniser tokeniser48 = new org.jsoup.parser.Tokeniser(characterReader38, parseErrorList45);
        java.util.Iterator<org.jsoup.parser.ParseError> parseErrorItor49 = parseErrorList45.iterator();
        htmlTreeBuilder24.initialiseParse("hi!", "hi!#", parseErrorList45);
        java.util.List<org.jsoup.nodes.Node> nodeList51 = xmlTreeBuilder0.parseFragment("S", "<Doctype>", parseErrorList45);
        org.jsoup.parser.ParseError[] parseErrorArray52 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList53 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList53, parseErrorArray52);
        org.jsoup.parser.ParseError[] parseErrorArray55 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList56 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList56, parseErrorArray55);
        boolean boolean58 = parseErrorList53.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList56);
        org.jsoup.parser.ParseError[] parseErrorArray59 = new org.jsoup.parser.ParseError[] {};
        java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList60 = new java.util.ArrayList<org.jsoup.parser.ParseError>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList60, parseErrorArray59);
        boolean boolean62 = parseErrorList56.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList60);
        java.util.List<org.jsoup.parser.ParseError> parseErrorList65 = parseErrorList60.subList(0, 0);
        boolean boolean66 = parseErrorList45.containsAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList65);
        org.junit.Assert.assertNotNull(parseErrorList7);
        org.junit.Assert.assertNotNull(parseErrorStream8);
        org.junit.Assert.assertNotNull(parseErrorItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseErrorList15);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertTrue("'" + tokenType19 + "' != '" + org.jsoup.parser.Token.TokenType.StartTag + "'", tokenType19.equals(org.jsoup.parser.Token.TokenType.StartTag));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<hi!>" + "'", str20, "<hi!>");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(parseErrorList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNotNull(parseErrorList40);
        org.junit.Assert.assertNotNull(parseErrorStream41);
        org.junit.Assert.assertNotNull(parseErrorItor42);
        org.junit.Assert.assertNotNull(parseErrorItor43);
        org.junit.Assert.assertNotNull(parseErrorList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(parseErrorItor49);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertNotNull(parseErrorArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(parseErrorArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(parseErrorArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(parseErrorList65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }
}
