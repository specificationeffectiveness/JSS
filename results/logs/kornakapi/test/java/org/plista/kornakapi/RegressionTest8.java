package org.plista.kornakapi;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest8 {

    public static boolean debug = false;

    @Test
    public void test04001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04001");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((long) '#', (double) 10L);
        double double7 = fixedCandidatesIDRescorer1.rescore((long) (byte) 0, (double) (byte) 1);
        double double10 = fixedCandidatesIDRescorer1.rescore((long) (byte) 10, (double) 100);
        double double13 = fixedCandidatesIDRescorer1.rescore(52L, 35.0d);
        double double16 = fixedCandidatesIDRescorer1.rescore((long) 100, (double) 35L);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
    }

    @Test
    public void test04002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04002");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setNumProcessorsForTraining((int) (short) 100);
        java.lang.String str3 = configuration0.getModelDirectory();
        configuration0.setNumProcessorsForTraining((int) (byte) 100);
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig6 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double7 = factorizationbasedRecommenderConfig6.getAlpha();
        double double8 = factorizationbasedRecommenderConfig6.getLambda();
        boolean boolean9 = factorizationbasedRecommenderConfig6.isUsesImplicitFeedback();
        factorizationbasedRecommenderConfig6.setUsesImplicitFeedback(true);
        double double12 = factorizationbasedRecommenderConfig6.getLambda();
        configuration0.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig6);
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig14 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double15 = factorizationbasedRecommenderConfig14.getAlpha();
        double double16 = factorizationbasedRecommenderConfig14.getLambda();
        int int17 = factorizationbasedRecommenderConfig14.getNumberOfFeatures();
        java.lang.String str18 = factorizationbasedRecommenderConfig14.getRetrainCronExpression();
        int int19 = factorizationbasedRecommenderConfig14.getNumberOfFeatures();
        factorizationbasedRecommenderConfig14.setNumberOfIterations((int) (short) 0);
        factorizationbasedRecommenderConfig14.setRetrainAfterPreferenceChanges((int) (byte) 100);
        double double24 = factorizationbasedRecommenderConfig14.getLambda();
        factorizationbasedRecommenderConfig14.setAlpha((double) (short) 10);
        factorizationbasedRecommenderConfig14.setNumberOfIterations(100);
        configuration0.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig14);
        configuration0.setNumProcessorsForTraining((-1));
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }

    @Test
    public void test04003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04003");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 0);
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges((int) (byte) 100);
        double double10 = factorizationbasedRecommenderConfig0.getLambda();
        factorizationbasedRecommenderConfig0.setAlpha((double) (short) 10);
        factorizationbasedRecommenderConfig0.setAlpha(1.0d);
        int int15 = factorizationbasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges((int) (byte) 100);
        double double18 = factorizationbasedRecommenderConfig0.getAlpha();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
    }

    @Test
    public void test04004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04004");
        org.plista.kornakapi.core.MutablePreference mutablePreference0 = new org.plista.kornakapi.core.MutablePreference();
        java.lang.String str1 = mutablePreference0.toString();
        long long2 = mutablePreference0.getItemID();
        long long3 = mutablePreference0.getItemID();
        long long4 = mutablePreference0.getUserID();
        mutablePreference0.set((long) (short) 0, 10000L, (float) (byte) 10);
        mutablePreference0.setValue((float) (short) 0);
        float float11 = mutablePreference0.getValue();
        java.lang.Class<?> wildcardClass12 = mutablePreference0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str1, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test04005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04005");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        javax.servlet.ServletConfig servletConfig4 = batchSetPreferencesServlet1.getServletConfig();
        addCandidateServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet1);
        javax.servlet.ServletConfig servletConfig6 = batchSetPreferencesServlet1.getServletConfig();
        batchSetPreferencesServlet1.destroy();
        java.lang.String str8 = batchSetPreferencesServlet1.getServletInfo();
        org.plista.kornakapi.web.MissingParameterException missingParameterException13 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException15 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException13.addSuppressed((java.lang.Throwable) missingParameterException15);
        java.lang.Throwable[] throwableArray17 = missingParameterException15.getSuppressed();
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException18 = new org.plista.kornakapi.web.InvalidParameterException("itemIDs", (java.lang.Throwable) missingParameterException15);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException19 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName", (java.lang.Throwable) invalidParameterException18);
        java.lang.Throwable[] throwableArray20 = invalidParameterException19.getSuppressed();
        org.plista.kornakapi.web.MissingParameterException missingParameterException23 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException25 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException23.addSuppressed((java.lang.Throwable) missingParameterException25);
        java.lang.Throwable[] throwableArray27 = missingParameterException25.getSuppressed();
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException28 = new org.plista.kornakapi.web.InvalidParameterException("itemIDs", (java.lang.Throwable) missingParameterException25);
        invalidParameterException19.addSuppressed((java.lang.Throwable) invalidParameterException28);
        org.plista.kornakapi.web.MissingParameterException missingParameterException31 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        invalidParameterException19.addSuppressed((java.lang.Throwable) missingParameterException31);
        java.lang.Throwable[] throwableArray33 = missingParameterException31.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            batchSetPreferencesServlet1.log("org.plista.kornakapi.web.InvalidParameterException: MutablePreference{userID=0, itemID=0, value=-1.0}", (java.lang.Throwable) missingParameterException31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(servletConfig4);
        org.junit.Assert.assertNotNull(servletConfig6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray33);
    }

    @Test
    public void test04006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04006");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        addCandidateServlet0.destroy();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet2 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet3 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet4 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet3.init((javax.servlet.ServletConfig) batchSetPreferencesServlet4);
        batchDeleteCandidatesServlet2.init((javax.servlet.ServletConfig) batchSetPreferencesServlet4);
        javax.servlet.ServletConfig servletConfig7 = batchSetPreferencesServlet4.getServletConfig();
        addCandidateServlet0.init(servletConfig7);
        java.lang.String str9 = addCandidateServlet0.getServletInfo();
        java.lang.String str10 = addCandidateServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet11 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str12 = batchDeleteCandidatesServlet11.getServletInfo();
        batchDeleteCandidatesServlet11.init();
        javax.servlet.ServletConfig servletConfig14 = null;
        batchDeleteCandidatesServlet11.init(servletConfig14);
        batchDeleteCandidatesServlet11.destroy();
        javax.servlet.ServletConfig servletConfig17 = batchDeleteCandidatesServlet11.getServletConfig();
        addCandidateServlet0.init(servletConfig17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = addCandidateServlet0.getInitParameter("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(servletConfig17);
    }

    @Test
    public void test04007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04007");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        addCandidateServlet0.destroy();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet3 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet2.init((javax.servlet.ServletConfig) batchSetPreferencesServlet3);
        addCandidateServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        java.lang.String str6 = batchSetPreferencesServlet2.getServletInfo();
        java.lang.String str7 = batchSetPreferencesServlet2.getServletInfo();
        java.lang.String str8 = batchSetPreferencesServlet2.getServletInfo();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = batchSetPreferencesServlet2.getServletName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test04008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04008");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage3 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.storage.Storage storage4 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration5 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig6 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double7 = factorizationbasedRecommenderConfig6.getAlpha();
        double double8 = factorizationbasedRecommenderConfig6.getLambda();
        int int9 = factorizationbasedRecommenderConfig6.getNumberOfFeatures();
        factorizationbasedRecommenderConfig6.setNumberOfIterations(0);
        factorizationbasedRecommenderConfig6.setNumberOfFeatures((int) (short) 100);
        boolean boolean14 = factorizationbasedRecommenderConfig6.isUsesImplicitFeedback();
// flaky:         configuration5.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig6);
        org.plista.kornakapi.web.Components components16 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration17 = null; // flaky: components16.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler18 = null; // flaky: components16.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler19 = null; // flaky: components16.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration20 = null; // flaky: components16.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration21 = null; // flaky: components16.getConfiguration();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig22 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig22.setSimilarityClass("");
        java.lang.String str25 = itembasedRecommenderConfig22.getName();
        java.lang.String str26 = itembasedRecommenderConfig22.getSimilarityClass();
        itembasedRecommenderConfig22.setName("");
        java.lang.String str29 = itembasedRecommenderConfig22.getSimilarityClass();
// flaky:         configuration21.addItembasedRecommender(itembasedRecommenderConfig22);
        itembasedRecommenderConfig22.setSimilarItemsPerItem((int) (byte) 1);
// flaky:         configuration5.addItembasedRecommender(itembasedRecommenderConfig22);
        java.lang.String str34 = null; // flaky: configuration5.getModelDirectory();
// flaky:         configuration5.setModelDirectory("MutablePreference{userID=100, itemID=0, value=1.0}");
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(storage3);
        org.junit.Assert.assertNull(storage4);
// flaky:         org.junit.Assert.assertNotNull(configuration5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertNotNull(components16);
// flaky:         org.junit.Assert.assertNotNull(configuration17);
        org.junit.Assert.assertNull(trainingScheduler18);
        org.junit.Assert.assertNull(trainingScheduler19);
// flaky:         org.junit.Assert.assertNotNull(configuration20);
// flaky:         org.junit.Assert.assertNotNull(configuration21);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "itemID" + "'", str34, "itemID");
    }

    @Test
    public void test04009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04009");
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler0 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener3 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler0, "org.plista.kornakapi.web.InvalidParameterException: howMany", (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            inMemoryPreferenceChangeListener3.notifyOfPreferenceChange();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04010");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = null; // flaky: components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration4 = null; // flaky: components0.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList5 = null; // flaky: configuration4.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration6 = null; // flaky: configuration4.getStorageConfiguration();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration7 = null; // flaky: configuration4.getStorageConfiguration();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration8 = null; // flaky: configuration4.getStorageConfiguration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList9 = null; // flaky: configuration4.getItembasedRecommenders();
        java.lang.Class<?> wildcardClass10 = null; // flaky: configuration4.getClass();
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(trainingScheduler3);
// flaky:         org.junit.Assert.assertNotNull(configuration4);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList5);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration6);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration7);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration8);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList9);
// flaky:         org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test04011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04011");
        org.plista.kornakapi.core.MutableCandidate mutableCandidate0 = new org.plista.kornakapi.core.MutableCandidate();
        long long1 = mutableCandidate0.getItemID();
        mutableCandidate0.set("itemIDs", (long) 0);
        java.lang.String str5 = mutableCandidate0.getLabel();
        long long6 = mutableCandidate0.getItemID();
        java.lang.String str7 = mutableCandidate0.getLabel();
        long long8 = mutableCandidate0.getItemID();
        long long9 = mutableCandidate0.getItemID();
        long long10 = mutableCandidate0.getItemID();
        mutableCandidate0.set("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName", 0L);
        mutableCandidate0.set("MutablePreference{userID=0, itemID=10, value=10.0}", (long) (-1));
        mutableCandidate0.set("MutablePreference{userID=35, itemID=97, value=52.0}", 0L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "itemIDs" + "'", str5, "itemIDs");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "itemIDs" + "'", str7, "itemIDs");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test04012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04012");
        org.plista.kornakapi.web.MissingParameterException missingParameterException1 = new org.plista.kornakapi.web.MissingParameterException("MutablePreference{userID=10, itemID=100, value=10000.0}");
        java.lang.Throwable[] throwableArray2 = missingParameterException1.getSuppressed();
        java.lang.String str3 = missingParameterException1.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.plista.kornakapi.web.MissingParameterException: MutablePreference{userID=10, itemID=100, value=10000.0}" + "'", str3, "org.plista.kornakapi.web.MissingParameterException: MutablePreference{userID=10, itemID=100, value=10000.0}");
    }

    @Test
    public void test04013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04013");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage3 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.storage.Storage storage4 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration5 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig6 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double7 = factorizationbasedRecommenderConfig6.getAlpha();
        double double8 = factorizationbasedRecommenderConfig6.getLambda();
        int int9 = factorizationbasedRecommenderConfig6.getNumberOfFeatures();
        factorizationbasedRecommenderConfig6.setNumberOfIterations(0);
        factorizationbasedRecommenderConfig6.setNumberOfFeatures((int) (short) 100);
        boolean boolean14 = factorizationbasedRecommenderConfig6.isUsesImplicitFeedback();
// flaky:         configuration5.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig6);
        org.plista.kornakapi.web.Components components16 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration17 = null; // flaky: components16.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler18 = null; // flaky: components16.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler19 = null; // flaky: components16.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration20 = null; // flaky: components16.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration21 = null; // flaky: components16.getConfiguration();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig22 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig22.setSimilarityClass("");
        java.lang.String str25 = itembasedRecommenderConfig22.getName();
        java.lang.String str26 = itembasedRecommenderConfig22.getSimilarityClass();
        itembasedRecommenderConfig22.setName("");
        java.lang.String str29 = itembasedRecommenderConfig22.getSimilarityClass();
// flaky:         configuration21.addItembasedRecommender(itembasedRecommenderConfig22);
        itembasedRecommenderConfig22.setSimilarItemsPerItem((int) (byte) 1);
// flaky:         configuration5.addItembasedRecommender(itembasedRecommenderConfig22);
        org.plista.kornakapi.web.Components components34 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.storage.Storage storage35 = null; // flaky: components34.storage();
        org.plista.kornakapi.core.config.Configuration configuration36 = null; // flaky: components34.getConfiguration();
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig37 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double38 = factorizationbasedRecommenderConfig37.getAlpha();
        double double39 = factorizationbasedRecommenderConfig37.getLambda();
        boolean boolean40 = factorizationbasedRecommenderConfig37.isUsesImplicitFeedback();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer41 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig37);
        double double42 = factorizationbasedRecommenderConfig37.getAlpha();
// flaky:         configuration36.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig37);
        double double44 = factorizationbasedRecommenderConfig37.getAlpha();
// flaky:         configuration5.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig37);
        java.lang.String str46 = null; // flaky: configuration5.getModelDirectory();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration47 = null; // flaky: configuration5.getStorageConfiguration();
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(storage3);
        org.junit.Assert.assertNull(storage4);
// flaky:         org.junit.Assert.assertNotNull(configuration5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertNotNull(components16);
// flaky:         org.junit.Assert.assertNotNull(configuration17);
        org.junit.Assert.assertNull(trainingScheduler18);
        org.junit.Assert.assertNull(trainingScheduler19);
// flaky:         org.junit.Assert.assertNotNull(configuration20);
// flaky:         org.junit.Assert.assertNotNull(configuration21);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
// flaky:         org.junit.Assert.assertNotNull(components34);
        org.junit.Assert.assertNull(storage35);
// flaky:         org.junit.Assert.assertNotNull(configuration36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration47);
    }

    @Test
    public void test04014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04014");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer2 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 0);
        java.lang.Class<?> wildcardClass5 = factorizationbasedRecommenderConfig0.getClass();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test04015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04015");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler2 = null; // flaky: components0.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = null; // flaky: components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration4 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig5 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str6 = itembasedRecommenderConfig5.getSimilarityClass();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer7 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig5);
        java.lang.String str8 = itembasedRecommenderConfig5.getSimilarityClass();
        itembasedRecommenderConfig5.setRetrainAfterPreferenceChanges((int) (short) 100);
// flaky:         configuration4.addItembasedRecommender(itembasedRecommenderConfig5);
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList12 = null; // flaky: configuration4.getFactorizationbasedRecommenders();
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig13 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double14 = factorizationbasedRecommenderConfig13.getAlpha();
        double double15 = factorizationbasedRecommenderConfig13.getLambda();
        int int16 = factorizationbasedRecommenderConfig13.getNumberOfFeatures();
        factorizationbasedRecommenderConfig13.setUsesImplicitFeedback(true);
        double double19 = factorizationbasedRecommenderConfig13.getAlpha();
        java.lang.String str20 = factorizationbasedRecommenderConfig13.getRetrainCronExpression();
        int int21 = factorizationbasedRecommenderConfig13.getRetrainAfterPreferenceChanges();
        boolean boolean22 = factorizationbasedRecommenderConfig13.isUsesImplicitFeedback();
        factorizationbasedRecommenderConfig13.setLambda((double) 1);
        int int25 = factorizationbasedRecommenderConfig13.getNumberOfFeatures();
        double double26 = factorizationbasedRecommenderConfig13.getLambda();
        int int27 = factorizationbasedRecommenderConfig13.getNumberOfIterations();
// flaky:         configuration4.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig13);
        factorizationbasedRecommenderConfig13.setRetrainCronExpression("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.MissingParameterException: itemIDs");
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
        org.junit.Assert.assertNull(trainingScheduler2);
        org.junit.Assert.assertNull(trainingScheduler3);
// flaky:         org.junit.Assert.assertNotNull(configuration4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
// flaky:         org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test04016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04016");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet1 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str2 = batchDeleteCandidatesServlet1.getServletInfo();
        java.lang.String str3 = batchDeleteCandidatesServlet1.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet4 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet5 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet6 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet5.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        setPreferenceServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet9 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet4.init((javax.servlet.ServletConfig) recommendServlet9);
        batchDeleteCandidatesServlet1.init((javax.servlet.ServletConfig) setPreferenceServlet4);
        batchDeleteCandidatesServlet1.destroy();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet1);
        javax.servlet.ServletConfig servletConfig14 = batchDeleteCandidatesServlet0.getServletConfig();
        // The following exception was thrown during execution in test generation
        try {
            javax.servlet.ServletContext servletContext15 = batchDeleteCandidatesServlet0.getServletContext();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(servletConfig14);
    }

    @Test
    public void test04017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04017");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        double double6 = factorizationbasedRecommenderConfig0.getAlpha();
        java.lang.String str7 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int8 = factorizationbasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        int int9 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        factorizationbasedRecommenderConfig0.setNumberOfFeatures((int) '#');
        double double12 = factorizationbasedRecommenderConfig0.getLambda();
        factorizationbasedRecommenderConfig0.setAlpha((double) (short) 100);
        java.lang.String str15 = factorizationbasedRecommenderConfig0.getName();
        int int16 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test04018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04018");
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener0 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener0.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener2 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener0.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener2);
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener6 = null;
        delegatingPreferenceChangeListener0.addDelegate(preferenceChangeListener6);
    }

    @Test
    public void test04019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04019");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet1 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str2 = batchDeleteCandidatesServlet1.getServletInfo();
        java.lang.String str3 = batchDeleteCandidatesServlet1.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet4 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet5 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet6 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet5.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        setPreferenceServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet9 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet4.init((javax.servlet.ServletConfig) recommendServlet9);
        batchDeleteCandidatesServlet1.init((javax.servlet.ServletConfig) setPreferenceServlet4);
        batchDeleteCandidatesServlet1.destroy();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet1);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet14 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet15 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet16 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet15.init((javax.servlet.ServletConfig) batchSetPreferencesServlet16);
        javax.servlet.ServletConfig servletConfig18 = batchSetPreferencesServlet15.getServletConfig();
        addCandidateServlet14.init((javax.servlet.ServletConfig) batchSetPreferencesServlet15);
        batchSetPreferencesServlet15.init();
        java.lang.String str21 = batchSetPreferencesServlet15.getServletInfo();
        batchSetPreferencesServlet15.init();
        batchSetPreferencesServlet15.init();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet15);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet25 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet26 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet27 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet26.init((javax.servlet.ServletConfig) batchSetPreferencesServlet27);
        javax.servlet.ServletConfig servletConfig29 = batchSetPreferencesServlet26.getServletConfig();
        addCandidateServlet25.init((javax.servlet.ServletConfig) batchSetPreferencesServlet26);
        javax.servlet.ServletConfig servletConfig31 = addCandidateServlet25.getServletConfig();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet32 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet33 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet34 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet33.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet34);
        setPreferenceServlet32.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet34);
        javax.servlet.ServletConfig servletConfig37 = setPreferenceServlet32.getServletConfig();
        addCandidateServlet25.init((javax.servlet.ServletConfig) setPreferenceServlet32);
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet39 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet39.init();
        java.lang.String str41 = batchAddCandidatesServlet39.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet42 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str43 = batchDeleteCandidatesServlet42.getServletInfo();
        batchDeleteCandidatesServlet42.destroy();
        javax.servlet.ServletConfig servletConfig45 = batchDeleteCandidatesServlet42.getServletConfig();
        batchAddCandidatesServlet39.init(servletConfig45);
        batchAddCandidatesServlet39.init();
        addCandidateServlet25.init((javax.servlet.ServletConfig) batchAddCandidatesServlet39);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) addCandidateServlet25);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet50 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str51 = batchDeleteCandidatesServlet50.getServletInfo();
        batchDeleteCandidatesServlet50.init();
        java.lang.String str53 = batchDeleteCandidatesServlet50.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet54 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet54.init();
        batchDeleteCandidatesServlet50.init((javax.servlet.ServletConfig) batchAddCandidatesServlet54);
        batchDeleteCandidatesServlet50.destroy();
        batchDeleteCandidatesServlet50.init();
        java.lang.String str59 = batchDeleteCandidatesServlet50.getServletInfo();
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet60 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str61 = trainServlet60.getServletInfo();
        javax.servlet.ServletConfig servletConfig62 = trainServlet60.getServletConfig();
        trainServlet60.destroy();
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet64 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet64.init();
        java.lang.String str66 = batchAddCandidatesServlet64.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet67 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str68 = batchDeleteCandidatesServlet67.getServletInfo();
        batchDeleteCandidatesServlet67.destroy();
        javax.servlet.ServletConfig servletConfig70 = batchDeleteCandidatesServlet67.getServletConfig();
        batchAddCandidatesServlet64.init(servletConfig70);
        batchAddCandidatesServlet64.init();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet73 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet74 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet75 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet74.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet75);
        setPreferenceServlet73.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet75);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet78 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet73.init((javax.servlet.ServletConfig) recommendServlet78);
        recommendServlet78.init();
        batchAddCandidatesServlet64.init((javax.servlet.ServletConfig) recommendServlet78);
        recommendServlet78.init();
        trainServlet60.init((javax.servlet.ServletConfig) recommendServlet78);
        batchDeleteCandidatesServlet50.init((javax.servlet.ServletConfig) recommendServlet78);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) recommendServlet78);
        org.plista.kornakapi.web.MissingParameterException missingParameterException90 = new org.plista.kornakapi.web.MissingParameterException("MutablePreference{userID=-1, itemID=10, value=10.0}");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException91 = new org.plista.kornakapi.web.InvalidParameterException("batchSize", (java.lang.Throwable) missingParameterException90);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException92 = new org.plista.kornakapi.web.InvalidParameterException("MutablePreference{userID=10000, itemID=-1, value=10.0}", (java.lang.Throwable) invalidParameterException91);
        // The following exception was thrown during execution in test generation
        try {
            batchDeleteCandidatesServlet0.log("MutablePreference{userID=100, itemID=-1, value=1.0}", (java.lang.Throwable) invalidParameterException91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(servletConfig18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(servletConfig29);
        org.junit.Assert.assertNotNull(servletConfig31);
        org.junit.Assert.assertNotNull(servletConfig37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(servletConfig45);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNull(servletConfig62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNull(servletConfig70);
    }

    @Test
    public void test04020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04020");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str1 = batchDeleteCandidatesServlet0.getServletInfo();
        batchDeleteCandidatesServlet0.init();
        java.lang.String str3 = batchDeleteCandidatesServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet4 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet4.init();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchAddCandidatesServlet4);
        batchDeleteCandidatesServlet0.destroy();
        batchDeleteCandidatesServlet0.init();
        javax.servlet.ServletConfig servletConfig9 = batchDeleteCandidatesServlet0.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet10 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet11 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet12 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet11.init((javax.servlet.ServletConfig) batchSetPreferencesServlet12);
        batchDeleteCandidatesServlet10.init((javax.servlet.ServletConfig) batchSetPreferencesServlet12);
        java.lang.String str15 = batchSetPreferencesServlet12.getServletInfo();
        batchSetPreferencesServlet12.init();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet12);
        javax.servlet.ServletConfig servletConfig18 = batchSetPreferencesServlet12.getServletConfig();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration19 = batchSetPreferencesServlet12.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(servletConfig9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(servletConfig18);
    }

    @Test
    public void test04021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04021");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 0);
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges(10000);
        double double10 = factorizationbasedRecommenderConfig0.getLambda();
        int int11 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(false);
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer14 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        java.io.File file15 = null;
        org.plista.kornakapi.core.storage.Storage storage16 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender17 = null;
        // The following exception was thrown during execution in test generation
        try {
            factorizationbasedInMemoryTrainer14.train(file15, storage16, recommender17, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test04022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04022");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = null; // flaky: components0.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler4 = null; // flaky: components0.scheduler();
        org.plista.kornakapi.core.storage.Storage storage5 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration6 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage7 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration8 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration9 = null; // flaky: components0.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList10 = null; // flaky: configuration9.getItembasedRecommenders();
        org.plista.kornakapi.web.Components components11 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.storage.Storage storage12 = null; // flaky: components11.storage();
        org.plista.kornakapi.core.config.Configuration configuration13 = null; // flaky: components11.getConfiguration();
        java.lang.String str14 = null; // flaky: configuration13.getModelDirectory();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration15 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str16 = storageConfiguration15.getJdbcDriverClass();
        storageConfiguration15.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str19 = storageConfiguration15.getJdbcUrl();
        java.lang.String str20 = storageConfiguration15.getJdbcDriverClass();
        storageConfiguration15.setJdbcDriverClass("batchSize");
        java.lang.String str23 = storageConfiguration15.getPassword();
        java.lang.String str24 = storageConfiguration15.getJdbcUrl();
// flaky:         configuration13.setStorageConfiguration(storageConfiguration15);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration26 = null; // flaky: configuration13.getStorageConfiguration();
// flaky:         configuration9.setStorageConfiguration(storageConfiguration26);
        java.lang.String str28 = null; // flaky: storageConfiguration26.getJdbcDriverClass();
// flaky:         storageConfiguration26.setPassword("MutablePreference{userID=0, itemID=0, value=0.0}");
// flaky:         storageConfiguration26.setJdbcUrl("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(trainingScheduler3);
        org.junit.Assert.assertNull(trainingScheduler4);
        org.junit.Assert.assertNull(storage5);
// flaky:         org.junit.Assert.assertNotNull(configuration6);
        org.junit.Assert.assertNull(storage7);
// flaky:         org.junit.Assert.assertNotNull(configuration8);
// flaky:         org.junit.Assert.assertNotNull(configuration9);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList10);
// flaky:         org.junit.Assert.assertNotNull(components11);
        org.junit.Assert.assertNull(storage12);
// flaky:         org.junit.Assert.assertNotNull(configuration13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: MutablePreference{userID=-1, itemID=10, value=10.0}" + "'", str14, "org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: MutablePreference{userID=-1, itemID=10, value=10.0}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "batchSize" + "'", str28, "batchSize");
    }

    @Test
    public void test04023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04023");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        boolean boolean3 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer4 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) -1);
        factorizationbasedRecommenderConfig0.setNumberOfIterations(10);
        factorizationbasedRecommenderConfig0.setAlpha((double) 97.0f);
        factorizationbasedRecommenderConfig0.setName("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.MissingParameterException: itemIDs");
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test04024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04024");
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler0 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener3 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler0, "MutablePreference{userID=0, itemID=0, value=1.0}", 35);
        inMemoryPreferenceChangeListener3.notifyOfPreferenceChange();
        inMemoryPreferenceChangeListener3.notifyOfPreferenceChange();
    }

    @Test
    public void test04025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04025");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((long) '#', (double) 10L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer5 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer6 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double9 = fixedCandidatesIDRescorer1.rescore(0L, (double) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = fixedCandidatesIDRescorer1.isFiltered((long) 35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
    }

    @Test
    public void test04026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04026");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig0.setSimilarityClass("");
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer3 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        itembasedRecommenderConfig0.setRetrainCronExpression("");
        itembasedRecommenderConfig0.setSimilarItemsPerItem(10);
        java.lang.String str8 = itembasedRecommenderConfig0.getName();
        int int9 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        java.lang.String str10 = itembasedRecommenderConfig0.getSimilarityClass();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer11 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        java.io.File file12 = null;
        org.plista.kornakapi.core.storage.Storage storage13 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender14 = null;
        // The following exception was thrown during execution in test generation
        try {
            multithreadedItembasedInMemoryTrainer11.train(file12, storage13, recommender14, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test04027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04027");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setNumProcessorsForTraining((int) (short) 100);
        java.lang.String str3 = configuration0.getModelDirectory();
        configuration0.setNumProcessorsForTraining((int) (byte) 100);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration6 = configuration0.getStorageConfiguration();
        java.lang.String str7 = configuration0.getModelDirectory();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig8 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str9 = itembasedRecommenderConfig8.getSimilarityClass();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer10 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig8);
        itembasedRecommenderConfig8.setSimilarityClass("recommender");
        java.lang.String str13 = itembasedRecommenderConfig8.getSimilarityClass();
        configuration0.addItembasedRecommender(itembasedRecommenderConfig8);
        configuration0.setModelDirectory("itemID");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig17 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double18 = factorizationbasedRecommenderConfig17.getAlpha();
        double double19 = factorizationbasedRecommenderConfig17.getLambda();
        boolean boolean20 = factorizationbasedRecommenderConfig17.isUsesImplicitFeedback();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer21 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig17);
        double double22 = factorizationbasedRecommenderConfig17.getAlpha();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer23 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig17);
        factorizationbasedRecommenderConfig17.setUsesImplicitFeedback(false);
        double double26 = factorizationbasedRecommenderConfig17.getLambda();
        factorizationbasedRecommenderConfig17.setNumberOfIterations((int) 'a');
        configuration0.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig17);
        double double30 = factorizationbasedRecommenderConfig17.getLambda();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(storageConfiguration6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "recommender" + "'", str13, "recommender");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test04028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04028");
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener0 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener0.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener0.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener3 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener3.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener5 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener5.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener3.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener5);
        delegatingPreferenceChangeListener0.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener3);
        delegatingPreferenceChangeListener0.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener10 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener10.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener10.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener10.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener0.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener10);
        delegatingPreferenceChangeListener0.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener16 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener16.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener18 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener18.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener16.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener18);
        delegatingPreferenceChangeListener18.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener18.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener18.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener24 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener24.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener26 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener26.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener24.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener26);
        delegatingPreferenceChangeListener26.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener26.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener31 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener31.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener33 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener33.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener33.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener31.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener33);
        delegatingPreferenceChangeListener33.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener26.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener33);
        delegatingPreferenceChangeListener26.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener26.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener26.notifyOfPreferenceChange();
        org.plista.kornakapi.web.Components components42 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.storage.Storage storage43 = null; // flaky: components42.storage();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener44 = null; // flaky: components42.preferenceChangeListener();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener45 = null; // flaky: components42.preferenceChangeListener();
// flaky:         preferenceChangeListener45.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener26.addDelegate(preferenceChangeListener45);
        delegatingPreferenceChangeListener18.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener26);
        delegatingPreferenceChangeListener0.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener18);
// flaky:         delegatingPreferenceChangeListener0.notifyOfPreferenceChange();
// flaky:         org.junit.Assert.assertNotNull(components42);
        org.junit.Assert.assertNull(storage43);
// flaky:         org.junit.Assert.assertNotNull(preferenceChangeListener44);
// flaky:         org.junit.Assert.assertNotNull(preferenceChangeListener45);
    }

    @Test
    public void test04029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04029");
        org.plista.kornakapi.web.MissingParameterException missingParameterException5 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        java.lang.Throwable[] throwableArray6 = missingParameterException5.getSuppressed();
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException7 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.MissingParameterException: itemID", (java.lang.Throwable) missingParameterException5);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException8 = new org.plista.kornakapi.web.InvalidParameterException("", (java.lang.Throwable) missingParameterException5);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException9 = new org.plista.kornakapi.web.InvalidParameterException("MutablePreference{userID=0, itemID=0, value=32.0}", (java.lang.Throwable) invalidParameterException8);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException10 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.MissingParameterException: itemID", (java.lang.Throwable) invalidParameterException9);
        java.lang.Throwable[] throwableArray11 = invalidParameterException9.getSuppressed();
        java.lang.Throwable[] throwableArray12 = invalidParameterException9.getSuppressed();
        org.plista.kornakapi.web.MissingParameterException missingParameterException14 = new org.plista.kornakapi.web.MissingParameterException("MutablePreference{userID=10, itemID=100, value=10000.0}");
        java.lang.Throwable[] throwableArray15 = missingParameterException14.getSuppressed();
        invalidParameterException9.addSuppressed((java.lang.Throwable) missingParameterException14);
        java.lang.String str17 = missingParameterException14.toString();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.plista.kornakapi.web.MissingParameterException: MutablePreference{userID=10, itemID=100, value=10000.0}" + "'", str17, "org.plista.kornakapi.web.MissingParameterException: MutablePreference{userID=10, itemID=100, value=10000.0}");
    }

    @Test
    public void test04030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04030");
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet0 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet1 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet2 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet1.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet2);
        setPreferenceServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet2);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet5 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet0.init((javax.servlet.ServletConfig) recommendServlet5);
        java.lang.String str7 = setPreferenceServlet0.getServletInfo();
        javax.servlet.ServletConfig servletConfig8 = setPreferenceServlet0.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet9 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet10 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet11 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet10.init((javax.servlet.ServletConfig) batchSetPreferencesServlet11);
        batchDeleteCandidatesServlet9.init((javax.servlet.ServletConfig) batchSetPreferencesServlet11);
        setPreferenceServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet11);
        javax.servlet.ServletRequest servletRequest15 = null;
        javax.servlet.ServletResponse servletResponse16 = null;
        // The following exception was thrown during execution in test generation
        try {
            batchSetPreferencesServlet11.service(servletRequest15, servletResponse16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(servletConfig8);
    }

    @Test
    public void test04031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04031");
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet0.init();
        java.lang.String str2 = batchAddCandidatesServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet3 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str4 = batchDeleteCandidatesServlet3.getServletInfo();
        batchDeleteCandidatesServlet3.destroy();
        javax.servlet.ServletConfig servletConfig6 = batchDeleteCandidatesServlet3.getServletConfig();
        batchAddCandidatesServlet0.init(servletConfig6);
        javax.servlet.ServletConfig servletConfig8 = batchAddCandidatesServlet0.getServletConfig();
        batchAddCandidatesServlet0.init();
        batchAddCandidatesServlet0.destroy();
        // The following exception was thrown during execution in test generation
        try {
            batchAddCandidatesServlet0.log("MutablePreference{userID=10, itemID=100, value=10000.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(servletConfig6);
        org.junit.Assert.assertNull(servletConfig8);
    }

    @Test
    public void test04032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04032");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        boolean boolean3 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer4 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        int int5 = factorizationbasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(false);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test04033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04033");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet1 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str2 = batchDeleteCandidatesServlet1.getServletInfo();
        java.lang.String str3 = batchDeleteCandidatesServlet1.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet4 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet5 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet6 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet5.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        setPreferenceServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet9 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet4.init((javax.servlet.ServletConfig) recommendServlet9);
        batchDeleteCandidatesServlet1.init((javax.servlet.ServletConfig) setPreferenceServlet4);
        batchDeleteCandidatesServlet1.destroy();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet1);
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet14 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet15 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet16 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet15.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet16);
        setPreferenceServlet14.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet16);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet19 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet14.init((javax.servlet.ServletConfig) recommendServlet19);
        java.lang.String str21 = setPreferenceServlet14.getServletInfo();
        javax.servlet.ServletConfig servletConfig22 = setPreferenceServlet14.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet23 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet24 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet25 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet24.init((javax.servlet.ServletConfig) batchSetPreferencesServlet25);
        batchDeleteCandidatesServlet23.init((javax.servlet.ServletConfig) batchSetPreferencesServlet25);
        setPreferenceServlet14.init((javax.servlet.ServletConfig) batchSetPreferencesServlet25);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet25);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration30 = batchSetPreferencesServlet25.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(servletConfig22);
    }

    @Test
    public void test04034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04034");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = null; // flaky: components0.getConfiguration();
        java.lang.String str3 = null; // flaky: configuration2.getModelDirectory();
        int int4 = 0; // flaky: configuration2.getNumProcessorsForTraining();
        int int5 = 0; // flaky: configuration2.getNumProcessorsForTraining();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList6 = null; // flaky: configuration2.getItembasedRecommenders();
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "value" + "'", str3, "value");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList6);
    }

    @Test
    public void test04035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04035");
        org.plista.kornakapi.web.MissingParameterException missingParameterException3 = new org.plista.kornakapi.web.MissingParameterException("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: itemIDs");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException4 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.InvalidParameterException: label", (java.lang.Throwable) missingParameterException3);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException5 = new org.plista.kornakapi.web.InvalidParameterException("MutablePreference{userID=10000, itemID=0, value=97.0}", (java.lang.Throwable) missingParameterException3);
        java.lang.String str6 = invalidParameterException5.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.plista.kornakapi.web.InvalidParameterException: MutablePreference{userID=10000, itemID=0, value=97.0}" + "'", str6, "org.plista.kornakapi.web.InvalidParameterException: MutablePreference{userID=10000, itemID=0, value=97.0}");
    }

    @Test
    public void test04036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04036");
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet0.init();
        java.lang.String str2 = batchAddCandidatesServlet0.getServletInfo();
        javax.servlet.ServletConfig servletConfig3 = batchAddCandidatesServlet0.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet4 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str5 = batchDeleteCandidatesServlet4.getServletInfo();
        java.lang.String str6 = batchDeleteCandidatesServlet4.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet7 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet8 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet9 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet8.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet9);
        setPreferenceServlet7.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet9);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet12 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet7.init((javax.servlet.ServletConfig) recommendServlet12);
        batchDeleteCandidatesServlet4.init((javax.servlet.ServletConfig) setPreferenceServlet7);
        batchAddCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet4);
        java.lang.String str16 = batchDeleteCandidatesServlet4.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet17 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str18 = batchDeleteCandidatesServlet17.getServletInfo();
        java.lang.String str19 = batchDeleteCandidatesServlet17.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet20 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet21 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet22 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet21.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet22);
        setPreferenceServlet20.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet22);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet25 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet20.init((javax.servlet.ServletConfig) recommendServlet25);
        batchDeleteCandidatesServlet17.init((javax.servlet.ServletConfig) setPreferenceServlet20);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet28 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet29 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet30 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet29.init((javax.servlet.ServletConfig) batchSetPreferencesServlet30);
        javax.servlet.ServletConfig servletConfig32 = batchSetPreferencesServlet29.getServletConfig();
        addCandidateServlet28.init((javax.servlet.ServletConfig) batchSetPreferencesServlet29);
        javax.servlet.ServletConfig servletConfig34 = addCandidateServlet28.getServletConfig();
        batchDeleteCandidatesServlet17.init((javax.servlet.ServletConfig) addCandidateServlet28);
        javax.servlet.ServletConfig servletConfig36 = batchDeleteCandidatesServlet17.getServletConfig();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet37 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet37.init();
        setPreferenceServlet37.init();
        setPreferenceServlet37.destroy();
        javax.servlet.ServletConfig servletConfig41 = setPreferenceServlet37.getServletConfig();
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet42 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str43 = trainServlet42.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet44 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet44.destroy();
        javax.servlet.ServletConfig servletConfig46 = deleteCandidateServlet44.getServletConfig();
        deleteCandidateServlet44.destroy();
        trainServlet42.init((javax.servlet.ServletConfig) deleteCandidateServlet44);
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet49 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet49.init();
        java.lang.String str51 = batchAddCandidatesServlet49.getServletInfo();
        javax.servlet.ServletConfig servletConfig52 = batchAddCandidatesServlet49.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet53 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str54 = batchDeleteCandidatesServlet53.getServletInfo();
        java.lang.String str55 = batchDeleteCandidatesServlet53.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet56 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet57 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet58 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet57.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet58);
        setPreferenceServlet56.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet58);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet61 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet56.init((javax.servlet.ServletConfig) recommendServlet61);
        batchDeleteCandidatesServlet53.init((javax.servlet.ServletConfig) setPreferenceServlet56);
        batchAddCandidatesServlet49.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet53);
        batchDeleteCandidatesServlet53.init();
        java.lang.String str66 = batchDeleteCandidatesServlet53.getServletInfo();
        java.lang.String str67 = batchDeleteCandidatesServlet53.getServletInfo();
        trainServlet42.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet53);
        setPreferenceServlet37.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet53);
        batchDeleteCandidatesServlet17.init((javax.servlet.ServletConfig) setPreferenceServlet37);
        batchDeleteCandidatesServlet4.init((javax.servlet.ServletConfig) setPreferenceServlet37);
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet72 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet72.init();
        batchDeleteCandidatesServlet4.init((javax.servlet.ServletConfig) batchSetPreferencesServlet72);
        batchDeleteCandidatesServlet4.destroy();
        org.plista.kornakapi.web.MissingParameterException missingParameterException78 = new org.plista.kornakapi.web.MissingParameterException("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.MissingParameterException: MutablePreference{userID=-1, itemID=10, value=10.0}");
        // The following exception was thrown during execution in test generation
        try {
            batchDeleteCandidatesServlet4.log("value", (java.lang.Throwable) missingParameterException78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(servletConfig3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(servletConfig32);
        org.junit.Assert.assertNotNull(servletConfig34);
        org.junit.Assert.assertNotNull(servletConfig36);
        org.junit.Assert.assertNull(servletConfig41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(servletConfig46);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(servletConfig52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test04037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04037");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        javax.servlet.ServletConfig servletConfig5 = batchSetPreferencesServlet2.getServletConfig();
        java.lang.String str6 = batchSetPreferencesServlet2.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet7 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet8 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet7.init((javax.servlet.ServletConfig) batchSetPreferencesServlet8);
        java.lang.String str10 = batchSetPreferencesServlet8.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet11 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str12 = batchDeleteCandidatesServlet11.getServletInfo();
        java.lang.String str13 = batchDeleteCandidatesServlet11.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet14 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet15 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet16 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet15.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet16);
        setPreferenceServlet14.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet16);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet19 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet14.init((javax.servlet.ServletConfig) recommendServlet19);
        batchDeleteCandidatesServlet11.init((javax.servlet.ServletConfig) setPreferenceServlet14);
        batchDeleteCandidatesServlet11.destroy();
        batchDeleteCandidatesServlet11.init();
        batchDeleteCandidatesServlet11.destroy();
        javax.servlet.ServletConfig servletConfig25 = batchDeleteCandidatesServlet11.getServletConfig();
        batchSetPreferencesServlet8.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet11);
        batchSetPreferencesServlet2.init((javax.servlet.ServletConfig) batchSetPreferencesServlet8);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet28 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet29 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet30 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet29.init((javax.servlet.ServletConfig) batchSetPreferencesServlet30);
        batchDeleteCandidatesServlet28.init((javax.servlet.ServletConfig) batchSetPreferencesServlet30);
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet33 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet34 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet33.init((javax.servlet.ServletConfig) batchSetPreferencesServlet34);
        java.lang.String str36 = batchSetPreferencesServlet34.getServletInfo();
        java.lang.String str37 = batchSetPreferencesServlet34.getServletInfo();
        batchSetPreferencesServlet34.destroy();
        batchDeleteCandidatesServlet28.init((javax.servlet.ServletConfig) batchSetPreferencesServlet34);
        batchSetPreferencesServlet2.init((javax.servlet.ServletConfig) batchSetPreferencesServlet34);
        org.plista.kornakapi.web.MissingParameterException missingParameterException47 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException48 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException47);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException49 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException47);
        java.lang.Throwable[] throwableArray50 = missingParameterException47.getSuppressed();
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException51 = new org.plista.kornakapi.web.InvalidParameterException("MutablePreference{userID=0, itemID=0, value=0.0}", (java.lang.Throwable) missingParameterException47);
        java.lang.Throwable[] throwableArray52 = missingParameterException47.getSuppressed();
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException53 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.MissingParameterException: file", (java.lang.Throwable) missingParameterException47);
        java.lang.Throwable[] throwableArray54 = missingParameterException47.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            batchSetPreferencesServlet34.log("MutablePreference{userID=-1, itemID=0, value=100.0}", (java.lang.Throwable) missingParameterException47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(servletConfig25);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
    }

    @Test
    public void test04038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04038");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        double double6 = factorizationbasedRecommenderConfig0.getAlpha();
        java.lang.String str7 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int8 = factorizationbasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        int int9 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        factorizationbasedRecommenderConfig0.setNumberOfFeatures((int) '#');
        double double12 = factorizationbasedRecommenderConfig0.getLambda();
        boolean boolean13 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        boolean boolean14 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        int int15 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        java.lang.String str16 = factorizationbasedRecommenderConfig0.getName();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer17 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        java.io.File file18 = null;
        org.plista.kornakapi.core.storage.Storage storage19 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender20 = null;
        // The following exception was thrown during execution in test generation
        try {
            factorizationbasedInMemoryTrainer17.train(file18, storage19, recommender20, 10000);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test04039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04039");
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet0 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str1 = trainServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet2 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet2.destroy();
        javax.servlet.ServletConfig servletConfig4 = deleteCandidateServlet2.getServletConfig();
        deleteCandidateServlet2.destroy();
        trainServlet0.init((javax.servlet.ServletConfig) deleteCandidateServlet2);
        java.lang.String str7 = trainServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet8 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet8.init();
        setPreferenceServlet8.init();
        setPreferenceServlet8.destroy();
        javax.servlet.ServletConfig servletConfig12 = setPreferenceServlet8.getServletConfig();
        java.lang.String str13 = setPreferenceServlet8.getServletInfo();
        trainServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = setPreferenceServlet8.getInitParameter("org.plista.kornakapi.web.MissingParameterException: recommender");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNull(servletConfig4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(servletConfig12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test04040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04040");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str1 = batchDeleteCandidatesServlet0.getServletInfo();
        batchDeleteCandidatesServlet0.init();
        javax.servlet.ServletConfig servletConfig3 = batchDeleteCandidatesServlet0.getServletConfig();
        // The following exception was thrown during execution in test generation
        try {
            batchDeleteCandidatesServlet0.log("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNull(servletConfig3);
    }

    @Test
    public void test04041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04041");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        double double6 = factorizationbasedRecommenderConfig0.getAlpha();
        java.lang.String str7 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int8 = factorizationbasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        int int9 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        factorizationbasedRecommenderConfig0.setNumberOfFeatures((int) '#');
        double double12 = factorizationbasedRecommenderConfig0.getLambda();
        boolean boolean13 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        factorizationbasedRecommenderConfig0.setAlpha((double) 35L);
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges(100);
        factorizationbasedRecommenderConfig0.setNumberOfFeatures((int) 'a');
        double double20 = factorizationbasedRecommenderConfig0.getAlpha();
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges((-1));
        java.lang.String str23 = factorizationbasedRecommenderConfig0.getName();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test04042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04042");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet1 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str2 = batchDeleteCandidatesServlet1.getServletInfo();
        java.lang.String str3 = batchDeleteCandidatesServlet1.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet4 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet5 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet6 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet5.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        setPreferenceServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet9 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet4.init((javax.servlet.ServletConfig) recommendServlet9);
        batchDeleteCandidatesServlet1.init((javax.servlet.ServletConfig) setPreferenceServlet4);
        batchDeleteCandidatesServlet1.destroy();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet1);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet14 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet15 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet16 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet15.init((javax.servlet.ServletConfig) batchSetPreferencesServlet16);
        javax.servlet.ServletConfig servletConfig18 = batchSetPreferencesServlet15.getServletConfig();
        addCandidateServlet14.init((javax.servlet.ServletConfig) batchSetPreferencesServlet15);
        batchSetPreferencesServlet15.init();
        java.lang.String str21 = batchSetPreferencesServlet15.getServletInfo();
        batchSetPreferencesServlet15.init();
        batchSetPreferencesServlet15.init();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet15);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet25 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet26 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet27 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet26.init((javax.servlet.ServletConfig) batchSetPreferencesServlet27);
        javax.servlet.ServletConfig servletConfig29 = batchSetPreferencesServlet26.getServletConfig();
        addCandidateServlet25.init((javax.servlet.ServletConfig) batchSetPreferencesServlet26);
        javax.servlet.ServletConfig servletConfig31 = addCandidateServlet25.getServletConfig();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet32 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet33 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet34 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet33.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet34);
        setPreferenceServlet32.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet34);
        javax.servlet.ServletConfig servletConfig37 = setPreferenceServlet32.getServletConfig();
        addCandidateServlet25.init((javax.servlet.ServletConfig) setPreferenceServlet32);
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet39 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet39.init();
        java.lang.String str41 = batchAddCandidatesServlet39.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet42 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str43 = batchDeleteCandidatesServlet42.getServletInfo();
        batchDeleteCandidatesServlet42.destroy();
        javax.servlet.ServletConfig servletConfig45 = batchDeleteCandidatesServlet42.getServletConfig();
        batchAddCandidatesServlet39.init(servletConfig45);
        batchAddCandidatesServlet39.init();
        addCandidateServlet25.init((javax.servlet.ServletConfig) batchAddCandidatesServlet39);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) addCandidateServlet25);
        // The following exception was thrown during execution in test generation
        try {
            addCandidateServlet25.log("MutablePreference{userID=35, itemID=97, value=52.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(servletConfig18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(servletConfig29);
        org.junit.Assert.assertNotNull(servletConfig31);
        org.junit.Assert.assertNotNull(servletConfig37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(servletConfig45);
    }

    @Test
    public void test04043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04043");
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet0.init();
        java.lang.String str2 = batchAddCandidatesServlet0.getServletInfo();
        batchAddCandidatesServlet0.init();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet4 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet5 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet4.init((javax.servlet.ServletConfig) batchSetPreferencesServlet5);
        javax.servlet.ServletConfig servletConfig7 = batchSetPreferencesServlet5.getServletConfig();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet8 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet8.init();
        setPreferenceServlet8.init();
        setPreferenceServlet8.destroy();
        setPreferenceServlet8.destroy();
        batchSetPreferencesServlet5.init((javax.servlet.ServletConfig) setPreferenceServlet8);
        java.lang.String str14 = setPreferenceServlet8.getServletInfo();
        batchAddCandidatesServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet8);
        java.lang.String str16 = setPreferenceServlet8.getServletInfo();
        java.lang.String str17 = setPreferenceServlet8.getServletInfo();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = setPreferenceServlet8.getInitParameter("MutablePreference{userID=10, itemID=10000, value=100.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(servletConfig7);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test04044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04044");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str1 = batchDeleteCandidatesServlet0.getServletInfo();
        java.lang.String str2 = batchDeleteCandidatesServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet3 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet4 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet5 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        setPreferenceServlet3.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet8 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet3.init((javax.servlet.ServletConfig) recommendServlet8);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet3);
        batchDeleteCandidatesServlet0.destroy();
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet12 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str13 = trainServlet12.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet14 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet14.destroy();
        javax.servlet.ServletConfig servletConfig16 = deleteCandidateServlet14.getServletConfig();
        deleteCandidateServlet14.destroy();
        trainServlet12.init((javax.servlet.ServletConfig) deleteCandidateServlet14);
        javax.servlet.ServletConfig servletConfig19 = deleteCandidateServlet14.getServletConfig();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) deleteCandidateServlet14);
        batchDeleteCandidatesServlet0.init();
        java.lang.String str22 = batchDeleteCandidatesServlet0.getServletInfo();
        javax.servlet.ServletConfig servletConfig23 = batchDeleteCandidatesServlet0.getServletConfig();
        batchDeleteCandidatesServlet0.destroy();
        batchDeleteCandidatesServlet0.destroy();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration26 = batchDeleteCandidatesServlet0.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(servletConfig16);
        org.junit.Assert.assertNull(servletConfig19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(servletConfig23);
    }

    @Test
    public void test04045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04045");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList1 = configuration0.getItembasedRecommenders();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList2 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration3 = configuration0.getStorageConfiguration();
        int int4 = configuration0.getNumProcessorsForTraining();
        configuration0.setNumProcessorsForTraining((int) (short) 10);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration7 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str8 = storageConfiguration7.getJdbcDriverClass();
        storageConfiguration7.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str11 = storageConfiguration7.getJdbcUrl();
        java.lang.String str12 = storageConfiguration7.getJdbcDriverClass();
        java.lang.String str13 = storageConfiguration7.getJdbcDriverClass();
        java.lang.String str14 = storageConfiguration7.getPassword();
        java.lang.String str15 = storageConfiguration7.getJdbcDriverClass();
        java.lang.String str16 = storageConfiguration7.getPassword();
        configuration0.setStorageConfiguration(storageConfiguration7);
        java.lang.String str18 = configuration0.getModelDirectory();
        configuration0.setNumProcessorsForTraining((int) (short) 0);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration21 = configuration0.getStorageConfiguration();
        storageConfiguration21.setJdbcDriverClass("org.plista.kornakapi.web.MissingParameterException: MutablePreference{userID=97, itemID=1, value=97.0}");
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList1);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList2);
        org.junit.Assert.assertNull(storageConfiguration3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(storageConfiguration21);
    }

    @Test
    public void test04046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04046");
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet0 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str1 = trainServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet2 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet2.destroy();
        javax.servlet.ServletConfig servletConfig4 = deleteCandidateServlet2.getServletConfig();
        deleteCandidateServlet2.destroy();
        trainServlet0.init((javax.servlet.ServletConfig) deleteCandidateServlet2);
        javax.servlet.ServletConfig servletConfig7 = deleteCandidateServlet2.getServletConfig();
        javax.servlet.ServletConfig servletConfig8 = deleteCandidateServlet2.getServletConfig();
        deleteCandidateServlet2.init();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration10 = deleteCandidateServlet2.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNull(servletConfig4);
        org.junit.Assert.assertNull(servletConfig7);
        org.junit.Assert.assertNull(servletConfig8);
    }

    @Test
    public void test04047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04047");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList2 = null; // flaky: configuration1.getItembasedRecommenders();
        java.lang.String str3 = null; // flaky: configuration1.getModelDirectory();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration4 = null; // flaky: configuration1.getStorageConfiguration();
// flaky:         configuration1.setNumProcessorsForTraining((int) '#');
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration7 = null; // flaky: configuration1.getStorageConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration8 = new org.plista.kornakapi.core.config.Configuration();
        configuration8.setNumProcessorsForTraining((int) (short) 100);
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig11 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double12 = factorizationbasedRecommenderConfig11.getAlpha();
        double double13 = factorizationbasedRecommenderConfig11.getLambda();
        configuration8.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig11);
        java.lang.String str15 = configuration8.getModelDirectory();
        int int16 = configuration8.getNumProcessorsForTraining();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList17 = configuration8.getItembasedRecommenders();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList18 = configuration8.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration19 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str20 = storageConfiguration19.getJdbcDriverClass();
        storageConfiguration19.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str23 = storageConfiguration19.getJdbcUrl();
        java.lang.String str24 = storageConfiguration19.getJdbcUrl();
        java.lang.String str25 = storageConfiguration19.getJdbcUrl();
        storageConfiguration19.setUsername("recommender");
        java.lang.String str28 = storageConfiguration19.getJdbcDriverClass();
        configuration8.setStorageConfiguration(storageConfiguration19);
// flaky:         configuration1.setStorageConfiguration(storageConfiguration19);
        storageConfiguration19.setUsername("org.plista.kornakapi.web.InvalidParameterException: recommender");
        storageConfiguration19.setJdbcDriverClass("MutablePreference{userID=0, itemID=0, value=0.0}");
        storageConfiguration19.setJdbcDriverClass("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.InvalidParameterException: label");
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "MutablePreference{userID=0, itemID=52, value=-1.0}" + "'", str3, "MutablePreference{userID=0, itemID=52, value=-1.0}");
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration4);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration7);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList17);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test04048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04048");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str1 = itembasedRecommenderConfig0.getSimilarityClass();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer2 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        java.lang.String str3 = itembasedRecommenderConfig0.getSimilarityClass();
        itembasedRecommenderConfig0.setRetrainAfterPreferenceChanges((int) (short) 100);
        int int6 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        itembasedRecommenderConfig0.setRetrainAfterPreferenceChanges(1);
        itembasedRecommenderConfig0.setRetrainCronExpression("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemIDs");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test04049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04049");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        double double6 = factorizationbasedRecommenderConfig0.getAlpha();
        java.lang.String str7 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        java.lang.String str8 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(false);
        factorizationbasedRecommenderConfig0.setName("recommender");
        int int13 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        boolean boolean14 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04050");
        org.plista.kornakapi.core.MutableCandidate mutableCandidate0 = new org.plista.kornakapi.core.MutableCandidate();
        long long1 = mutableCandidate0.getItemID();
        mutableCandidate0.set("itemIDs", (long) 0);
        mutableCandidate0.set("itemID", (long) 10000);
        java.lang.String str8 = mutableCandidate0.getLabel();
        long long9 = mutableCandidate0.getItemID();
        long long10 = mutableCandidate0.getItemID();
        java.lang.String str11 = mutableCandidate0.getLabel();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "itemID" + "'", str8, "itemID");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "itemID" + "'", str11, "itemID");
    }

    @Test
    public void test04051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04051");
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet0 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet1);
        java.lang.String str3 = batchSetPreferencesServlet1.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet4 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str5 = batchDeleteCandidatesServlet4.getServletInfo();
        java.lang.String str6 = batchDeleteCandidatesServlet4.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet7 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet8 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet9 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet8.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet9);
        setPreferenceServlet7.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet9);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet12 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet7.init((javax.servlet.ServletConfig) recommendServlet12);
        batchDeleteCandidatesServlet4.init((javax.servlet.ServletConfig) setPreferenceServlet7);
        batchDeleteCandidatesServlet4.destroy();
        batchDeleteCandidatesServlet4.init();
        batchDeleteCandidatesServlet4.destroy();
        javax.servlet.ServletConfig servletConfig18 = batchDeleteCandidatesServlet4.getServletConfig();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet4);
        batchSetPreferencesServlet1.init();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = batchSetPreferencesServlet1.getInitParameter("MutablePreference{userID=1, itemID=10, value=10000.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(servletConfig18);
    }

    @Test
    public void test04052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04052");
        org.plista.kornakapi.core.MutableCandidate mutableCandidate0 = new org.plista.kornakapi.core.MutableCandidate();
        long long1 = mutableCandidate0.getItemID();
        java.lang.String str2 = mutableCandidate0.getLabel();
        mutableCandidate0.set("file", (long) (short) 1);
        long long6 = mutableCandidate0.getItemID();
        java.lang.String str7 = mutableCandidate0.getLabel();
        mutableCandidate0.set("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemID", (long) '#');
        long long11 = mutableCandidate0.getItemID();
        long long12 = mutableCandidate0.getItemID();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "file" + "'", str7, "file");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
    }

    @Test
    public void test04053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04053");
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.core.config.Configuration configuration1 = org.plista.kornakapi.core.config.Configuration.fromXML("MutablePreference{userID=10, itemID=97, value=100.0}");
            org.junit.Assert.fail("Expected exception of type com.thoughtworks.xstream.io.StreamException; message:  : only whitespace content allowed before start tag and not M (position: START_DOCUMENT seen M... @1:1) ");
        } catch (com.thoughtworks.xstream.io.StreamException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04054");
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler0 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener3 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler0, "MutablePreference{userID=97, itemID=97, value=52.0}", (int) (byte) 1);
    }

    @Test
    public void test04055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04055");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.storage.Storage storage1 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration2 = null; // flaky: components0.getConfiguration();
        java.lang.String str3 = null; // flaky: configuration2.getModelDirectory();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration4 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str5 = storageConfiguration4.getJdbcDriverClass();
        storageConfiguration4.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str8 = storageConfiguration4.getJdbcUrl();
        java.lang.String str9 = storageConfiguration4.getJdbcDriverClass();
        storageConfiguration4.setJdbcDriverClass("batchSize");
        java.lang.String str12 = storageConfiguration4.getPassword();
        java.lang.String str13 = storageConfiguration4.getJdbcUrl();
// flaky:         configuration2.setStorageConfiguration(storageConfiguration4);
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig15 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str16 = itembasedRecommenderConfig15.getSimilarityClass();
        itembasedRecommenderConfig15.setName("");
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer19 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig15);
        java.lang.String str20 = itembasedRecommenderConfig15.getRetrainCronExpression();
// flaky:         configuration2.addItembasedRecommender(itembasedRecommenderConfig15);
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig22 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double23 = factorizationbasedRecommenderConfig22.getAlpha();
        double double24 = factorizationbasedRecommenderConfig22.getLambda();
        int int25 = factorizationbasedRecommenderConfig22.getNumberOfFeatures();
        java.lang.String str26 = factorizationbasedRecommenderConfig22.getRetrainCronExpression();
        int int27 = factorizationbasedRecommenderConfig22.getNumberOfFeatures();
        factorizationbasedRecommenderConfig22.setNumberOfIterations((int) (short) 0);
        boolean boolean30 = factorizationbasedRecommenderConfig22.isUsesImplicitFeedback();
        java.lang.String str31 = factorizationbasedRecommenderConfig22.getRetrainCronExpression();
        int int32 = factorizationbasedRecommenderConfig22.getNumberOfFeatures();
        int int33 = factorizationbasedRecommenderConfig22.getNumberOfIterations();
        factorizationbasedRecommenderConfig22.setRetrainAfterPreferenceChanges((int) (byte) 100);
// flaky:         configuration2.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig22);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration37 = null; // flaky: configuration2.getStorageConfiguration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList38 = null; // flaky: configuration2.getItembasedRecommenders();
        int int39 = 0; // flaky: configuration2.getNumProcessorsForTraining();
// flaky:         org.junit.Assert.assertNotNull(components0);
        org.junit.Assert.assertNull(storage1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "MutablePreference{userID=0, itemID=52, value=-1.0}" + "'", str3, "MutablePreference{userID=0, itemID=52, value=-1.0}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration37);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
    }

    @Test
    public void test04056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04056");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage3 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.storage.Storage storage4 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration5 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig6 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double7 = factorizationbasedRecommenderConfig6.getAlpha();
        double double8 = factorizationbasedRecommenderConfig6.getLambda();
        int int9 = factorizationbasedRecommenderConfig6.getNumberOfFeatures();
        factorizationbasedRecommenderConfig6.setNumberOfIterations(0);
        factorizationbasedRecommenderConfig6.setNumberOfFeatures((int) (short) 100);
        boolean boolean14 = factorizationbasedRecommenderConfig6.isUsesImplicitFeedback();
// flaky:         configuration5.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig6);
        int int16 = factorizationbasedRecommenderConfig6.getNumberOfFeatures();
        java.lang.String str17 = factorizationbasedRecommenderConfig6.getName();
        int int18 = factorizationbasedRecommenderConfig6.getRetrainAfterPreferenceChanges();
        double double19 = factorizationbasedRecommenderConfig6.getLambda();
        double double20 = factorizationbasedRecommenderConfig6.getLambda();
        double double21 = factorizationbasedRecommenderConfig6.getLambda();
        factorizationbasedRecommenderConfig6.setName("MutablePreference{userID=97, itemID=52, value=-1.0}");
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(storage3);
        org.junit.Assert.assertNull(storage4);
// flaky:         org.junit.Assert.assertNotNull(configuration5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test04057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04057");
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler0 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener3 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler0, "org.plista.kornakapi.web.InvalidParameterException: MutablePreference{userID=0, itemID=0, value=0.0}", 100);
    }

    @Test
    public void test04058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04058");
        org.plista.kornakapi.web.MissingParameterException missingParameterException1 = new org.plista.kornakapi.web.MissingParameterException("MutablePreference{userID=0, itemID=0, value=32.0}");
        java.lang.Throwable[] throwableArray2 = missingParameterException1.getSuppressed();
        org.plista.kornakapi.web.MissingParameterException missingParameterException8 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException9 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException8);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException10 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException8);
        java.lang.Throwable[] throwableArray11 = missingParameterException8.getSuppressed();
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException12 = new org.plista.kornakapi.web.InvalidParameterException("recommender", (java.lang.Throwable) missingParameterException8);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException13 = new org.plista.kornakapi.web.InvalidParameterException("", (java.lang.Throwable) invalidParameterException12);
        java.lang.Throwable[] throwableArray14 = invalidParameterException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = invalidParameterException13.getSuppressed();
        org.plista.kornakapi.web.MissingParameterException missingParameterException20 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        java.lang.Throwable[] throwableArray21 = missingParameterException20.getSuppressed();
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException22 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.MissingParameterException: itemID", (java.lang.Throwable) missingParameterException20);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException23 = new org.plista.kornakapi.web.InvalidParameterException("", (java.lang.Throwable) missingParameterException20);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException24 = new org.plista.kornakapi.web.InvalidParameterException("MutablePreference{userID=0, itemID=0, value=32.0}", (java.lang.Throwable) invalidParameterException23);
        org.plista.kornakapi.web.MissingParameterException missingParameterException28 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException29 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException28);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException30 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException28);
        org.plista.kornakapi.web.MissingParameterException missingParameterException35 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException36 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException35);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException37 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException35);
        java.lang.Throwable[] throwableArray38 = missingParameterException35.getSuppressed();
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException39 = new org.plista.kornakapi.web.InvalidParameterException("recommender", (java.lang.Throwable) missingParameterException35);
        invalidParameterException30.addSuppressed((java.lang.Throwable) invalidParameterException39);
        org.plista.kornakapi.web.MissingParameterException missingParameterException44 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException45 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException44);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException46 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException44);
        java.lang.Throwable[] throwableArray47 = invalidParameterException46.getSuppressed();
        invalidParameterException39.addSuppressed((java.lang.Throwable) invalidParameterException46);
        invalidParameterException24.addSuppressed((java.lang.Throwable) invalidParameterException39);
        invalidParameterException13.addSuppressed((java.lang.Throwable) invalidParameterException24);
        missingParameterException1.addSuppressed((java.lang.Throwable) invalidParameterException13);
        java.lang.Class<?> wildcardClass52 = missingParameterException1.getClass();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test04059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04059");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet1 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        addCandidateServlet1.destroy();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet3 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet4 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet3.init((javax.servlet.ServletConfig) batchSetPreferencesServlet4);
        addCandidateServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet3);
        addCandidateServlet0.init((javax.servlet.ServletConfig) addCandidateServlet1);
        addCandidateServlet1.init();
        javax.servlet.ServletRequest servletRequest9 = null;
        javax.servlet.ServletResponse servletResponse10 = null;
        // The following exception was thrown during execution in test generation
        try {
            addCandidateServlet1.service(servletRequest9, servletResponse10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04060");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setNumProcessorsForTraining((int) (short) 100);
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig3 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double4 = factorizationbasedRecommenderConfig3.getAlpha();
        double double5 = factorizationbasedRecommenderConfig3.getLambda();
        configuration0.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig3);
        java.lang.String str7 = configuration0.getModelDirectory();
        int int8 = configuration0.getNumProcessorsForTraining();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList9 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration10 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str11 = storageConfiguration10.getJdbcDriverClass();
        storageConfiguration10.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str14 = storageConfiguration10.getJdbcUrl();
        java.lang.String str15 = storageConfiguration10.getJdbcUrl();
        storageConfiguration10.setJdbcUrl("label");
        configuration0.setStorageConfiguration(storageConfiguration10);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration19 = configuration0.getStorageConfiguration();
        java.lang.String str20 = configuration0.getModelDirectory();
        org.plista.kornakapi.web.Components components21 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration22 = null; // flaky: components21.getConfiguration();
        int int23 = 0; // flaky: configuration22.getNumProcessorsForTraining();
        int int24 = 0; // flaky: configuration22.getNumProcessorsForTraining();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration25 = null; // flaky: configuration22.getStorageConfiguration();
        configuration0.setStorageConfiguration(storageConfiguration25);
// flaky:         storageConfiguration25.setJdbcDriverClass("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: recommender");
        java.lang.String str29 = null; // flaky: storageConfiguration25.getJdbcUrl();
// flaky:         storageConfiguration25.setUsername("MutablePreference{userID=100, itemID=-1, value=1.0}");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(storageConfiguration19);
        org.junit.Assert.assertNull(str20);
// flaky:         org.junit.Assert.assertNotNull(components21);
// flaky:         org.junit.Assert.assertNotNull(configuration22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration25);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str29, "org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
    }

    @Test
    public void test04061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04061");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str1 = batchDeleteCandidatesServlet0.getServletInfo();
        java.lang.String str2 = batchDeleteCandidatesServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet3 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet4 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet5 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        setPreferenceServlet3.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet8 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet3.init((javax.servlet.ServletConfig) recommendServlet8);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet3);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet11 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet12 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet13 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet12.init((javax.servlet.ServletConfig) batchSetPreferencesServlet13);
        javax.servlet.ServletConfig servletConfig15 = batchSetPreferencesServlet12.getServletConfig();
        addCandidateServlet11.init((javax.servlet.ServletConfig) batchSetPreferencesServlet12);
        javax.servlet.ServletConfig servletConfig17 = addCandidateServlet11.getServletConfig();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) addCandidateServlet11);
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet19 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str20 = trainServlet19.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet21 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet21.destroy();
        javax.servlet.ServletConfig servletConfig23 = deleteCandidateServlet21.getServletConfig();
        deleteCandidateServlet21.destroy();
        trainServlet19.init((javax.servlet.ServletConfig) deleteCandidateServlet21);
        addCandidateServlet11.init((javax.servlet.ServletConfig) trainServlet19);
        trainServlet19.destroy();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet28 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet29 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet30 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet29.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet30);
        setPreferenceServlet28.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet30);
        trainServlet19.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet30);
        batchDeleteCandidatesServlet30.destroy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = batchDeleteCandidatesServlet30.getInitParameter("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemID");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(servletConfig15);
        org.junit.Assert.assertNotNull(servletConfig17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(servletConfig23);
    }

    @Test
    public void test04062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04062");
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler0 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener3 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler0, "org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.InvalidParameterException: recommender", 100);
    }

    @Test
    public void test04063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04063");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((long) '#', (double) 10L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer5 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer6 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double9 = fixedCandidatesIDRescorer1.rescore(0L, (double) 100);
        double double12 = fixedCandidatesIDRescorer1.rescore((long) (short) 10, (double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = fixedCandidatesIDRescorer1.isFiltered((long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
    }

    @Test
    public void test04064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04064");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList2 = null; // flaky: configuration1.getFactorizationbasedRecommenders();
// flaky:         configuration1.setNumProcessorsForTraining(0);
// flaky:         configuration1.setModelDirectory("org.plista.kornakapi.web.MissingParameterException: itemIDs");
        org.plista.kornakapi.core.storage.Storage storage7 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.KornakapiRecommender> strMap8 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.core.training.Trainer> strMap9 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler10 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler11 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener14 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler11, "label", (int) '#');
        inMemoryPreferenceChangeListener14.notifyOfPreferenceChange();
        inMemoryPreferenceChangeListener14.notifyOfPreferenceChange();
        inMemoryPreferenceChangeListener14.notifyOfPreferenceChange();
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.web.Components.init(configuration1, storage7, strMap8, strMap9, trainingScheduler10, (org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener14);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList2);
    }

    @Test
    public void test04065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04065");
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet0 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str1 = trainServlet0.getServletInfo();
        javax.servlet.ServletConfig servletConfig2 = trainServlet0.getServletConfig();
        trainServlet0.destroy();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration4 = trainServlet0.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNull(servletConfig2);
    }

    @Test
    public void test04066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04066");
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet0 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet0.init();
        setPreferenceServlet0.init();
        setPreferenceServlet0.destroy();
        javax.servlet.ServletConfig servletConfig4 = setPreferenceServlet0.getServletConfig();
        setPreferenceServlet0.init();
        setPreferenceServlet0.init();
        setPreferenceServlet0.init();
        org.plista.kornakapi.web.MissingParameterException missingParameterException12 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException13 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException12);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException14 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException12);
        org.plista.kornakapi.web.MissingParameterException missingParameterException16 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException18 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException16.addSuppressed((java.lang.Throwable) missingParameterException18);
        invalidParameterException14.addSuppressed((java.lang.Throwable) missingParameterException18);
        java.lang.Throwable[] throwableArray21 = missingParameterException18.getSuppressed();
        org.plista.kornakapi.web.MissingParameterException missingParameterException24 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException25 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException24);
        org.plista.kornakapi.web.MissingParameterException missingParameterException29 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException30 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException29);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException31 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException29);
        org.plista.kornakapi.web.MissingParameterException missingParameterException33 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException35 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException33.addSuppressed((java.lang.Throwable) missingParameterException35);
        invalidParameterException31.addSuppressed((java.lang.Throwable) missingParameterException35);
        java.lang.Throwable[] throwableArray38 = missingParameterException35.getSuppressed();
        invalidParameterException25.addSuppressed((java.lang.Throwable) missingParameterException35);
        missingParameterException18.addSuppressed((java.lang.Throwable) invalidParameterException25);
        java.lang.Throwable[] throwableArray41 = missingParameterException18.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            setPreferenceServlet0.log("MutablePreference{userID=32, itemID=1, value=1.0}", (java.lang.Throwable) missingParameterException18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig4);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
    }

    @Test
    public void test04067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04067");
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.core.config.Configuration configuration1 = org.plista.kornakapi.core.config.Configuration.fromXML("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.MissingParameterException: MutablePreference{userID=0, itemID=0, value=100.0}");
            org.junit.Assert.fail("Expected exception of type com.thoughtworks.xstream.io.StreamException; message:  : only whitespace content allowed before start tag and not o (position: START_DOCUMENT seen o... @1:1) ");
        } catch (com.thoughtworks.xstream.io.StreamException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04068");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str1 = itembasedRecommenderConfig0.getRetrainCronExpression();
        int int2 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        itembasedRecommenderConfig0.setRetrainCronExpression("MutablePreference{userID=-1, itemID=10, value=10.0}");
        java.lang.String str5 = itembasedRecommenderConfig0.getSimilarityClass();
        java.lang.String str6 = itembasedRecommenderConfig0.getRetrainCronExpression();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer7 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        java.io.File file8 = null;
        org.plista.kornakapi.core.storage.Storage storage9 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender10 = null;
        // The following exception was thrown during execution in test generation
        try {
            multithreadedItembasedInMemoryTrainer7.train(file8, storage9, recommender10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MutablePreference{userID=-1, itemID=10, value=10.0}" + "'", str6, "MutablePreference{userID=-1, itemID=10, value=10.0}");
    }

    @Test
    public void test04069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04069");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.storage.Storage storage1 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener2 = null; // flaky: components0.preferenceChangeListener();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener3 = null; // flaky: components0.preferenceChangeListener();
// flaky:         preferenceChangeListener3.notifyOfPreferenceChange();
// flaky:         preferenceChangeListener3.notifyOfPreferenceChange();
// flaky:         preferenceChangeListener3.notifyOfPreferenceChange();
// flaky:         org.junit.Assert.assertNotNull(components0);
        org.junit.Assert.assertNull(storage1);
// flaky:         org.junit.Assert.assertNotNull(preferenceChangeListener2);
// flaky:         org.junit.Assert.assertNotNull(preferenceChangeListener3);
    }

    @Test
    public void test04070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04070");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler2 = null; // flaky: components0.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = null; // flaky: components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration4 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig5 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str6 = itembasedRecommenderConfig5.getSimilarityClass();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer7 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig5);
        java.lang.String str8 = itembasedRecommenderConfig5.getSimilarityClass();
        itembasedRecommenderConfig5.setRetrainAfterPreferenceChanges((int) (short) 100);
// flaky:         configuration4.addItembasedRecommender(itembasedRecommenderConfig5);
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList12 = null; // flaky: configuration4.getFactorizationbasedRecommenders();
// flaky:         configuration4.setNumProcessorsForTraining((int) 'a');
        java.lang.String str15 = null; // flaky: configuration4.getModelDirectory();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig16 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str17 = itembasedRecommenderConfig16.getRetrainCronExpression();
        int int18 = itembasedRecommenderConfig16.getRetrainAfterPreferenceChanges();
        java.lang.String str19 = itembasedRecommenderConfig16.getSimilarityClass();
        itembasedRecommenderConfig16.setSimilarItemsPerItem(0);
        itembasedRecommenderConfig16.setRetrainCronExpression("value");
        int int24 = itembasedRecommenderConfig16.getRetrainAfterPreferenceChanges();
        int int25 = itembasedRecommenderConfig16.getRetrainAfterPreferenceChanges();
// flaky:         configuration4.addItembasedRecommender(itembasedRecommenderConfig16);
        org.plista.kornakapi.core.storage.Storage storage27 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.KornakapiRecommender> strMap28 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.core.training.Trainer> strMap29 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler30 = null;
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener31 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener31.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener31.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener34 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener34.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener36 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener36.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener34.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener36);
        delegatingPreferenceChangeListener31.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener34);
        delegatingPreferenceChangeListener34.notifyOfPreferenceChange();
        org.plista.kornakapi.web.Components components41 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration42 = components41.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration43 = components41.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler44 = components41.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler45 = components41.scheduler();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener46 = components41.preferenceChangeListener();
        org.plista.kornakapi.core.config.Configuration configuration47 = components41.getConfiguration();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener48 = components41.preferenceChangeListener();
        delegatingPreferenceChangeListener34.addDelegate(preferenceChangeListener48);
        delegatingPreferenceChangeListener34.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener51 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener51.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener53 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener53.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener51.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener53);
        delegatingPreferenceChangeListener51.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener57 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener57.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener59 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener59.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener57.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener59);
        delegatingPreferenceChangeListener59.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener51.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener59);
        delegatingPreferenceChangeListener34.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener51);
        delegatingPreferenceChangeListener51.notifyOfPreferenceChange();
        org.plista.kornakapi.web.Components components66 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener67 = components66.preferenceChangeListener();
        org.plista.kornakapi.core.storage.Storage storage68 = components66.storage();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler69 = components66.scheduler();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener70 = components66.preferenceChangeListener();
        delegatingPreferenceChangeListener51.addDelegate(preferenceChangeListener70);
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler72 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener75 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler72, "MutablePreference{userID=0, itemID=0, value=1.0}", 52);
        inMemoryPreferenceChangeListener75.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener51.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener75);
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler78 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener81 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler78, "org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemID", 52);
        inMemoryPreferenceChangeListener81.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener51.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener81);
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.web.Components.init(configuration4, storage27, strMap28, strMap29, trainingScheduler30, (org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
        org.junit.Assert.assertNull(trainingScheduler2);
        org.junit.Assert.assertNull(trainingScheduler3);
// flaky:         org.junit.Assert.assertNotNull(configuration4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
// flaky:         org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.plista.kornakapi.web.MissingParameterException: itemIDs" + "'", str15, "org.plista.kornakapi.web.MissingParameterException: itemIDs");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(components41);
// flaky:         org.junit.Assert.assertNotNull(configuration42);
// flaky:         org.junit.Assert.assertNotNull(configuration43);
        org.junit.Assert.assertNull(trainingScheduler44);
        org.junit.Assert.assertNull(trainingScheduler45);
        org.junit.Assert.assertNotNull(preferenceChangeListener46);
// flaky:         org.junit.Assert.assertNotNull(configuration47);
        org.junit.Assert.assertNotNull(preferenceChangeListener48);
        org.junit.Assert.assertNotNull(components66);
        org.junit.Assert.assertNotNull(preferenceChangeListener67);
        org.junit.Assert.assertNull(storage68);
        org.junit.Assert.assertNull(trainingScheduler69);
        org.junit.Assert.assertNotNull(preferenceChangeListener70);
    }

    @Test
    public void test04071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04071");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str1 = itembasedRecommenderConfig0.getRetrainCronExpression();
        int int2 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        java.lang.String str3 = itembasedRecommenderConfig0.getSimilarityClass();
        itembasedRecommenderConfig0.setSimilarItemsPerItem(0);
        itembasedRecommenderConfig0.setSimilarityClass("");
        int int8 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        int int9 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        java.lang.String str10 = itembasedRecommenderConfig0.getSimilarityClass();
        int int11 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer12 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        java.io.File file13 = null;
        org.plista.kornakapi.core.storage.Storage storage14 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender15 = null;
        // The following exception was thrown during execution in test generation
        try {
            multithreadedItembasedInMemoryTrainer12.train(file13, storage14, recommender15, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test04072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04072");
        org.plista.kornakapi.web.MissingParameterException missingParameterException6 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException7 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException6);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException8 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException6);
        org.plista.kornakapi.web.MissingParameterException missingParameterException10 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException12 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException10.addSuppressed((java.lang.Throwable) missingParameterException12);
        invalidParameterException8.addSuppressed((java.lang.Throwable) missingParameterException12);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException15 = new org.plista.kornakapi.web.InvalidParameterException("file", (java.lang.Throwable) invalidParameterException8);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException16 = new org.plista.kornakapi.web.InvalidParameterException("value", (java.lang.Throwable) invalidParameterException15);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException17 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.InvalidParameterException: itemIDs", (java.lang.Throwable) invalidParameterException16);
        java.lang.Throwable[] throwableArray18 = invalidParameterException17.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray18);
    }

    @Test
    public void test04073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04073");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str1 = itembasedRecommenderConfig0.getSimilarityClass();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer2 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        itembasedRecommenderConfig0.setSimilarityClass("recommender");
        itembasedRecommenderConfig0.setSimilarityClass("org.plista.kornakapi.web.MissingParameterException: itemID");
        int int7 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer8 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer9 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        itembasedRecommenderConfig0.setRetrainAfterPreferenceChanges((int) (byte) 1);
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer12 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        itembasedRecommenderConfig0.setName("org.plista.kornakapi.web.InvalidParameterException: hi!");
        itembasedRecommenderConfig0.setSimilarityClass("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.MissingParameterException: itemIDs");
        java.lang.Class<?> wildcardClass17 = itembasedRecommenderConfig0.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test04074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04074");
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener3 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler0, "MutablePreference{userID=0, itemID=-1, value=32.0}", 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04075");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((-1L), (double) 0L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer5 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.apache.mahout.common.LongPair longPair6 = null;
        double double8 = filteringLongPairRescorer5.rescore(longPair6, 52.0d);
        org.apache.mahout.common.LongPair longPair9 = null;
        double double11 = filteringLongPairRescorer5.rescore(longPair9, (double) '#');
        org.apache.mahout.common.LongPair longPair12 = null;
        double double14 = filteringLongPairRescorer5.rescore(longPair12, (double) 100.0f);
        org.apache.mahout.common.LongPair longPair15 = null;
        double double17 = filteringLongPairRescorer5.rescore(longPair15, (double) (short) 1);
        org.apache.mahout.common.LongPair longPair18 = null;
        double double20 = filteringLongPairRescorer5.rescore(longPair18, (double) (byte) 0);
        org.apache.mahout.common.LongPair longPair21 = null;
        double double23 = filteringLongPairRescorer5.rescore(longPair21, (double) 100L);
        org.apache.mahout.common.LongPair longPair24 = null;
        double double26 = filteringLongPairRescorer5.rescore(longPair24, (double) 10);
        org.apache.mahout.common.LongPair longPair27 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = filteringLongPairRescorer5.isFiltered(longPair27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
    }

    @Test
    public void test04076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04076");
        org.plista.kornakapi.core.MutableCandidate mutableCandidate0 = new org.plista.kornakapi.core.MutableCandidate();
        long long1 = mutableCandidate0.getItemID();
        mutableCandidate0.set("itemIDs", (long) 0);
        mutableCandidate0.set("itemID", (long) 10000);
        mutableCandidate0.set("itemID", (long) (short) -1);
        long long11 = mutableCandidate0.getItemID();
        java.lang.String str12 = mutableCandidate0.getLabel();
        java.lang.String str13 = mutableCandidate0.getLabel();
        mutableCandidate0.set("itemIDs", (-1L));
        long long17 = mutableCandidate0.getItemID();
        long long18 = mutableCandidate0.getItemID();
        java.lang.String str19 = mutableCandidate0.getLabel();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "itemID" + "'", str12, "itemID");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "itemID" + "'", str13, "itemID");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "itemIDs" + "'", str19, "itemIDs");
    }

    @Test
    public void test04077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04077");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(false);
        int int6 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations(10);
        java.lang.String str9 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        factorizationbasedRecommenderConfig0.setAlpha((double) 100.0f);
        factorizationbasedRecommenderConfig0.setName("MutablePreference{userID=0, itemID=0, value=52.0}");
        factorizationbasedRecommenderConfig0.setName("MutablePreference{userID=0, itemID=0, value=1.0}");
        java.lang.String str16 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test04078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04078");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str1 = batchDeleteCandidatesServlet0.getServletInfo();
        java.lang.String str2 = batchDeleteCandidatesServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet3 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet4 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet5 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        setPreferenceServlet3.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet8 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet3.init((javax.servlet.ServletConfig) recommendServlet8);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet3);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet11 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet12 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet13 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet12.init((javax.servlet.ServletConfig) batchSetPreferencesServlet13);
        javax.servlet.ServletConfig servletConfig15 = batchSetPreferencesServlet12.getServletConfig();
        addCandidateServlet11.init((javax.servlet.ServletConfig) batchSetPreferencesServlet12);
        javax.servlet.ServletConfig servletConfig17 = addCandidateServlet11.getServletConfig();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) addCandidateServlet11);
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet19 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str20 = trainServlet19.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet21 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet21.destroy();
        javax.servlet.ServletConfig servletConfig23 = deleteCandidateServlet21.getServletConfig();
        deleteCandidateServlet21.destroy();
        trainServlet19.init((javax.servlet.ServletConfig) deleteCandidateServlet21);
        addCandidateServlet11.init((javax.servlet.ServletConfig) trainServlet19);
        trainServlet19.destroy();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet28 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet29 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet30 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet29.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet30);
        setPreferenceServlet28.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet30);
        trainServlet19.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet30);
        javax.servlet.ServletConfig servletConfig34 = batchDeleteCandidatesServlet30.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet35 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str36 = batchDeleteCandidatesServlet35.getServletInfo();
        batchDeleteCandidatesServlet35.init();
        javax.servlet.ServletConfig servletConfig38 = null;
        batchDeleteCandidatesServlet35.init(servletConfig38);
        javax.servlet.ServletConfig servletConfig40 = batchDeleteCandidatesServlet35.getServletConfig();
        batchDeleteCandidatesServlet35.init();
        javax.servlet.ServletConfig servletConfig42 = batchDeleteCandidatesServlet35.getServletConfig();
        java.lang.String str43 = batchDeleteCandidatesServlet35.getServletInfo();
        batchDeleteCandidatesServlet30.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet35);
        javax.servlet.ServletRequest servletRequest45 = null;
        javax.servlet.ServletResponse servletResponse46 = null;
        // The following exception was thrown during execution in test generation
        try {
            batchDeleteCandidatesServlet35.service(servletRequest45, servletResponse46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(servletConfig15);
        org.junit.Assert.assertNotNull(servletConfig17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(servletConfig23);
        org.junit.Assert.assertNull(servletConfig34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(servletConfig40);
        org.junit.Assert.assertNull(servletConfig42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test04079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04079");
        org.plista.kornakapi.web.MissingParameterException missingParameterException5 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException6 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException5);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException7 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException5);
        java.lang.Throwable[] throwableArray8 = missingParameterException5.getSuppressed();
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException9 = new org.plista.kornakapi.web.InvalidParameterException("MutablePreference{userID=0, itemID=0, value=0.0}", (java.lang.Throwable) missingParameterException5);
        java.lang.Throwable[] throwableArray10 = missingParameterException5.getSuppressed();
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException11 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.MissingParameterException: file", (java.lang.Throwable) missingParameterException5);
        org.plista.kornakapi.web.MissingParameterException missingParameterException15 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException16 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException15);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException17 = new org.plista.kornakapi.web.InvalidParameterException("", (java.lang.Throwable) invalidParameterException16);
        java.lang.Throwable[] throwableArray18 = invalidParameterException17.getSuppressed();
        org.plista.kornakapi.web.MissingParameterException missingParameterException23 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException24 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException23);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException25 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException23);
        org.plista.kornakapi.web.MissingParameterException missingParameterException27 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException29 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException27.addSuppressed((java.lang.Throwable) missingParameterException29);
        invalidParameterException25.addSuppressed((java.lang.Throwable) missingParameterException29);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException32 = new org.plista.kornakapi.web.InvalidParameterException("file", (java.lang.Throwable) invalidParameterException25);
        invalidParameterException17.addSuppressed((java.lang.Throwable) invalidParameterException32);
        invalidParameterException11.addSuppressed((java.lang.Throwable) invalidParameterException17);
        java.lang.Throwable[] throwableArray35 = invalidParameterException11.getSuppressed();
        java.lang.String str36 = invalidParameterException11.toString();
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: file" + "'", str36, "org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: file");
    }

    @Test
    public void test04080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04080");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((-1L), (double) 0L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer5 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double8 = fixedCandidatesIDRescorer1.rescore((long) (short) 0, (double) ' ');
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer9 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.apache.mahout.common.LongPair longPair10 = null;
        double double12 = filteringLongPairRescorer9.rescore(longPair10, (double) 35L);
        org.apache.mahout.common.LongPair longPair13 = null;
        double double15 = filteringLongPairRescorer9.rescore(longPair13, (double) '4');
        org.apache.mahout.common.LongPair longPair16 = null;
        double double18 = filteringLongPairRescorer9.rescore(longPair16, (double) 10000L);
        org.apache.mahout.common.LongPair longPair19 = null;
        double double21 = filteringLongPairRescorer9.rescore(longPair19, (double) (-1L));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 32.0d + "'", double8 == 32.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10000.0d + "'", double18 == 10000.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
    }

    @Test
    public void test04081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04081");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str1 = itembasedRecommenderConfig0.getRetrainCronExpression();
        int int2 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        java.lang.String str3 = itembasedRecommenderConfig0.getSimilarityClass();
        itembasedRecommenderConfig0.setSimilarItemsPerItem(0);
        itembasedRecommenderConfig0.setSimilarityClass("");
        int int8 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer9 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        java.io.File file10 = null;
        org.plista.kornakapi.core.storage.Storage storage11 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender12 = null;
        // The following exception was thrown during execution in test generation
        try {
            multithreadedItembasedInMemoryTrainer9.train(file10, storage11, recommender12, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test04082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04082");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.storage.Storage storage1 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener2 = null; // flaky: components0.preferenceChangeListener();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener3 = null; // flaky: components0.preferenceChangeListener();
        org.plista.kornakapi.core.storage.Storage storage4 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration5 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration6 = null; // flaky: components0.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList7 = null; // flaky: configuration6.getFactorizationbasedRecommenders();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList8 = null; // flaky: configuration6.getItembasedRecommenders();
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList9 = null; // flaky: configuration6.getFactorizationbasedRecommenders();
// flaky:         configuration6.setModelDirectory("MutablePreference{userID=0, itemID=100, value=97.0}");
        java.lang.String str12 = null; // flaky: configuration6.getModelDirectory();
// flaky:         org.junit.Assert.assertNotNull(components0);
        org.junit.Assert.assertNull(storage1);
// flaky:         org.junit.Assert.assertNotNull(preferenceChangeListener2);
// flaky:         org.junit.Assert.assertNotNull(preferenceChangeListener3);
        org.junit.Assert.assertNull(storage4);
// flaky:         org.junit.Assert.assertNotNull(configuration5);
// flaky:         org.junit.Assert.assertNotNull(configuration6);
// flaky:         org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList7);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList8);
// flaky:         org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MutablePreference{userID=0, itemID=100, value=97.0}" + "'", str12, "MutablePreference{userID=0, itemID=100, value=97.0}");
    }

    @Test
    public void test04083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04083");
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet0 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet0.init();
        setPreferenceServlet0.init();
        setPreferenceServlet0.destroy();
        javax.servlet.ServletConfig servletConfig4 = setPreferenceServlet0.getServletConfig();
        java.lang.String str5 = setPreferenceServlet0.getServletInfo();
        setPreferenceServlet0.init();
        setPreferenceServlet0.destroy();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet8 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str9 = batchDeleteCandidatesServlet8.getServletInfo();
        batchDeleteCandidatesServlet8.init();
        javax.servlet.ServletConfig servletConfig11 = null;
        batchDeleteCandidatesServlet8.init(servletConfig11);
        batchDeleteCandidatesServlet8.destroy();
        java.lang.String str14 = batchDeleteCandidatesServlet8.getServletInfo();
        javax.servlet.ServletConfig servletConfig15 = batchDeleteCandidatesServlet8.getServletConfig();
        java.lang.String str16 = batchDeleteCandidatesServlet8.getServletInfo();
        setPreferenceServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet8);
        batchDeleteCandidatesServlet8.destroy();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration19 = batchDeleteCandidatesServlet8.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(servletConfig15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test04084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04084");
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet0.init();
        java.lang.String str2 = batchAddCandidatesServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet3 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str4 = batchDeleteCandidatesServlet3.getServletInfo();
        batchDeleteCandidatesServlet3.destroy();
        javax.servlet.ServletConfig servletConfig6 = batchDeleteCandidatesServlet3.getServletConfig();
        batchAddCandidatesServlet0.init(servletConfig6);
        batchAddCandidatesServlet0.init();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet9 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet10 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet11 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet10.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet11);
        setPreferenceServlet9.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet11);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet14 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet9.init((javax.servlet.ServletConfig) recommendServlet14);
        recommendServlet14.init();
        batchAddCandidatesServlet0.init((javax.servlet.ServletConfig) recommendServlet14);
        batchAddCandidatesServlet0.destroy();
        // The following exception was thrown during execution in test generation
        try {
            javax.servlet.ServletContext servletContext19 = batchAddCandidatesServlet0.getServletContext();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(servletConfig6);
    }

    @Test
    public void test04085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04085");
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet0.init();
        java.lang.String str2 = batchAddCandidatesServlet0.getServletInfo();
        javax.servlet.ServletConfig servletConfig3 = batchAddCandidatesServlet0.getServletConfig();
        batchAddCandidatesServlet0.init();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet5 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str6 = batchDeleteCandidatesServlet5.getServletInfo();
        batchDeleteCandidatesServlet5.init();
        javax.servlet.ServletConfig servletConfig8 = null;
        batchDeleteCandidatesServlet5.init(servletConfig8);
        javax.servlet.ServletConfig servletConfig10 = batchDeleteCandidatesServlet5.getServletConfig();
        batchDeleteCandidatesServlet5.init();
        javax.servlet.ServletConfig servletConfig12 = batchDeleteCandidatesServlet5.getServletConfig();
        java.lang.String str13 = batchDeleteCandidatesServlet5.getServletInfo();
        batchAddCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        batchDeleteCandidatesServlet5.init();
        // The following exception was thrown during execution in test generation
        try {
            javax.servlet.ServletContext servletContext16 = batchDeleteCandidatesServlet5.getServletContext();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(servletConfig3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(servletConfig10);
        org.junit.Assert.assertNull(servletConfig12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test04086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04086");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        javax.servlet.ServletConfig servletConfig5 = batchSetPreferencesServlet2.getServletConfig();
        java.lang.String str6 = batchSetPreferencesServlet2.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet7 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet8 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet7.init((javax.servlet.ServletConfig) batchSetPreferencesServlet8);
        java.lang.String str10 = batchSetPreferencesServlet8.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet11 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str12 = batchDeleteCandidatesServlet11.getServletInfo();
        java.lang.String str13 = batchDeleteCandidatesServlet11.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet14 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet15 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet16 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet15.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet16);
        setPreferenceServlet14.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet16);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet19 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet14.init((javax.servlet.ServletConfig) recommendServlet19);
        batchDeleteCandidatesServlet11.init((javax.servlet.ServletConfig) setPreferenceServlet14);
        batchDeleteCandidatesServlet11.destroy();
        batchDeleteCandidatesServlet11.init();
        batchDeleteCandidatesServlet11.destroy();
        javax.servlet.ServletConfig servletConfig25 = batchDeleteCandidatesServlet11.getServletConfig();
        batchSetPreferencesServlet8.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet11);
        batchSetPreferencesServlet2.init((javax.servlet.ServletConfig) batchSetPreferencesServlet8);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet28 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet29 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet30 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet29.init((javax.servlet.ServletConfig) batchSetPreferencesServlet30);
        batchDeleteCandidatesServlet28.init((javax.servlet.ServletConfig) batchSetPreferencesServlet30);
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet33 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet34 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet33.init((javax.servlet.ServletConfig) batchSetPreferencesServlet34);
        java.lang.String str36 = batchSetPreferencesServlet34.getServletInfo();
        java.lang.String str37 = batchSetPreferencesServlet34.getServletInfo();
        batchSetPreferencesServlet34.destroy();
        batchDeleteCandidatesServlet28.init((javax.servlet.ServletConfig) batchSetPreferencesServlet34);
        batchSetPreferencesServlet2.init((javax.servlet.ServletConfig) batchSetPreferencesServlet34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = batchSetPreferencesServlet34.getInitParameter("MutablePreference{userID=-1, itemID=100, value=10000.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(servletConfig25);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test04087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04087");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        javax.servlet.ServletConfig servletConfig4 = batchSetPreferencesServlet1.getServletConfig();
        addCandidateServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet1);
        javax.servlet.ServletConfig servletConfig6 = addCandidateServlet0.getServletConfig();
        addCandidateServlet0.init();
        addCandidateServlet0.init();
        addCandidateServlet0.init();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = addCandidateServlet0.getInitParameter("org.plista.kornakapi.web.InvalidParameterException: label");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(servletConfig4);
        org.junit.Assert.assertNotNull(servletConfig6);
    }

    @Test
    public void test04088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04088");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler2 = null; // flaky: components0.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = null; // flaky: components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration4 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration5 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig6 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig6.setSimilarityClass("");
        java.lang.String str9 = itembasedRecommenderConfig6.getName();
        java.lang.String str10 = itembasedRecommenderConfig6.getSimilarityClass();
        itembasedRecommenderConfig6.setName("");
        java.lang.String str13 = itembasedRecommenderConfig6.getSimilarityClass();
// flaky:         configuration5.addItembasedRecommender(itembasedRecommenderConfig6);
        itembasedRecommenderConfig6.setSimilarItemsPerItem((int) (byte) 1);
        itembasedRecommenderConfig6.setSimilarItemsPerItem((int) (short) 100);
        int int19 = itembasedRecommenderConfig6.getRetrainAfterPreferenceChanges();
        java.lang.String str20 = itembasedRecommenderConfig6.getSimilarityClass();
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
        org.junit.Assert.assertNull(trainingScheduler2);
        org.junit.Assert.assertNull(trainingScheduler3);
// flaky:         org.junit.Assert.assertNotNull(configuration4);
// flaky:         org.junit.Assert.assertNotNull(configuration5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test04089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04089");
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.core.config.Configuration configuration1 = org.plista.kornakapi.core.config.Configuration.fromXML("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.MissingParameterException: MutablePreference{userID=-1, itemID=10, value=10.0}");
            org.junit.Assert.fail("Expected exception of type com.thoughtworks.xstream.io.StreamException; message:  : only whitespace content allowed before start tag and not o (position: START_DOCUMENT seen o... @1:1) ");
        } catch (com.thoughtworks.xstream.io.StreamException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04090");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        boolean boolean3 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        double double6 = factorizationbasedRecommenderConfig0.getLambda();
        double double7 = factorizationbasedRecommenderConfig0.getAlpha();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer8 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        java.io.File file9 = null;
        org.plista.kornakapi.core.storage.Storage storage10 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender11 = null;
        // The following exception was thrown during execution in test generation
        try {
            factorizationbasedInMemoryTrainer8.train(file9, storage10, recommender11, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test04091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04091");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet1 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str2 = batchDeleteCandidatesServlet1.getServletInfo();
        java.lang.String str3 = batchDeleteCandidatesServlet1.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet4 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet5 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet6 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet5.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        setPreferenceServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet9 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet4.init((javax.servlet.ServletConfig) recommendServlet9);
        batchDeleteCandidatesServlet1.init((javax.servlet.ServletConfig) setPreferenceServlet4);
        batchDeleteCandidatesServlet1.destroy();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet1);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet14 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet15 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet16 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet15.init((javax.servlet.ServletConfig) batchSetPreferencesServlet16);
        javax.servlet.ServletConfig servletConfig18 = batchSetPreferencesServlet15.getServletConfig();
        addCandidateServlet14.init((javax.servlet.ServletConfig) batchSetPreferencesServlet15);
        batchSetPreferencesServlet15.init();
        java.lang.String str21 = batchSetPreferencesServlet15.getServletInfo();
        batchSetPreferencesServlet15.init();
        batchSetPreferencesServlet15.init();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet15);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet25 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet26 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet27 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet26.init((javax.servlet.ServletConfig) batchSetPreferencesServlet27);
        javax.servlet.ServletConfig servletConfig29 = batchSetPreferencesServlet26.getServletConfig();
        addCandidateServlet25.init((javax.servlet.ServletConfig) batchSetPreferencesServlet26);
        javax.servlet.ServletConfig servletConfig31 = addCandidateServlet25.getServletConfig();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet32 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet33 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet34 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet33.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet34);
        setPreferenceServlet32.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet34);
        javax.servlet.ServletConfig servletConfig37 = setPreferenceServlet32.getServletConfig();
        addCandidateServlet25.init((javax.servlet.ServletConfig) setPreferenceServlet32);
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet39 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet39.init();
        java.lang.String str41 = batchAddCandidatesServlet39.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet42 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str43 = batchDeleteCandidatesServlet42.getServletInfo();
        batchDeleteCandidatesServlet42.destroy();
        javax.servlet.ServletConfig servletConfig45 = batchDeleteCandidatesServlet42.getServletConfig();
        batchAddCandidatesServlet39.init(servletConfig45);
        batchAddCandidatesServlet39.init();
        addCandidateServlet25.init((javax.servlet.ServletConfig) batchAddCandidatesServlet39);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) addCandidateServlet25);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet50 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str51 = batchDeleteCandidatesServlet50.getServletInfo();
        batchDeleteCandidatesServlet50.init();
        java.lang.String str53 = batchDeleteCandidatesServlet50.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet54 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet54.init();
        batchDeleteCandidatesServlet50.init((javax.servlet.ServletConfig) batchAddCandidatesServlet54);
        batchDeleteCandidatesServlet50.destroy();
        batchDeleteCandidatesServlet50.init();
        java.lang.String str59 = batchDeleteCandidatesServlet50.getServletInfo();
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet60 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str61 = trainServlet60.getServletInfo();
        javax.servlet.ServletConfig servletConfig62 = trainServlet60.getServletConfig();
        trainServlet60.destroy();
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet64 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet64.init();
        java.lang.String str66 = batchAddCandidatesServlet64.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet67 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str68 = batchDeleteCandidatesServlet67.getServletInfo();
        batchDeleteCandidatesServlet67.destroy();
        javax.servlet.ServletConfig servletConfig70 = batchDeleteCandidatesServlet67.getServletConfig();
        batchAddCandidatesServlet64.init(servletConfig70);
        batchAddCandidatesServlet64.init();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet73 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet74 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet75 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet74.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet75);
        setPreferenceServlet73.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet75);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet78 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet73.init((javax.servlet.ServletConfig) recommendServlet78);
        recommendServlet78.init();
        batchAddCandidatesServlet64.init((javax.servlet.ServletConfig) recommendServlet78);
        recommendServlet78.init();
        trainServlet60.init((javax.servlet.ServletConfig) recommendServlet78);
        batchDeleteCandidatesServlet50.init((javax.servlet.ServletConfig) recommendServlet78);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) recommendServlet78);
        recommendServlet78.init();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str87 = recommendServlet78.getServletName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(servletConfig18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(servletConfig29);
        org.junit.Assert.assertNotNull(servletConfig31);
        org.junit.Assert.assertNotNull(servletConfig37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(servletConfig45);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNull(servletConfig62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNull(servletConfig70);
    }

    @Test
    public void test04092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04092");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig1 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double2 = factorizationbasedRecommenderConfig1.getAlpha();
        double double3 = factorizationbasedRecommenderConfig1.getLambda();
        int int4 = factorizationbasedRecommenderConfig1.getNumberOfFeatures();
        java.lang.String str5 = factorizationbasedRecommenderConfig1.getRetrainCronExpression();
        int int6 = factorizationbasedRecommenderConfig1.getNumberOfFeatures();
        factorizationbasedRecommenderConfig1.setNumberOfIterations((int) (short) 0);
        factorizationbasedRecommenderConfig1.setRetrainAfterPreferenceChanges((int) (byte) 100);
        double double11 = factorizationbasedRecommenderConfig1.getLambda();
        factorizationbasedRecommenderConfig1.setAlpha((double) (byte) 0);
        configuration0.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig1);
        configuration0.setModelDirectory("MutablePreference{userID=0, itemID=0, value=10.0}");
        org.plista.kornakapi.core.storage.Storage storage17 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.KornakapiRecommender> strMap18 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.core.training.Trainer> strMap19 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler20 = null;
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener21 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener21.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener21.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener24 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener24.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener26 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener26.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener24.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener26);
        delegatingPreferenceChangeListener21.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener24);
        delegatingPreferenceChangeListener24.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener24.notifyOfPreferenceChange();
        org.plista.kornakapi.web.Components components32 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.storage.Storage storage33 = null; // flaky: components32.storage();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener34 = null; // flaky: components32.preferenceChangeListener();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener35 = null; // flaky: components32.preferenceChangeListener();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener36 = null; // flaky: components32.preferenceChangeListener();
        delegatingPreferenceChangeListener24.addDelegate(preferenceChangeListener36);
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener38 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener38.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener38.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener38.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler42 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener45 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler42, "label", (int) '#');
        delegatingPreferenceChangeListener38.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener45);
        delegatingPreferenceChangeListener24.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener38);
// flaky:         delegatingPreferenceChangeListener24.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler49 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener52 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler49, "MutablePreference{userID=0, itemID=0, value=100.0}", (int) (byte) 100);
        inMemoryPreferenceChangeListener52.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener24.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener52);
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.web.Components.init(configuration0, storage17, strMap18, strMap19, trainingScheduler20, (org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
// flaky:         org.junit.Assert.assertNotNull(components32);
        org.junit.Assert.assertNull(storage33);
// flaky:         org.junit.Assert.assertNotNull(preferenceChangeListener34);
// flaky:         org.junit.Assert.assertNotNull(preferenceChangeListener35);
// flaky:         org.junit.Assert.assertNotNull(preferenceChangeListener36);
    }

    @Test
    public void test04093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04093");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((long) '#', (double) 10L);
        double double7 = fixedCandidatesIDRescorer1.rescore((long) (byte) 0, (double) (byte) 1);
        double double10 = fixedCandidatesIDRescorer1.rescore((long) (byte) 10, (double) 100);
        double double13 = fixedCandidatesIDRescorer1.rescore(97L, (double) 10.0f);
        double double16 = fixedCandidatesIDRescorer1.rescore((long) (short) -1, (double) 1.0f);
        double double19 = fixedCandidatesIDRescorer1.rescore(32L, (double) 10000.0f);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = fixedCandidatesIDRescorer1.isFiltered((long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10000.0d + "'", double19 == 10000.0d);
    }

    @Test
    public void test04094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04094");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        factorizationbasedRecommenderConfig0.setNumberOfFeatures((int) (short) 10);
        factorizationbasedRecommenderConfig0.setLambda((double) (byte) 10);
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer9 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        java.io.File file10 = null;
        org.plista.kornakapi.core.storage.Storage storage11 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender12 = null;
        // The following exception was thrown during execution in test generation
        try {
            factorizationbasedInMemoryTrainer9.train(file10, storage11, recommender12, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
    }

    @Test
    public void test04095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04095");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage3 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.storage.Storage storage4 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration5 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig6 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double7 = factorizationbasedRecommenderConfig6.getAlpha();
        double double8 = factorizationbasedRecommenderConfig6.getLambda();
        int int9 = factorizationbasedRecommenderConfig6.getNumberOfFeatures();
        factorizationbasedRecommenderConfig6.setNumberOfIterations(0);
        factorizationbasedRecommenderConfig6.setNumberOfFeatures((int) (short) 100);
        boolean boolean14 = factorizationbasedRecommenderConfig6.isUsesImplicitFeedback();
// flaky:         configuration5.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig6);
        int int16 = 0; // flaky: configuration5.getNumProcessorsForTraining();
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList17 = null; // flaky: configuration5.getFactorizationbasedRecommenders();
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(storage3);
        org.junit.Assert.assertNull(storage4);
// flaky:         org.junit.Assert.assertNotNull(configuration5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
// flaky:         org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList17);
    }

    @Test
    public void test04096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04096");
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener0 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener0.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener0.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener3 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener3.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener5 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener5.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener3.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener5);
        delegatingPreferenceChangeListener0.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener3);
        delegatingPreferenceChangeListener3.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener3.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener11 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener11.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener11.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener11.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener11.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener3.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener11);
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener17 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener17.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener17.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener17.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener17.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener11.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener17);
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler23 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener26 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler23, "value", (int) '#');
        delegatingPreferenceChangeListener17.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener26);
    }

    @Test
    public void test04097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04097");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str1 = itembasedRecommenderConfig0.getRetrainCronExpression();
        int int2 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        java.lang.String str3 = itembasedRecommenderConfig0.getSimilarityClass();
        itembasedRecommenderConfig0.setSimilarItemsPerItem(0);
        itembasedRecommenderConfig0.setSimilarityClass("");
        itembasedRecommenderConfig0.setSimilarItemsPerItem((int) '#');
        int int10 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer11 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        java.io.File file12 = null;
        org.plista.kornakapi.core.storage.Storage storage13 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender14 = null;
        // The following exception was thrown during execution in test generation
        try {
            multithreadedItembasedInMemoryTrainer11.train(file12, storage13, recommender14, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
    }

    @Test
    public void test04098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04098");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage3 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.storage.Storage storage4 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration5 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage6 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration7 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler8 = null; // flaky: components0.scheduler();
        org.plista.kornakapi.core.storage.Storage storage9 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler10 = null; // flaky: components0.scheduler();
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(storage3);
        org.junit.Assert.assertNull(storage4);
// flaky:         org.junit.Assert.assertNotNull(configuration5);
        org.junit.Assert.assertNull(storage6);
// flaky:         org.junit.Assert.assertNotNull(configuration7);
        org.junit.Assert.assertNull(trainingScheduler8);
        org.junit.Assert.assertNull(storage9);
        org.junit.Assert.assertNull(trainingScheduler10);
    }

    @Test
    public void test04099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04099");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 0);
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges(10000);
        factorizationbasedRecommenderConfig0.setNumberOfFeatures((int) (short) 0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test04100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04100");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 0);
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges((int) (byte) 100);
        double double10 = factorizationbasedRecommenderConfig0.getLambda();
        factorizationbasedRecommenderConfig0.setAlpha((double) (short) 10);
        int int13 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer14 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test04101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04101");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        double double6 = factorizationbasedRecommenderConfig0.getAlpha();
        java.lang.String str7 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer8 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        java.lang.String str9 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        double double10 = factorizationbasedRecommenderConfig0.getAlpha();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test04102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04102");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        int int1 = configuration0.getNumProcessorsForTraining();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration2 = configuration0.getStorageConfiguration();
        configuration0.setNumProcessorsForTraining((int) '4');
        java.lang.String str5 = configuration0.getModelDirectory();
        java.lang.String str6 = configuration0.getModelDirectory();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(storageConfiguration2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test04103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04103");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        javax.servlet.ServletConfig servletConfig4 = batchSetPreferencesServlet1.getServletConfig();
        addCandidateServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet1);
        batchSetPreferencesServlet1.destroy();
        java.lang.String str7 = batchSetPreferencesServlet1.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet8 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet8.init();
        setPreferenceServlet8.init();
        setPreferenceServlet8.destroy();
        javax.servlet.ServletConfig servletConfig12 = setPreferenceServlet8.getServletConfig();
        java.lang.String str13 = setPreferenceServlet8.getServletInfo();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) setPreferenceServlet8);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet15 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet16 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet17 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet16.init((javax.servlet.ServletConfig) batchSetPreferencesServlet17);
        javax.servlet.ServletConfig servletConfig19 = batchSetPreferencesServlet16.getServletConfig();
        addCandidateServlet15.init((javax.servlet.ServletConfig) batchSetPreferencesServlet16);
        batchSetPreferencesServlet16.init();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet22 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        java.lang.String str23 = recommendServlet22.getServletInfo();
        javax.servlet.ServletConfig servletConfig24 = recommendServlet22.getServletConfig();
        java.lang.String str25 = recommendServlet22.getServletInfo();
        batchSetPreferencesServlet16.init((javax.servlet.ServletConfig) recommendServlet22);
        javax.servlet.ServletConfig servletConfig27 = null;
        recommendServlet22.init(servletConfig27);
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) recommendServlet22);
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet30 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet30.destroy();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) deleteCandidateServlet30);
        org.plista.kornakapi.web.MissingParameterException missingParameterException36 = new org.plista.kornakapi.web.MissingParameterException("MutablePreference{userID=-1, itemID=10, value=10.0}");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException37 = new org.plista.kornakapi.web.InvalidParameterException("batchSize", (java.lang.Throwable) missingParameterException36);
        // The following exception was thrown during execution in test generation
        try {
            deleteCandidateServlet30.log("MutablePreference{userID=35, itemID=35, value=0.0}", (java.lang.Throwable) invalidParameterException37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(servletConfig4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(servletConfig12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(servletConfig19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(servletConfig24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test04104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04104");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setLambda((double) 1);
        double double6 = factorizationbasedRecommenderConfig0.getLambda();
        int int7 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        factorizationbasedRecommenderConfig0.setRetrainCronExpression("MutablePreference{userID=10000, itemID=52, value=52.0}");
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test04105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04105");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        int int1 = configuration0.getNumProcessorsForTraining();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration2 = configuration0.getStorageConfiguration();
        configuration0.setNumProcessorsForTraining(0);
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList5 = configuration0.getFactorizationbasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration6 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str7 = storageConfiguration6.getJdbcDriverClass();
        storageConfiguration6.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str10 = storageConfiguration6.getPassword();
        java.lang.String str11 = storageConfiguration6.getJdbcDriverClass();
        storageConfiguration6.setUsername("hi!");
        storageConfiguration6.setJdbcDriverClass("file");
        configuration0.setStorageConfiguration(storageConfiguration6);
        java.lang.String str17 = storageConfiguration6.getJdbcUrl();
        java.lang.String str18 = storageConfiguration6.getPassword();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(storageConfiguration2);
        org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test04106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04106");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((-1L), (double) 0L);
        double double7 = fixedCandidatesIDRescorer1.rescore((long) '#', (double) (short) -1);
        double double10 = fixedCandidatesIDRescorer1.rescore((long) (byte) 1, (double) 0.0f);
        double double13 = fixedCandidatesIDRescorer1.rescore((long) 52, (double) 35L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer14 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer15 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = fixedCandidatesIDRescorer1.isFiltered(52L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
    }

    @Test
    public void test04107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04107");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig0.setSimilarityClass("");
        java.lang.String str3 = itembasedRecommenderConfig0.getName();
        java.lang.String str4 = itembasedRecommenderConfig0.getSimilarityClass();
        java.lang.String str5 = itembasedRecommenderConfig0.getSimilarityClass();
        int int6 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        itembasedRecommenderConfig0.setSimilarItemsPerItem((int) (byte) 10);
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer9 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        java.io.File file10 = null;
        org.plista.kornakapi.core.storage.Storage storage11 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender12 = null;
        // The following exception was thrown during execution in test generation
        try {
            multithreadedItembasedInMemoryTrainer9.train(file10, storage11, recommender12, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test04108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04108");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler2 = null; // flaky: components0.scheduler();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener3 = null; // flaky: components0.preferenceChangeListener();
        org.plista.kornakapi.core.config.Configuration configuration4 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.web.Components components5 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration6 = components5.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration7 = components5.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage8 = components5.storage();
        org.plista.kornakapi.core.storage.Storage storage9 = components5.storage();
        org.plista.kornakapi.core.config.Configuration configuration10 = components5.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList11 = null; // flaky: configuration10.getItembasedRecommenders();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig12 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig12.setSimilarityClass("");
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer15 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig12);
        itembasedRecommenderConfig12.setRetrainCronExpression("");
        itembasedRecommenderConfig12.setSimilarItemsPerItem(10);
        itembasedRecommenderConfig12.setRetrainCronExpression("");
// flaky:         configuration10.addItembasedRecommender(itembasedRecommenderConfig12);
        int int23 = itembasedRecommenderConfig12.getRetrainAfterPreferenceChanges();
// flaky:         configuration4.addItembasedRecommender(itembasedRecommenderConfig12);
        org.plista.kornakapi.core.storage.Storage storage25 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.KornakapiRecommender> strMap26 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.core.training.Trainer> strMap27 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler28 = null;
        org.plista.kornakapi.web.Components components29 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration30 = components29.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration31 = components29.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler32 = components29.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler33 = components29.scheduler();
        org.plista.kornakapi.core.storage.Storage storage34 = components29.storage();
        org.plista.kornakapi.core.config.Configuration configuration35 = components29.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage36 = components29.storage();
        org.plista.kornakapi.core.config.Configuration configuration37 = components29.getConfiguration();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener38 = components29.preferenceChangeListener();
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.web.Components.init(configuration4, storage25, strMap26, strMap27, trainingScheduler28, preferenceChangeListener38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
        org.junit.Assert.assertNull(trainingScheduler2);
// flaky:         org.junit.Assert.assertNotNull(preferenceChangeListener3);
// flaky:         org.junit.Assert.assertNotNull(configuration4);
        org.junit.Assert.assertNotNull(components5);
// flaky:         org.junit.Assert.assertNotNull(configuration6);
// flaky:         org.junit.Assert.assertNotNull(configuration7);
        org.junit.Assert.assertNull(storage8);
        org.junit.Assert.assertNull(storage9);
// flaky:         org.junit.Assert.assertNotNull(configuration10);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList11);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(components29);
// flaky:         org.junit.Assert.assertNotNull(configuration30);
// flaky:         org.junit.Assert.assertNotNull(configuration31);
        org.junit.Assert.assertNull(trainingScheduler32);
        org.junit.Assert.assertNull(trainingScheduler33);
        org.junit.Assert.assertNull(storage34);
// flaky:         org.junit.Assert.assertNotNull(configuration35);
        org.junit.Assert.assertNull(storage36);
// flaky:         org.junit.Assert.assertNotNull(configuration37);
        org.junit.Assert.assertNotNull(preferenceChangeListener38);
    }

    @Test
    public void test04109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04109");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage3 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.storage.Storage storage4 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener5 = null; // flaky: components0.preferenceChangeListener();
        org.plista.kornakapi.core.config.Configuration configuration6 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.web.Components components7 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration8 = components7.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler9 = components7.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler10 = components7.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration11 = components7.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration12 = components7.getConfiguration();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig13 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig13.setSimilarityClass("");
        java.lang.String str16 = itembasedRecommenderConfig13.getName();
        java.lang.String str17 = itembasedRecommenderConfig13.getSimilarityClass();
        itembasedRecommenderConfig13.setName("");
        java.lang.String str20 = itembasedRecommenderConfig13.getSimilarityClass();
// flaky:         configuration12.addItembasedRecommender(itembasedRecommenderConfig13);
        itembasedRecommenderConfig13.setSimilarItemsPerItem((int) (byte) 1);
// flaky:         configuration6.addItembasedRecommender(itembasedRecommenderConfig13);
        itembasedRecommenderConfig13.setSimilarityClass("");
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer27 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig13);
        java.lang.String str28 = itembasedRecommenderConfig13.getSimilarityClass();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer29 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig13);
        java.io.File file30 = null;
        org.plista.kornakapi.core.storage.Storage storage31 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender32 = null;
        // The following exception was thrown during execution in test generation
        try {
            multithreadedItembasedInMemoryTrainer29.train(file30, storage31, recommender32, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(storage3);
        org.junit.Assert.assertNull(storage4);
// flaky:         org.junit.Assert.assertNotNull(preferenceChangeListener5);
// flaky:         org.junit.Assert.assertNotNull(configuration6);
        org.junit.Assert.assertNotNull(components7);
// flaky:         org.junit.Assert.assertNotNull(configuration8);
        org.junit.Assert.assertNull(trainingScheduler9);
        org.junit.Assert.assertNull(trainingScheduler10);
// flaky:         org.junit.Assert.assertNotNull(configuration11);
// flaky:         org.junit.Assert.assertNotNull(configuration12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test04110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04110");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler2 = null; // flaky: components0.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = null; // flaky: components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration4 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration5 = null; // flaky: components0.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList6 = null; // flaky: configuration5.getFactorizationbasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration7 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str8 = storageConfiguration7.getJdbcDriverClass();
        storageConfiguration7.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str11 = storageConfiguration7.getJdbcUrl();
        java.lang.String str12 = storageConfiguration7.getJdbcDriverClass();
        storageConfiguration7.setJdbcDriverClass("batchSize");
        storageConfiguration7.setPassword("howMany");
        storageConfiguration7.setJdbcUrl("hi!");
// flaky:         configuration5.setStorageConfiguration(storageConfiguration7);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration20 = null; // flaky: configuration5.getStorageConfiguration();
        org.plista.kornakapi.web.Components components21 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener22 = components21.preferenceChangeListener();
        org.plista.kornakapi.core.storage.Storage storage23 = components21.storage();
        org.plista.kornakapi.core.config.Configuration configuration24 = components21.getConfiguration();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration25 = null; // flaky: configuration24.getStorageConfiguration();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration26 = null; // flaky: configuration24.getStorageConfiguration();
// flaky:         configuration5.setStorageConfiguration(storageConfiguration26);
        org.plista.kornakapi.core.storage.Storage storage28 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.KornakapiRecommender> strMap29 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.core.training.Trainer> strMap30 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler31 = null;
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener32 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener32.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener32.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener35 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener35.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener37 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener37.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener35.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener37);
        delegatingPreferenceChangeListener32.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener35);
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler41 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener44 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler41, "label", (int) ' ');
        inMemoryPreferenceChangeListener44.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener32.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener44);
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener47 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener47.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener49 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener49.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener47.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener49);
        delegatingPreferenceChangeListener49.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener49.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener32.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener49);
        delegatingPreferenceChangeListener32.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener32.notifyOfPreferenceChange();
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.web.Components.init(configuration5, storage28, strMap29, strMap30, trainingScheduler31, (org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
        org.junit.Assert.assertNull(trainingScheduler2);
        org.junit.Assert.assertNull(trainingScheduler3);
// flaky:         org.junit.Assert.assertNotNull(configuration4);
// flaky:         org.junit.Assert.assertNotNull(configuration5);
// flaky:         org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration20);
        org.junit.Assert.assertNotNull(components21);
        org.junit.Assert.assertNotNull(preferenceChangeListener22);
        org.junit.Assert.assertNull(storage23);
// flaky:         org.junit.Assert.assertNotNull(configuration24);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration25);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration26);
    }

    @Test
    public void test04111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04111");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = null; // flaky: components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration4 = null; // flaky: components0.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList5 = null; // flaky: configuration4.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration6 = null; // flaky: configuration4.getStorageConfiguration();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig7 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str8 = itembasedRecommenderConfig7.getRetrainCronExpression();
        int int9 = itembasedRecommenderConfig7.getRetrainAfterPreferenceChanges();
        java.lang.String str10 = itembasedRecommenderConfig7.getSimilarityClass();
        itembasedRecommenderConfig7.setSimilarityClass("MutablePreference{userID=100, itemID=0, value=0.0}");
        itembasedRecommenderConfig7.setSimilarityClass("MutablePreference{userID=0, itemID=0, value=0.0}");
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer15 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig7);
// flaky:         configuration4.addItembasedRecommender(itembasedRecommenderConfig7);
// flaky:         configuration4.setNumProcessorsForTraining(0);
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(trainingScheduler3);
// flaky:         org.junit.Assert.assertNotNull(configuration4);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList5);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test04112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04112");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str1 = itembasedRecommenderConfig0.getRetrainCronExpression();
        int int2 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        java.lang.String str3 = itembasedRecommenderConfig0.getSimilarityClass();
        itembasedRecommenderConfig0.setSimilarItemsPerItem(0);
        itembasedRecommenderConfig0.setSimilarItemsPerItem((int) '#');
        itembasedRecommenderConfig0.setRetrainAfterPreferenceChanges((int) (byte) 0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test04113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04113");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList1 = configuration0.getItembasedRecommenders();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList2 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration3 = configuration0.getStorageConfiguration();
        int int4 = configuration0.getNumProcessorsForTraining();
        configuration0.setNumProcessorsForTraining((int) (short) 10);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration7 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str8 = storageConfiguration7.getJdbcDriverClass();
        storageConfiguration7.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str11 = storageConfiguration7.getJdbcUrl();
        java.lang.String str12 = storageConfiguration7.getJdbcDriverClass();
        java.lang.String str13 = storageConfiguration7.getJdbcDriverClass();
        java.lang.String str14 = storageConfiguration7.getPassword();
        java.lang.String str15 = storageConfiguration7.getJdbcDriverClass();
        java.lang.String str16 = storageConfiguration7.getPassword();
        configuration0.setStorageConfiguration(storageConfiguration7);
        storageConfiguration7.setUsername("itemIDs");
        storageConfiguration7.setPassword("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList1);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList2);
        org.junit.Assert.assertNull(storageConfiguration3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test04114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04114");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList1 = configuration0.getItembasedRecommenders();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList2 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration3 = configuration0.getStorageConfiguration();
        int int4 = configuration0.getNumProcessorsForTraining();
        configuration0.setNumProcessorsForTraining((int) (short) 10);
        java.lang.String str7 = configuration0.getModelDirectory();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList8 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig9 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double10 = factorizationbasedRecommenderConfig9.getAlpha();
        double double11 = factorizationbasedRecommenderConfig9.getLambda();
        int int12 = factorizationbasedRecommenderConfig9.getNumberOfFeatures();
        factorizationbasedRecommenderConfig9.setUsesImplicitFeedback(false);
        int int15 = factorizationbasedRecommenderConfig9.getNumberOfFeatures();
        factorizationbasedRecommenderConfig9.setLambda((double) 0);
        factorizationbasedRecommenderConfig9.setName("userID");
        factorizationbasedRecommenderConfig9.setRetrainCronExpression("org.plista.kornakapi.web.MissingParameterException: itemID");
        factorizationbasedRecommenderConfig9.setAlpha((double) 0L);
        configuration0.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig9);
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig25 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig25.setSimilarityClass("");
        java.lang.String str28 = itembasedRecommenderConfig25.getSimilarityClass();
        itembasedRecommenderConfig25.setRetrainCronExpression("userID");
        configuration0.addItembasedRecommender(itembasedRecommenderConfig25);
        int int32 = itembasedRecommenderConfig25.getSimilarItemsPerItem();
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList1);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList2);
        org.junit.Assert.assertNull(storageConfiguration3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test04115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04115");
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration0 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str1 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str2 = storageConfiguration0.getJdbcUrl();
        java.lang.String str3 = storageConfiguration0.getJdbcUrl();
        java.lang.String str4 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setUsername("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemIDs");
        storageConfiguration0.setPassword("MutablePreference{userID=-1, itemID=0, value=97.0}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test04116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04116");
        org.plista.kornakapi.core.MutableCandidate mutableCandidate0 = new org.plista.kornakapi.core.MutableCandidate();
        long long1 = mutableCandidate0.getItemID();
        mutableCandidate0.set("itemIDs", (long) 0);
        java.lang.String str5 = mutableCandidate0.getLabel();
        java.lang.String str6 = mutableCandidate0.getLabel();
        mutableCandidate0.set("", (long) '#');
        mutableCandidate0.set("org.plista.kornakapi.web.InvalidParameterException: file", (long) (short) -1);
        java.lang.Class<?> wildcardClass13 = mutableCandidate0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "itemIDs" + "'", str5, "itemIDs");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "itemIDs" + "'", str6, "itemIDs");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test04117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04117");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setNumProcessorsForTraining((int) (short) 100);
        java.lang.String str3 = configuration0.getModelDirectory();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList4 = configuration0.getItembasedRecommenders();
        configuration0.setNumProcessorsForTraining(100);
        org.plista.kornakapi.web.Components components7 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration8 = null; // flaky: components7.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration9 = null; // flaky: components7.getConfiguration();
        java.lang.String str10 = null; // flaky: configuration9.getModelDirectory();
        int int11 = 0; // flaky: configuration9.getNumProcessorsForTraining();
        int int12 = 0; // flaky: configuration9.getNumProcessorsForTraining();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration13 = null; // flaky: configuration9.getStorageConfiguration();
        configuration0.setStorageConfiguration(storageConfiguration13);
        configuration0.setModelDirectory("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemID");
        configuration0.setModelDirectory("org.plista.kornakapi.web.InvalidParameterException: recommender");
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList19 = configuration0.getItembasedRecommenders();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList4);
// flaky:         org.junit.Assert.assertNotNull(components7);
// flaky:         org.junit.Assert.assertNotNull(configuration8);
// flaky:         org.junit.Assert.assertNotNull(configuration9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration13);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList19);
    }

    @Test
    public void test04118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04118");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        double double6 = factorizationbasedRecommenderConfig0.getAlpha();
        java.lang.String str7 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int8 = factorizationbasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        boolean boolean9 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        factorizationbasedRecommenderConfig0.setLambda((double) 1);
        int int12 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations(10000);
        int int15 = factorizationbasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        int int16 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges(35);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
    }

    @Test
    public void test04119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04119");
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet0 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str1 = trainServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet2 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet2.destroy();
        javax.servlet.ServletConfig servletConfig4 = deleteCandidateServlet2.getServletConfig();
        deleteCandidateServlet2.destroy();
        trainServlet0.init((javax.servlet.ServletConfig) deleteCandidateServlet2);
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet7 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet7.init();
        java.lang.String str9 = batchAddCandidatesServlet7.getServletInfo();
        javax.servlet.ServletConfig servletConfig10 = batchAddCandidatesServlet7.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet11 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str12 = batchDeleteCandidatesServlet11.getServletInfo();
        java.lang.String str13 = batchDeleteCandidatesServlet11.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet14 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet15 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet16 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet15.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet16);
        setPreferenceServlet14.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet16);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet19 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet14.init((javax.servlet.ServletConfig) recommendServlet19);
        batchDeleteCandidatesServlet11.init((javax.servlet.ServletConfig) setPreferenceServlet14);
        batchAddCandidatesServlet7.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet11);
        batchDeleteCandidatesServlet11.init();
        java.lang.String str24 = batchDeleteCandidatesServlet11.getServletInfo();
        java.lang.String str25 = batchDeleteCandidatesServlet11.getServletInfo();
        trainServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet11);
        javax.servlet.ServletConfig servletConfig27 = batchDeleteCandidatesServlet11.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet28 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str29 = batchDeleteCandidatesServlet28.getServletInfo();
        batchDeleteCandidatesServlet28.init();
        batchDeleteCandidatesServlet28.destroy();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet32 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet32.destroy();
        javax.servlet.ServletConfig servletConfig34 = deleteCandidateServlet32.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet35 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str36 = batchDeleteCandidatesServlet35.getServletInfo();
        java.lang.String str37 = batchDeleteCandidatesServlet35.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet38 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet39 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet40 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet39.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet40);
        setPreferenceServlet38.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet40);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet43 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet38.init((javax.servlet.ServletConfig) recommendServlet43);
        batchDeleteCandidatesServlet35.init((javax.servlet.ServletConfig) setPreferenceServlet38);
        setPreferenceServlet38.destroy();
        deleteCandidateServlet32.init((javax.servlet.ServletConfig) setPreferenceServlet38);
        batchDeleteCandidatesServlet28.init((javax.servlet.ServletConfig) setPreferenceServlet38);
        batchDeleteCandidatesServlet11.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = batchDeleteCandidatesServlet11.getServletName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNull(servletConfig4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(servletConfig10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(servletConfig27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(servletConfig34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test04120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04120");
        org.plista.kornakapi.web.MissingParameterException missingParameterException3 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException4 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException3);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException5 = new org.plista.kornakapi.web.InvalidParameterException("", (java.lang.Throwable) invalidParameterException4);
        org.plista.kornakapi.web.MissingParameterException missingParameterException9 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException10 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException9);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException11 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException9);
        java.lang.Throwable[] throwableArray12 = missingParameterException9.getSuppressed();
        java.lang.Throwable[] throwableArray13 = missingParameterException9.getSuppressed();
        java.lang.Throwable[] throwableArray14 = missingParameterException9.getSuppressed();
        invalidParameterException4.addSuppressed((java.lang.Throwable) missingParameterException9);
        java.lang.String str16 = missingParameterException9.toString();
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.plista.kornakapi.web.MissingParameterException: itemID" + "'", str16, "org.plista.kornakapi.web.MissingParameterException: itemID");
    }

    @Test
    public void test04121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04121");
        org.plista.kornakapi.core.MutablePreference mutablePreference0 = new org.plista.kornakapi.core.MutablePreference();
        java.lang.String str1 = mutablePreference0.toString();
        long long2 = mutablePreference0.getItemID();
        long long3 = mutablePreference0.getItemID();
        mutablePreference0.setValue((float) 35);
        mutablePreference0.setValue(100.0f);
        java.lang.String str8 = mutablePreference0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str1, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MutablePreference{userID=0, itemID=0, value=100.0}" + "'", str8, "MutablePreference{userID=0, itemID=0, value=100.0}");
    }

    @Test
    public void test04122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04122");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        addCandidateServlet0.destroy();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet3 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet2.init((javax.servlet.ServletConfig) batchSetPreferencesServlet3);
        addCandidateServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        java.lang.String str6 = batchSetPreferencesServlet2.getServletInfo();
        javax.servlet.ServletConfig servletConfig7 = batchSetPreferencesServlet2.getServletConfig();
        batchSetPreferencesServlet2.destroy();
        java.lang.String str9 = batchSetPreferencesServlet2.getServletInfo();
        java.lang.String str10 = batchSetPreferencesServlet2.getServletInfo();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration11 = batchSetPreferencesServlet2.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(servletConfig7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test04123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04123");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        factorizationbasedRecommenderConfig0.setNumberOfFeatures((int) (byte) 1);
        factorizationbasedRecommenderConfig0.setLambda((double) 100);
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer10 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        java.io.File file11 = null;
        org.plista.kornakapi.core.storage.Storage storage12 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender13 = null;
        // The following exception was thrown during execution in test generation
        try {
            factorizationbasedInMemoryTrainer10.train(file11, storage12, recommender13, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test04124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04124");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 0);
        factorizationbasedRecommenderConfig0.setNumberOfFeatures((int) (short) 10);
        double double10 = factorizationbasedRecommenderConfig0.getAlpha();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer11 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        java.io.File file12 = null;
        org.plista.kornakapi.core.storage.Storage storage13 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender14 = null;
        // The following exception was thrown during execution in test generation
        try {
            factorizationbasedInMemoryTrainer11.train(file12, storage13, recommender14, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test04125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04125");
        org.plista.kornakapi.web.MissingParameterException missingParameterException1 = new org.plista.kornakapi.web.MissingParameterException("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: itemIDs");
        org.plista.kornakapi.web.MissingParameterException missingParameterException4 = new org.plista.kornakapi.web.MissingParameterException("org.plista.kornakapi.web.InvalidParameterException: MutablePreference{userID=-1, itemID=10, value=10.0}");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException5 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.InvalidParameterException: itemIDs", (java.lang.Throwable) missingParameterException4);
        org.plista.kornakapi.web.MissingParameterException missingParameterException8 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException11 = new org.plista.kornakapi.web.MissingParameterException("MutablePreference{userID=100, itemID=0, value=0.0}");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException12 = new org.plista.kornakapi.web.InvalidParameterException("label", (java.lang.Throwable) missingParameterException11);
        missingParameterException8.addSuppressed((java.lang.Throwable) invalidParameterException12);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException14 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.InvalidParameterException: hi!", (java.lang.Throwable) invalidParameterException12);
        java.lang.Throwable[] throwableArray15 = invalidParameterException14.getSuppressed();
        missingParameterException4.addSuppressed((java.lang.Throwable) invalidParameterException14);
        missingParameterException1.addSuppressed((java.lang.Throwable) missingParameterException4);
        java.lang.Throwable[] throwableArray18 = missingParameterException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
    }

    @Test
    public void test04126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04126");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.storage.Storage storage1 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration2 = null; // flaky: components0.getConfiguration();
// flaky:         configuration2.setModelDirectory("itemID");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig5 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
// flaky:         configuration2.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig5);
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig7 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double8 = factorizationbasedRecommenderConfig7.getAlpha();
        double double9 = factorizationbasedRecommenderConfig7.getLambda();
        int int10 = factorizationbasedRecommenderConfig7.getNumberOfFeatures();
        factorizationbasedRecommenderConfig7.setUsesImplicitFeedback(true);
        factorizationbasedRecommenderConfig7.setNumberOfFeatures((int) (byte) 1);
        boolean boolean15 = factorizationbasedRecommenderConfig7.isUsesImplicitFeedback();
// flaky:         configuration2.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig7);
// flaky:         configuration2.setModelDirectory("userID");
        java.lang.String str19 = null; // flaky: configuration2.getModelDirectory();
        org.plista.kornakapi.web.Components components20 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.storage.Storage storage21 = components20.storage();
        org.plista.kornakapi.core.config.Configuration configuration22 = components20.getConfiguration();
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig23 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double24 = factorizationbasedRecommenderConfig23.getAlpha();
        double double25 = factorizationbasedRecommenderConfig23.getLambda();
        boolean boolean26 = factorizationbasedRecommenderConfig23.isUsesImplicitFeedback();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer27 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig23);
        double double28 = factorizationbasedRecommenderConfig23.getAlpha();
// flaky:         configuration22.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig23);
        double double30 = factorizationbasedRecommenderConfig23.getAlpha();
        factorizationbasedRecommenderConfig23.setUsesImplicitFeedback(true);
        factorizationbasedRecommenderConfig23.setName("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: recommender");
        factorizationbasedRecommenderConfig23.setNumberOfFeatures((-1));
// flaky:         configuration2.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig23);
        double double38 = factorizationbasedRecommenderConfig23.getAlpha();
// flaky:         org.junit.Assert.assertNotNull(components0);
        org.junit.Assert.assertNull(storage1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "userID" + "'", str19, "userID");
        org.junit.Assert.assertNotNull(components20);
        org.junit.Assert.assertNull(storage21);
// flaky:         org.junit.Assert.assertNotNull(configuration22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    }

    @Test
    public void test04127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04127");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setName("");
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(false);
        factorizationbasedRecommenderConfig0.setAlpha((double) (byte) 10);
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(false);
        int int12 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test04128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04128");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((long) '#', (double) 10L);
        double double7 = fixedCandidatesIDRescorer1.rescore((long) (byte) 0, (double) (byte) 1);
        double double10 = fixedCandidatesIDRescorer1.rescore((long) (byte) 10, (double) 100);
        double double13 = fixedCandidatesIDRescorer1.rescore(97L, (double) 10.0f);
        double double16 = fixedCandidatesIDRescorer1.rescore((long) (short) -1, (double) 1.0f);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer17 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = fixedCandidatesIDRescorer1.isFiltered(10000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
    }

    @Test
    public void test04129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04129");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        double double6 = factorizationbasedRecommenderConfig0.getAlpha();
        java.lang.String str7 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int8 = factorizationbasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        int int9 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        factorizationbasedRecommenderConfig0.setNumberOfFeatures((int) '#');
        double double12 = factorizationbasedRecommenderConfig0.getLambda();
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges(10000);
        factorizationbasedRecommenderConfig0.setRetrainCronExpression("org.plista.kornakapi.web.InvalidParameterException: label");
        factorizationbasedRecommenderConfig0.setLambda((double) 100);
        boolean boolean19 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer20 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        java.io.File file21 = null;
        org.plista.kornakapi.core.storage.Storage storage22 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender23 = null;
        // The following exception was thrown during execution in test generation
        try {
            factorizationbasedInMemoryTrainer20.train(file21, storage22, recommender23, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test04130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04130");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer2 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer3 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer4 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = fixedCandidatesIDRescorer1.isFiltered((-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04131");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        int int2 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        double double5 = factorizationbasedRecommenderConfig0.getLambda();
        double double6 = factorizationbasedRecommenderConfig0.getLambda();
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges((int) (byte) 1);
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer11 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        java.io.File file12 = null;
        org.plista.kornakapi.core.storage.Storage storage13 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender14 = null;
        // The following exception was thrown during execution in test generation
        try {
            factorizationbasedInMemoryTrainer11.train(file12, storage13, recommender14, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test04132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04132");
        org.plista.kornakapi.core.MutablePreference mutablePreference0 = new org.plista.kornakapi.core.MutablePreference();
        mutablePreference0.setValue((float) 1L);
        long long3 = mutablePreference0.getItemID();
        java.lang.String str4 = mutablePreference0.toString();
        long long5 = mutablePreference0.getItemID();
        long long6 = mutablePreference0.getUserID();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MutablePreference{userID=0, itemID=0, value=1.0}" + "'", str4, "MutablePreference{userID=0, itemID=0, value=1.0}");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test04133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04133");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = null; // flaky: components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration4 = null; // flaky: components0.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList5 = null; // flaky: configuration4.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration6 = null; // flaky: configuration4.getStorageConfiguration();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration7 = null; // flaky: configuration4.getStorageConfiguration();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration8 = null; // flaky: configuration4.getStorageConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration9 = new org.plista.kornakapi.core.config.Configuration();
        configuration9.setNumProcessorsForTraining((int) (short) 100);
        java.lang.String str12 = configuration9.getModelDirectory();
        configuration9.setNumProcessorsForTraining((int) (byte) 100);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration15 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str16 = storageConfiguration15.getJdbcDriverClass();
        storageConfiguration15.setPassword("itemIDs");
        configuration9.setStorageConfiguration(storageConfiguration15);
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList20 = configuration9.getItembasedRecommenders();
        configuration9.setModelDirectory("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemID");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig23 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double24 = factorizationbasedRecommenderConfig23.getAlpha();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer25 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig23);
        factorizationbasedRecommenderConfig23.setUsesImplicitFeedback(false);
        factorizationbasedRecommenderConfig23.setNumberOfIterations((int) '#');
        configuration9.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig23);
        factorizationbasedRecommenderConfig23.setRetrainAfterPreferenceChanges(35);
// flaky:         configuration4.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig23);
        boolean boolean34 = factorizationbasedRecommenderConfig23.isUsesImplicitFeedback();
        double double35 = factorizationbasedRecommenderConfig23.getLambda();
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(trainingScheduler3);
// flaky:         org.junit.Assert.assertNotNull(configuration4);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList5);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration6);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration7);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }

    @Test
    public void test04134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04134");
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet0.init();
        java.lang.String str2 = batchAddCandidatesServlet0.getServletInfo();
        javax.servlet.ServletConfig servletConfig3 = batchAddCandidatesServlet0.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet4 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str5 = batchDeleteCandidatesServlet4.getServletInfo();
        java.lang.String str6 = batchDeleteCandidatesServlet4.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet7 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet8 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet9 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet8.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet9);
        setPreferenceServlet7.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet9);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet12 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet7.init((javax.servlet.ServletConfig) recommendServlet12);
        batchDeleteCandidatesServlet4.init((javax.servlet.ServletConfig) setPreferenceServlet7);
        batchAddCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet4);
        batchDeleteCandidatesServlet4.init();
        java.lang.String str17 = batchDeleteCandidatesServlet4.getServletInfo();
        java.lang.String str18 = batchDeleteCandidatesServlet4.getServletInfo();
        batchDeleteCandidatesServlet4.destroy();
        batchDeleteCandidatesServlet4.init();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = batchDeleteCandidatesServlet4.getInitParameter("org.plista.kornakapi.web.InvalidParameterException: recommender");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(servletConfig3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test04135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04135");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str1 = batchDeleteCandidatesServlet0.getServletInfo();
        batchDeleteCandidatesServlet0.init();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet3 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet4 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet5 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        setPreferenceServlet3.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        javax.servlet.ServletConfig servletConfig8 = setPreferenceServlet3.getServletConfig();
        batchDeleteCandidatesServlet0.init(servletConfig8);
        // The following exception was thrown during execution in test generation
        try {
            batchDeleteCandidatesServlet0.log("MutablePreference{userID=1, itemID=10, value=0.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(servletConfig8);
    }

    @Test
    public void test04136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04136");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 0);
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges((int) (byte) 100);
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer10 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        java.io.File file11 = null;
        org.plista.kornakapi.core.storage.Storage storage12 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender13 = null;
        // The following exception was thrown during execution in test generation
        try {
            factorizationbasedInMemoryTrainer10.train(file11, storage12, recommender13, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test04137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04137");
        org.plista.kornakapi.core.MutableCandidate mutableCandidate0 = new org.plista.kornakapi.core.MutableCandidate();
        long long1 = mutableCandidate0.getItemID();
        java.lang.String str2 = mutableCandidate0.getLabel();
        mutableCandidate0.set("file", (long) (short) 1);
        long long6 = mutableCandidate0.getItemID();
        long long7 = mutableCandidate0.getItemID();
        mutableCandidate0.set("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemID", (long) (short) 0);
        java.lang.String str11 = mutableCandidate0.getLabel();
        long long12 = mutableCandidate0.getItemID();
        long long13 = mutableCandidate0.getItemID();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemID" + "'", str11, "org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemID");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test04138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04138");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        int int2 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setLambda((double) (short) 100);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test04139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04139");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str1 = batchDeleteCandidatesServlet0.getServletInfo();
        java.lang.String str2 = batchDeleteCandidatesServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet3 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet4 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet5 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        setPreferenceServlet3.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet8 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet3.init((javax.servlet.ServletConfig) recommendServlet8);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet3);
        batchDeleteCandidatesServlet0.destroy();
        batchDeleteCandidatesServlet0.init();
        batchDeleteCandidatesServlet0.init();
        batchDeleteCandidatesServlet0.destroy();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet15 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet16 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet15.init((javax.servlet.ServletConfig) batchSetPreferencesServlet16);
        javax.servlet.ServletConfig servletConfig18 = batchSetPreferencesServlet16.getServletConfig();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet16);
        org.plista.kornakapi.web.MissingParameterException missingParameterException24 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException25 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException24);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException26 = new org.plista.kornakapi.web.InvalidParameterException("itemIDs", (java.lang.Throwable) invalidParameterException25);
        // The following exception was thrown during execution in test generation
        try {
            batchDeleteCandidatesServlet0.log("recommender", (java.lang.Throwable) invalidParameterException26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(servletConfig18);
    }

    @Test
    public void test04140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04140");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setName("");
        double double6 = factorizationbasedRecommenderConfig0.getAlpha();
        int int7 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        boolean boolean8 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        factorizationbasedRecommenderConfig0.setName("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: itemIDs");
        double double11 = factorizationbasedRecommenderConfig0.getLambda();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test04141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04141");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = null; // flaky: components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration4 = null; // flaky: components0.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList5 = null; // flaky: configuration4.getItembasedRecommenders();
        int int6 = 0; // flaky: configuration4.getNumProcessorsForTraining();
        java.lang.Class<?> wildcardClass7 = null; // flaky: configuration4.getClass();
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(trainingScheduler3);
// flaky:         org.junit.Assert.assertNotNull(configuration4);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
// flaky:         org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test04142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04142");
        org.plista.kornakapi.web.MissingParameterException missingParameterException1 = new org.plista.kornakapi.web.MissingParameterException("howMany");
        java.lang.String str2 = missingParameterException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.plista.kornakapi.web.MissingParameterException: howMany" + "'", str2, "org.plista.kornakapi.web.MissingParameterException: howMany");
    }

    @Test
    public void test04143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04143");
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet0 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet1);
        java.lang.String str3 = batchSetPreferencesServlet1.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet4 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str5 = batchDeleteCandidatesServlet4.getServletInfo();
        java.lang.String str6 = batchDeleteCandidatesServlet4.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet7 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet8 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet9 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet8.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet9);
        setPreferenceServlet7.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet9);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet12 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet7.init((javax.servlet.ServletConfig) recommendServlet12);
        batchDeleteCandidatesServlet4.init((javax.servlet.ServletConfig) setPreferenceServlet7);
        batchDeleteCandidatesServlet4.destroy();
        batchDeleteCandidatesServlet4.init();
        batchDeleteCandidatesServlet4.destroy();
        javax.servlet.ServletConfig servletConfig18 = batchDeleteCandidatesServlet4.getServletConfig();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = batchDeleteCandidatesServlet4.getServletName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(servletConfig18);
    }

    @Test
    public void test04144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04144");
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet0 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet1 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet1);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet3 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str4 = batchDeleteCandidatesServlet3.getServletInfo();
        batchDeleteCandidatesServlet3.init();
        javax.servlet.ServletConfig servletConfig6 = null;
        batchDeleteCandidatesServlet3.init(servletConfig6);
        recommendServlet0.init(servletConfig6);
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet9 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet10 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet9.init((javax.servlet.ServletConfig) batchSetPreferencesServlet10);
        javax.servlet.ServletConfig servletConfig12 = batchSetPreferencesServlet9.getServletConfig();
        batchSetPreferencesServlet9.destroy();
        javax.servlet.ServletConfig servletConfig14 = batchSetPreferencesServlet9.getServletConfig();
        batchSetPreferencesServlet9.init();
        recommendServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = batchSetPreferencesServlet9.getInitParameter("MutablePreference{userID=10000, itemID=-1, value=-1.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(servletConfig12);
        org.junit.Assert.assertNotNull(servletConfig14);
    }

    @Test
    public void test04145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04145");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setAlpha((double) 10L);
        int int8 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        double double9 = factorizationbasedRecommenderConfig0.getLambda();
        factorizationbasedRecommenderConfig0.setLambda(97.0d);
        factorizationbasedRecommenderConfig0.setNumberOfFeatures(10000);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test04146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04146");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        int int1 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        java.lang.String str2 = itembasedRecommenderConfig0.getName();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer3 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        java.lang.String str4 = itembasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        int int6 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        itembasedRecommenderConfig0.setRetrainAfterPreferenceChanges((int) ' ');
        itembasedRecommenderConfig0.setRetrainCronExpression("MutablePreference{userID=-1, itemID=0, value=97.0}");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test04147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04147");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet1 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str2 = batchDeleteCandidatesServlet1.getServletInfo();
        java.lang.String str3 = batchDeleteCandidatesServlet1.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet4 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet5 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet6 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet5.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        setPreferenceServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet9 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet4.init((javax.servlet.ServletConfig) recommendServlet9);
        batchDeleteCandidatesServlet1.init((javax.servlet.ServletConfig) setPreferenceServlet4);
        batchDeleteCandidatesServlet1.destroy();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet1);
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet14 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet15 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet16 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet15.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet16);
        setPreferenceServlet14.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet16);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet19 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet14.init((javax.servlet.ServletConfig) recommendServlet19);
        java.lang.String str21 = setPreferenceServlet14.getServletInfo();
        javax.servlet.ServletConfig servletConfig22 = setPreferenceServlet14.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet23 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet24 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet25 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet24.init((javax.servlet.ServletConfig) batchSetPreferencesServlet25);
        batchDeleteCandidatesServlet23.init((javax.servlet.ServletConfig) batchSetPreferencesServlet25);
        setPreferenceServlet14.init((javax.servlet.ServletConfig) batchSetPreferencesServlet25);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet25);
        javax.servlet.ServletConfig servletConfig30 = batchSetPreferencesServlet25.getServletConfig();
        org.plista.kornakapi.web.MissingParameterException missingParameterException35 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException36 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException35);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException37 = new org.plista.kornakapi.web.InvalidParameterException("itemIDs", (java.lang.Throwable) invalidParameterException36);
        org.plista.kornakapi.web.MissingParameterException missingParameterException39 = new org.plista.kornakapi.web.MissingParameterException("MutablePreference{userID=-1, itemID=10, value=10.0}");
        invalidParameterException37.addSuppressed((java.lang.Throwable) missingParameterException39);
        // The following exception was thrown during execution in test generation
        try {
            batchSetPreferencesServlet25.log("MutablePreference{userID=0, itemID=0, value=35.0}", (java.lang.Throwable) invalidParameterException37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(servletConfig22);
        org.junit.Assert.assertNull(servletConfig30);
    }

    @Test
    public void test04148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04148");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = null; // flaky: components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration4 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler5 = null; // flaky: components0.scheduler();
        org.plista.kornakapi.core.storage.Storage storage6 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration7 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration8 = null; // flaky: configuration7.getStorageConfiguration();
        int int9 = 0; // flaky: configuration7.getNumProcessorsForTraining();
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList10 = null; // flaky: configuration7.getFactorizationbasedRecommenders();
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList11 = null; // flaky: configuration7.getFactorizationbasedRecommenders();
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(trainingScheduler3);
// flaky:         org.junit.Assert.assertNotNull(configuration4);
        org.junit.Assert.assertNull(trainingScheduler5);
        org.junit.Assert.assertNull(storage6);
// flaky:         org.junit.Assert.assertNotNull(configuration7);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList10);
// flaky:         org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList11);
    }

    @Test
    public void test04149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04149");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer2 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(false);
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) '#');
        double double7 = factorizationbasedRecommenderConfig0.getLambda();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer8 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        factorizationbasedRecommenderConfig0.setLambda((double) (short) 1);
        factorizationbasedRecommenderConfig0.setNumberOfFeatures((int) (byte) 1);
        double double13 = factorizationbasedRecommenderConfig0.getLambda();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test04150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04150");
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler0 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener3 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler0, "MutablePreference{userID=100, itemID=-1, value=1.0}", (int) (short) 1);
    }

    @Test
    public void test04151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04151");
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.core.config.Configuration configuration1 = org.plista.kornakapi.core.config.Configuration.fromXML("MutablePreference{userID=10, itemID=100, value=10000.0}");
            org.junit.Assert.fail("Expected exception of type com.thoughtworks.xstream.io.StreamException; message:  : only whitespace content allowed before start tag and not M (position: START_DOCUMENT seen M... @1:1) ");
        } catch (com.thoughtworks.xstream.io.StreamException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04152");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        javax.servlet.ServletConfig servletConfig1 = batchDeleteCandidatesServlet0.getServletConfig();
        javax.servlet.ServletConfig servletConfig2 = batchDeleteCandidatesServlet0.getServletConfig();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = batchDeleteCandidatesServlet0.getServletName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig1);
        org.junit.Assert.assertNull(servletConfig2);
    }

    @Test
    public void test04153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04153");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer2 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer3 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double6 = fixedCandidatesIDRescorer1.rescore((long) (byte) 1, (double) (byte) 100);
        double double9 = fixedCandidatesIDRescorer1.rescore((long) (short) 100, (double) '4');
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer10 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer11 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer12 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.apache.mahout.common.LongPair longPair13 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = filteringLongPairRescorer12.isFiltered(longPair13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    }

    @Test
    public void test04154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04154");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        java.lang.String str4 = batchSetPreferencesServlet2.getServletInfo();
        batchSetPreferencesServlet2.destroy();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet6 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str7 = batchDeleteCandidatesServlet6.getServletInfo();
        java.lang.String str8 = batchDeleteCandidatesServlet6.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet9 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet10 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet11 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet10.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet11);
        setPreferenceServlet9.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet11);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet14 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet9.init((javax.servlet.ServletConfig) recommendServlet14);
        batchDeleteCandidatesServlet6.init((javax.servlet.ServletConfig) setPreferenceServlet9);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet17 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet18 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet19 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet18.init((javax.servlet.ServletConfig) batchSetPreferencesServlet19);
        javax.servlet.ServletConfig servletConfig21 = batchSetPreferencesServlet18.getServletConfig();
        addCandidateServlet17.init((javax.servlet.ServletConfig) batchSetPreferencesServlet18);
        javax.servlet.ServletConfig servletConfig23 = addCandidateServlet17.getServletConfig();
        batchDeleteCandidatesServlet6.init((javax.servlet.ServletConfig) addCandidateServlet17);
        addCandidateServlet17.destroy();
        batchSetPreferencesServlet2.init((javax.servlet.ServletConfig) addCandidateServlet17);
        batchSetPreferencesServlet2.init();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration29 = batchSetPreferencesServlet2.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(servletConfig21);
        org.junit.Assert.assertNotNull(servletConfig23);
    }

    @Test
    public void test04155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04155");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str1 = batchDeleteCandidatesServlet0.getServletInfo();
        java.lang.String str2 = batchDeleteCandidatesServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet3 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet4 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet5 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        setPreferenceServlet3.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet8 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet3.init((javax.servlet.ServletConfig) recommendServlet8);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet3);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet11 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet12 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet13 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet12.init((javax.servlet.ServletConfig) batchSetPreferencesServlet13);
        javax.servlet.ServletConfig servletConfig15 = batchSetPreferencesServlet12.getServletConfig();
        addCandidateServlet11.init((javax.servlet.ServletConfig) batchSetPreferencesServlet12);
        javax.servlet.ServletConfig servletConfig17 = addCandidateServlet11.getServletConfig();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) addCandidateServlet11);
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet19 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str20 = trainServlet19.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet21 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet21.destroy();
        javax.servlet.ServletConfig servletConfig23 = deleteCandidateServlet21.getServletConfig();
        deleteCandidateServlet21.destroy();
        trainServlet19.init((javax.servlet.ServletConfig) deleteCandidateServlet21);
        addCandidateServlet11.init((javax.servlet.ServletConfig) trainServlet19);
        trainServlet19.destroy();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet28 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet29 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet30 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet29.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet30);
        setPreferenceServlet28.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet30);
        trainServlet19.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet30);
        org.plista.kornakapi.web.MissingParameterException missingParameterException41 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException42 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException41);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException43 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException41);
        java.lang.Throwable[] throwableArray44 = missingParameterException41.getSuppressed();
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException45 = new org.plista.kornakapi.web.InvalidParameterException("recommender", (java.lang.Throwable) missingParameterException41);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException46 = new org.plista.kornakapi.web.InvalidParameterException("", (java.lang.Throwable) invalidParameterException45);
        org.plista.kornakapi.web.MissingParameterException missingParameterException51 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException52 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException51);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException53 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException51);
        org.plista.kornakapi.web.MissingParameterException missingParameterException55 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException57 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException55.addSuppressed((java.lang.Throwable) missingParameterException57);
        invalidParameterException53.addSuppressed((java.lang.Throwable) missingParameterException57);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException60 = new org.plista.kornakapi.web.InvalidParameterException("file", (java.lang.Throwable) invalidParameterException53);
        org.plista.kornakapi.web.MissingParameterException missingParameterException64 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException65 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException64);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException66 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException64);
        invalidParameterException60.addSuppressed((java.lang.Throwable) missingParameterException64);
        org.plista.kornakapi.web.MissingParameterException missingParameterException70 = new org.plista.kornakapi.web.MissingParameterException("MutablePreference{userID=100, itemID=0, value=0.0}");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException71 = new org.plista.kornakapi.web.InvalidParameterException("label", (java.lang.Throwable) missingParameterException70);
        missingParameterException64.addSuppressed((java.lang.Throwable) invalidParameterException71);
        java.lang.Throwable[] throwableArray73 = missingParameterException64.getSuppressed();
        invalidParameterException46.addSuppressed((java.lang.Throwable) missingParameterException64);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException75 = new org.plista.kornakapi.web.InvalidParameterException("MutablePreference{userID=100, itemID=0, value=1.0}", (java.lang.Throwable) invalidParameterException46);
        // The following exception was thrown during execution in test generation
        try {
            trainServlet19.log("MutablePreference{userID=1, itemID=97, value=35.0}", (java.lang.Throwable) invalidParameterException75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(servletConfig15);
        org.junit.Assert.assertNotNull(servletConfig17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(servletConfig23);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray73);
    }

    @Test
    public void test04156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04156");
        org.plista.kornakapi.core.MutablePreference mutablePreference0 = new org.plista.kornakapi.core.MutablePreference();
        java.lang.String str1 = mutablePreference0.toString();
        long long2 = mutablePreference0.getItemID();
        java.lang.String str3 = mutablePreference0.toString();
        mutablePreference0.set((long) (byte) 100, (long) (byte) 0, (float) (short) 0);
        float float8 = mutablePreference0.getValue();
        long long9 = mutablePreference0.getUserID();
        float float10 = mutablePreference0.getValue();
        java.lang.String str11 = mutablePreference0.toString();
        long long12 = mutablePreference0.getItemID();
        mutablePreference0.set((long) (short) 0, (long) 32, (float) ' ');
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str1, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str3, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MutablePreference{userID=100, itemID=0, value=0.0}" + "'", str11, "MutablePreference{userID=100, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test04157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04157");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((-1L), (double) 0L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer5 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double8 = fixedCandidatesIDRescorer1.rescore((long) (byte) -1, (double) (byte) -1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer9 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = fixedCandidatesIDRescorer1.isFiltered(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
    }

    @Test
    public void test04158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04158");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler2 = null; // flaky: components0.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = null; // flaky: components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration4 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration5 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig6 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig6.setSimilarityClass("");
        java.lang.String str9 = itembasedRecommenderConfig6.getName();
        java.lang.String str10 = itembasedRecommenderConfig6.getSimilarityClass();
        itembasedRecommenderConfig6.setName("");
        java.lang.String str13 = itembasedRecommenderConfig6.getSimilarityClass();
// flaky:         configuration5.addItembasedRecommender(itembasedRecommenderConfig6);
        itembasedRecommenderConfig6.setSimilarItemsPerItem((int) '#');
        itembasedRecommenderConfig6.setName("MutablePreference{userID=-1, itemID=10, value=10.0}");
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer19 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig6);
        itembasedRecommenderConfig6.setSimilarityClass("");
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
        org.junit.Assert.assertNull(trainingScheduler2);
        org.junit.Assert.assertNull(trainingScheduler3);
// flaky:         org.junit.Assert.assertNotNull(configuration4);
// flaky:         org.junit.Assert.assertNotNull(configuration5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test04159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04159");
        org.plista.kornakapi.core.MutableCandidate mutableCandidate0 = new org.plista.kornakapi.core.MutableCandidate();
        long long1 = mutableCandidate0.getItemID();
        long long2 = mutableCandidate0.getItemID();
        long long3 = mutableCandidate0.getItemID();
        java.lang.String str4 = mutableCandidate0.getLabel();
        java.lang.String str5 = mutableCandidate0.getLabel();
        long long6 = mutableCandidate0.getItemID();
        java.lang.Class<?> wildcardClass7 = mutableCandidate0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test04160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04160");
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet0 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        recommendServlet0.destroy();
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet2 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet3 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet4 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet3.init((javax.servlet.ServletConfig) batchSetPreferencesServlet4);
        javax.servlet.ServletConfig servletConfig6 = batchSetPreferencesServlet3.getServletConfig();
        addCandidateServlet2.init((javax.servlet.ServletConfig) batchSetPreferencesServlet3);
        batchSetPreferencesServlet3.destroy();
        java.lang.String str9 = batchSetPreferencesServlet3.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet10 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet10.init();
        setPreferenceServlet10.init();
        setPreferenceServlet10.destroy();
        javax.servlet.ServletConfig servletConfig14 = setPreferenceServlet10.getServletConfig();
        java.lang.String str15 = setPreferenceServlet10.getServletInfo();
        batchSetPreferencesServlet3.init((javax.servlet.ServletConfig) setPreferenceServlet10);
        recommendServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet10);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet18 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet19 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet20 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet19.init((javax.servlet.ServletConfig) batchSetPreferencesServlet20);
        batchDeleteCandidatesServlet18.init((javax.servlet.ServletConfig) batchSetPreferencesServlet20);
        java.lang.String str23 = batchSetPreferencesServlet20.getServletInfo();
        batchSetPreferencesServlet20.destroy();
        batchSetPreferencesServlet20.destroy();
        setPreferenceServlet10.init((javax.servlet.ServletConfig) batchSetPreferencesServlet20);
        org.plista.kornakapi.web.MissingParameterException missingParameterException31 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException32 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException31);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException33 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException31);
        org.plista.kornakapi.web.MissingParameterException missingParameterException35 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException37 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException35.addSuppressed((java.lang.Throwable) missingParameterException37);
        invalidParameterException33.addSuppressed((java.lang.Throwable) missingParameterException37);
        java.lang.Throwable[] throwableArray40 = missingParameterException37.getSuppressed();
        org.plista.kornakapi.web.MissingParameterException missingParameterException43 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException44 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException43);
        org.plista.kornakapi.web.MissingParameterException missingParameterException48 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException49 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException48);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException50 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException48);
        org.plista.kornakapi.web.MissingParameterException missingParameterException52 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException54 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException52.addSuppressed((java.lang.Throwable) missingParameterException54);
        invalidParameterException50.addSuppressed((java.lang.Throwable) missingParameterException54);
        java.lang.Throwable[] throwableArray57 = missingParameterException54.getSuppressed();
        invalidParameterException44.addSuppressed((java.lang.Throwable) missingParameterException54);
        missingParameterException37.addSuppressed((java.lang.Throwable) invalidParameterException44);
        org.plista.kornakapi.web.MissingParameterException missingParameterException63 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException64 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException63);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException65 = new org.plista.kornakapi.web.InvalidParameterException("itemIDs", (java.lang.Throwable) invalidParameterException64);
        org.plista.kornakapi.web.MissingParameterException missingParameterException67 = new org.plista.kornakapi.web.MissingParameterException("MutablePreference{userID=-1, itemID=10, value=10.0}");
        invalidParameterException65.addSuppressed((java.lang.Throwable) missingParameterException67);
        missingParameterException37.addSuppressed((java.lang.Throwable) invalidParameterException65);
        org.plista.kornakapi.web.MissingParameterException missingParameterException71 = new org.plista.kornakapi.web.MissingParameterException("userID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException74 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException76 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException74.addSuppressed((java.lang.Throwable) missingParameterException76);
        java.lang.Throwable[] throwableArray78 = missingParameterException76.getSuppressed();
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException79 = new org.plista.kornakapi.web.InvalidParameterException("itemIDs", (java.lang.Throwable) missingParameterException76);
        missingParameterException71.addSuppressed((java.lang.Throwable) invalidParameterException79);
        missingParameterException37.addSuppressed((java.lang.Throwable) missingParameterException71);
        java.lang.Throwable[] throwableArray82 = missingParameterException71.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            batchSetPreferencesServlet20.log("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName", (java.lang.Throwable) missingParameterException71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(servletConfig6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(servletConfig14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray82);
    }

    @Test
    public void test04161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04161");
        org.plista.kornakapi.core.MutableCandidate mutableCandidate0 = new org.plista.kornakapi.core.MutableCandidate();
        mutableCandidate0.set("", (long) (byte) 100);
        java.lang.String str4 = mutableCandidate0.getLabel();
        long long5 = mutableCandidate0.getItemID();
        java.lang.String str6 = mutableCandidate0.getLabel();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test04162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04162");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage3 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.storage.Storage storage4 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration5 = null; // flaky: components0.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList6 = null; // flaky: configuration5.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration7 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str8 = storageConfiguration7.getJdbcDriverClass();
        storageConfiguration7.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str11 = storageConfiguration7.getJdbcUrl();
        java.lang.String str12 = storageConfiguration7.getJdbcDriverClass();
        java.lang.String str13 = storageConfiguration7.getJdbcDriverClass();
        java.lang.String str14 = storageConfiguration7.getPassword();
// flaky:         configuration5.setStorageConfiguration(storageConfiguration7);
        java.lang.String str16 = null; // flaky: configuration5.getModelDirectory();
// flaky:         configuration5.setModelDirectory("org.plista.kornakapi.web.MissingParameterException: itemID");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig19 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str20 = itembasedRecommenderConfig19.getSimilarityClass();
        int int21 = itembasedRecommenderConfig19.getSimilarItemsPerItem();
        int int22 = itembasedRecommenderConfig19.getRetrainAfterPreferenceChanges();
// flaky:         configuration5.addItembasedRecommender(itembasedRecommenderConfig19);
        int int24 = 0; // flaky: configuration5.getNumProcessorsForTraining();
        org.plista.kornakapi.web.Components components25 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration26 = components25.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler27 = components25.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler28 = components25.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration29 = components25.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration30 = components25.getConfiguration();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig31 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig31.setSimilarityClass("");
        java.lang.String str34 = itembasedRecommenderConfig31.getName();
        java.lang.String str35 = itembasedRecommenderConfig31.getSimilarityClass();
        itembasedRecommenderConfig31.setName("");
        java.lang.String str38 = itembasedRecommenderConfig31.getSimilarityClass();
// flaky:         configuration30.addItembasedRecommender(itembasedRecommenderConfig31);
        org.plista.kornakapi.web.Components components40 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration41 = components40.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler42 = components40.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler43 = components40.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration44 = components40.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration45 = components40.getConfiguration();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig46 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig46.setSimilarityClass("");
        java.lang.String str49 = itembasedRecommenderConfig46.getName();
        java.lang.String str50 = itembasedRecommenderConfig46.getSimilarityClass();
        itembasedRecommenderConfig46.setName("");
        java.lang.String str53 = itembasedRecommenderConfig46.getSimilarityClass();
// flaky:         configuration45.addItembasedRecommender(itembasedRecommenderConfig46);
        itembasedRecommenderConfig46.setSimilarItemsPerItem((int) (byte) 1);
// flaky:         configuration30.addItembasedRecommender(itembasedRecommenderConfig46);
        org.plista.kornakapi.web.Components components58 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration59 = components58.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration60 = components58.getConfiguration();
        java.lang.String str61 = null; // flaky: configuration60.getModelDirectory();
        int int62 = 0; // flaky: configuration60.getNumProcessorsForTraining();
        int int63 = 0; // flaky: configuration60.getNumProcessorsForTraining();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration64 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str65 = storageConfiguration64.getJdbcDriverClass();
        storageConfiguration64.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str68 = storageConfiguration64.getJdbcUrl();
        java.lang.String str69 = storageConfiguration64.getJdbcDriverClass();
        java.lang.String str70 = storageConfiguration64.getJdbcDriverClass();
        java.lang.String str71 = storageConfiguration64.getPassword();
        java.lang.String str72 = storageConfiguration64.getUsername();
        java.lang.String str73 = storageConfiguration64.getJdbcDriverClass();
        java.lang.String str74 = storageConfiguration64.getJdbcDriverClass();
        java.lang.String str75 = storageConfiguration64.getJdbcDriverClass();
// flaky:         configuration60.setStorageConfiguration(storageConfiguration64);
        storageConfiguration64.setJdbcUrl("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
// flaky:         configuration30.setStorageConfiguration(storageConfiguration64);
// flaky:         configuration5.setStorageConfiguration(storageConfiguration64);
        storageConfiguration64.setUsername("org.plista.kornakapi.web.MissingParameterException: MutablePreference{userID=100, itemID=0, value=0.0}");
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(storage3);
        org.junit.Assert.assertNull(storage4);
// flaky:         org.junit.Assert.assertNotNull(configuration5);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MutablePreference{userID=52, itemID=52, value=-1.0}" + "'", str16, "MutablePreference{userID=52, itemID=52, value=-1.0}");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(components25);
// flaky:         org.junit.Assert.assertNotNull(configuration26);
        org.junit.Assert.assertNull(trainingScheduler27);
        org.junit.Assert.assertNull(trainingScheduler28);
// flaky:         org.junit.Assert.assertNotNull(configuration29);
// flaky:         org.junit.Assert.assertNotNull(configuration30);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(components40);
// flaky:         org.junit.Assert.assertNotNull(configuration41);
        org.junit.Assert.assertNull(trainingScheduler42);
        org.junit.Assert.assertNull(trainingScheduler43);
// flaky:         org.junit.Assert.assertNotNull(configuration44);
// flaky:         org.junit.Assert.assertNotNull(configuration45);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(components58);
// flaky:         org.junit.Assert.assertNotNull(configuration59);
// flaky:         org.junit.Assert.assertNotNull(configuration60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "org.plista.kornakapi.web.MissingParameterException: itemID" + "'", str61, "org.plista.kornakapi.web.MissingParameterException: itemID");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str72, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test04163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04163");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((-1L), (double) 0L);
        double double7 = fixedCandidatesIDRescorer1.rescore((long) '#', (double) (short) -1);
        double double10 = fixedCandidatesIDRescorer1.rescore((long) (byte) 1, (double) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = fixedCandidatesIDRescorer1.isFiltered((long) 32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test04164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04164");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(false);
        double double6 = factorizationbasedRecommenderConfig0.getAlpha();
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges(100);
        boolean boolean9 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        int int10 = factorizationbasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test04165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04165");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str1 = itembasedRecommenderConfig0.getRetrainCronExpression();
        int int2 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        java.lang.String str3 = itembasedRecommenderConfig0.getSimilarityClass();
        itembasedRecommenderConfig0.setSimilarItemsPerItem(0);
        itembasedRecommenderConfig0.setSimilarityClass("");
        itembasedRecommenderConfig0.setSimilarItemsPerItem(1);
        itembasedRecommenderConfig0.setSimilarItemsPerItem(10000);
        itembasedRecommenderConfig0.setName("MutablePreference{userID=0, itemID=0, value=1.0}");
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer14 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer15 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        java.io.File file16 = null;
        org.plista.kornakapi.core.storage.Storage storage17 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender18 = null;
        // The following exception was thrown during execution in test generation
        try {
            multithreadedItembasedInMemoryTrainer15.train(file16, storage17, recommender18, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test04166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04166");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setName("");
        double double6 = factorizationbasedRecommenderConfig0.getAlpha();
        int int7 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setLambda(100.0d);
        double double10 = factorizationbasedRecommenderConfig0.getLambda();
        int int11 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test04167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04167");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str1 = itembasedRecommenderConfig0.getRetrainCronExpression();
        int int2 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        java.lang.String str3 = itembasedRecommenderConfig0.getSimilarityClass();
        itembasedRecommenderConfig0.setSimilarItemsPerItem(0);
        itembasedRecommenderConfig0.setRetrainCronExpression("value");
        int int8 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        int int9 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        itembasedRecommenderConfig0.setSimilarItemsPerItem((int) (short) 1);
        java.lang.String str12 = itembasedRecommenderConfig0.getRetrainCronExpression();
        java.lang.String str13 = itembasedRecommenderConfig0.getSimilarityClass();
        itembasedRecommenderConfig0.setSimilarItemsPerItem(1);
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer16 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        java.io.File file17 = null;
        org.plista.kornakapi.core.storage.Storage storage18 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender19 = null;
        // The following exception was thrown during execution in test generation
        try {
            multithreadedItembasedInMemoryTrainer16.train(file17, storage18, recommender19, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "value" + "'", str12, "value");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test04168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04168");
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet0.init();
        java.lang.String str2 = batchAddCandidatesServlet0.getServletInfo();
        batchAddCandidatesServlet0.init();
        java.lang.String str4 = batchAddCandidatesServlet0.getServletInfo();
        batchAddCandidatesServlet0.init();
        batchAddCandidatesServlet0.init();
        batchAddCandidatesServlet0.init();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration8 = batchAddCandidatesServlet0.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test04169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04169");
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet0 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet0.init();
        setPreferenceServlet0.init();
        setPreferenceServlet0.destroy();
        javax.servlet.ServletConfig servletConfig4 = setPreferenceServlet0.getServletConfig();
        java.lang.String str5 = setPreferenceServlet0.getServletInfo();
        setPreferenceServlet0.destroy();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet7 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet8 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet7.init((javax.servlet.ServletConfig) batchSetPreferencesServlet8);
        javax.servlet.ServletConfig servletConfig10 = batchSetPreferencesServlet7.getServletConfig();
        javax.servlet.ServletConfig servletConfig11 = batchSetPreferencesServlet7.getServletConfig();
        setPreferenceServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet7);
        javax.servlet.ServletRequest servletRequest13 = null;
        javax.servlet.ServletResponse servletResponse14 = null;
        // The following exception was thrown during execution in test generation
        try {
            batchSetPreferencesServlet7.service(servletRequest13, servletResponse14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(servletConfig10);
        org.junit.Assert.assertNotNull(servletConfig11);
    }

    @Test
    public void test04170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04170");
        org.plista.kornakapi.web.MissingParameterException missingParameterException4 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException5 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException4);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException6 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException4);
        java.lang.Throwable[] throwableArray7 = missingParameterException4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = missingParameterException4.getSuppressed();
        org.plista.kornakapi.web.MissingParameterException missingParameterException13 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException14 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException13);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException15 = new org.plista.kornakapi.web.InvalidParameterException("itemIDs", (java.lang.Throwable) invalidParameterException14);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException16 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.MissingParameterException: itemIDs", (java.lang.Throwable) invalidParameterException14);
        missingParameterException4.addSuppressed((java.lang.Throwable) invalidParameterException16);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException18 = new org.plista.kornakapi.web.InvalidParameterException("label", (java.lang.Throwable) invalidParameterException16);
        java.lang.String str19 = invalidParameterException18.toString();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.plista.kornakapi.web.InvalidParameterException: label" + "'", str19, "org.plista.kornakapi.web.InvalidParameterException: label");
    }

    @Test
    public void test04171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04171");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setNumProcessorsForTraining((int) (short) 100);
        java.lang.String str3 = configuration0.getModelDirectory();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList4 = configuration0.getItembasedRecommenders();
        configuration0.setNumProcessorsForTraining(100);
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig7 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double8 = factorizationbasedRecommenderConfig7.getAlpha();
        double double9 = factorizationbasedRecommenderConfig7.getLambda();
        int int10 = factorizationbasedRecommenderConfig7.getNumberOfFeatures();
        factorizationbasedRecommenderConfig7.setUsesImplicitFeedback(false);
        int int13 = factorizationbasedRecommenderConfig7.getNumberOfFeatures();
        factorizationbasedRecommenderConfig7.setNumberOfIterations(10);
        java.lang.String str16 = factorizationbasedRecommenderConfig7.getRetrainCronExpression();
        factorizationbasedRecommenderConfig7.setAlpha((double) 100.0f);
        configuration0.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig7);
        double double20 = factorizationbasedRecommenderConfig7.getLambda();
        factorizationbasedRecommenderConfig7.setName("MutablePreference{userID=1, itemID=10, value=10000.0}");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test04172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04172");
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet0 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet1);
        java.lang.String str3 = batchSetPreferencesServlet1.getServletInfo();
        javax.servlet.ServletConfig servletConfig4 = batchSetPreferencesServlet1.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet5 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet6 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet5.init((javax.servlet.ServletConfig) batchSetPreferencesServlet6);
        javax.servlet.ServletConfig servletConfig8 = batchSetPreferencesServlet6.getServletConfig();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet9 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet9.init();
        setPreferenceServlet9.init();
        setPreferenceServlet9.destroy();
        setPreferenceServlet9.destroy();
        batchSetPreferencesServlet6.init((javax.servlet.ServletConfig) setPreferenceServlet9);
        javax.servlet.ServletConfig servletConfig15 = batchSetPreferencesServlet6.getServletConfig();
        batchSetPreferencesServlet1.init(servletConfig15);
        // The following exception was thrown during execution in test generation
        try {
            javax.servlet.ServletContext servletContext17 = batchSetPreferencesServlet1.getServletContext();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(servletConfig4);
        org.junit.Assert.assertNull(servletConfig8);
        org.junit.Assert.assertNotNull(servletConfig15);
    }

    @Test
    public void test04173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04173");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage3 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener4 = null; // flaky: components0.preferenceChangeListener();
        org.plista.kornakapi.core.storage.Storage storage5 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener6 = null; // flaky: components0.preferenceChangeListener();
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(storage3);
// flaky:         org.junit.Assert.assertNotNull(preferenceChangeListener4);
        org.junit.Assert.assertNull(storage5);
// flaky:         org.junit.Assert.assertNotNull(preferenceChangeListener6);
    }

    @Test
    public void test04174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04174");
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet0.init();
        java.lang.String str2 = batchAddCandidatesServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet3 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str4 = batchDeleteCandidatesServlet3.getServletInfo();
        batchDeleteCandidatesServlet3.destroy();
        javax.servlet.ServletConfig servletConfig6 = batchDeleteCandidatesServlet3.getServletConfig();
        batchAddCandidatesServlet0.init(servletConfig6);
        batchAddCandidatesServlet0.init();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet9 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet10 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet11 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet10.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet11);
        setPreferenceServlet9.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet11);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet14 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet9.init((javax.servlet.ServletConfig) recommendServlet14);
        recommendServlet14.init();
        batchAddCandidatesServlet0.init((javax.servlet.ServletConfig) recommendServlet14);
        batchAddCandidatesServlet0.destroy();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration19 = batchAddCandidatesServlet0.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(servletConfig6);
    }

    @Test
    public void test04175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04175");
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener0 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener0.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener2 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener0.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener2);
        delegatingPreferenceChangeListener0.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener0.notifyOfPreferenceChange();
    }

    @Test
    public void test04176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04176");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((long) '#', (double) 10L);
        double double7 = fixedCandidatesIDRescorer1.rescore((long) (byte) 0, (double) (byte) 1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer8 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double11 = fixedCandidatesIDRescorer1.rescore(100L, (double) 0.0f);
        double double14 = fixedCandidatesIDRescorer1.rescore((long) (short) 10, 1.0d);
        double double17 = fixedCandidatesIDRescorer1.rescore(1L, 1.0d);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer18 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer19 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double22 = fixedCandidatesIDRescorer1.rescore((long) (byte) 100, (double) 10000.0f);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = fixedCandidatesIDRescorer1.isFiltered((long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10000.0d + "'", double22 == 10000.0d);
    }

    @Test
    public void test04177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04177");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str1 = itembasedRecommenderConfig0.getSimilarityClass();
        itembasedRecommenderConfig0.setName("");
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer4 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        itembasedRecommenderConfig0.setRetrainCronExpression("MutablePreference{userID=-1, itemID=0, value=100.0}");
        itembasedRecommenderConfig0.setRetrainAfterPreferenceChanges((int) (short) 1);
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test04178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04178");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str1 = itembasedRecommenderConfig0.getSimilarityClass();
        int int2 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        int int3 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        int int4 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        int int5 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        java.lang.String str6 = itembasedRecommenderConfig0.getRetrainCronExpression();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer7 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        int int8 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test04179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04179");
        org.plista.kornakapi.web.MissingParameterException missingParameterException3 = new org.plista.kornakapi.web.MissingParameterException("org.plista.kornakapi.web.MissingParameterException: itemIDs");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException4 = new org.plista.kornakapi.web.InvalidParameterException("MutablePreference{userID=-1, itemID=10, value=10.0}", (java.lang.Throwable) missingParameterException3);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException5 = new org.plista.kornakapi.web.InvalidParameterException("", (java.lang.Throwable) invalidParameterException4);
        java.lang.String str6 = invalidParameterException5.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.plista.kornakapi.web.InvalidParameterException: " + "'", str6, "org.plista.kornakapi.web.InvalidParameterException: ");
    }

    @Test
    public void test04180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04180");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet1 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str2 = batchDeleteCandidatesServlet1.getServletInfo();
        java.lang.String str3 = batchDeleteCandidatesServlet1.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet4 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet5 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet6 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet5.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        setPreferenceServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet9 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet4.init((javax.servlet.ServletConfig) recommendServlet9);
        batchDeleteCandidatesServlet1.init((javax.servlet.ServletConfig) setPreferenceServlet4);
        batchDeleteCandidatesServlet1.destroy();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet1);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet14 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet15 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet16 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet15.init((javax.servlet.ServletConfig) batchSetPreferencesServlet16);
        batchDeleteCandidatesServlet14.init((javax.servlet.ServletConfig) batchSetPreferencesServlet16);
        javax.servlet.ServletConfig servletConfig19 = batchSetPreferencesServlet16.getServletConfig();
        batchSetPreferencesServlet16.init();
        batchDeleteCandidatesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet16);
        javax.servlet.ServletConfig servletConfig22 = batchDeleteCandidatesServlet1.getServletConfig();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = batchDeleteCandidatesServlet1.getServletName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(servletConfig19);
        org.junit.Assert.assertNotNull(servletConfig22);
    }

    @Test
    public void test04181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04181");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str1 = batchDeleteCandidatesServlet0.getServletInfo();
        java.lang.String str2 = batchDeleteCandidatesServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet3 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet4 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet5 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        setPreferenceServlet3.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet8 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet3.init((javax.servlet.ServletConfig) recommendServlet8);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet3);
        batchDeleteCandidatesServlet0.destroy();
        batchDeleteCandidatesServlet0.init();
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet13 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str14 = trainServlet13.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet15 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet15.destroy();
        javax.servlet.ServletConfig servletConfig17 = deleteCandidateServlet15.getServletConfig();
        deleteCandidateServlet15.destroy();
        trainServlet13.init((javax.servlet.ServletConfig) deleteCandidateServlet15);
        java.lang.String str20 = trainServlet13.getServletInfo();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) trainServlet13);
        batchDeleteCandidatesServlet0.destroy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = batchDeleteCandidatesServlet0.getServletName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(servletConfig17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test04182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04182");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str1 = itembasedRecommenderConfig0.getRetrainCronExpression();
        int int2 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        java.lang.String str3 = itembasedRecommenderConfig0.getSimilarityClass();
        itembasedRecommenderConfig0.setSimilarItemsPerItem(0);
        itembasedRecommenderConfig0.setSimilarityClass("");
        itembasedRecommenderConfig0.setSimilarItemsPerItem((int) '#');
        itembasedRecommenderConfig0.setName("file");
        int int12 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        itembasedRecommenderConfig0.setSimilarItemsPerItem((int) (short) 1);
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer15 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        itembasedRecommenderConfig0.setSimilarityClass("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer18 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        java.io.File file19 = null;
        org.plista.kornakapi.core.storage.Storage storage20 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender21 = null;
        // The following exception was thrown during execution in test generation
        try {
            multithreadedItembasedInMemoryTrainer18.train(file19, storage20, recommender21, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
    }

    @Test
    public void test04183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04183");
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration0 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str1 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str4 = storageConfiguration0.getJdbcUrl();
        java.lang.String str5 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str6 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str7 = storageConfiguration0.getUsername();
        storageConfiguration0.setJdbcDriverClass("recommender");
        storageConfiguration0.setJdbcUrl("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemIDs");
        storageConfiguration0.setJdbcDriverClass("MutablePreference{userID=0, itemID=0, value=52.0}");
        storageConfiguration0.setPassword("");
        java.lang.String str16 = storageConfiguration0.getJdbcDriverClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str7, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MutablePreference{userID=0, itemID=0, value=52.0}" + "'", str16, "MutablePreference{userID=0, itemID=0, value=52.0}");
    }

    @Test
    public void test04184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04184");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = null; // flaky: components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration4 = null; // flaky: components0.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList5 = null; // flaky: configuration4.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration6 = null; // flaky: configuration4.getStorageConfiguration();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration7 = null; // flaky: configuration4.getStorageConfiguration();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration8 = null; // flaky: configuration4.getStorageConfiguration();
        int int9 = 0; // flaky: configuration4.getNumProcessorsForTraining();
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig10 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double11 = factorizationbasedRecommenderConfig10.getAlpha();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer12 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig10);
        factorizationbasedRecommenderConfig10.setUsesImplicitFeedback(false);
        factorizationbasedRecommenderConfig10.setNumberOfIterations((int) '#');
        double double17 = factorizationbasedRecommenderConfig10.getLambda();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer18 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig10);
        factorizationbasedRecommenderConfig10.setUsesImplicitFeedback(false);
// flaky:         configuration4.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig10);
        int int22 = factorizationbasedRecommenderConfig10.getNumberOfIterations();
        boolean boolean23 = factorizationbasedRecommenderConfig10.isUsesImplicitFeedback();
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(trainingScheduler3);
// flaky:         org.junit.Assert.assertNotNull(configuration4);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList5);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration6);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration7);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test04185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04185");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setNumProcessorsForTraining((int) (short) 100);
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig3 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double4 = factorizationbasedRecommenderConfig3.getAlpha();
        double double5 = factorizationbasedRecommenderConfig3.getLambda();
        configuration0.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig3);
        java.lang.String str7 = configuration0.getModelDirectory();
        int int8 = configuration0.getNumProcessorsForTraining();
        java.lang.String str9 = configuration0.getModelDirectory();
        configuration0.setModelDirectory("MutablePreference{userID=0, itemID=100, value=97.0}");
        int int12 = configuration0.getNumProcessorsForTraining();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
    }

    @Test
    public void test04186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04186");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setNumProcessorsForTraining((int) (short) 100);
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig3 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double4 = factorizationbasedRecommenderConfig3.getAlpha();
        double double5 = factorizationbasedRecommenderConfig3.getLambda();
        configuration0.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig3);
        java.lang.String str7 = configuration0.getModelDirectory();
        int int8 = configuration0.getNumProcessorsForTraining();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList9 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration10 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str11 = storageConfiguration10.getJdbcDriverClass();
        storageConfiguration10.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str14 = storageConfiguration10.getJdbcUrl();
        java.lang.String str15 = storageConfiguration10.getJdbcUrl();
        storageConfiguration10.setJdbcUrl("label");
        configuration0.setStorageConfiguration(storageConfiguration10);
        java.lang.String str19 = storageConfiguration10.getUsername();
        java.lang.String str20 = storageConfiguration10.getUsername();
        java.lang.String str21 = storageConfiguration10.getJdbcDriverClass();
        storageConfiguration10.setPassword("howMany");
        java.lang.String str24 = storageConfiguration10.getPassword();
        java.lang.Class<?> wildcardClass25 = storageConfiguration10.getClass();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str19, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str20, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "howMany" + "'", str24, "howMany");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test04187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04187");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration2 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str3 = storageConfiguration2.getJdbcDriverClass();
        storageConfiguration2.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str6 = storageConfiguration2.getJdbcUrl();
        java.lang.String str7 = storageConfiguration2.getJdbcDriverClass();
        java.lang.String str8 = storageConfiguration2.getJdbcDriverClass();
        java.lang.String str9 = storageConfiguration2.getPassword();
// flaky:         configuration1.setStorageConfiguration(storageConfiguration2);
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig11 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str12 = itembasedRecommenderConfig11.getSimilarityClass();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer13 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig11);
        itembasedRecommenderConfig11.setSimilarityClass("recommender");
        java.lang.String str16 = itembasedRecommenderConfig11.getSimilarityClass();
// flaky:         configuration1.addItembasedRecommender(itembasedRecommenderConfig11);
        int int18 = itembasedRecommenderConfig11.getSimilarItemsPerItem();
        java.lang.String str19 = itembasedRecommenderConfig11.getSimilarityClass();
        itembasedRecommenderConfig11.setSimilarItemsPerItem((int) (byte) 100);
        int int22 = itembasedRecommenderConfig11.getSimilarItemsPerItem();
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "recommender" + "'", str16, "recommender");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "recommender" + "'", str19, "recommender");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
    }

    @Test
    public void test04188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04188");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 0);
        boolean boolean8 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 0);
        java.lang.String str11 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (byte) 1);
        boolean boolean14 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer15 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        java.io.File file16 = null;
        org.plista.kornakapi.core.storage.Storage storage17 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender18 = null;
        // The following exception was thrown during execution in test generation
        try {
            factorizationbasedInMemoryTrainer15.train(file16, storage17, recommender18, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04189");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        java.lang.String str5 = batchSetPreferencesServlet2.getServletInfo();
        batchSetPreferencesServlet2.init();
        javax.servlet.ServletConfig servletConfig7 = batchSetPreferencesServlet2.getServletConfig();
        javax.servlet.ServletConfig servletConfig8 = batchSetPreferencesServlet2.getServletConfig();
        javax.servlet.ServletConfig servletConfig9 = batchSetPreferencesServlet2.getServletConfig();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(servletConfig7);
        org.junit.Assert.assertNull(servletConfig8);
        org.junit.Assert.assertNull(servletConfig9);
    }

    @Test
    public void test04190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04190");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        boolean boolean3 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        boolean boolean6 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        int int7 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test04191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04191");
        org.plista.kornakapi.core.MutablePreference mutablePreference0 = new org.plista.kornakapi.core.MutablePreference();
        java.lang.String str1 = mutablePreference0.toString();
        long long2 = mutablePreference0.getItemID();
        long long3 = mutablePreference0.getItemID();
        long long4 = mutablePreference0.getUserID();
        mutablePreference0.set((long) (short) 0, 10000L, (float) (byte) 10);
        mutablePreference0.setValue((float) (short) 0);
        java.lang.String str11 = mutablePreference0.toString();
        mutablePreference0.setValue((float) (-1L));
        long long14 = mutablePreference0.getUserID();
        java.lang.String str15 = mutablePreference0.toString();
        mutablePreference0.setValue((float) 97L);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str1, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MutablePreference{userID=0, itemID=10000, value=0.0}" + "'", str11, "MutablePreference{userID=0, itemID=10000, value=0.0}");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MutablePreference{userID=0, itemID=10000, value=-1.0}" + "'", str15, "MutablePreference{userID=0, itemID=10000, value=-1.0}");
    }

    @Test
    public void test04192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04192");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList1 = configuration0.getItembasedRecommenders();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList2 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration3 = configuration0.getStorageConfiguration();
        int int4 = configuration0.getNumProcessorsForTraining();
        configuration0.setNumProcessorsForTraining((int) (short) 10);
        java.lang.String str7 = configuration0.getModelDirectory();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList8 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.web.Components components9 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration10 = null; // flaky: components9.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration11 = null; // flaky: components9.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler12 = null; // flaky: components9.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration13 = null; // flaky: components9.getConfiguration();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig14 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        int int15 = itembasedRecommenderConfig14.getSimilarItemsPerItem();
// flaky:         configuration13.addItembasedRecommender(itembasedRecommenderConfig14);
        itembasedRecommenderConfig14.setSimilarityClass("MutablePreference{userID=0, itemID=0, value=0.0}");
        java.lang.String str19 = itembasedRecommenderConfig14.getName();
        java.lang.String str20 = itembasedRecommenderConfig14.getSimilarityClass();
        configuration0.addItembasedRecommender(itembasedRecommenderConfig14);
        org.plista.kornakapi.core.storage.Storage storage22 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.KornakapiRecommender> strMap23 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.core.training.Trainer> strMap24 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler25 = null;
        org.plista.kornakapi.web.Components components26 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration27 = components26.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration28 = components26.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler29 = components26.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler30 = components26.scheduler();
        org.plista.kornakapi.core.storage.Storage storage31 = components26.storage();
        org.plista.kornakapi.core.config.Configuration configuration32 = components26.getConfiguration();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener33 = components26.preferenceChangeListener();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener34 = components26.preferenceChangeListener();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener35 = components26.preferenceChangeListener();
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.web.Components.init(configuration0, storage22, strMap23, strMap24, trainingScheduler25, preferenceChangeListener35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList1);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList2);
        org.junit.Assert.assertNull(storageConfiguration3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList8);
// flaky:         org.junit.Assert.assertNotNull(components9);
// flaky:         org.junit.Assert.assertNotNull(configuration10);
// flaky:         org.junit.Assert.assertNotNull(configuration11);
        org.junit.Assert.assertNull(trainingScheduler12);
// flaky:         org.junit.Assert.assertNotNull(configuration13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str20, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertNotNull(components26);
// flaky:         org.junit.Assert.assertNotNull(configuration27);
// flaky:         org.junit.Assert.assertNotNull(configuration28);
        org.junit.Assert.assertNull(trainingScheduler29);
        org.junit.Assert.assertNull(trainingScheduler30);
        org.junit.Assert.assertNull(storage31);
// flaky:         org.junit.Assert.assertNotNull(configuration32);
        org.junit.Assert.assertNotNull(preferenceChangeListener33);
        org.junit.Assert.assertNotNull(preferenceChangeListener34);
        org.junit.Assert.assertNotNull(preferenceChangeListener35);
    }

    @Test
    public void test04193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04193");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str1 = batchDeleteCandidatesServlet0.getServletInfo();
        batchDeleteCandidatesServlet0.init();
        batchDeleteCandidatesServlet0.destroy();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet4 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet4.destroy();
        javax.servlet.ServletConfig servletConfig6 = deleteCandidateServlet4.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet7 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str8 = batchDeleteCandidatesServlet7.getServletInfo();
        java.lang.String str9 = batchDeleteCandidatesServlet7.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet10 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet11 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet12 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet11.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet12);
        setPreferenceServlet10.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet12);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet15 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet10.init((javax.servlet.ServletConfig) recommendServlet15);
        batchDeleteCandidatesServlet7.init((javax.servlet.ServletConfig) setPreferenceServlet10);
        setPreferenceServlet10.destroy();
        deleteCandidateServlet4.init((javax.servlet.ServletConfig) setPreferenceServlet10);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet10);
        javax.servlet.ServletRequest servletRequest21 = null;
        javax.servlet.ServletResponse servletResponse22 = null;
        // The following exception was thrown during execution in test generation
        try {
            batchDeleteCandidatesServlet0.service(servletRequest21, servletResponse22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNull(servletConfig6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test04194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04194");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        addCandidateServlet0.destroy();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet2 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet3 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet4 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet3.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet4);
        setPreferenceServlet2.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet4);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet7 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet2.init((javax.servlet.ServletConfig) recommendServlet7);
        recommendServlet7.init();
        addCandidateServlet0.init((javax.servlet.ServletConfig) recommendServlet7);
        java.lang.String str11 = addCandidateServlet0.getServletInfo();
        addCandidateServlet0.init();
        javax.servlet.ServletConfig servletConfig13 = addCandidateServlet0.getServletConfig();
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet14 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet15 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet16 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet15.init((javax.servlet.ServletConfig) batchSetPreferencesServlet16);
        javax.servlet.ServletConfig servletConfig18 = batchSetPreferencesServlet15.getServletConfig();
        addCandidateServlet14.init((javax.servlet.ServletConfig) batchSetPreferencesServlet15);
        batchSetPreferencesServlet15.init();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet21 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        java.lang.String str22 = recommendServlet21.getServletInfo();
        javax.servlet.ServletConfig servletConfig23 = recommendServlet21.getServletConfig();
        java.lang.String str24 = recommendServlet21.getServletInfo();
        batchSetPreferencesServlet15.init((javax.servlet.ServletConfig) recommendServlet21);
        addCandidateServlet0.init((javax.servlet.ServletConfig) recommendServlet21);
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet27 = new org.plista.kornakapi.web.servlets.TrainServlet();
        trainServlet27.destroy();
        trainServlet27.destroy();
        java.lang.String str30 = trainServlet27.getServletInfo();
        java.lang.String str31 = trainServlet27.getServletInfo();
        javax.servlet.ServletConfig servletConfig32 = trainServlet27.getServletConfig();
        javax.servlet.ServletConfig servletConfig33 = trainServlet27.getServletConfig();
        trainServlet27.destroy();
        trainServlet27.init();
        addCandidateServlet0.init((javax.servlet.ServletConfig) trainServlet27);
        javax.servlet.ServletConfig servletConfig37 = addCandidateServlet0.getServletConfig();
        // The following exception was thrown during execution in test generation
        try {
            javax.servlet.ServletContext servletContext38 = addCandidateServlet0.getServletContext();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(servletConfig13);
        org.junit.Assert.assertNotNull(servletConfig18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(servletConfig23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(servletConfig32);
        org.junit.Assert.assertNull(servletConfig33);
        org.junit.Assert.assertNotNull(servletConfig37);
    }

    @Test
    public void test04195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04195");
        org.plista.kornakapi.core.MutableCandidate mutableCandidate0 = new org.plista.kornakapi.core.MutableCandidate();
        java.lang.String str1 = mutableCandidate0.getLabel();
        long long2 = mutableCandidate0.getItemID();
        mutableCandidate0.set("recommender", 100L);
        long long6 = mutableCandidate0.getItemID();
        long long7 = mutableCandidate0.getItemID();
        long long8 = mutableCandidate0.getItemID();
        java.lang.String str9 = mutableCandidate0.getLabel();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "recommender" + "'", str9, "recommender");
    }

    @Test
    public void test04196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04196");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer2 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer3 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer4 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double7 = fixedCandidatesIDRescorer1.rescore((long) (byte) 100, (double) 'a');
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer8 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double11 = fixedCandidatesIDRescorer1.rescore(97L, 0.0d);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer12 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = fixedCandidatesIDRescorer1.isFiltered((long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 97.0d + "'", double7 == 97.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test04197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04197");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(false);
        int int6 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations(10);
        java.lang.String str9 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int10 = factorizationbasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test04198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04198");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage3 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.storage.Storage storage4 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration5 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration6 = null; // flaky: components0.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList7 = null; // flaky: configuration6.getFactorizationbasedRecommenders();
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList8 = null; // flaky: configuration6.getFactorizationbasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration9 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str10 = storageConfiguration9.getJdbcDriverClass();
        storageConfiguration9.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str13 = storageConfiguration9.getJdbcUrl();
        java.lang.String str14 = storageConfiguration9.getJdbcDriverClass();
        java.lang.String str15 = storageConfiguration9.getJdbcDriverClass();
        java.lang.String str16 = storageConfiguration9.getPassword();
        java.lang.String str17 = storageConfiguration9.getUsername();
        java.lang.String str18 = storageConfiguration9.getJdbcDriverClass();
        storageConfiguration9.setJdbcDriverClass("itemID");
        storageConfiguration9.setJdbcUrl("recommender");
// flaky:         configuration6.setStorageConfiguration(storageConfiguration9);
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(storage3);
        org.junit.Assert.assertNull(storage4);
// flaky:         org.junit.Assert.assertNotNull(configuration5);
// flaky:         org.junit.Assert.assertNotNull(configuration6);
// flaky:         org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList7);
// flaky:         org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str17, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test04199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04199");
        org.plista.kornakapi.core.MutablePreference mutablePreference0 = new org.plista.kornakapi.core.MutablePreference();
        java.lang.String str1 = mutablePreference0.toString();
        long long2 = mutablePreference0.getItemID();
        java.lang.String str3 = mutablePreference0.toString();
        mutablePreference0.set((long) (byte) 100, (long) (byte) 0, (float) (short) 0);
        float float8 = mutablePreference0.getValue();
        long long9 = mutablePreference0.getItemID();
        mutablePreference0.setValue((float) (short) 100);
        long long12 = mutablePreference0.getUserID();
        long long13 = mutablePreference0.getItemID();
        long long14 = mutablePreference0.getItemID();
        float float15 = mutablePreference0.getValue();
        long long16 = mutablePreference0.getItemID();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str1, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str3, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 100.0f + "'", float15 == 100.0f);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test04200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04200");
        org.plista.kornakapi.web.Components components0 = null; // flaky: org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = null; // flaky: components0.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage3 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.storage.Storage storage4 = null; // flaky: components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration5 = null; // flaky: components0.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList6 = null; // flaky: configuration5.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration7 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str8 = storageConfiguration7.getJdbcDriverClass();
        storageConfiguration7.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str11 = storageConfiguration7.getJdbcUrl();
        java.lang.String str12 = storageConfiguration7.getJdbcDriverClass();
        java.lang.String str13 = storageConfiguration7.getJdbcDriverClass();
        java.lang.String str14 = storageConfiguration7.getPassword();
// flaky:         configuration5.setStorageConfiguration(storageConfiguration7);
        int int16 = 0; // flaky: configuration5.getNumProcessorsForTraining();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration17 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str18 = storageConfiguration17.getJdbcDriverClass();
        storageConfiguration17.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str21 = storageConfiguration17.getJdbcUrl();
        java.lang.String str22 = storageConfiguration17.getJdbcUrl();
        java.lang.String str23 = storageConfiguration17.getJdbcUrl();
        java.lang.String str24 = storageConfiguration17.getUsername();
// flaky:         configuration5.setStorageConfiguration(storageConfiguration17);
        org.plista.kornakapi.web.Components components26 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration27 = components26.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler28 = components26.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler29 = components26.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration30 = components26.getConfiguration();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig31 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str32 = itembasedRecommenderConfig31.getSimilarityClass();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer33 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig31);
        java.lang.String str34 = itembasedRecommenderConfig31.getSimilarityClass();
        itembasedRecommenderConfig31.setRetrainAfterPreferenceChanges((int) (short) 100);
// flaky:         configuration30.addItembasedRecommender(itembasedRecommenderConfig31);
        int int38 = itembasedRecommenderConfig31.getSimilarItemsPerItem();
        itembasedRecommenderConfig31.setSimilarItemsPerItem(0);
// flaky:         configuration5.addItembasedRecommender(itembasedRecommenderConfig31);
        int int42 = itembasedRecommenderConfig31.getSimilarItemsPerItem();
// flaky:         org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(storage3);
        org.junit.Assert.assertNull(storage4);
// flaky:         org.junit.Assert.assertNotNull(configuration5);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 32 + "'", int16 == 32);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str24, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertNotNull(components26);
// flaky:         org.junit.Assert.assertNotNull(configuration27);
        org.junit.Assert.assertNull(trainingScheduler28);
        org.junit.Assert.assertNull(trainingScheduler29);
// flaky:         org.junit.Assert.assertNotNull(configuration30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test04201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04201");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((-1L), (double) 0L);
        double double7 = fixedCandidatesIDRescorer1.rescore((long) (-1), (double) (byte) 1);
        double double10 = fixedCandidatesIDRescorer1.rescore((long) (short) 0, (double) 10.0f);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer11 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer12 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        java.lang.Class<?> wildcardClass13 = fixedCandidatesIDRescorer1.getClass();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test04202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04202");
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet0 = new org.plista.kornakapi.web.servlets.TrainServlet();
        trainServlet0.destroy();
        trainServlet0.destroy();
        java.lang.String str3 = trainServlet0.getServletInfo();
        java.lang.String str4 = trainServlet0.getServletInfo();
        javax.servlet.ServletConfig servletConfig5 = trainServlet0.getServletConfig();
        javax.servlet.ServletConfig servletConfig6 = trainServlet0.getServletConfig();
        trainServlet0.destroy();
        trainServlet0.init();
        trainServlet0.init();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration10 = trainServlet0.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(servletConfig5);
        org.junit.Assert.assertNull(servletConfig6);
    }

    @Test
    public void test04203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04203");
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet0.init();
        java.lang.String str2 = batchAddCandidatesServlet0.getServletInfo();
        javax.servlet.ServletConfig servletConfig3 = batchAddCandidatesServlet0.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet4 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str5 = batchDeleteCandidatesServlet4.getServletInfo();
        java.lang.String str6 = batchDeleteCandidatesServlet4.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet7 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet8 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet9 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet8.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet9);
        setPreferenceServlet7.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet9);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet12 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet7.init((javax.servlet.ServletConfig) recommendServlet12);
        batchDeleteCandidatesServlet4.init((javax.servlet.ServletConfig) setPreferenceServlet7);
        batchAddCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet4);
        batchDeleteCandidatesServlet4.init();
        java.lang.String str17 = batchDeleteCandidatesServlet4.getServletInfo();
        java.lang.String str18 = batchDeleteCandidatesServlet4.getServletInfo();
        batchDeleteCandidatesServlet4.destroy();
        batchDeleteCandidatesServlet4.init();
        javax.servlet.ServletRequest servletRequest21 = null;
        javax.servlet.ServletResponse servletResponse22 = null;
        // The following exception was thrown during execution in test generation
        try {
            batchDeleteCandidatesServlet4.service(servletRequest21, servletResponse22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(servletConfig3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test04204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04204");
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet0 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet1);
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet3 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet3.init();
        setPreferenceServlet3.destroy();
        batchSetPreferencesServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet3);
        javax.servlet.ServletConfig servletConfig7 = setPreferenceServlet3.getServletConfig();
        setPreferenceServlet3.destroy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = setPreferenceServlet3.getInitParameter("org.plista.kornakapi.web.MissingParameterException: file");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig7);
    }

    @Test
    public void test04205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04205");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((-1L), (double) 0L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer5 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer6 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double9 = fixedCandidatesIDRescorer1.rescore((long) (short) 1, (double) 10000);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer10 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double13 = fixedCandidatesIDRescorer1.rescore((long) 10000, (double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = fixedCandidatesIDRescorer1.isFiltered((long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10000.0d + "'", double9 == 10000.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
    }

    @Test
    public void test04206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04206");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        double double6 = factorizationbasedRecommenderConfig0.getAlpha();
        java.lang.String str7 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer8 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        factorizationbasedRecommenderConfig0.setNumberOfFeatures((int) (short) -1);
        int int11 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setAlpha((double) (byte) 10);
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer14 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        java.io.File file15 = null;
        org.plista.kornakapi.core.storage.Storage storage16 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender17 = null;
        // The following exception was thrown during execution in test generation
        try {
            factorizationbasedInMemoryTrainer14.train(file15, storage16, recommender17, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test04207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04207");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList1 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration2 = configuration0.getStorageConfiguration();
        configuration0.setNumProcessorsForTraining((int) (short) 0);
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList5 = configuration0.getFactorizationbasedRecommenders();
        configuration0.setNumProcessorsForTraining((int) 'a');
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList8 = configuration0.getFactorizationbasedRecommenders();
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList9 = configuration0.getFactorizationbasedRecommenders();
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList1);
        org.junit.Assert.assertNull(storageConfiguration2);
        org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList5);
        org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList8);
        org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList9);
    }

    @Test
    public void test04208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04208");
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration0 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str1 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str4 = storageConfiguration0.getJdbcUrl();
        java.lang.String str5 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setJdbcDriverClass("batchSize");
        java.lang.String str8 = storageConfiguration0.getPassword();
        storageConfiguration0.setUsername("batchSize");
        java.lang.String str11 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setJdbcUrl("hi!");
        java.lang.String str14 = storageConfiguration0.getPassword();
        java.lang.String str15 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setPassword("");
        storageConfiguration0.setJdbcUrl("MutablePreference{userID=0, itemID=10000, value=-1.0}");
        java.lang.Class<?> wildcardClass20 = storageConfiguration0.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "batchSize" + "'", str11, "batchSize");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "batchSize" + "'", str15, "batchSize");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test04209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04209");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        double double6 = factorizationbasedRecommenderConfig0.getAlpha();
        java.lang.String str7 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int8 = factorizationbasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        boolean boolean9 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        factorizationbasedRecommenderConfig0.setRetrainCronExpression("itemIDs");
        factorizationbasedRecommenderConfig0.setName("");
        factorizationbasedRecommenderConfig0.setAlpha((double) (short) 0);
        java.lang.String str16 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "itemIDs" + "'", str16, "itemIDs");
    }

    @Test
    public void test04210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04210");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((-1L), (double) 0L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer5 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double8 = fixedCandidatesIDRescorer1.rescore((long) 1, (double) 10);
        double double11 = fixedCandidatesIDRescorer1.rescore((long) 10, 100.0d);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer12 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = fixedCandidatesIDRescorer1.isFiltered((long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
    }

    @Test
    public void test04211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04211");
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet0 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet1 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet2 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet1.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet2);
        setPreferenceServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet2);
        java.lang.String str5 = setPreferenceServlet0.getServletInfo();
        java.lang.String str6 = setPreferenceServlet0.getServletInfo();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration7 = setPreferenceServlet0.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test04212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04212");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setNumProcessorsForTraining((int) (short) 100);
        java.lang.String str3 = configuration0.getModelDirectory();
        configuration0.setModelDirectory("org.plista.kornakapi.web.MissingParameterException: itemID");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig6 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str7 = itembasedRecommenderConfig6.getSimilarityClass();
        int int8 = itembasedRecommenderConfig6.getSimilarItemsPerItem();
        int int9 = itembasedRecommenderConfig6.getRetrainAfterPreferenceChanges();
        int int10 = itembasedRecommenderConfig6.getRetrainAfterPreferenceChanges();
        java.lang.String str11 = itembasedRecommenderConfig6.getSimilarityClass();
        java.lang.String str12 = itembasedRecommenderConfig6.getRetrainCronExpression();
        configuration0.addItembasedRecommender(itembasedRecommenderConfig6);
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList14 = configuration0.getItembasedRecommenders();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList15 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.core.storage.Storage storage16 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.KornakapiRecommender> strMap17 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.core.training.Trainer> strMap18 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler19 = null;
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener20 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener20.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener20.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener23 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener23.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener25 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener25.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener23.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener25);
        delegatingPreferenceChangeListener20.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener23);
        delegatingPreferenceChangeListener23.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener23.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener31 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener31.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener31.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener31.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener31.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener23.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener31);
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener37 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener37.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener37.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener37.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener37.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener31.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener37);
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener43 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener43.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener43.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener46 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener46.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener48 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener48.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener46.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener48);
        delegatingPreferenceChangeListener43.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener46);
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler52 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener55 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler52, "label", (int) ' ');
        inMemoryPreferenceChangeListener55.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener43.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener55);
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener58 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener58.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener60 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener60.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener58.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener60);
        delegatingPreferenceChangeListener60.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener43.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener60);
        delegatingPreferenceChangeListener31.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener60);
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener66 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener66.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener66.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener69 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener69.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener71 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener71.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener69.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener71);
        delegatingPreferenceChangeListener66.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener69);
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler75 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener78 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler75, "label", (int) ' ');
        inMemoryPreferenceChangeListener78.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener66.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener78);
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener81 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener81.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener83 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener83.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener81.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener83);
        delegatingPreferenceChangeListener83.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener83.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener66.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener83);
        delegatingPreferenceChangeListener31.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener66);
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler90 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener93 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler90, "MutablePreference{userID=0, itemID=0, value=1.0}", 35);
        delegatingPreferenceChangeListener31.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener93);
        inMemoryPreferenceChangeListener93.notifyOfPreferenceChange();
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.web.Components.init(configuration0, storage16, strMap17, strMap18, trainingScheduler19, (org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener93);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList14);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList15);
    }

    @Test
    public void test04213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04213");
        org.plista.kornakapi.core.MutablePreference mutablePreference0 = new org.plista.kornakapi.core.MutablePreference();
        java.lang.String str1 = mutablePreference0.toString();
        long long2 = mutablePreference0.getItemID();
        java.lang.String str3 = mutablePreference0.toString();
        mutablePreference0.setValue(0.0f);
        long long6 = mutablePreference0.getUserID();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str1, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str3, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test04214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04214");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet1 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        addCandidateServlet1.init();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) addCandidateServlet1);
        javax.servlet.ServletRequest servletRequest4 = null;
        javax.servlet.ServletResponse servletResponse5 = null;
        // The following exception was thrown during execution in test generation
        try {
            addCandidateServlet1.service(servletRequest4, servletResponse5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04215");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str1 = batchDeleteCandidatesServlet0.getServletInfo();
        java.lang.String str2 = batchDeleteCandidatesServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet3 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet4 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet5 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        setPreferenceServlet3.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet8 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet3.init((javax.servlet.ServletConfig) recommendServlet8);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet3);
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet11 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet11.init();
        java.lang.String str13 = batchAddCandidatesServlet11.getServletInfo();
        javax.servlet.ServletConfig servletConfig14 = batchAddCandidatesServlet11.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet15 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str16 = batchDeleteCandidatesServlet15.getServletInfo();
        java.lang.String str17 = batchDeleteCandidatesServlet15.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet18 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet19 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet20 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet19.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet20);
        setPreferenceServlet18.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet20);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet23 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet18.init((javax.servlet.ServletConfig) recommendServlet23);
        batchDeleteCandidatesServlet15.init((javax.servlet.ServletConfig) setPreferenceServlet18);
        batchAddCandidatesServlet11.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet15);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchAddCandidatesServlet11);
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet28 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet29 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet28.init((javax.servlet.ServletConfig) batchSetPreferencesServlet29);
        java.lang.String str31 = batchSetPreferencesServlet29.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet32 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str33 = batchDeleteCandidatesServlet32.getServletInfo();
        java.lang.String str34 = batchDeleteCandidatesServlet32.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet35 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet36 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet37 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet36.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet37);
        setPreferenceServlet35.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet37);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet40 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet35.init((javax.servlet.ServletConfig) recommendServlet40);
        batchDeleteCandidatesServlet32.init((javax.servlet.ServletConfig) setPreferenceServlet35);
        batchDeleteCandidatesServlet32.destroy();
        batchDeleteCandidatesServlet32.init();
        batchDeleteCandidatesServlet32.destroy();
        javax.servlet.ServletConfig servletConfig46 = batchDeleteCandidatesServlet32.getServletConfig();
        batchSetPreferencesServlet29.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet32);
        batchDeleteCandidatesServlet32.init();
        batchAddCandidatesServlet11.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet32);
        javax.servlet.ServletConfig servletConfig50 = batchAddCandidatesServlet11.getServletConfig();
        // The following exception was thrown during execution in test generation
        try {
            javax.servlet.ServletContext servletContext51 = batchAddCandidatesServlet11.getServletContext();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(servletConfig14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(servletConfig46);
        org.junit.Assert.assertNotNull(servletConfig50);
    }

    @Test
    public void test04216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04216");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet1 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str2 = batchDeleteCandidatesServlet1.getServletInfo();
        java.lang.String str3 = batchDeleteCandidatesServlet1.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet4 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet5 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet6 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet5.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        setPreferenceServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet9 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet4.init((javax.servlet.ServletConfig) recommendServlet9);
        batchDeleteCandidatesServlet1.init((javax.servlet.ServletConfig) setPreferenceServlet4);
        batchDeleteCandidatesServlet1.destroy();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet1);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet14 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet15 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str16 = batchDeleteCandidatesServlet15.getServletInfo();
        java.lang.String str17 = batchDeleteCandidatesServlet15.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet18 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet19 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet20 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet19.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet20);
        setPreferenceServlet18.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet20);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet23 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet18.init((javax.servlet.ServletConfig) recommendServlet23);
        batchDeleteCandidatesServlet15.init((javax.servlet.ServletConfig) setPreferenceServlet18);
        batchDeleteCandidatesServlet15.destroy();
        batchDeleteCandidatesServlet14.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet15);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet28 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str29 = batchDeleteCandidatesServlet28.getServletInfo();
        batchDeleteCandidatesServlet28.destroy();
        javax.servlet.ServletConfig servletConfig31 = batchDeleteCandidatesServlet28.getServletConfig();
        batchDeleteCandidatesServlet14.init(servletConfig31);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet33 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        java.lang.String str34 = recommendServlet33.getServletInfo();
        batchDeleteCandidatesServlet14.init((javax.servlet.ServletConfig) recommendServlet33);
        batchDeleteCandidatesServlet14.destroy();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet14);
        // The following exception was thrown during execution in test generation
        try {
            batchDeleteCandidatesServlet0.log("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(servletConfig31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test04217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04217");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setNumProcessorsForTraining((int) (short) 100);
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig3 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double4 = factorizationbasedRecommenderConfig3.getAlpha();
        double double5 = factorizationbasedRecommenderConfig3.getLambda();
        configuration0.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig3);
        java.lang.String str7 = configuration0.getModelDirectory();
        int int8 = configuration0.getNumProcessorsForTraining();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList9 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration10 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str11 = storageConfiguration10.getJdbcDriverClass();
        storageConfiguration10.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str14 = storageConfiguration10.getJdbcUrl();
        java.lang.String str15 = storageConfiguration10.getJdbcUrl();
        storageConfiguration10.setJdbcUrl("label");
        configuration0.setStorageConfiguration(storageConfiguration10);
        java.lang.String str19 = storageConfiguration10.getUsername();
        storageConfiguration10.setJdbcUrl("MutablePreference{userID=0, itemID=0, value=10000.0}");
        storageConfiguration10.setUsername("MutablePreference{userID=35, itemID=35, value=0.0}");
        storageConfiguration10.setJdbcUrl("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemIDs");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str19, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
    }

    @Test
    public void test04218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04218");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str1 = itembasedRecommenderConfig0.getRetrainCronExpression();
        int int2 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        java.lang.String str3 = itembasedRecommenderConfig0.getSimilarityClass();
        itembasedRecommenderConfig0.setRetrainCronExpression("org.plista.kornakapi.web.InvalidParameterException: MutablePreference{userID=-1, itemID=10, value=10.0}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test04219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04219");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 0);
        boolean boolean8 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        java.lang.String str9 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        double double10 = factorizationbasedRecommenderConfig0.getLambda();
        factorizationbasedRecommenderConfig0.setLambda((double) (byte) -1);
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (byte) 100);
        factorizationbasedRecommenderConfig0.setLambda((double) 100L);
        int int17 = factorizationbasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        factorizationbasedRecommenderConfig0.setRetrainCronExpression("MutablePreference{userID=-1, itemID=10, value=10.0}");
        java.lang.String str20 = factorizationbasedRecommenderConfig0.getName();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test04220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04220");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((-1L), (double) 0L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer5 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double8 = fixedCandidatesIDRescorer1.rescore(10L, (double) 10L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer9 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer10 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double13 = fixedCandidatesIDRescorer1.rescore((long) 100, (double) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = fixedCandidatesIDRescorer1.isFiltered((long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test04221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04221");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 0);
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges((int) (byte) 100);
        double double10 = factorizationbasedRecommenderConfig0.getLambda();
        factorizationbasedRecommenderConfig0.setAlpha((double) (byte) 0);
        factorizationbasedRecommenderConfig0.setAlpha((double) ' ');
        factorizationbasedRecommenderConfig0.setLambda((double) 100L);
        factorizationbasedRecommenderConfig0.setNumberOfFeatures((int) (byte) 0);
        factorizationbasedRecommenderConfig0.setLambda((double) (short) 0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test04222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04222");
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler0 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener3 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler0, "MutablePreference{userID=100, itemID=0, value=0.0}", 32);
        inMemoryPreferenceChangeListener3.notifyOfPreferenceChange();
        inMemoryPreferenceChangeListener3.notifyOfPreferenceChange();
        inMemoryPreferenceChangeListener3.notifyOfPreferenceChange();
        inMemoryPreferenceChangeListener3.notifyOfPreferenceChange();
    }

    @Test
    public void test04223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04223");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler2 = components0.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration4 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration5 = components0.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage6 = components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration7 = components0.getConfiguration();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener8 = components0.preferenceChangeListener();
        preferenceChangeListener8.notifyOfPreferenceChange();
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
        org.junit.Assert.assertNull(trainingScheduler2);
        org.junit.Assert.assertNull(trainingScheduler3);
// flaky:         org.junit.Assert.assertNotNull(configuration4);
// flaky:         org.junit.Assert.assertNotNull(configuration5);
        org.junit.Assert.assertNull(storage6);
// flaky:         org.junit.Assert.assertNotNull(configuration7);
        org.junit.Assert.assertNotNull(preferenceChangeListener8);
    }

    @Test
    public void test04224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04224");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = components0.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage3 = components0.storage();
        org.plista.kornakapi.core.storage.Storage storage4 = components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration5 = components0.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList6 = null; // flaky: configuration5.getItembasedRecommenders();
// flaky:         configuration5.setModelDirectory("org.plista.kornakapi.web.MissingParameterException: itemIDs");
        int int9 = 0; // flaky: configuration5.getNumProcessorsForTraining();
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig10 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double11 = factorizationbasedRecommenderConfig10.getAlpha();
        double double12 = factorizationbasedRecommenderConfig10.getLambda();
        int int13 = factorizationbasedRecommenderConfig10.getNumberOfFeatures();
        java.lang.String str14 = factorizationbasedRecommenderConfig10.getRetrainCronExpression();
        int int15 = factorizationbasedRecommenderConfig10.getNumberOfFeatures();
        factorizationbasedRecommenderConfig10.setNumberOfIterations((int) (short) 0);
        factorizationbasedRecommenderConfig10.setRetrainAfterPreferenceChanges((int) (byte) 100);
        double double20 = factorizationbasedRecommenderConfig10.getLambda();
        factorizationbasedRecommenderConfig10.setAlpha((double) (short) 10);
        int int23 = factorizationbasedRecommenderConfig10.getNumberOfFeatures();
        java.lang.String str24 = factorizationbasedRecommenderConfig10.getRetrainCronExpression();
// flaky:         configuration5.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig10);
        factorizationbasedRecommenderConfig10.setUsesImplicitFeedback(false);
        int int28 = factorizationbasedRecommenderConfig10.getNumberOfIterations();
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(storage3);
        org.junit.Assert.assertNull(storage4);
// flaky:         org.junit.Assert.assertNotNull(configuration5);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList6);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test04225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04225");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler2 = components0.scheduler();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener3 = components0.preferenceChangeListener();
        org.plista.kornakapi.core.config.Configuration configuration4 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration5 = new org.plista.kornakapi.core.config.Configuration();
        configuration5.setNumProcessorsForTraining((int) (short) 100);
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig8 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig8.setSimilarityClass("");
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer11 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig8);
        itembasedRecommenderConfig8.setRetrainCronExpression("");
        itembasedRecommenderConfig8.setSimilarItemsPerItem(10);
        java.lang.String str16 = itembasedRecommenderConfig8.getName();
        configuration5.addItembasedRecommender(itembasedRecommenderConfig8);
// flaky:         configuration4.addItembasedRecommender(itembasedRecommenderConfig8);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration19 = null; // flaky: configuration4.getStorageConfiguration();
// flaky:         storageConfiguration19.setJdbcUrl("org.plista.kornakapi.web.InvalidParameterException: MutablePreference{userID=0, itemID=0, value=32.0}");
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
        org.junit.Assert.assertNull(trainingScheduler2);
        org.junit.Assert.assertNotNull(preferenceChangeListener3);
// flaky:         org.junit.Assert.assertNotNull(configuration4);
        org.junit.Assert.assertNull(str16);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration19);
    }

    @Test
    public void test04226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04226");
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet0.init();
        java.lang.String str2 = batchAddCandidatesServlet0.getServletInfo();
        javax.servlet.ServletConfig servletConfig3 = batchAddCandidatesServlet0.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet4 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str5 = batchDeleteCandidatesServlet4.getServletInfo();
        java.lang.String str6 = batchDeleteCandidatesServlet4.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet7 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet8 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet9 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet8.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet9);
        setPreferenceServlet7.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet9);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet12 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet7.init((javax.servlet.ServletConfig) recommendServlet12);
        batchDeleteCandidatesServlet4.init((javax.servlet.ServletConfig) setPreferenceServlet7);
        batchAddCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet4);
        batchDeleteCandidatesServlet4.init();
        java.lang.String str17 = batchDeleteCandidatesServlet4.getServletInfo();
        java.lang.String str18 = batchDeleteCandidatesServlet4.getServletInfo();
        batchDeleteCandidatesServlet4.init();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet20 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str21 = batchDeleteCandidatesServlet20.getServletInfo();
        batchDeleteCandidatesServlet20.init();
        java.lang.String str23 = batchDeleteCandidatesServlet20.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet24 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet24.init();
        batchDeleteCandidatesServlet20.init((javax.servlet.ServletConfig) batchAddCandidatesServlet24);
        batchDeleteCandidatesServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet20);
        // The following exception was thrown during execution in test generation
        try {
            javax.servlet.ServletContext servletContext28 = batchDeleteCandidatesServlet4.getServletContext();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(servletConfig3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test04227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04227");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str1 = batchDeleteCandidatesServlet0.getServletInfo();
        batchDeleteCandidatesServlet0.destroy();
        javax.servlet.ServletConfig servletConfig3 = batchDeleteCandidatesServlet0.getServletConfig();
        batchDeleteCandidatesServlet0.destroy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = batchDeleteCandidatesServlet0.getServletName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNull(servletConfig3);
    }

    @Test
    public void test04228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04228");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        javax.servlet.ServletConfig servletConfig5 = batchSetPreferencesServlet2.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet6 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str7 = batchDeleteCandidatesServlet6.getServletInfo();
        java.lang.String str8 = batchDeleteCandidatesServlet6.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet9 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet10 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet11 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet10.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet11);
        setPreferenceServlet9.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet11);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet14 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet9.init((javax.servlet.ServletConfig) recommendServlet14);
        batchDeleteCandidatesServlet6.init((javax.servlet.ServletConfig) setPreferenceServlet9);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet17 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet18 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet19 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet18.init((javax.servlet.ServletConfig) batchSetPreferencesServlet19);
        javax.servlet.ServletConfig servletConfig21 = batchSetPreferencesServlet18.getServletConfig();
        addCandidateServlet17.init((javax.servlet.ServletConfig) batchSetPreferencesServlet18);
        javax.servlet.ServletConfig servletConfig23 = addCandidateServlet17.getServletConfig();
        batchDeleteCandidatesServlet6.init((javax.servlet.ServletConfig) addCandidateServlet17);
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet25 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str26 = trainServlet25.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet27 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet27.destroy();
        javax.servlet.ServletConfig servletConfig29 = deleteCandidateServlet27.getServletConfig();
        deleteCandidateServlet27.destroy();
        trainServlet25.init((javax.servlet.ServletConfig) deleteCandidateServlet27);
        addCandidateServlet17.init((javax.servlet.ServletConfig) trainServlet25);
        batchSetPreferencesServlet2.init((javax.servlet.ServletConfig) addCandidateServlet17);
        javax.servlet.ServletConfig servletConfig34 = batchSetPreferencesServlet2.getServletConfig();
        javax.servlet.ServletRequest servletRequest35 = null;
        javax.servlet.ServletResponse servletResponse36 = null;
        // The following exception was thrown during execution in test generation
        try {
            batchSetPreferencesServlet2.service(servletRequest35, servletResponse36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(servletConfig21);
        org.junit.Assert.assertNotNull(servletConfig23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(servletConfig29);
        org.junit.Assert.assertNotNull(servletConfig34);
    }

    @Test
    public void test04229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04229");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer2 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(false);
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) '#');
        double double7 = factorizationbasedRecommenderConfig0.getLambda();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer8 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        java.lang.String str11 = factorizationbasedRecommenderConfig0.getName();
        int int12 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) 'a');
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
    }

    @Test
    public void test04230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04230");
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener3 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler0, "org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemIDs", 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04231");
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet0 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet0.init();
        setPreferenceServlet0.init();
        setPreferenceServlet0.destroy();
        javax.servlet.ServletConfig servletConfig4 = setPreferenceServlet0.getServletConfig();
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet5 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str6 = trainServlet5.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet7 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet7.destroy();
        javax.servlet.ServletConfig servletConfig9 = deleteCandidateServlet7.getServletConfig();
        deleteCandidateServlet7.destroy();
        trainServlet5.init((javax.servlet.ServletConfig) deleteCandidateServlet7);
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet12 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet12.init();
        java.lang.String str14 = batchAddCandidatesServlet12.getServletInfo();
        javax.servlet.ServletConfig servletConfig15 = batchAddCandidatesServlet12.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet16 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str17 = batchDeleteCandidatesServlet16.getServletInfo();
        java.lang.String str18 = batchDeleteCandidatesServlet16.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet19 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet20 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet21 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet20.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet21);
        setPreferenceServlet19.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet21);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet24 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet19.init((javax.servlet.ServletConfig) recommendServlet24);
        batchDeleteCandidatesServlet16.init((javax.servlet.ServletConfig) setPreferenceServlet19);
        batchAddCandidatesServlet12.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet16);
        batchDeleteCandidatesServlet16.init();
        java.lang.String str29 = batchDeleteCandidatesServlet16.getServletInfo();
        java.lang.String str30 = batchDeleteCandidatesServlet16.getServletInfo();
        trainServlet5.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet16);
        setPreferenceServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet16);
        java.lang.String str33 = batchDeleteCandidatesServlet16.getServletInfo();
        javax.servlet.ServletConfig servletConfig34 = batchDeleteCandidatesServlet16.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet35 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet36 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet35.init((javax.servlet.ServletConfig) batchSetPreferencesServlet36);
        java.lang.String str38 = batchSetPreferencesServlet36.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet39 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str40 = batchDeleteCandidatesServlet39.getServletInfo();
        java.lang.String str41 = batchDeleteCandidatesServlet39.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet42 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet43 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet44 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet43.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet44);
        setPreferenceServlet42.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet44);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet47 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet42.init((javax.servlet.ServletConfig) recommendServlet47);
        batchDeleteCandidatesServlet39.init((javax.servlet.ServletConfig) setPreferenceServlet42);
        batchDeleteCandidatesServlet39.destroy();
        batchDeleteCandidatesServlet39.init();
        batchDeleteCandidatesServlet39.destroy();
        javax.servlet.ServletConfig servletConfig53 = batchDeleteCandidatesServlet39.getServletConfig();
        batchSetPreferencesServlet36.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet39);
        batchDeleteCandidatesServlet39.init();
        batchDeleteCandidatesServlet16.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet39);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration57 = batchDeleteCandidatesServlet16.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(servletConfig9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(servletConfig15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(servletConfig34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(servletConfig53);
    }

    @Test
    public void test04232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04232");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer2 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double5 = fixedCandidatesIDRescorer1.rescore((long) (short) 1, (double) (byte) 100);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer6 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double9 = fixedCandidatesIDRescorer1.rescore((long) 97, (double) 32);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer10 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer11 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double14 = fixedCandidatesIDRescorer1.rescore((long) ' ', (double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = fixedCandidatesIDRescorer1.isFiltered((long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 32.0d + "'", double9 == 32.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
    }

    @Test
    public void test04233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04233");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str1 = itembasedRecommenderConfig0.getRetrainCronExpression();
        int int2 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        java.lang.String str3 = itembasedRecommenderConfig0.getSimilarityClass();
        itembasedRecommenderConfig0.setSimilarItemsPerItem(0);
        itembasedRecommenderConfig0.setRetrainCronExpression("value");
        int int8 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        int int9 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        itembasedRecommenderConfig0.setSimilarItemsPerItem((int) (short) 1);
        int int12 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer13 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer14 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        java.io.File file15 = null;
        org.plista.kornakapi.core.storage.Storage storage16 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender17 = null;
        // The following exception was thrown during execution in test generation
        try {
            multithreadedItembasedInMemoryTrainer14.train(file15, storage16, recommender17, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test04234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04234");
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener0 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener0.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener2 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener0.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener2);
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener7 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener7.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener9 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener9.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener9.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener7.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener9);
        delegatingPreferenceChangeListener9.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener2.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener9);
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener17 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener17.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener19 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener19.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener17.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener19);
        delegatingPreferenceChangeListener19.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener19.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener24 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener24.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener26 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener26.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener26.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener24.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener26);
        delegatingPreferenceChangeListener26.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener19.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener26);
        delegatingPreferenceChangeListener2.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener19);
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener35 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener35.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener37 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener37.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener35.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener37);
        delegatingPreferenceChangeListener37.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener37.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener42 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener42.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener44 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener44.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener44.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener42.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener44);
        delegatingPreferenceChangeListener44.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener37.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener44);
        delegatingPreferenceChangeListener37.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener51 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener51.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener53 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener53.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener53.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener51.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener53);
        delegatingPreferenceChangeListener37.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener53);
        delegatingPreferenceChangeListener2.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener37);
        org.plista.kornakapi.web.Components components59 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration60 = components59.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration61 = components59.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler62 = components59.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration63 = components59.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage64 = components59.storage();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener65 = components59.preferenceChangeListener();
        delegatingPreferenceChangeListener2.addDelegate(preferenceChangeListener65);
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        org.junit.Assert.assertNotNull(components59);
// flaky:         org.junit.Assert.assertNotNull(configuration60);
// flaky:         org.junit.Assert.assertNotNull(configuration61);
        org.junit.Assert.assertNull(trainingScheduler62);
// flaky:         org.junit.Assert.assertNotNull(configuration63);
        org.junit.Assert.assertNull(storage64);
        org.junit.Assert.assertNotNull(preferenceChangeListener65);
    }

    @Test
    public void test04235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04235");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        javax.servlet.ServletConfig servletConfig4 = batchSetPreferencesServlet1.getServletConfig();
        addCandidateServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet1);
        batchSetPreferencesServlet1.destroy();
        java.lang.String str7 = batchSetPreferencesServlet1.getServletInfo();
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet8 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str9 = trainServlet8.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet10 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet10.destroy();
        javax.servlet.ServletConfig servletConfig12 = deleteCandidateServlet10.getServletConfig();
        deleteCandidateServlet10.destroy();
        trainServlet8.init((javax.servlet.ServletConfig) deleteCandidateServlet10);
        javax.servlet.ServletConfig servletConfig15 = deleteCandidateServlet10.getServletConfig();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) deleteCandidateServlet10);
        batchSetPreferencesServlet1.destroy();
        // The following exception was thrown during execution in test generation
        try {
            javax.servlet.ServletContext servletContext18 = batchSetPreferencesServlet1.getServletContext();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(servletConfig4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(servletConfig12);
        org.junit.Assert.assertNull(servletConfig15);
    }

    @Test
    public void test04236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04236");
        org.plista.kornakapi.core.MutablePreference mutablePreference0 = new org.plista.kornakapi.core.MutablePreference();
        java.lang.String str1 = mutablePreference0.toString();
        long long2 = mutablePreference0.getItemID();
        mutablePreference0.set((long) (short) -1, (long) (byte) 10, (float) (short) 10);
        long long7 = mutablePreference0.getUserID();
        java.lang.String str8 = mutablePreference0.toString();
        float float9 = mutablePreference0.getValue();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str1, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MutablePreference{userID=-1, itemID=10, value=10.0}" + "'", str8, "MutablePreference{userID=-1, itemID=10, value=10.0}");
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 10.0f + "'", float9 == 10.0f);
    }

    @Test
    public void test04237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04237");
        org.plista.kornakapi.web.MissingParameterException missingParameterException4 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException5 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException4);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException6 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException4);
        org.plista.kornakapi.web.MissingParameterException missingParameterException8 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException10 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException8.addSuppressed((java.lang.Throwable) missingParameterException10);
        invalidParameterException6.addSuppressed((java.lang.Throwable) missingParameterException10);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException13 = new org.plista.kornakapi.web.InvalidParameterException("MutablePreference{userID=0, itemID=0, value=100.0}", (java.lang.Throwable) invalidParameterException6);
        org.plista.kornakapi.web.MissingParameterException missingParameterException15 = new org.plista.kornakapi.web.MissingParameterException("org.plista.kornakapi.web.InvalidParameterException: howMany");
        org.plista.kornakapi.web.MissingParameterException missingParameterException20 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException21 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException20);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException22 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException20);
        org.plista.kornakapi.web.MissingParameterException missingParameterException24 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException26 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException24.addSuppressed((java.lang.Throwable) missingParameterException26);
        invalidParameterException22.addSuppressed((java.lang.Throwable) missingParameterException26);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException29 = new org.plista.kornakapi.web.InvalidParameterException("file", (java.lang.Throwable) invalidParameterException22);
        org.plista.kornakapi.web.MissingParameterException missingParameterException33 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException34 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException33);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException35 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException33);
        invalidParameterException29.addSuppressed((java.lang.Throwable) missingParameterException33);
        org.plista.kornakapi.web.MissingParameterException missingParameterException39 = new org.plista.kornakapi.web.MissingParameterException("MutablePreference{userID=100, itemID=0, value=0.0}");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException40 = new org.plista.kornakapi.web.InvalidParameterException("label", (java.lang.Throwable) missingParameterException39);
        missingParameterException33.addSuppressed((java.lang.Throwable) invalidParameterException40);
        java.lang.Throwable[] throwableArray42 = missingParameterException33.getSuppressed();
        missingParameterException15.addSuppressed((java.lang.Throwable) missingParameterException33);
        org.plista.kornakapi.web.MissingParameterException missingParameterException48 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException49 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException48);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException50 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException48);
        java.lang.Throwable[] throwableArray51 = missingParameterException48.getSuppressed();
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException52 = new org.plista.kornakapi.web.InvalidParameterException("MutablePreference{userID=0, itemID=0, value=0.0}", (java.lang.Throwable) missingParameterException48);
        missingParameterException33.addSuppressed((java.lang.Throwable) invalidParameterException52);
        invalidParameterException13.addSuppressed((java.lang.Throwable) invalidParameterException52);
        java.lang.String str55 = invalidParameterException52.toString();
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org.plista.kornakapi.web.InvalidParameterException: MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str55, "org.plista.kornakapi.web.InvalidParameterException: MutablePreference{userID=0, itemID=0, value=0.0}");
    }

    @Test
    public void test04238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04238");
        org.plista.kornakapi.web.MissingParameterException missingParameterException2 = new org.plista.kornakapi.web.MissingParameterException("org.plista.kornakapi.web.InvalidParameterException: itemIDs");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException3 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.InvalidParameterException: file", (java.lang.Throwable) missingParameterException2);
        java.lang.String str4 = missingParameterException2.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: itemIDs" + "'", str4, "org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: itemIDs");
    }

    @Test
    public void test04239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04239");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration4 = components0.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList5 = null; // flaky: configuration4.getItembasedRecommenders();
        org.plista.kornakapi.core.storage.Storage storage6 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.KornakapiRecommender> strMap7 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.core.training.Trainer> strMap8 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler9 = null;
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener10 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener10.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener10.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener10.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler14 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener17 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler14, "label", (int) '#');
        delegatingPreferenceChangeListener10.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener17);
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.web.Components.init(configuration4, storage6, strMap7, strMap8, trainingScheduler9, (org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(trainingScheduler3);
// flaky:         org.junit.Assert.assertNotNull(configuration4);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList5);
    }

    @Test
    public void test04240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04240");
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet0 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        java.lang.String str1 = recommendServlet0.getServletInfo();
        recommendServlet0.init();
        recommendServlet0.destroy();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet4 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet4.init();
        setPreferenceServlet4.init();
        java.lang.String str7 = setPreferenceServlet4.getServletInfo();
        setPreferenceServlet4.init();
        setPreferenceServlet4.destroy();
        recommendServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet4);
        // The following exception was thrown during execution in test generation
        try {
            setPreferenceServlet4.log("MutablePreference{userID=0, itemID=0, value=35.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test04241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04241");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = components0.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler4 = components0.scheduler();
        org.plista.kornakapi.core.storage.Storage storage5 = components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration6 = components0.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage7 = components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration8 = components0.getConfiguration();
// flaky:         configuration8.setModelDirectory("org.plista.kornakapi.web.InvalidParameterException: recommender");
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(trainingScheduler3);
        org.junit.Assert.assertNull(trainingScheduler4);
        org.junit.Assert.assertNull(storage5);
// flaky:         org.junit.Assert.assertNotNull(configuration6);
        org.junit.Assert.assertNull(storage7);
// flaky:         org.junit.Assert.assertNotNull(configuration8);
    }

    @Test
    public void test04242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04242");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet1 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str2 = batchDeleteCandidatesServlet1.getServletInfo();
        java.lang.String str3 = batchDeleteCandidatesServlet1.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet4 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet5 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet6 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet5.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        setPreferenceServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet9 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet4.init((javax.servlet.ServletConfig) recommendServlet9);
        batchDeleteCandidatesServlet1.init((javax.servlet.ServletConfig) setPreferenceServlet4);
        batchDeleteCandidatesServlet1.destroy();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet1);
        javax.servlet.ServletConfig servletConfig14 = batchDeleteCandidatesServlet0.getServletConfig();
        javax.servlet.ServletRequest servletRequest15 = null;
        javax.servlet.ServletResponse servletResponse16 = null;
        // The following exception was thrown during execution in test generation
        try {
            batchDeleteCandidatesServlet0.service(servletRequest15, servletResponse16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(servletConfig14);
    }

    @Test
    public void test04243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04243");
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.core.config.Configuration configuration1 = org.plista.kornakapi.core.config.Configuration.fromXML("MutablePreference{userID=52, itemID=32, value=-1.0}");
            org.junit.Assert.fail("Expected exception of type com.thoughtworks.xstream.io.StreamException; message:  : only whitespace content allowed before start tag and not M (position: START_DOCUMENT seen M... @1:1) ");
        } catch (com.thoughtworks.xstream.io.StreamException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04244");
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener0 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener0.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener2 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener0.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener2);
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler7 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener10 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler7, "label", (int) ' ');
        delegatingPreferenceChangeListener2.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener10);
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
    }

    @Test
    public void test04245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04245");
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet0.init();
        java.lang.String str2 = batchAddCandidatesServlet0.getServletInfo();
        batchAddCandidatesServlet0.init();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet4 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet5 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet4.init((javax.servlet.ServletConfig) batchSetPreferencesServlet5);
        javax.servlet.ServletConfig servletConfig7 = batchSetPreferencesServlet5.getServletConfig();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet8 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet8.init();
        setPreferenceServlet8.init();
        setPreferenceServlet8.destroy();
        setPreferenceServlet8.destroy();
        batchSetPreferencesServlet5.init((javax.servlet.ServletConfig) setPreferenceServlet8);
        java.lang.String str14 = setPreferenceServlet8.getServletInfo();
        batchAddCandidatesServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet8);
        java.lang.String str16 = setPreferenceServlet8.getServletInfo();
        java.lang.String str17 = setPreferenceServlet8.getServletInfo();
        javax.servlet.ServletConfig servletConfig18 = setPreferenceServlet8.getServletConfig();
        java.lang.String str19 = setPreferenceServlet8.getServletInfo();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = setPreferenceServlet8.getInitParameter("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(servletConfig7);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(servletConfig18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test04246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04246");
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration0 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str1 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str4 = storageConfiguration0.getJdbcUrl();
        java.lang.String str5 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str6 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str7 = storageConfiguration0.getPassword();
        java.lang.String str8 = storageConfiguration0.getUsername();
        storageConfiguration0.setJdbcDriverClass("file");
        storageConfiguration0.setJdbcUrl("MutablePreference{userID=0, itemID=0, value=100.0}");
        java.lang.String str13 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setJdbcDriverClass("");
        storageConfiguration0.setJdbcUrl("org.plista.kornakapi.web.MissingParameterException: file");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str8, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "file" + "'", str13, "file");
    }

    @Test
    public void test04247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04247");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList2 = null; // flaky: configuration1.getFactorizationbasedRecommenders();
        java.lang.String str3 = null; // flaky: configuration1.getModelDirectory();
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig4 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double5 = factorizationbasedRecommenderConfig4.getAlpha();
        double double6 = factorizationbasedRecommenderConfig4.getLambda();
        int int7 = factorizationbasedRecommenderConfig4.getNumberOfFeatures();
        factorizationbasedRecommenderConfig4.setUsesImplicitFeedback(false);
        int int10 = factorizationbasedRecommenderConfig4.getNumberOfFeatures();
        factorizationbasedRecommenderConfig4.setLambda((double) 0);
        factorizationbasedRecommenderConfig4.setName("userID");
// flaky:         configuration1.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig4);
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer16 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig4);
        java.io.File file17 = null;
        org.plista.kornakapi.core.storage.Storage storage18 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender19 = null;
        // The following exception was thrown during execution in test generation
        try {
            factorizationbasedInMemoryTrainer16.train(file17, storage18, recommender19, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.plista.kornakapi.web.InvalidParameterException: recommender" + "'", str3, "org.plista.kornakapi.web.InvalidParameterException: recommender");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test04248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04248");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer2 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(false);
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) '#');
        double double7 = factorizationbasedRecommenderConfig0.getLambda();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer8 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(false);
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer11 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        factorizationbasedRecommenderConfig0.setAlpha((double) 52.0f);
        int int14 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test04249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04249");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setNumProcessorsForTraining((int) (short) 100);
        java.lang.String str3 = configuration0.getModelDirectory();
        configuration0.setNumProcessorsForTraining((int) (byte) 100);
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig6 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double7 = factorizationbasedRecommenderConfig6.getAlpha();
        configuration0.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig6);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration9 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str10 = storageConfiguration9.getUsername();
        java.lang.String str11 = storageConfiguration9.getJdbcDriverClass();
        java.lang.String str12 = storageConfiguration9.getPassword();
        storageConfiguration9.setJdbcUrl("file");
        configuration0.setStorageConfiguration(storageConfiguration9);
        org.plista.kornakapi.web.Components components16 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration17 = components16.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList18 = null; // flaky: configuration17.getFactorizationbasedRecommenders();
        java.lang.String str19 = null; // flaky: configuration17.getModelDirectory();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList20 = null; // flaky: configuration17.getItembasedRecommenders();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig21 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig21.setName("recommender");
// flaky:         configuration17.addItembasedRecommender(itembasedRecommenderConfig21);
        configuration0.addItembasedRecommender(itembasedRecommenderConfig21);
        org.plista.kornakapi.core.storage.Storage storage26 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.KornakapiRecommender> strMap27 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.core.training.Trainer> strMap28 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler29 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler30 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener33 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler30, "MutablePreference{userID=100, itemID=35, value=-1.0}", (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.web.Components.init(configuration0, storage26, strMap27, strMap28, trainingScheduler29, (org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(components16);
// flaky:         org.junit.Assert.assertNotNull(configuration17);
// flaky:         org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.plista.kornakapi.web.InvalidParameterException: recommender" + "'", str19, "org.plista.kornakapi.web.InvalidParameterException: recommender");
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList20);
    }

    @Test
    public void test04250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04250");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        addCandidateServlet0.init();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = addCandidateServlet0.getServletName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04251");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet1 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str2 = batchDeleteCandidatesServlet1.getServletInfo();
        java.lang.String str3 = batchDeleteCandidatesServlet1.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet4 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet5 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet6 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet5.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        setPreferenceServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet9 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet4.init((javax.servlet.ServletConfig) recommendServlet9);
        batchDeleteCandidatesServlet1.init((javax.servlet.ServletConfig) setPreferenceServlet4);
        batchDeleteCandidatesServlet1.destroy();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet1);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet14 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str15 = batchDeleteCandidatesServlet14.getServletInfo();
        batchDeleteCandidatesServlet14.destroy();
        javax.servlet.ServletConfig servletConfig17 = batchDeleteCandidatesServlet14.getServletConfig();
        batchDeleteCandidatesServlet0.init(servletConfig17);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet19 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str20 = batchDeleteCandidatesServlet19.getServletInfo();
        java.lang.String str21 = batchDeleteCandidatesServlet19.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet22 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet23 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet24 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet23.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet24);
        setPreferenceServlet22.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet24);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet27 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet22.init((javax.servlet.ServletConfig) recommendServlet27);
        batchDeleteCandidatesServlet19.init((javax.servlet.ServletConfig) setPreferenceServlet22);
        batchDeleteCandidatesServlet19.destroy();
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet31 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str32 = trainServlet31.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet33 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet33.destroy();
        javax.servlet.ServletConfig servletConfig35 = deleteCandidateServlet33.getServletConfig();
        deleteCandidateServlet33.destroy();
        trainServlet31.init((javax.servlet.ServletConfig) deleteCandidateServlet33);
        javax.servlet.ServletConfig servletConfig38 = deleteCandidateServlet33.getServletConfig();
        batchDeleteCandidatesServlet19.init((javax.servlet.ServletConfig) deleteCandidateServlet33);
        deleteCandidateServlet33.init();
        javax.servlet.ServletConfig servletConfig41 = deleteCandidateServlet33.getServletConfig();
        deleteCandidateServlet33.init();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) deleteCandidateServlet33);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration44 = batchDeleteCandidatesServlet0.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(servletConfig17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(servletConfig35);
        org.junit.Assert.assertNull(servletConfig38);
        org.junit.Assert.assertNull(servletConfig41);
    }

    @Test
    public void test04252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04252");
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet0 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet1);
        javax.servlet.ServletConfig servletConfig3 = batchSetPreferencesServlet0.getServletConfig();
        javax.servlet.ServletConfig servletConfig4 = batchSetPreferencesServlet0.getServletConfig();
        java.lang.String str5 = batchSetPreferencesServlet0.getServletInfo();
        javax.servlet.ServletConfig servletConfig6 = batchSetPreferencesServlet0.getServletConfig();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = batchSetPreferencesServlet0.getServletName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(servletConfig3);
        org.junit.Assert.assertNotNull(servletConfig4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(servletConfig6);
    }

    @Test
    public void test04253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04253");
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet0 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet1 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet1);
        recommendServlet0.destroy();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet4 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet5 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet4.init((javax.servlet.ServletConfig) batchSetPreferencesServlet5);
        recommendServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = recommendServlet0.getServletName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04254");
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet0 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet1 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet2 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet1.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet2);
        setPreferenceServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet2);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet5 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet0.init((javax.servlet.ServletConfig) recommendServlet5);
        java.lang.String str7 = setPreferenceServlet0.getServletInfo();
        setPreferenceServlet0.init();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration9 = setPreferenceServlet0.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test04255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04255");
        org.plista.kornakapi.web.MissingParameterException missingParameterException1 = new org.plista.kornakapi.web.MissingParameterException("MutablePreference{userID=0, itemID=10000, value=0.0}");
        java.lang.String str2 = missingParameterException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.plista.kornakapi.web.MissingParameterException: MutablePreference{userID=0, itemID=10000, value=0.0}" + "'", str2, "org.plista.kornakapi.web.MissingParameterException: MutablePreference{userID=0, itemID=10000, value=0.0}");
    }

    @Test
    public void test04256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04256");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 0);
        boolean boolean8 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        int int9 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setRetrainCronExpression("org.plista.kornakapi.web.InvalidParameterException: howMany");
        factorizationbasedRecommenderConfig0.setNumberOfFeatures((int) (byte) 10);
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer14 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        java.io.File file15 = null;
        org.plista.kornakapi.core.storage.Storage storage16 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender17 = null;
        // The following exception was thrown during execution in test generation
        try {
            factorizationbasedInMemoryTrainer14.train(file15, storage16, recommender17, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test04257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04257");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration4 = components0.getConfiguration();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig5 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        int int6 = itembasedRecommenderConfig5.getSimilarItemsPerItem();
// flaky:         configuration4.addItembasedRecommender(itembasedRecommenderConfig5);
        itembasedRecommenderConfig5.setSimilarityClass("MutablePreference{userID=0, itemID=0, value=0.0}");
        java.lang.String str10 = itembasedRecommenderConfig5.getName();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer11 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig5);
        java.lang.String str12 = itembasedRecommenderConfig5.getSimilarityClass();
        itembasedRecommenderConfig5.setRetrainCronExpression("MutablePreference{userID=0, itemID=0, value=1.0}");
        java.lang.String str15 = itembasedRecommenderConfig5.getRetrainCronExpression();
        itembasedRecommenderConfig5.setSimilarityClass("");
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(trainingScheduler3);
// flaky:         org.junit.Assert.assertNotNull(configuration4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str12, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MutablePreference{userID=0, itemID=0, value=1.0}" + "'", str15, "MutablePreference{userID=0, itemID=0, value=1.0}");
    }

    @Test
    public void test04258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04258");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        boolean boolean3 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer4 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setAlpha(100.0d);
        int int8 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer9 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        java.io.File file10 = null;
        org.plista.kornakapi.core.storage.Storage storage11 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender12 = null;
        // The following exception was thrown during execution in test generation
        try {
            factorizationbasedInMemoryTrainer9.train(file10, storage11, recommender12, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test04259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04259");
        org.plista.kornakapi.core.MutablePreference mutablePreference0 = new org.plista.kornakapi.core.MutablePreference();
        java.lang.String str1 = mutablePreference0.toString();
        long long2 = mutablePreference0.getItemID();
        mutablePreference0.set((long) (short) -1, (long) (byte) 10, (float) (short) 10);
        long long7 = mutablePreference0.getUserID();
        long long8 = mutablePreference0.getUserID();
        long long9 = mutablePreference0.getItemID();
        long long10 = mutablePreference0.getUserID();
        mutablePreference0.set(0L, (long) (short) 10, (float) 32);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str1, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test04260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04260");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setNumProcessorsForTraining((int) (short) 100);
        java.lang.String str3 = configuration0.getModelDirectory();
        configuration0.setModelDirectory("org.plista.kornakapi.web.MissingParameterException: itemID");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig6 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double7 = factorizationbasedRecommenderConfig6.getAlpha();
        int int8 = factorizationbasedRecommenderConfig6.getNumberOfFeatures();
        factorizationbasedRecommenderConfig6.setUsesImplicitFeedback(true);
        double double11 = factorizationbasedRecommenderConfig6.getLambda();
        configuration0.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig6);
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig13 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double14 = factorizationbasedRecommenderConfig13.getAlpha();
        double double15 = factorizationbasedRecommenderConfig13.getLambda();
        int int16 = factorizationbasedRecommenderConfig13.getNumberOfFeatures();
        factorizationbasedRecommenderConfig13.setUsesImplicitFeedback(true);
        double double19 = factorizationbasedRecommenderConfig13.getAlpha();
        java.lang.String str20 = factorizationbasedRecommenderConfig13.getRetrainCronExpression();
        int int21 = factorizationbasedRecommenderConfig13.getRetrainAfterPreferenceChanges();
        int int22 = factorizationbasedRecommenderConfig13.getNumberOfIterations();
        factorizationbasedRecommenderConfig13.setNumberOfFeatures((int) '#');
        double double25 = factorizationbasedRecommenderConfig13.getLambda();
        boolean boolean26 = factorizationbasedRecommenderConfig13.isUsesImplicitFeedback();
        configuration0.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig13);
        factorizationbasedRecommenderConfig13.setLambda((double) 1);
        int int30 = factorizationbasedRecommenderConfig13.getNumberOfIterations();
        factorizationbasedRecommenderConfig13.setRetrainCronExpression("org.plista.kornakapi.web.MissingParameterException: itemID");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test04261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04261");
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet0.init();
        java.lang.String str2 = batchAddCandidatesServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet3 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str4 = batchDeleteCandidatesServlet3.getServletInfo();
        java.lang.String str5 = batchDeleteCandidatesServlet3.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet6 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet7 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet8 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet7.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet8);
        setPreferenceServlet6.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet8);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet11 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet6.init((javax.servlet.ServletConfig) recommendServlet11);
        batchDeleteCandidatesServlet3.init((javax.servlet.ServletConfig) setPreferenceServlet6);
        batchDeleteCandidatesServlet3.destroy();
        batchAddCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet3);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet16 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str17 = batchDeleteCandidatesServlet16.getServletInfo();
        java.lang.String str18 = batchDeleteCandidatesServlet16.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet19 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet20 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet21 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet20.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet21);
        setPreferenceServlet19.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet21);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet24 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet19.init((javax.servlet.ServletConfig) recommendServlet24);
        batchDeleteCandidatesServlet16.init((javax.servlet.ServletConfig) setPreferenceServlet19);
        batchDeleteCandidatesServlet16.destroy();
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet28 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str29 = trainServlet28.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet30 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet30.destroy();
        javax.servlet.ServletConfig servletConfig32 = deleteCandidateServlet30.getServletConfig();
        deleteCandidateServlet30.destroy();
        trainServlet28.init((javax.servlet.ServletConfig) deleteCandidateServlet30);
        javax.servlet.ServletConfig servletConfig35 = deleteCandidateServlet30.getServletConfig();
        batchDeleteCandidatesServlet16.init((javax.servlet.ServletConfig) deleteCandidateServlet30);
        java.lang.String str37 = deleteCandidateServlet30.getServletInfo();
        deleteCandidateServlet30.destroy();
        batchDeleteCandidatesServlet3.init((javax.servlet.ServletConfig) deleteCandidateServlet30);
        javax.servlet.ServletConfig servletConfig40 = deleteCandidateServlet30.getServletConfig();
        deleteCandidateServlet30.destroy();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration42 = deleteCandidateServlet30.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(servletConfig32);
        org.junit.Assert.assertNull(servletConfig35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(servletConfig40);
    }

    @Test
    public void test04262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04262");
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener3 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler0, "org.plista.kornakapi.web.MissingParameterException: itemIDs", (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04263");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 0);
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges((int) (byte) 100);
        double double10 = factorizationbasedRecommenderConfig0.getLambda();
        factorizationbasedRecommenderConfig0.setAlpha((double) (short) 10);
        factorizationbasedRecommenderConfig0.setLambda(97.0d);
        int int15 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        double double16 = factorizationbasedRecommenderConfig0.getAlpha();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(false);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
    }

    @Test
    public void test04264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04264");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((-1L), (double) 0L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer5 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double8 = fixedCandidatesIDRescorer1.rescore((long) 1, (double) 10);
        double double11 = fixedCandidatesIDRescorer1.rescore((long) ' ', (double) 35);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer12 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer13 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.apache.mahout.common.LongPair longPair14 = null;
        double double16 = filteringLongPairRescorer13.rescore(longPair14, (double) 100.0f);
        org.apache.mahout.common.LongPair longPair17 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = filteringLongPairRescorer13.isFiltered(longPair17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
    }

    @Test
    public void test04265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04265");
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet0 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet1 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet2 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet1.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet2);
        setPreferenceServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet2);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet5 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet0.init((javax.servlet.ServletConfig) recommendServlet5);
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet7 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet8 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet9 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet8.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet9);
        setPreferenceServlet7.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet9);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet12 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet7.init((javax.servlet.ServletConfig) recommendServlet12);
        recommendServlet12.destroy();
        javax.servlet.ServletConfig servletConfig15 = recommendServlet12.getServletConfig();
        setPreferenceServlet0.init(servletConfig15);
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet17 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet17.init();
        java.lang.String str19 = batchAddCandidatesServlet17.getServletInfo();
        batchAddCandidatesServlet17.init();
        java.lang.String str21 = batchAddCandidatesServlet17.getServletInfo();
        batchAddCandidatesServlet17.destroy();
        setPreferenceServlet0.init((javax.servlet.ServletConfig) batchAddCandidatesServlet17);
        javax.servlet.ServletRequest servletRequest24 = null;
        javax.servlet.ServletResponse servletResponse25 = null;
        // The following exception was thrown during execution in test generation
        try {
            batchAddCandidatesServlet17.service(servletRequest24, servletResponse25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test04266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04266");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        javax.servlet.ServletConfig servletConfig1 = batchDeleteCandidatesServlet0.getServletConfig();
        // The following exception was thrown during execution in test generation
        try {
            javax.servlet.ServletContext servletContext2 = batchDeleteCandidatesServlet0.getServletContext();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig1);
    }

    @Test
    public void test04267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04267");
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler0 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener3 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler0, "MutablePreference{userID=10, itemID=100, value=10.0}", 10);
    }

    @Test
    public void test04268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04268");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((-1L), (double) 0L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer5 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double8 = fixedCandidatesIDRescorer1.rescore((long) (byte) 10, (double) (byte) 10);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer9 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.apache.mahout.common.LongPair longPair10 = null;
        double double12 = filteringLongPairRescorer9.rescore(longPair10, 0.0d);
        org.apache.mahout.common.LongPair longPair13 = null;
        double double15 = filteringLongPairRescorer9.rescore(longPair13, 0.0d);
        org.apache.mahout.common.LongPair longPair16 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = filteringLongPairRescorer9.isFiltered(longPair16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test04269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04269");
        org.plista.kornakapi.core.MutablePreference mutablePreference0 = new org.plista.kornakapi.core.MutablePreference();
        long long1 = mutablePreference0.getItemID();
        mutablePreference0.set(100L, (long) 10000, (float) (byte) -1);
        float float6 = mutablePreference0.getValue();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-1.0f) + "'", float6 == (-1.0f));
    }

    @Test
    public void test04270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04270");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig0.setSimilarityClass("");
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer3 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        itembasedRecommenderConfig0.setRetrainCronExpression("");
        itembasedRecommenderConfig0.setSimilarItemsPerItem(10);
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer8 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        itembasedRecommenderConfig0.setSimilarityClass("org.plista.kornakapi.web.InvalidParameterException: file");
        itembasedRecommenderConfig0.setRetrainAfterPreferenceChanges(32);
        itembasedRecommenderConfig0.setSimilarItemsPerItem((int) (byte) 0);
        itembasedRecommenderConfig0.setSimilarityClass("");
    }

    @Test
    public void test04271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04271");
        org.plista.kornakapi.core.MutableCandidate mutableCandidate0 = new org.plista.kornakapi.core.MutableCandidate();
        long long1 = mutableCandidate0.getItemID();
        long long2 = mutableCandidate0.getItemID();
        long long3 = mutableCandidate0.getItemID();
        long long4 = mutableCandidate0.getItemID();
        long long5 = mutableCandidate0.getItemID();
        java.lang.String str6 = mutableCandidate0.getLabel();
        java.lang.String str7 = mutableCandidate0.getLabel();
        mutableCandidate0.set("MutablePreference{userID=-1, itemID=10, value=10.0}", 1L);
        mutableCandidate0.set("file", (long) (-1));
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test04272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04272");
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet0 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet0.destroy();
        javax.servlet.ServletConfig servletConfig2 = setPreferenceServlet0.getServletConfig();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = setPreferenceServlet0.getInitParameter("org.plista.kornakapi.web.InvalidParameterException: MutablePreference{userID=0, itemID=0, value=32.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig2);
    }

    @Test
    public void test04273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04273");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str1 = batchDeleteCandidatesServlet0.getServletInfo();
        batchDeleteCandidatesServlet0.init();
        javax.servlet.ServletConfig servletConfig3 = batchDeleteCandidatesServlet0.getServletConfig();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet4 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet4.init();
        setPreferenceServlet4.init();
        setPreferenceServlet4.destroy();
        javax.servlet.ServletConfig servletConfig8 = setPreferenceServlet4.getServletConfig();
        java.lang.String str9 = setPreferenceServlet4.getServletInfo();
        setPreferenceServlet4.destroy();
        setPreferenceServlet4.destroy();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet4);
        org.plista.kornakapi.web.MissingParameterException missingParameterException15 = new org.plista.kornakapi.web.MissingParameterException("org.plista.kornakapi.web.InvalidParameterException: file");
        java.lang.Throwable[] throwableArray16 = missingParameterException15.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            setPreferenceServlet4.log("org.plista.kornakapi.web.MissingParameterException: MutablePreference{userID=0, itemID=10000, value=0.0}", (java.lang.Throwable) missingParameterException15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNull(servletConfig3);
        org.junit.Assert.assertNull(servletConfig8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test04274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04274");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        int int2 = 0; // flaky: configuration1.getNumProcessorsForTraining();
        org.plista.kornakapi.core.config.Configuration configuration3 = new org.plista.kornakapi.core.config.Configuration();
        configuration3.setNumProcessorsForTraining((int) (short) 100);
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig6 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig6.setSimilarityClass("");
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer9 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig6);
        itembasedRecommenderConfig6.setRetrainCronExpression("");
        itembasedRecommenderConfig6.setSimilarItemsPerItem(10);
        java.lang.String str14 = itembasedRecommenderConfig6.getName();
        configuration3.addItembasedRecommender(itembasedRecommenderConfig6);
// flaky:         configuration1.addItembasedRecommender(itembasedRecommenderConfig6);
        java.lang.String str17 = itembasedRecommenderConfig6.getName();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer18 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig6);
        java.io.File file19 = null;
        org.plista.kornakapi.core.storage.Storage storage20 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender21 = null;
        // The following exception was thrown during execution in test generation
        try {
            multithreadedItembasedInMemoryTrainer18.train(file19, storage20, recommender21, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test04275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04275");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 0);
        boolean boolean8 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        java.lang.String str9 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        boolean boolean10 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer11 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        java.io.File file12 = null;
        org.plista.kornakapi.core.storage.Storage storage13 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender14 = null;
        // The following exception was thrown during execution in test generation
        try {
            factorizationbasedInMemoryTrainer11.train(file12, storage13, recommender14, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04276");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str1 = batchDeleteCandidatesServlet0.getServletInfo();
        batchDeleteCandidatesServlet0.init();
        java.lang.String str3 = batchDeleteCandidatesServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet4 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet4.init();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchAddCandidatesServlet4);
        batchDeleteCandidatesServlet0.destroy();
        batchDeleteCandidatesServlet0.init();
        javax.servlet.ServletConfig servletConfig9 = batchDeleteCandidatesServlet0.getServletConfig();
        javax.servlet.ServletRequest servletRequest10 = null;
        javax.servlet.ServletResponse servletResponse11 = null;
        // The following exception was thrown during execution in test generation
        try {
            batchDeleteCandidatesServlet0.service(servletRequest10, servletResponse11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(servletConfig9);
    }

    @Test
    public void test04277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04277");
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.core.config.Configuration configuration1 = org.plista.kornakapi.core.config.Configuration.fromXML("org.plista.kornakapi.web.InvalidParameterException: MutablePreference{userID=100, itemID=0, value=100.0}");
            org.junit.Assert.fail("Expected exception of type com.thoughtworks.xstream.io.StreamException; message:  : only whitespace content allowed before start tag and not o (position: START_DOCUMENT seen o... @1:1) ");
        } catch (com.thoughtworks.xstream.io.StreamException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04278");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        javax.servlet.ServletConfig servletConfig4 = batchSetPreferencesServlet1.getServletConfig();
        addCandidateServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet1);
        batchSetPreferencesServlet1.destroy();
        java.lang.String str7 = batchSetPreferencesServlet1.getServletInfo();
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet8 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str9 = trainServlet8.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet10 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet10.destroy();
        javax.servlet.ServletConfig servletConfig12 = deleteCandidateServlet10.getServletConfig();
        deleteCandidateServlet10.destroy();
        trainServlet8.init((javax.servlet.ServletConfig) deleteCandidateServlet10);
        javax.servlet.ServletConfig servletConfig15 = deleteCandidateServlet10.getServletConfig();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) deleteCandidateServlet10);
        deleteCandidateServlet10.init();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet18 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet19 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet18.init((javax.servlet.ServletConfig) batchSetPreferencesServlet19);
        javax.servlet.ServletConfig servletConfig21 = batchSetPreferencesServlet18.getServletConfig();
        batchSetPreferencesServlet18.destroy();
        batchSetPreferencesServlet18.init();
        deleteCandidateServlet10.init((javax.servlet.ServletConfig) batchSetPreferencesServlet18);
        java.lang.String str25 = batchSetPreferencesServlet18.getServletInfo();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = batchSetPreferencesServlet18.getServletName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(servletConfig4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(servletConfig12);
        org.junit.Assert.assertNull(servletConfig15);
        org.junit.Assert.assertNotNull(servletConfig21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test04279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04279");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList1 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration2 = configuration0.getStorageConfiguration();
        configuration0.setNumProcessorsForTraining((int) (short) 0);
        java.lang.String str5 = configuration0.getModelDirectory();
        org.plista.kornakapi.core.config.Configuration configuration6 = new org.plista.kornakapi.core.config.Configuration();
        configuration6.setNumProcessorsForTraining((int) (short) 100);
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig9 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double10 = factorizationbasedRecommenderConfig9.getAlpha();
        double double11 = factorizationbasedRecommenderConfig9.getLambda();
        configuration6.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig9);
        java.lang.String str13 = configuration6.getModelDirectory();
        int int14 = configuration6.getNumProcessorsForTraining();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList15 = configuration6.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration16 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str17 = storageConfiguration16.getJdbcDriverClass();
        storageConfiguration16.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str20 = storageConfiguration16.getJdbcUrl();
        java.lang.String str21 = storageConfiguration16.getJdbcUrl();
        storageConfiguration16.setJdbcUrl("label");
        configuration6.setStorageConfiguration(storageConfiguration16);
        java.lang.String str25 = storageConfiguration16.getPassword();
        storageConfiguration16.setJdbcDriverClass("org.plista.kornakapi.web.InvalidParameterException: ");
        configuration0.setStorageConfiguration(storageConfiguration16);
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig29 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double30 = factorizationbasedRecommenderConfig29.getAlpha();
        double double31 = factorizationbasedRecommenderConfig29.getLambda();
        int int32 = factorizationbasedRecommenderConfig29.getNumberOfFeatures();
        java.lang.String str33 = factorizationbasedRecommenderConfig29.getRetrainCronExpression();
        int int34 = factorizationbasedRecommenderConfig29.getNumberOfFeatures();
        factorizationbasedRecommenderConfig29.setNumberOfIterations((int) (short) 0);
        boolean boolean37 = factorizationbasedRecommenderConfig29.isUsesImplicitFeedback();
        java.lang.String str38 = factorizationbasedRecommenderConfig29.getRetrainCronExpression();
        double double39 = factorizationbasedRecommenderConfig29.getLambda();
        factorizationbasedRecommenderConfig29.setLambda((double) (byte) -1);
        factorizationbasedRecommenderConfig29.setNumberOfIterations((int) (byte) 100);
        factorizationbasedRecommenderConfig29.setLambda((double) 100L);
        int int46 = factorizationbasedRecommenderConfig29.getRetrainAfterPreferenceChanges();
        configuration0.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig29);
        factorizationbasedRecommenderConfig29.setName("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        factorizationbasedRecommenderConfig29.setNumberOfFeatures((int) (short) 100);
        factorizationbasedRecommenderConfig29.setRetrainAfterPreferenceChanges((int) (byte) 1);
        factorizationbasedRecommenderConfig29.setNumberOfFeatures((int) (short) 0);
        int int56 = factorizationbasedRecommenderConfig29.getRetrainAfterPreferenceChanges();
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList1);
        org.junit.Assert.assertNull(storageConfiguration2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test04280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04280");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        addCandidateServlet0.destroy();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet2 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet3 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet4 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet3.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet4);
        setPreferenceServlet2.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet4);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet7 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet2.init((javax.servlet.ServletConfig) recommendServlet7);
        recommendServlet7.init();
        addCandidateServlet0.init((javax.servlet.ServletConfig) recommendServlet7);
        java.lang.String str11 = addCandidateServlet0.getServletInfo();
        addCandidateServlet0.init();
        javax.servlet.ServletConfig servletConfig13 = addCandidateServlet0.getServletConfig();
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet14 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet15 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet16 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet15.init((javax.servlet.ServletConfig) batchSetPreferencesServlet16);
        javax.servlet.ServletConfig servletConfig18 = batchSetPreferencesServlet15.getServletConfig();
        addCandidateServlet14.init((javax.servlet.ServletConfig) batchSetPreferencesServlet15);
        batchSetPreferencesServlet15.init();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet21 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        java.lang.String str22 = recommendServlet21.getServletInfo();
        javax.servlet.ServletConfig servletConfig23 = recommendServlet21.getServletConfig();
        java.lang.String str24 = recommendServlet21.getServletInfo();
        batchSetPreferencesServlet15.init((javax.servlet.ServletConfig) recommendServlet21);
        addCandidateServlet0.init((javax.servlet.ServletConfig) recommendServlet21);
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet27 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet27.init();
        setPreferenceServlet27.init();
        setPreferenceServlet27.destroy();
        javax.servlet.ServletConfig servletConfig31 = setPreferenceServlet27.getServletConfig();
        java.lang.String str32 = setPreferenceServlet27.getServletInfo();
        setPreferenceServlet27.destroy();
        setPreferenceServlet27.destroy();
        addCandidateServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet27);
        // The following exception was thrown during execution in test generation
        try {
            addCandidateServlet0.log("file");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(servletConfig13);
        org.junit.Assert.assertNotNull(servletConfig18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(servletConfig23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(servletConfig31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test04281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04281");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        factorizationbasedRecommenderConfig0.setNumberOfFeatures((int) (byte) 1);
        int int8 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) '4');
        factorizationbasedRecommenderConfig0.setLambda((double) (-1));
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test04282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04282");
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet0 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        recommendServlet0.destroy();
        java.lang.Class<?> wildcardClass2 = recommendServlet0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test04283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04283");
        org.plista.kornakapi.web.MissingParameterException missingParameterException2 = new org.plista.kornakapi.web.MissingParameterException("userID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException3 = new org.plista.kornakapi.web.InvalidParameterException("", (java.lang.Throwable) missingParameterException2);
        java.lang.String str4 = missingParameterException2.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.plista.kornakapi.web.MissingParameterException: userID" + "'", str4, "org.plista.kornakapi.web.MissingParameterException: userID");
    }

    @Test
    public void test04284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04284");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setNumProcessorsForTraining((int) (short) 100);
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig3 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig3.setSimilarityClass("");
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer6 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig3);
        itembasedRecommenderConfig3.setRetrainCronExpression("");
        itembasedRecommenderConfig3.setSimilarItemsPerItem(10);
        java.lang.String str11 = itembasedRecommenderConfig3.getName();
        configuration0.addItembasedRecommender(itembasedRecommenderConfig3);
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer13 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig3);
        itembasedRecommenderConfig3.setRetrainCronExpression("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        itembasedRecommenderConfig3.setSimilarItemsPerItem(0);
        java.lang.String str18 = itembasedRecommenderConfig3.getRetrainCronExpression();
        java.lang.String str19 = itembasedRecommenderConfig3.getRetrainCronExpression();
        java.lang.String str20 = itembasedRecommenderConfig3.getName();
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str18, "org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str19, "org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test04285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04285");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str1 = batchDeleteCandidatesServlet0.getServletInfo();
        batchDeleteCandidatesServlet0.init();
        javax.servlet.ServletConfig servletConfig3 = null;
        batchDeleteCandidatesServlet0.init(servletConfig3);
        javax.servlet.ServletConfig servletConfig5 = batchDeleteCandidatesServlet0.getServletConfig();
        batchDeleteCandidatesServlet0.init();
        javax.servlet.ServletConfig servletConfig7 = batchDeleteCandidatesServlet0.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet8 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet8.init();
        java.lang.String str10 = batchAddCandidatesServlet8.getServletInfo();
        javax.servlet.ServletConfig servletConfig11 = batchAddCandidatesServlet8.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet12 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str13 = batchDeleteCandidatesServlet12.getServletInfo();
        java.lang.String str14 = batchDeleteCandidatesServlet12.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet15 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet16 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet17 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet16.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet17);
        setPreferenceServlet15.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet17);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet20 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet15.init((javax.servlet.ServletConfig) recommendServlet20);
        batchDeleteCandidatesServlet12.init((javax.servlet.ServletConfig) setPreferenceServlet15);
        batchAddCandidatesServlet8.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet12);
        java.lang.String str24 = batchDeleteCandidatesServlet12.getServletInfo();
        java.lang.String str25 = batchDeleteCandidatesServlet12.getServletInfo();
        batchDeleteCandidatesServlet12.destroy();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration28 = batchDeleteCandidatesServlet0.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNull(servletConfig5);
        org.junit.Assert.assertNull(servletConfig7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(servletConfig11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test04286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04286");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        java.lang.String str5 = batchSetPreferencesServlet2.getServletInfo();
        batchSetPreferencesServlet2.init();
        // The following exception was thrown during execution in test generation
        try {
            javax.servlet.ServletContext servletContext7 = batchSetPreferencesServlet2.getServletContext();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test04287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04287");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler2 = components0.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration4 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration5 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration6 = components0.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage7 = components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration8 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration9 = components0.getConfiguration();
        org.plista.kornakapi.web.Components components10 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration11 = components10.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList12 = null; // flaky: configuration11.getFactorizationbasedRecommenders();
        java.lang.String str13 = null; // flaky: configuration11.getModelDirectory();
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig14 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double15 = factorizationbasedRecommenderConfig14.getAlpha();
        double double16 = factorizationbasedRecommenderConfig14.getLambda();
        int int17 = factorizationbasedRecommenderConfig14.getNumberOfFeatures();
        factorizationbasedRecommenderConfig14.setUsesImplicitFeedback(false);
        int int20 = factorizationbasedRecommenderConfig14.getNumberOfFeatures();
        factorizationbasedRecommenderConfig14.setLambda((double) 0);
        factorizationbasedRecommenderConfig14.setName("userID");
// flaky:         configuration11.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig14);
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer26 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig14);
// flaky:         configuration9.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig14);
        java.lang.String str28 = null; // flaky: configuration9.getModelDirectory();
        int int29 = 0; // flaky: configuration9.getNumProcessorsForTraining();
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
        org.junit.Assert.assertNull(trainingScheduler2);
        org.junit.Assert.assertNull(trainingScheduler3);
// flaky:         org.junit.Assert.assertNotNull(configuration4);
// flaky:         org.junit.Assert.assertNotNull(configuration5);
// flaky:         org.junit.Assert.assertNotNull(configuration6);
        org.junit.Assert.assertNull(storage7);
// flaky:         org.junit.Assert.assertNotNull(configuration8);
// flaky:         org.junit.Assert.assertNotNull(configuration9);
        org.junit.Assert.assertNotNull(components10);
// flaky:         org.junit.Assert.assertNotNull(configuration11);
// flaky:         org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: recommender" + "'", str13, "org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: recommender");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: recommender" + "'", str28, "org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: recommender");
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test04288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04288");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer2 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer3 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double6 = fixedCandidatesIDRescorer1.rescore((long) (byte) 1, (double) (byte) 100);
        double double9 = fixedCandidatesIDRescorer1.rescore((long) (short) 100, (double) '4');
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer10 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.apache.mahout.common.LongPair longPair11 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = filteringLongPairRescorer10.isFiltered(longPair11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    }

    @Test
    public void test04289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04289");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList1 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration2 = configuration0.getStorageConfiguration();
        configuration0.setNumProcessorsForTraining((int) (short) 0);
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList5 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig6 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig6.setSimilarityClass("");
        java.lang.String str9 = itembasedRecommenderConfig6.getName();
        java.lang.String str10 = itembasedRecommenderConfig6.getSimilarityClass();
        java.lang.String str11 = itembasedRecommenderConfig6.getSimilarityClass();
        int int12 = itembasedRecommenderConfig6.getSimilarItemsPerItem();
        itembasedRecommenderConfig6.setSimilarItemsPerItem((int) (byte) 1);
        java.lang.String str15 = itembasedRecommenderConfig6.getRetrainCronExpression();
        configuration0.addItembasedRecommender(itembasedRecommenderConfig6);
        itembasedRecommenderConfig6.setName("MutablePreference{userID=0, itemID=0, value=100.0}");
        itembasedRecommenderConfig6.setRetrainAfterPreferenceChanges(100);
        int int21 = itembasedRecommenderConfig6.getRetrainAfterPreferenceChanges();
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList1);
        org.junit.Assert.assertNull(storageConfiguration2);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
    }

    @Test
    public void test04290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04290");
        org.plista.kornakapi.core.MutablePreference mutablePreference0 = new org.plista.kornakapi.core.MutablePreference();
        java.lang.String str1 = mutablePreference0.toString();
        long long2 = mutablePreference0.getItemID();
        java.lang.String str3 = mutablePreference0.toString();
        float float4 = mutablePreference0.getValue();
        java.lang.String str5 = mutablePreference0.toString();
        mutablePreference0.set((long) (byte) 1, (long) 52, (float) (short) -1);
        long long10 = mutablePreference0.getItemID();
        long long11 = mutablePreference0.getUserID();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str1, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str3, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str5, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test04291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04291");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet1 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        addCandidateServlet1.destroy();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet3 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet4 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet3.init((javax.servlet.ServletConfig) batchSetPreferencesServlet4);
        addCandidateServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet3);
        addCandidateServlet0.init((javax.servlet.ServletConfig) addCandidateServlet1);
        javax.servlet.ServletConfig servletConfig8 = addCandidateServlet1.getServletConfig();
        javax.servlet.ServletRequest servletRequest9 = null;
        javax.servlet.ServletResponse servletResponse10 = null;
        // The following exception was thrown during execution in test generation
        try {
            addCandidateServlet1.service(servletRequest9, servletResponse10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(servletConfig8);
    }

    @Test
    public void test04292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04292");
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration0 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str1 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str4 = storageConfiguration0.getJdbcUrl();
        java.lang.String str5 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str6 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str7 = storageConfiguration0.getPassword();
        java.lang.String str8 = storageConfiguration0.getUsername();
        java.lang.String str9 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setJdbcDriverClass("itemID");
        storageConfiguration0.setJdbcUrl("recommender");
        java.lang.String str14 = storageConfiguration0.getPassword();
        java.lang.String str15 = storageConfiguration0.getPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str8, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test04293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04293");
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration0 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str1 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str4 = storageConfiguration0.getJdbcUrl();
        java.lang.String str5 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str6 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str7 = storageConfiguration0.getPassword();
        java.lang.String str8 = storageConfiguration0.getUsername();
        java.lang.String str9 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str10 = storageConfiguration0.getUsername();
        storageConfiguration0.setPassword("MutablePreference{userID=32, itemID=10, value=10.0}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str8, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str10, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
    }

    @Test
    public void test04294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04294");
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler0 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener3 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler0, "org.plista.kornakapi.web.InvalidParameterException: recommender", (int) (short) 10);
        inMemoryPreferenceChangeListener3.notifyOfPreferenceChange();
    }

    @Test
    public void test04295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04295");
        org.plista.kornakapi.web.MissingParameterException missingParameterException4 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException5 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException4);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException6 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException4);
        org.plista.kornakapi.web.MissingParameterException missingParameterException8 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException10 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException8.addSuppressed((java.lang.Throwable) missingParameterException10);
        invalidParameterException6.addSuppressed((java.lang.Throwable) missingParameterException10);
        java.lang.Throwable[] throwableArray13 = missingParameterException10.getSuppressed();
        org.plista.kornakapi.web.MissingParameterException missingParameterException16 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException17 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException16);
        org.plista.kornakapi.web.MissingParameterException missingParameterException21 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException22 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException21);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException23 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException21);
        org.plista.kornakapi.web.MissingParameterException missingParameterException25 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException27 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException25.addSuppressed((java.lang.Throwable) missingParameterException27);
        invalidParameterException23.addSuppressed((java.lang.Throwable) missingParameterException27);
        java.lang.Throwable[] throwableArray30 = missingParameterException27.getSuppressed();
        invalidParameterException17.addSuppressed((java.lang.Throwable) missingParameterException27);
        missingParameterException10.addSuppressed((java.lang.Throwable) invalidParameterException17);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException33 = new org.plista.kornakapi.web.InvalidParameterException("itemID", (java.lang.Throwable) missingParameterException10);
        org.plista.kornakapi.web.MissingParameterException missingParameterException40 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException41 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException40);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException42 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException40);
        org.plista.kornakapi.web.MissingParameterException missingParameterException44 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException46 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException44.addSuppressed((java.lang.Throwable) missingParameterException46);
        invalidParameterException42.addSuppressed((java.lang.Throwable) missingParameterException46);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException49 = new org.plista.kornakapi.web.InvalidParameterException("file", (java.lang.Throwable) invalidParameterException42);
        org.plista.kornakapi.web.MissingParameterException missingParameterException53 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException54 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException53);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException55 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException53);
        invalidParameterException49.addSuppressed((java.lang.Throwable) missingParameterException53);
        org.plista.kornakapi.web.MissingParameterException missingParameterException58 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException61 = new org.plista.kornakapi.web.MissingParameterException("MutablePreference{userID=100, itemID=0, value=0.0}");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException62 = new org.plista.kornakapi.web.InvalidParameterException("label", (java.lang.Throwable) missingParameterException61);
        missingParameterException58.addSuppressed((java.lang.Throwable) invalidParameterException62);
        invalidParameterException49.addSuppressed((java.lang.Throwable) missingParameterException58);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException65 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) invalidParameterException49);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException66 = new org.plista.kornakapi.web.InvalidParameterException("MutablePreference{userID=0, itemID=10000, value=0.0}", (java.lang.Throwable) invalidParameterException49);
        invalidParameterException33.addSuppressed((java.lang.Throwable) invalidParameterException49);
        java.lang.String str68 = invalidParameterException49.toString();
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "org.plista.kornakapi.web.InvalidParameterException: file" + "'", str68, "org.plista.kornakapi.web.InvalidParameterException: file");
    }

    @Test
    public void test04296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04296");
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration0 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str1 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str4 = storageConfiguration0.getJdbcUrl();
        java.lang.String str5 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str6 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str7 = storageConfiguration0.getPassword();
        java.lang.String str8 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str9 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str10 = storageConfiguration0.getJdbcUrl();
        java.lang.String str11 = storageConfiguration0.getUsername();
        storageConfiguration0.setJdbcDriverClass("batchSize");
        java.lang.String str14 = storageConfiguration0.getUsername();
        java.lang.String str15 = storageConfiguration0.getJdbcDriverClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str11, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str14, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "batchSize" + "'", str15, "batchSize");
    }

    @Test
    public void test04297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04297");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        java.lang.String str5 = batchSetPreferencesServlet2.getServletInfo();
        org.plista.kornakapi.web.MissingParameterException missingParameterException8 = new org.plista.kornakapi.web.MissingParameterException("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: MutablePreference{userID=0, itemID=0, value=100.0}");
        // The following exception was thrown during execution in test generation
        try {
            batchSetPreferencesServlet2.log("MutablePreference{userID=32, itemID=1, value=-1.0}", (java.lang.Throwable) missingParameterException8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test04298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04298");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer2 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double5 = fixedCandidatesIDRescorer1.rescore((long) (short) 1, (double) (byte) 100);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer6 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double9 = fixedCandidatesIDRescorer1.rescore((long) 97, (double) 32);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer10 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer11 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double14 = fixedCandidatesIDRescorer1.rescore((long) ' ', (double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = fixedCandidatesIDRescorer1.isFiltered((long) 97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 32.0d + "'", double9 == 32.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
    }

    @Test
    public void test04299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04299");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str1 = itembasedRecommenderConfig0.getRetrainCronExpression();
        int int2 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        java.lang.String str3 = itembasedRecommenderConfig0.getSimilarityClass();
        itembasedRecommenderConfig0.setRetrainAfterPreferenceChanges(0);
        int int6 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        itembasedRecommenderConfig0.setRetrainCronExpression("");
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer9 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        java.io.File file10 = null;
        org.plista.kornakapi.core.storage.Storage storage11 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender12 = null;
        // The following exception was thrown during execution in test generation
        try {
            multithreadedItembasedInMemoryTrainer9.train(file10, storage11, recommender12, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test04300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04300");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations(0);
        factorizationbasedRecommenderConfig0.setNumberOfFeatures((int) (short) 100);
        factorizationbasedRecommenderConfig0.setLambda((double) (short) 1);
        boolean boolean10 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        double double11 = factorizationbasedRecommenderConfig0.getLambda();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test04301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04301");
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener3 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler0, "MutablePreference{userID=0, itemID=32, value=-1.0}", 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04302");
        org.plista.kornakapi.core.MutablePreference mutablePreference0 = new org.plista.kornakapi.core.MutablePreference();
        long long1 = mutablePreference0.getItemID();
        java.lang.String str2 = mutablePreference0.toString();
        mutablePreference0.setValue((float) (short) 10);
        float float5 = mutablePreference0.getValue();
        float float6 = mutablePreference0.getValue();
        float float7 = mutablePreference0.getValue();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str2, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 10.0f + "'", float5 == 10.0f);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 10.0f + "'", float6 == 10.0f);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 10.0f + "'", float7 == 10.0f);
    }

    @Test
    public void test04303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04303");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setNumProcessorsForTraining((int) (short) 100);
        java.lang.String str3 = configuration0.getModelDirectory();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList4 = configuration0.getItembasedRecommenders();
        configuration0.setNumProcessorsForTraining(100);
        org.plista.kornakapi.web.Components components7 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration8 = components7.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration9 = components7.getConfiguration();
        java.lang.String str10 = null; // flaky: configuration9.getModelDirectory();
        int int11 = 0; // flaky: configuration9.getNumProcessorsForTraining();
        int int12 = 0; // flaky: configuration9.getNumProcessorsForTraining();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration13 = null; // flaky: configuration9.getStorageConfiguration();
        configuration0.setStorageConfiguration(storageConfiguration13);
        configuration0.setModelDirectory("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemID");
        java.lang.String str17 = configuration0.getModelDirectory();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration18 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str19 = storageConfiguration18.getJdbcDriverClass();
        storageConfiguration18.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str22 = storageConfiguration18.getJdbcUrl();
        java.lang.String str23 = storageConfiguration18.getJdbcDriverClass();
        storageConfiguration18.setJdbcDriverClass("batchSize");
        storageConfiguration18.setPassword("howMany");
        storageConfiguration18.setJdbcUrl("hi!");
        java.lang.String str30 = storageConfiguration18.getPassword();
        java.lang.String str31 = storageConfiguration18.getUsername();
        java.lang.String str32 = storageConfiguration18.getUsername();
        storageConfiguration18.setJdbcDriverClass("batchSize");
        java.lang.String str35 = storageConfiguration18.getPassword();
        configuration0.setStorageConfiguration(storageConfiguration18);
        java.lang.String str37 = storageConfiguration18.getUsername();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList4);
        org.junit.Assert.assertNotNull(components7);
// flaky:         org.junit.Assert.assertNotNull(configuration8);
// flaky:         org.junit.Assert.assertNotNull(configuration9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "label" + "'", str10, "label");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemID" + "'", str17, "org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemID");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "howMany" + "'", str30, "howMany");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str31, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str32, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "howMany" + "'", str35, "howMany");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str37, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
    }

    @Test
    public void test04304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04304");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 0);
        double double8 = factorizationbasedRecommenderConfig0.getLambda();
        double double9 = factorizationbasedRecommenderConfig0.getLambda();
        int int10 = factorizationbasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        java.lang.String str11 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        factorizationbasedRecommenderConfig0.setAlpha((double) '4');
        boolean boolean14 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        double double15 = factorizationbasedRecommenderConfig0.getLambda();
        double double16 = factorizationbasedRecommenderConfig0.getAlpha();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
    }

    @Test
    public void test04305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04305");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        boolean boolean3 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        double double6 = factorizationbasedRecommenderConfig0.getLambda();
        factorizationbasedRecommenderConfig0.setLambda((double) (-1.0f));
        factorizationbasedRecommenderConfig0.setNumberOfFeatures((int) (byte) 100);
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer11 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (byte) 100);
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer14 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        java.io.File file15 = null;
        org.plista.kornakapi.core.storage.Storage storage16 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender17 = null;
        // The following exception was thrown during execution in test generation
        try {
            factorizationbasedInMemoryTrainer14.train(file15, storage16, recommender17, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test04306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04306");
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration0 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str1 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str4 = storageConfiguration0.getJdbcUrl();
        java.lang.String str5 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str6 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str7 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str8 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str9 = storageConfiguration0.getUsername();
        storageConfiguration0.setPassword("batchSize");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str9, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
    }

    @Test
    public void test04307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04307");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str1 = batchDeleteCandidatesServlet0.getServletInfo();
        java.lang.String str2 = batchDeleteCandidatesServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet3 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet4 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet5 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        setPreferenceServlet3.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet8 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet3.init((javax.servlet.ServletConfig) recommendServlet8);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet3);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet11 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet12 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet13 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet12.init((javax.servlet.ServletConfig) batchSetPreferencesServlet13);
        javax.servlet.ServletConfig servletConfig15 = batchSetPreferencesServlet12.getServletConfig();
        addCandidateServlet11.init((javax.servlet.ServletConfig) batchSetPreferencesServlet12);
        javax.servlet.ServletConfig servletConfig17 = addCandidateServlet11.getServletConfig();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) addCandidateServlet11);
        javax.servlet.ServletConfig servletConfig19 = batchDeleteCandidatesServlet0.getServletConfig();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet20 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet20.init();
        setPreferenceServlet20.init();
        setPreferenceServlet20.destroy();
        javax.servlet.ServletConfig servletConfig24 = setPreferenceServlet20.getServletConfig();
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet25 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str26 = trainServlet25.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet27 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet27.destroy();
        javax.servlet.ServletConfig servletConfig29 = deleteCandidateServlet27.getServletConfig();
        deleteCandidateServlet27.destroy();
        trainServlet25.init((javax.servlet.ServletConfig) deleteCandidateServlet27);
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet32 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet32.init();
        java.lang.String str34 = batchAddCandidatesServlet32.getServletInfo();
        javax.servlet.ServletConfig servletConfig35 = batchAddCandidatesServlet32.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet36 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str37 = batchDeleteCandidatesServlet36.getServletInfo();
        java.lang.String str38 = batchDeleteCandidatesServlet36.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet39 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet40 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet41 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet40.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet41);
        setPreferenceServlet39.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet41);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet44 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet39.init((javax.servlet.ServletConfig) recommendServlet44);
        batchDeleteCandidatesServlet36.init((javax.servlet.ServletConfig) setPreferenceServlet39);
        batchAddCandidatesServlet32.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet36);
        batchDeleteCandidatesServlet36.init();
        java.lang.String str49 = batchDeleteCandidatesServlet36.getServletInfo();
        java.lang.String str50 = batchDeleteCandidatesServlet36.getServletInfo();
        trainServlet25.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet36);
        setPreferenceServlet20.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet36);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet20);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet54 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str55 = batchDeleteCandidatesServlet54.getServletInfo();
        java.lang.String str56 = batchDeleteCandidatesServlet54.getServletInfo();
        batchDeleteCandidatesServlet54.destroy();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet58 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str59 = batchDeleteCandidatesServlet58.getServletInfo();
        batchDeleteCandidatesServlet54.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet58);
        batchDeleteCandidatesServlet58.destroy();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet58);
        // The following exception was thrown during execution in test generation
        try {
            javax.servlet.ServletContext servletContext63 = batchDeleteCandidatesServlet0.getServletContext();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(servletConfig15);
        org.junit.Assert.assertNotNull(servletConfig17);
        org.junit.Assert.assertNotNull(servletConfig19);
        org.junit.Assert.assertNull(servletConfig24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(servletConfig29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(servletConfig35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
    }

    @Test
    public void test04308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04308");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration4 = components0.getConfiguration();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration5 = null; // flaky: configuration4.getStorageConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration6 = new org.plista.kornakapi.core.config.Configuration();
        int int7 = configuration6.getNumProcessorsForTraining();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList8 = configuration6.getItembasedRecommenders();
        int int9 = configuration6.getNumProcessorsForTraining();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig10 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str11 = itembasedRecommenderConfig10.getRetrainCronExpression();
        configuration6.addItembasedRecommender(itembasedRecommenderConfig10);
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig13 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str14 = itembasedRecommenderConfig13.getRetrainCronExpression();
        itembasedRecommenderConfig13.setSimilarityClass("");
        java.lang.String str17 = itembasedRecommenderConfig13.getSimilarityClass();
        itembasedRecommenderConfig13.setName("label");
        configuration6.addItembasedRecommender(itembasedRecommenderConfig13);
// flaky:         configuration4.addItembasedRecommender(itembasedRecommenderConfig13);
        itembasedRecommenderConfig13.setName("MutablePreference{userID=0, itemID=0, value=0.0}");
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer24 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig13);
        java.io.File file25 = null;
        org.plista.kornakapi.core.storage.Storage storage26 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender27 = null;
        // The following exception was thrown during execution in test generation
        try {
            multithreadedItembasedInMemoryTrainer24.train(file25, storage26, recommender27, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(trainingScheduler3);
// flaky:         org.junit.Assert.assertNotNull(configuration4);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test04309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04309");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        double double6 = factorizationbasedRecommenderConfig0.getAlpha();
        factorizationbasedRecommenderConfig0.setLambda((double) (-1));
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer11 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        int int12 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        int int13 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test04310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04310");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((-1L), (double) 0L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer5 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double8 = fixedCandidatesIDRescorer1.rescore(10L, (double) 10L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer9 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer10 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double13 = fixedCandidatesIDRescorer1.rescore((long) 100, (double) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = fixedCandidatesIDRescorer1.isFiltered((long) 35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test04311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04311");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str1 = batchDeleteCandidatesServlet0.getServletInfo();
        java.lang.String str2 = batchDeleteCandidatesServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet3 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet4 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet5 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        setPreferenceServlet3.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet8 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet3.init((javax.servlet.ServletConfig) recommendServlet8);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet3);
        batchDeleteCandidatesServlet0.destroy();
        batchDeleteCandidatesServlet0.init();
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet13 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str14 = trainServlet13.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet15 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet15.destroy();
        javax.servlet.ServletConfig servletConfig17 = deleteCandidateServlet15.getServletConfig();
        deleteCandidateServlet15.destroy();
        trainServlet13.init((javax.servlet.ServletConfig) deleteCandidateServlet15);
        java.lang.String str20 = trainServlet13.getServletInfo();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) trainServlet13);
        batchDeleteCandidatesServlet0.destroy();
        batchDeleteCandidatesServlet0.init();
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet24 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet24.init();
        java.lang.String str26 = batchAddCandidatesServlet24.getServletInfo();
        javax.servlet.ServletConfig servletConfig27 = batchAddCandidatesServlet24.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet28 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str29 = batchDeleteCandidatesServlet28.getServletInfo();
        java.lang.String str30 = batchDeleteCandidatesServlet28.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet31 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet32 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet33 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet32.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet33);
        setPreferenceServlet31.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet33);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet36 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet31.init((javax.servlet.ServletConfig) recommendServlet36);
        batchDeleteCandidatesServlet28.init((javax.servlet.ServletConfig) setPreferenceServlet31);
        batchAddCandidatesServlet24.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet28);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet28);
        java.lang.String str41 = batchDeleteCandidatesServlet28.getServletInfo();
        javax.servlet.ServletRequest servletRequest42 = null;
        javax.servlet.ServletResponse servletResponse43 = null;
        // The following exception was thrown during execution in test generation
        try {
            batchDeleteCandidatesServlet28.service(servletRequest42, servletResponse43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(servletConfig17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(servletConfig27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test04312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04312");
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet0.init();
        java.lang.String str2 = batchAddCandidatesServlet0.getServletInfo();
        javax.servlet.ServletConfig servletConfig3 = batchAddCandidatesServlet0.getServletConfig();
        batchAddCandidatesServlet0.init();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet5 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str6 = batchDeleteCandidatesServlet5.getServletInfo();
        batchDeleteCandidatesServlet5.init();
        javax.servlet.ServletConfig servletConfig8 = null;
        batchDeleteCandidatesServlet5.init(servletConfig8);
        javax.servlet.ServletConfig servletConfig10 = batchDeleteCandidatesServlet5.getServletConfig();
        batchDeleteCandidatesServlet5.init();
        javax.servlet.ServletConfig servletConfig12 = batchDeleteCandidatesServlet5.getServletConfig();
        java.lang.String str13 = batchDeleteCandidatesServlet5.getServletInfo();
        batchAddCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        batchAddCandidatesServlet0.destroy();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration16 = batchAddCandidatesServlet0.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(servletConfig3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(servletConfig10);
        org.junit.Assert.assertNull(servletConfig12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test04313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04313");
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet0 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        java.lang.String str1 = deleteCandidateServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet3 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet2.init((javax.servlet.ServletConfig) batchSetPreferencesServlet3);
        javax.servlet.ServletConfig servletConfig5 = batchSetPreferencesServlet3.getServletConfig();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet6 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet6.init();
        setPreferenceServlet6.init();
        setPreferenceServlet6.destroy();
        setPreferenceServlet6.destroy();
        batchSetPreferencesServlet3.init((javax.servlet.ServletConfig) setPreferenceServlet6);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet12 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet13 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet14 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet13.init((javax.servlet.ServletConfig) batchSetPreferencesServlet14);
        javax.servlet.ServletConfig servletConfig16 = batchSetPreferencesServlet13.getServletConfig();
        addCandidateServlet12.init((javax.servlet.ServletConfig) batchSetPreferencesServlet13);
        javax.servlet.ServletConfig servletConfig18 = batchSetPreferencesServlet13.getServletConfig();
        batchSetPreferencesServlet3.init((javax.servlet.ServletConfig) batchSetPreferencesServlet13);
        batchSetPreferencesServlet3.destroy();
        deleteCandidateServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet3);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet22 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet23 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet24 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet23.init((javax.servlet.ServletConfig) batchSetPreferencesServlet24);
        javax.servlet.ServletConfig servletConfig26 = batchSetPreferencesServlet23.getServletConfig();
        addCandidateServlet22.init((javax.servlet.ServletConfig) batchSetPreferencesServlet23);
        batchSetPreferencesServlet23.destroy();
        java.lang.String str29 = batchSetPreferencesServlet23.getServletInfo();
        batchSetPreferencesServlet3.init((javax.servlet.ServletConfig) batchSetPreferencesServlet23);
        // The following exception was thrown during execution in test generation
        try {
            batchSetPreferencesServlet23.log("MutablePreference{userID=100, itemID=35, value=-1.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNull(servletConfig5);
        org.junit.Assert.assertNotNull(servletConfig16);
        org.junit.Assert.assertNotNull(servletConfig18);
        org.junit.Assert.assertNotNull(servletConfig26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test04314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04314");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setModelDirectory("MutablePreference{userID=0, itemID=0, value=1.0}");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig3 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double4 = factorizationbasedRecommenderConfig3.getAlpha();
        double double5 = factorizationbasedRecommenderConfig3.getLambda();
        int int6 = factorizationbasedRecommenderConfig3.getNumberOfFeatures();
        java.lang.String str7 = factorizationbasedRecommenderConfig3.getRetrainCronExpression();
        factorizationbasedRecommenderConfig3.setNumberOfIterations((int) (short) 100);
        int int10 = factorizationbasedRecommenderConfig3.getNumberOfIterations();
        factorizationbasedRecommenderConfig3.setAlpha((double) (short) 100);
        configuration0.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig3);
        configuration0.setNumProcessorsForTraining((int) (byte) -1);
        configuration0.setModelDirectory("org.plista.kornakapi.web.InvalidParameterException: batchSize");
        java.lang.String str18 = configuration0.getModelDirectory();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration19 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str20 = storageConfiguration19.getJdbcDriverClass();
        storageConfiguration19.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str23 = storageConfiguration19.getJdbcUrl();
        java.lang.String str24 = storageConfiguration19.getJdbcDriverClass();
        storageConfiguration19.setJdbcDriverClass("batchSize");
        java.lang.String str27 = storageConfiguration19.getPassword();
        storageConfiguration19.setUsername("batchSize");
        java.lang.String str30 = storageConfiguration19.getJdbcDriverClass();
        storageConfiguration19.setUsername("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: itemIDs");
        storageConfiguration19.setJdbcDriverClass("howMany");
        storageConfiguration19.setPassword("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: itemIDs");
        storageConfiguration19.setUsername("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: itemIDs");
        java.lang.String str39 = storageConfiguration19.getUsername();
        configuration0.setStorageConfiguration(storageConfiguration19);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.plista.kornakapi.web.InvalidParameterException: batchSize" + "'", str18, "org.plista.kornakapi.web.InvalidParameterException: batchSize");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "batchSize" + "'", str30, "batchSize");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: itemIDs" + "'", str39, "org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: itemIDs");
    }

    @Test
    public void test04315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04315");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        addCandidateServlet0.destroy();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet3 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet2.init((javax.servlet.ServletConfig) batchSetPreferencesServlet3);
        addCandidateServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        java.lang.String str6 = batchSetPreferencesServlet2.getServletInfo();
        java.lang.String str7 = batchSetPreferencesServlet2.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet8 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str9 = batchDeleteCandidatesServlet8.getServletInfo();
        batchDeleteCandidatesServlet8.init();
        batchDeleteCandidatesServlet8.destroy();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet12 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet12.destroy();
        javax.servlet.ServletConfig servletConfig14 = deleteCandidateServlet12.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet15 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str16 = batchDeleteCandidatesServlet15.getServletInfo();
        java.lang.String str17 = batchDeleteCandidatesServlet15.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet18 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet19 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet20 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet19.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet20);
        setPreferenceServlet18.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet20);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet23 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet18.init((javax.servlet.ServletConfig) recommendServlet23);
        batchDeleteCandidatesServlet15.init((javax.servlet.ServletConfig) setPreferenceServlet18);
        setPreferenceServlet18.destroy();
        deleteCandidateServlet12.init((javax.servlet.ServletConfig) setPreferenceServlet18);
        batchDeleteCandidatesServlet8.init((javax.servlet.ServletConfig) setPreferenceServlet18);
        setPreferenceServlet18.destroy();
        batchSetPreferencesServlet2.init((javax.servlet.ServletConfig) setPreferenceServlet18);
        java.lang.String str31 = setPreferenceServlet18.getServletInfo();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = setPreferenceServlet18.getInitParameter("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: itemIDs");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(servletConfig14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test04316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04316");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 0);
        boolean boolean8 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        java.lang.String str9 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        double double10 = factorizationbasedRecommenderConfig0.getLambda();
        factorizationbasedRecommenderConfig0.setLambda((double) (byte) -1);
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (byte) 100);
        factorizationbasedRecommenderConfig0.setAlpha((double) 100.0f);
        double double17 = factorizationbasedRecommenderConfig0.getLambda();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
    }

    @Test
    public void test04317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04317");
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet0.init();
        java.lang.String str2 = batchAddCandidatesServlet0.getServletInfo();
        batchAddCandidatesServlet0.init();
        java.lang.String str4 = batchAddCandidatesServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet5 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet6 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet7 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet6.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet7);
        setPreferenceServlet5.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet7);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet10 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet5.init((javax.servlet.ServletConfig) recommendServlet10);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet12 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str13 = batchDeleteCandidatesServlet12.getServletInfo();
        java.lang.String str14 = batchDeleteCandidatesServlet12.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet15 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet16 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet17 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet16.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet17);
        setPreferenceServlet15.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet17);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet20 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet15.init((javax.servlet.ServletConfig) recommendServlet20);
        batchDeleteCandidatesServlet12.init((javax.servlet.ServletConfig) setPreferenceServlet15);
        setPreferenceServlet5.init((javax.servlet.ServletConfig) setPreferenceServlet15);
        setPreferenceServlet15.init();
        batchAddCandidatesServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet15);
        batchAddCandidatesServlet0.init();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration27 = batchAddCandidatesServlet0.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test04318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04318");
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet0 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet0.init();
        setPreferenceServlet0.init();
        java.lang.String str3 = setPreferenceServlet0.getServletInfo();
        setPreferenceServlet0.init();
        javax.servlet.ServletConfig servletConfig5 = setPreferenceServlet0.getServletConfig();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet6 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet6.destroy();
        deleteCandidateServlet6.destroy();
        setPreferenceServlet0.init((javax.servlet.ServletConfig) deleteCandidateServlet6);
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet10 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet10.destroy();
        javax.servlet.ServletConfig servletConfig12 = deleteCandidateServlet10.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet13 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str14 = batchDeleteCandidatesServlet13.getServletInfo();
        java.lang.String str15 = batchDeleteCandidatesServlet13.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet16 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet17 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet18 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet17.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet18);
        setPreferenceServlet16.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet18);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet21 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet16.init((javax.servlet.ServletConfig) recommendServlet21);
        batchDeleteCandidatesServlet13.init((javax.servlet.ServletConfig) setPreferenceServlet16);
        setPreferenceServlet16.destroy();
        deleteCandidateServlet10.init((javax.servlet.ServletConfig) setPreferenceServlet16);
        deleteCandidateServlet6.init((javax.servlet.ServletConfig) deleteCandidateServlet10);
        javax.servlet.ServletRequest servletRequest27 = null;
        javax.servlet.ServletResponse servletResponse28 = null;
        // The following exception was thrown during execution in test generation
        try {
            deleteCandidateServlet6.service(servletRequest27, servletResponse28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(servletConfig5);
        org.junit.Assert.assertNull(servletConfig12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test04319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04319");
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet0 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet1);
        javax.servlet.ServletConfig servletConfig3 = batchSetPreferencesServlet0.getServletConfig();
        javax.servlet.ServletConfig servletConfig4 = batchSetPreferencesServlet0.getServletConfig();
        java.lang.Throwable throwable7 = null;
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException8 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemID", throwable7);
        org.plista.kornakapi.web.MissingParameterException missingParameterException10 = new org.plista.kornakapi.web.MissingParameterException("MutablePreference{userID=10000, itemID=-1, value=10.0}");
        invalidParameterException8.addSuppressed((java.lang.Throwable) missingParameterException10);
        // The following exception was thrown during execution in test generation
        try {
            batchSetPreferencesServlet0.log("org.plista.kornakapi.web.MissingParameterException: MutablePreference{userID=-1, itemID=10, value=10.0}", (java.lang.Throwable) missingParameterException10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(servletConfig3);
        org.junit.Assert.assertNotNull(servletConfig4);
    }

    @Test
    public void test04320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04320");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer2 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.apache.mahout.common.LongPair longPair3 = null;
        double double5 = filteringLongPairRescorer2.rescore(longPair3, 52.0d);
        org.apache.mahout.common.LongPair longPair6 = null;
        double double8 = filteringLongPairRescorer2.rescore(longPair6, (double) (short) 100);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 52.0d + "'", double5 == 52.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
    }

    @Test
    public void test04321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04321");
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet0 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet0.init();
        setPreferenceServlet0.init();
        setPreferenceServlet0.destroy();
        javax.servlet.ServletConfig servletConfig4 = setPreferenceServlet0.getServletConfig();
        java.lang.String str5 = setPreferenceServlet0.getServletInfo();
        setPreferenceServlet0.init();
        java.lang.String str7 = setPreferenceServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet8 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet9 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet10 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet9.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet10);
        setPreferenceServlet8.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet10);
        java.lang.String str13 = setPreferenceServlet8.getServletInfo();
        setPreferenceServlet8.destroy();
        setPreferenceServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet8);
        setPreferenceServlet8.init();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = setPreferenceServlet8.getServletName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test04322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04322");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((long) ' ', (double) (-1.0f));
        double double7 = fixedCandidatesIDRescorer1.rescore((long) (short) 1, (double) (-1));
        double double10 = fixedCandidatesIDRescorer1.rescore((long) 'a', 35.0d);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer11 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double14 = fixedCandidatesIDRescorer1.rescore((long) (short) 1, 10000.0d);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer15 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10000.0d + "'", double14 == 10000.0d);
    }

    @Test
    public void test04323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04323");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setNumProcessorsForTraining((int) (short) 100);
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig3 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double4 = factorizationbasedRecommenderConfig3.getAlpha();
        double double5 = factorizationbasedRecommenderConfig3.getLambda();
        configuration0.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig3);
        java.lang.String str7 = configuration0.getModelDirectory();
        int int8 = configuration0.getNumProcessorsForTraining();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList9 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration10 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str11 = storageConfiguration10.getJdbcDriverClass();
        storageConfiguration10.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str14 = storageConfiguration10.getJdbcUrl();
        java.lang.String str15 = storageConfiguration10.getJdbcUrl();
        storageConfiguration10.setJdbcUrl("label");
        configuration0.setStorageConfiguration(storageConfiguration10);
        java.lang.String str19 = storageConfiguration10.getUsername();
        java.lang.String str20 = storageConfiguration10.getUsername();
        java.lang.String str21 = storageConfiguration10.getJdbcDriverClass();
        java.lang.String str22 = storageConfiguration10.getPassword();
        java.lang.String str23 = storageConfiguration10.getUsername();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str19, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str20, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str23, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
    }

    @Test
    public void test04324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04324");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str1 = itembasedRecommenderConfig0.getSimilarityClass();
        int int2 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        int int3 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        int int4 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        int int5 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        itembasedRecommenderConfig0.setSimilarityClass("MutablePreference{userID=0, itemID=0, value=52.0}");
        int int8 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        int int9 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test04325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04325");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig0.setSimilarityClass("");
        java.lang.String str3 = itembasedRecommenderConfig0.getName();
        java.lang.String str4 = itembasedRecommenderConfig0.getSimilarityClass();
        java.lang.String str5 = itembasedRecommenderConfig0.getSimilarityClass();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer6 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer7 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        java.io.File file8 = null;
        org.plista.kornakapi.core.storage.Storage storage9 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender10 = null;
        // The following exception was thrown during execution in test generation
        try {
            multithreadedItembasedInMemoryTrainer7.train(file8, storage9, recommender10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test04326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04326");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer2 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double5 = fixedCandidatesIDRescorer1.rescore((long) (short) 1, (double) (byte) 100);
        double double8 = fixedCandidatesIDRescorer1.rescore(10000L, (double) (byte) 0);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer9 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.apache.mahout.common.LongPair longPair10 = null;
        double double12 = filteringLongPairRescorer9.rescore(longPair10, (double) 10L);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test04327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04327");
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration0 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str1 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str4 = storageConfiguration0.getJdbcUrl();
        java.lang.String str5 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str6 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str7 = storageConfiguration0.getPassword();
        java.lang.String str8 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str9 = storageConfiguration0.getPassword();
        storageConfiguration0.setUsername("MutablePreference{userID=100, itemID=0, value=0.0}");
        java.lang.String str12 = storageConfiguration0.getPassword();
        storageConfiguration0.setJdbcUrl("MutablePreference{userID=0, itemID=0, value=52.0}");
        java.lang.String str15 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setJdbcUrl("MutablePreference{userID=0, itemID=0, value=32.0}");
        storageConfiguration0.setJdbcDriverClass("MutablePreference{userID=0, itemID=0, value=10.0}");
        storageConfiguration0.setPassword("org.plista.kornakapi.web.InvalidParameterException: MutablePreference{userID=-1, itemID=10, value=10.0}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test04328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04328");
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.core.config.Configuration configuration1 = org.plista.kornakapi.core.config.Configuration.fromXML("MutablePreference{userID=0, itemID=100, value=97.0}");
            org.junit.Assert.fail("Expected exception of type com.thoughtworks.xstream.io.StreamException; message:  : only whitespace content allowed before start tag and not M (position: START_DOCUMENT seen M... @1:1) ");
        } catch (com.thoughtworks.xstream.io.StreamException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04329");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList1 = configuration0.getItembasedRecommenders();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList2 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration3 = configuration0.getStorageConfiguration();
        int int4 = configuration0.getNumProcessorsForTraining();
        configuration0.setNumProcessorsForTraining((int) (short) 10);
        java.lang.String str7 = configuration0.getModelDirectory();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList8 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration9 = configuration0.getStorageConfiguration();
        org.plista.kornakapi.core.storage.Storage storage10 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.KornakapiRecommender> strMap11 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.core.training.Trainer> strMap12 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler13 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler14 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener17 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler14, "itemID", (int) '#');
        inMemoryPreferenceChangeListener17.notifyOfPreferenceChange();
        inMemoryPreferenceChangeListener17.notifyOfPreferenceChange();
        inMemoryPreferenceChangeListener17.notifyOfPreferenceChange();
        inMemoryPreferenceChangeListener17.notifyOfPreferenceChange();
        inMemoryPreferenceChangeListener17.notifyOfPreferenceChange();
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.web.Components.init(configuration0, storage10, strMap11, strMap12, trainingScheduler13, (org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList1);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList2);
        org.junit.Assert.assertNull(storageConfiguration3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList8);
        org.junit.Assert.assertNull(storageConfiguration9);
    }

    @Test
    public void test04330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04330");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig0.setSimilarityClass("");
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer3 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        itembasedRecommenderConfig0.setRetrainCronExpression("");
        itembasedRecommenderConfig0.setSimilarItemsPerItem(10);
        java.lang.String str8 = itembasedRecommenderConfig0.getName();
        java.lang.String str9 = itembasedRecommenderConfig0.getName();
        int int10 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        itembasedRecommenderConfig0.setSimilarItemsPerItem(52);
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer13 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        java.io.File file14 = null;
        org.plista.kornakapi.core.storage.Storage storage15 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender16 = null;
        // The following exception was thrown during execution in test generation
        try {
            multithreadedItembasedInMemoryTrainer13.train(file14, storage15, recommender16, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test04331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04331");
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet0 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet1);
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet3 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet3.init();
        setPreferenceServlet3.destroy();
        batchSetPreferencesServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet3);
        javax.servlet.ServletConfig servletConfig7 = setPreferenceServlet3.getServletConfig();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = setPreferenceServlet3.getInitParameter("org.plista.kornakapi.web.InvalidParameterException: recommender");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig7);
    }

    @Test
    public void test04332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04332");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        javax.servlet.ServletConfig servletConfig5 = batchSetPreferencesServlet2.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet6 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str7 = batchDeleteCandidatesServlet6.getServletInfo();
        java.lang.String str8 = batchDeleteCandidatesServlet6.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet9 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet10 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet11 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet10.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet11);
        setPreferenceServlet9.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet11);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet14 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet9.init((javax.servlet.ServletConfig) recommendServlet14);
        batchDeleteCandidatesServlet6.init((javax.servlet.ServletConfig) setPreferenceServlet9);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet17 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet18 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet19 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet18.init((javax.servlet.ServletConfig) batchSetPreferencesServlet19);
        javax.servlet.ServletConfig servletConfig21 = batchSetPreferencesServlet18.getServletConfig();
        addCandidateServlet17.init((javax.servlet.ServletConfig) batchSetPreferencesServlet18);
        javax.servlet.ServletConfig servletConfig23 = addCandidateServlet17.getServletConfig();
        batchDeleteCandidatesServlet6.init((javax.servlet.ServletConfig) addCandidateServlet17);
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet25 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str26 = trainServlet25.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet27 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet27.destroy();
        javax.servlet.ServletConfig servletConfig29 = deleteCandidateServlet27.getServletConfig();
        deleteCandidateServlet27.destroy();
        trainServlet25.init((javax.servlet.ServletConfig) deleteCandidateServlet27);
        addCandidateServlet17.init((javax.servlet.ServletConfig) trainServlet25);
        batchSetPreferencesServlet2.init((javax.servlet.ServletConfig) addCandidateServlet17);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet34 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet35 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet34.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet35);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet37 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str38 = batchDeleteCandidatesServlet37.getServletInfo();
        batchDeleteCandidatesServlet37.init();
        javax.servlet.ServletConfig servletConfig40 = null;
        batchDeleteCandidatesServlet37.init(servletConfig40);
        recommendServlet34.init(servletConfig40);
        batchSetPreferencesServlet2.init(servletConfig40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = batchSetPreferencesServlet2.getServletName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(servletConfig21);
        org.junit.Assert.assertNotNull(servletConfig23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(servletConfig29);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test04333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04333");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer2 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer3 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer4 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double7 = fixedCandidatesIDRescorer1.rescore((long) (byte) 100, (double) 'a');
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer8 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer9 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.apache.mahout.common.LongPair longPair10 = null;
        double double12 = filteringLongPairRescorer9.rescore(longPair10, (double) '#');
        org.apache.mahout.common.LongPair longPair13 = null;
        double double15 = filteringLongPairRescorer9.rescore(longPair13, (double) '#');
        org.apache.mahout.common.LongPair longPair16 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = filteringLongPairRescorer9.isFiltered(longPair16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 97.0d + "'", double7 == 97.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
    }

    @Test
    public void test04334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04334");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        int int2 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        boolean boolean3 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        int int4 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        boolean boolean5 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        java.lang.String str6 = factorizationbasedRecommenderConfig0.getName();
        factorizationbasedRecommenderConfig0.setNumberOfFeatures(10000);
        double double9 = factorizationbasedRecommenderConfig0.getLambda();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test04335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04335");
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler0 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener3 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler0, "MutablePreference{userID=52, itemID=97, value=-1.0}", 10000);
    }

    @Test
    public void test04336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04336");
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet0 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        java.lang.String str1 = recommendServlet0.getServletInfo();
        javax.servlet.ServletConfig servletConfig2 = recommendServlet0.getServletConfig();
        java.lang.String str3 = recommendServlet0.getServletInfo();
        javax.servlet.ServletConfig servletConfig4 = recommendServlet0.getServletConfig();
        java.lang.String str5 = recommendServlet0.getServletInfo();
        org.plista.kornakapi.web.MissingParameterException missingParameterException10 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException11 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException10);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException12 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException10);
        org.plista.kornakapi.web.MissingParameterException missingParameterException14 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException16 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException14.addSuppressed((java.lang.Throwable) missingParameterException16);
        invalidParameterException12.addSuppressed((java.lang.Throwable) missingParameterException16);
        java.lang.Throwable[] throwableArray19 = invalidParameterException12.getSuppressed();
        java.lang.Throwable[] throwableArray20 = invalidParameterException12.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            recommendServlet0.log("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.InvalidParameterException: file", (java.lang.Throwable) invalidParameterException12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNull(servletConfig2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(servletConfig4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
    }

    @Test
    public void test04337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04337");
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet0 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet0.destroy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = deleteCandidateServlet0.getServletName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04338");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        double double6 = factorizationbasedRecommenderConfig0.getAlpha();
        java.lang.String str7 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        factorizationbasedRecommenderConfig0.setNumberOfIterations(1);
        int int10 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        java.lang.String str11 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges(100);
        java.lang.String str14 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        double double15 = factorizationbasedRecommenderConfig0.getLambda();
        factorizationbasedRecommenderConfig0.setName("org.plista.kornakapi.web.InvalidParameterException: batchSize");
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test04339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04339");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str1 = itembasedRecommenderConfig0.getSimilarityClass();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer2 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        itembasedRecommenderConfig0.setRetrainAfterPreferenceChanges(1);
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test04340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04340");
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration0 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str1 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str2 = storageConfiguration0.getUsername();
        storageConfiguration0.setJdbcUrl("");
        java.lang.String str5 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str6 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str7 = storageConfiguration0.getUsername();
        java.lang.String str8 = storageConfiguration0.getPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test04341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04341");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str6 = factorizationbasedRecommenderConfig0.getName();
        int int7 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        java.lang.String str8 = factorizationbasedRecommenderConfig0.getName();
        int int9 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setRetrainCronExpression("org.plista.kornakapi.web.MissingParameterException: MutablePreference{userID=0, itemID=0, value=100.0}");
        java.lang.String str12 = factorizationbasedRecommenderConfig0.getName();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test04342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04342");
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet0 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str1 = trainServlet0.getServletInfo();
        javax.servlet.ServletConfig servletConfig2 = trainServlet0.getServletConfig();
        trainServlet0.destroy();
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet4 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet4.init();
        java.lang.String str6 = batchAddCandidatesServlet4.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet7 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str8 = batchDeleteCandidatesServlet7.getServletInfo();
        batchDeleteCandidatesServlet7.destroy();
        javax.servlet.ServletConfig servletConfig10 = batchDeleteCandidatesServlet7.getServletConfig();
        batchAddCandidatesServlet4.init(servletConfig10);
        batchAddCandidatesServlet4.init();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet13 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet14 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet15 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet14.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet15);
        setPreferenceServlet13.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet15);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet18 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet13.init((javax.servlet.ServletConfig) recommendServlet18);
        recommendServlet18.init();
        batchAddCandidatesServlet4.init((javax.servlet.ServletConfig) recommendServlet18);
        recommendServlet18.init();
        trainServlet0.init((javax.servlet.ServletConfig) recommendServlet18);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet24 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        addCandidateServlet24.destroy();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet26 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet27 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet28 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet27.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet28);
        setPreferenceServlet26.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet28);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet31 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet26.init((javax.servlet.ServletConfig) recommendServlet31);
        recommendServlet31.init();
        addCandidateServlet24.init((javax.servlet.ServletConfig) recommendServlet31);
        java.lang.String str35 = addCandidateServlet24.getServletInfo();
        addCandidateServlet24.init();
        javax.servlet.ServletConfig servletConfig37 = addCandidateServlet24.getServletConfig();
        java.lang.String str38 = addCandidateServlet24.getServletInfo();
        trainServlet0.init((javax.servlet.ServletConfig) addCandidateServlet24);
        trainServlet0.init();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration41 = trainServlet0.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNull(servletConfig2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(servletConfig10);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(servletConfig37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test04343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04343");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 0);
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges(10000);
        double double10 = factorizationbasedRecommenderConfig0.getLambda();
        int int11 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(false);
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges(100);
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer16 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        java.io.File file17 = null;
        org.plista.kornakapi.core.storage.Storage storage18 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender19 = null;
        // The following exception was thrown during execution in test generation
        try {
            factorizationbasedInMemoryTrainer16.train(file17, storage18, recommender19, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test04344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04344");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        javax.servlet.ServletConfig servletConfig5 = batchSetPreferencesServlet2.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet6 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str7 = batchDeleteCandidatesServlet6.getServletInfo();
        java.lang.String str8 = batchDeleteCandidatesServlet6.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet9 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet10 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet11 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet10.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet11);
        setPreferenceServlet9.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet11);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet14 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet9.init((javax.servlet.ServletConfig) recommendServlet14);
        batchDeleteCandidatesServlet6.init((javax.servlet.ServletConfig) setPreferenceServlet9);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet17 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet18 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet19 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet18.init((javax.servlet.ServletConfig) batchSetPreferencesServlet19);
        javax.servlet.ServletConfig servletConfig21 = batchSetPreferencesServlet18.getServletConfig();
        addCandidateServlet17.init((javax.servlet.ServletConfig) batchSetPreferencesServlet18);
        javax.servlet.ServletConfig servletConfig23 = addCandidateServlet17.getServletConfig();
        batchDeleteCandidatesServlet6.init((javax.servlet.ServletConfig) addCandidateServlet17);
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet25 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str26 = trainServlet25.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet27 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet27.destroy();
        javax.servlet.ServletConfig servletConfig29 = deleteCandidateServlet27.getServletConfig();
        deleteCandidateServlet27.destroy();
        trainServlet25.init((javax.servlet.ServletConfig) deleteCandidateServlet27);
        addCandidateServlet17.init((javax.servlet.ServletConfig) trainServlet25);
        batchSetPreferencesServlet2.init((javax.servlet.ServletConfig) addCandidateServlet17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = addCandidateServlet17.getInitParameter("MutablePreference{userID=97, itemID=1, value=97.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(servletConfig21);
        org.junit.Assert.assertNotNull(servletConfig23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(servletConfig29);
    }

    @Test
    public void test04345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04345");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig0.setSimilarityClass("");
        java.lang.String str3 = itembasedRecommenderConfig0.getSimilarityClass();
        itembasedRecommenderConfig0.setName("");
        java.lang.String str6 = itembasedRecommenderConfig0.getName();
        int int7 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        itembasedRecommenderConfig0.setRetrainCronExpression("howMany");
        java.lang.String str10 = itembasedRecommenderConfig0.getSimilarityClass();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer11 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        itembasedRecommenderConfig0.setSimilarityClass("org.plista.kornakapi.web.InvalidParameterException: itemIDs");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test04346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04346");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        int int2 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        double double5 = factorizationbasedRecommenderConfig0.getLambda();
        double double6 = factorizationbasedRecommenderConfig0.getLambda();
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges((int) (byte) 1);
        factorizationbasedRecommenderConfig0.setLambda((double) 0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test04347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04347");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str1 = batchDeleteCandidatesServlet0.getServletInfo();
        java.lang.String str2 = batchDeleteCandidatesServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet3 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet4 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet5 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        setPreferenceServlet3.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet8 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet3.init((javax.servlet.ServletConfig) recommendServlet8);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet3);
        batchDeleteCandidatesServlet0.destroy();
        batchDeleteCandidatesServlet0.init();
        batchDeleteCandidatesServlet0.destroy();
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet14 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet14.init();
        java.lang.String str16 = batchAddCandidatesServlet14.getServletInfo();
        javax.servlet.ServletConfig servletConfig17 = batchAddCandidatesServlet14.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet18 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str19 = batchDeleteCandidatesServlet18.getServletInfo();
        java.lang.String str20 = batchDeleteCandidatesServlet18.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet21 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet22 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet23 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet22.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet23);
        setPreferenceServlet21.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet23);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet26 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet21.init((javax.servlet.ServletConfig) recommendServlet26);
        batchDeleteCandidatesServlet18.init((javax.servlet.ServletConfig) setPreferenceServlet21);
        batchAddCandidatesServlet14.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet18);
        java.lang.String str30 = batchDeleteCandidatesServlet18.getServletInfo();
        java.lang.String str31 = batchDeleteCandidatesServlet18.getServletInfo();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = batchDeleteCandidatesServlet0.getInitParameter("org.plista.kornakapi.web.InvalidParameterException: batchSize");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(servletConfig17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test04348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04348");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((-1L), (double) 0L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer5 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double8 = fixedCandidatesIDRescorer1.rescore((long) 1, (double) 10);
        double double11 = fixedCandidatesIDRescorer1.rescore((long) ' ', (double) 35);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer12 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.apache.mahout.common.LongPair longPair13 = null;
        double double15 = filteringLongPairRescorer12.rescore(longPair13, (double) 10000L);
        org.apache.mahout.common.LongPair longPair16 = null;
        double double18 = filteringLongPairRescorer12.rescore(longPair16, (-1.0d));
        org.apache.mahout.common.LongPair longPair19 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = filteringLongPairRescorer12.isFiltered(longPair19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10000.0d + "'", double15 == 10000.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
    }

    @Test
    public void test04349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04349");
        org.plista.kornakapi.core.MutablePreference mutablePreference0 = new org.plista.kornakapi.core.MutablePreference();
        java.lang.String str1 = mutablePreference0.toString();
        long long2 = mutablePreference0.getItemID();
        long long3 = mutablePreference0.getItemID();
        mutablePreference0.setValue((float) (-1));
        float float6 = mutablePreference0.getValue();
        float float7 = mutablePreference0.getValue();
        float float8 = mutablePreference0.getValue();
        long long9 = mutablePreference0.getUserID();
        mutablePreference0.setValue((float) (byte) 10);
        mutablePreference0.set(52L, (long) '4', 0.0f);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str1, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-1.0f) + "'", float6 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + (-1.0f) + "'", float7 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + (-1.0f) + "'", float8 == (-1.0f));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test04350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04350");
        org.plista.kornakapi.core.MutablePreference mutablePreference0 = new org.plista.kornakapi.core.MutablePreference();
        java.lang.String str1 = mutablePreference0.toString();
        long long2 = mutablePreference0.getItemID();
        mutablePreference0.set((long) (short) -1, (long) (byte) 10, (float) (short) 10);
        mutablePreference0.set((long) 10000, (long) (short) -1, 0.0f);
        mutablePreference0.setValue((float) (byte) 0);
        float float13 = mutablePreference0.getValue();
        mutablePreference0.setValue(10.0f);
        java.lang.String str16 = mutablePreference0.toString();
        long long17 = mutablePreference0.getItemID();
        float float18 = mutablePreference0.getValue();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str1, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MutablePreference{userID=10000, itemID=-1, value=10.0}" + "'", str16, "MutablePreference{userID=10000, itemID=-1, value=10.0}");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 10.0f + "'", float18 == 10.0f);
    }

    @Test
    public void test04351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04351");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        double double6 = factorizationbasedRecommenderConfig0.getAlpha();
        java.lang.String str7 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        double double8 = factorizationbasedRecommenderConfig0.getLambda();
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges((int) '4');
        factorizationbasedRecommenderConfig0.setName("MutablePreference{userID=0, itemID=0, value=100.0}");
        factorizationbasedRecommenderConfig0.setRetrainCronExpression("MutablePreference{userID=0, itemID=0, value=52.0}");
        int int15 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        int int16 = factorizationbasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        int int17 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test04352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04352");
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet0.init();
        java.lang.String str2 = batchAddCandidatesServlet0.getServletInfo();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = batchAddCandidatesServlet0.getInitParameter("org.plista.kornakapi.web.InvalidParameterException: userID");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test04353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04353");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler2 = components0.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration4 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration5 = components0.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList6 = null; // flaky: configuration5.getFactorizationbasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration7 = null; // flaky: configuration5.getStorageConfiguration();
        org.plista.kornakapi.web.Components components8 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration9 = components8.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler10 = components8.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler11 = components8.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration12 = components8.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration13 = components8.getConfiguration();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig14 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig14.setSimilarityClass("");
        java.lang.String str17 = itembasedRecommenderConfig14.getName();
        java.lang.String str18 = itembasedRecommenderConfig14.getSimilarityClass();
        itembasedRecommenderConfig14.setName("");
        java.lang.String str21 = itembasedRecommenderConfig14.getSimilarityClass();
// flaky:         configuration13.addItembasedRecommender(itembasedRecommenderConfig14);
        itembasedRecommenderConfig14.setSimilarItemsPerItem((int) (byte) 1);
// flaky:         configuration5.addItembasedRecommender(itembasedRecommenderConfig14);
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig26 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double27 = factorizationbasedRecommenderConfig26.getAlpha();
        double double28 = factorizationbasedRecommenderConfig26.getLambda();
        boolean boolean29 = factorizationbasedRecommenderConfig26.isUsesImplicitFeedback();
        factorizationbasedRecommenderConfig26.setNumberOfIterations((int) (byte) 100);
// flaky:         configuration5.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig26);
        org.plista.kornakapi.web.Components components33 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration34 = components33.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration35 = components33.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler36 = components33.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration37 = components33.getConfiguration();
// flaky:         configuration37.setNumProcessorsForTraining(0);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration40 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str41 = storageConfiguration40.getJdbcDriverClass();
        storageConfiguration40.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str44 = storageConfiguration40.getJdbcUrl();
        java.lang.String str45 = storageConfiguration40.getJdbcDriverClass();
        java.lang.String str46 = storageConfiguration40.getJdbcDriverClass();
        java.lang.String str47 = storageConfiguration40.getPassword();
        java.lang.String str48 = storageConfiguration40.getJdbcDriverClass();
        java.lang.String str49 = storageConfiguration40.getPassword();
        java.lang.String str50 = storageConfiguration40.getJdbcUrl();
        storageConfiguration40.setUsername("org.plista.kornakapi.web.InvalidParameterException: label");
// flaky:         configuration37.setStorageConfiguration(storageConfiguration40);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration54 = null; // flaky: configuration37.getStorageConfiguration();
// flaky:         storageConfiguration54.setJdbcDriverClass("MutablePreference{userID=0, itemID=0, value=32.0}");
// flaky:         configuration5.setStorageConfiguration(storageConfiguration54);
// flaky:         storageConfiguration54.setPassword("");
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
        org.junit.Assert.assertNull(trainingScheduler2);
        org.junit.Assert.assertNull(trainingScheduler3);
// flaky:         org.junit.Assert.assertNotNull(configuration4);
// flaky:         org.junit.Assert.assertNotNull(configuration5);
// flaky:         org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList6);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration7);
        org.junit.Assert.assertNotNull(components8);
// flaky:         org.junit.Assert.assertNotNull(configuration9);
        org.junit.Assert.assertNull(trainingScheduler10);
        org.junit.Assert.assertNull(trainingScheduler11);
// flaky:         org.junit.Assert.assertNotNull(configuration12);
// flaky:         org.junit.Assert.assertNotNull(configuration13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(components33);
// flaky:         org.junit.Assert.assertNotNull(configuration34);
// flaky:         org.junit.Assert.assertNotNull(configuration35);
        org.junit.Assert.assertNull(trainingScheduler36);
// flaky:         org.junit.Assert.assertNotNull(configuration37);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration54);
    }

    @Test
    public void test04354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04354");
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet0 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet1);
        javax.servlet.ServletConfig servletConfig3 = batchSetPreferencesServlet1.getServletConfig();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet4 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet4.init();
        setPreferenceServlet4.init();
        setPreferenceServlet4.destroy();
        setPreferenceServlet4.destroy();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) setPreferenceServlet4);
        batchSetPreferencesServlet1.init();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration11 = batchSetPreferencesServlet1.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig3);
    }

    @Test
    public void test04355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04355");
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener0 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener0.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener0.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener3 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener3.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener5 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener5.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener3.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener5);
        delegatingPreferenceChangeListener0.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener3);
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler9 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener12 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler9, "org.plista.kornakapi.web.InvalidParameterException: ", (int) (short) 100);
        delegatingPreferenceChangeListener0.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener12);
        inMemoryPreferenceChangeListener12.notifyOfPreferenceChange();
    }

    @Test
    public void test04356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04356");
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet0 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet1);
        javax.servlet.ServletConfig servletConfig3 = batchSetPreferencesServlet1.getServletConfig();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet4 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet4.init();
        setPreferenceServlet4.init();
        setPreferenceServlet4.destroy();
        setPreferenceServlet4.destroy();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) setPreferenceServlet4);
        java.lang.String str10 = setPreferenceServlet4.getServletInfo();
        javax.servlet.ServletConfig servletConfig11 = setPreferenceServlet4.getServletConfig();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration12 = setPreferenceServlet4.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(servletConfig11);
    }

    @Test
    public void test04357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04357");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration4 = components0.getConfiguration();
// flaky:         configuration4.setNumProcessorsForTraining(0);
        java.lang.String str7 = null; // flaky: configuration4.getModelDirectory();
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList8 = null; // flaky: configuration4.getFactorizationbasedRecommenders();
        org.plista.kornakapi.web.Components components9 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.storage.Storage storage10 = components9.storage();
        org.plista.kornakapi.core.config.Configuration configuration11 = components9.getConfiguration();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration12 = null; // flaky: configuration11.getStorageConfiguration();
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig13 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double14 = factorizationbasedRecommenderConfig13.getAlpha();
        double double15 = factorizationbasedRecommenderConfig13.getLambda();
        boolean boolean16 = factorizationbasedRecommenderConfig13.isUsesImplicitFeedback();
        factorizationbasedRecommenderConfig13.setNumberOfIterations((int) (byte) 100);
// flaky:         configuration11.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig13);
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList20 = null; // flaky: configuration11.getItembasedRecommenders();
        java.lang.String str21 = null; // flaky: configuration11.getModelDirectory();
// flaky:         configuration11.setNumProcessorsForTraining((int) (short) 100);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration24 = null; // flaky: configuration11.getStorageConfiguration();
        java.lang.String str25 = null; // flaky: storageConfiguration24.getUsername();
        java.lang.String str26 = null; // flaky: storageConfiguration24.getJdbcUrl();
        java.lang.String str27 = null; // flaky: storageConfiguration24.getUsername();
// flaky:         storageConfiguration24.setPassword("MutablePreference{userID=10000, itemID=-1, value=10.0}");
// flaky:         storageConfiguration24.setJdbcDriverClass("");
// flaky:         configuration4.setStorageConfiguration(storageConfiguration24);
        org.plista.kornakapi.core.storage.Storage storage33 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.KornakapiRecommender> strMap34 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.core.training.Trainer> strMap35 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler36 = null;
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener37 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener37.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener37.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener40 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener40.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener42 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener42.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener40.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener42);
        delegatingPreferenceChangeListener37.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener40);
        delegatingPreferenceChangeListener40.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener40.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener48 = null;
        delegatingPreferenceChangeListener40.addDelegate(preferenceChangeListener48);
        org.plista.kornakapi.web.Components components50 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration51 = components50.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration52 = components50.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler53 = components50.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler54 = components50.scheduler();
        org.plista.kornakapi.core.storage.Storage storage55 = components50.storage();
        org.plista.kornakapi.core.config.Configuration configuration56 = components50.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage57 = components50.storage();
        org.plista.kornakapi.core.config.Configuration configuration58 = components50.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration59 = components50.getConfiguration();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener60 = components50.preferenceChangeListener();
        delegatingPreferenceChangeListener40.addDelegate(preferenceChangeListener60);
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.web.Components.init(configuration4, storage33, strMap34, strMap35, trainingScheduler36, preferenceChangeListener60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(trainingScheduler3);
// flaky:         org.junit.Assert.assertNotNull(configuration4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "label" + "'", str7, "label");
// flaky:         org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList8);
        org.junit.Assert.assertNotNull(components9);
        org.junit.Assert.assertNull(storage10);
// flaky:         org.junit.Assert.assertNotNull(configuration11);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "label" + "'", str21, "label");
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str25, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertNull(str26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str27, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertNotNull(components50);
// flaky:         org.junit.Assert.assertNotNull(configuration51);
// flaky:         org.junit.Assert.assertNotNull(configuration52);
        org.junit.Assert.assertNull(trainingScheduler53);
        org.junit.Assert.assertNull(trainingScheduler54);
        org.junit.Assert.assertNull(storage55);
// flaky:         org.junit.Assert.assertNotNull(configuration56);
        org.junit.Assert.assertNull(storage57);
// flaky:         org.junit.Assert.assertNotNull(configuration58);
// flaky:         org.junit.Assert.assertNotNull(configuration59);
        org.junit.Assert.assertNotNull(preferenceChangeListener60);
    }

    @Test
    public void test04358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04358");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        javax.servlet.ServletConfig servletConfig4 = batchSetPreferencesServlet1.getServletConfig();
        addCandidateServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet1);
        batchSetPreferencesServlet1.destroy();
        java.lang.String str7 = batchSetPreferencesServlet1.getServletInfo();
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet8 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str9 = trainServlet8.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet10 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet10.destroy();
        javax.servlet.ServletConfig servletConfig12 = deleteCandidateServlet10.getServletConfig();
        deleteCandidateServlet10.destroy();
        trainServlet8.init((javax.servlet.ServletConfig) deleteCandidateServlet10);
        javax.servlet.ServletConfig servletConfig15 = deleteCandidateServlet10.getServletConfig();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) deleteCandidateServlet10);
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet17 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet17.init();
        deleteCandidateServlet10.init((javax.servlet.ServletConfig) deleteCandidateServlet17);
        deleteCandidateServlet10.init();
        java.lang.String str21 = deleteCandidateServlet10.getServletInfo();
        // The following exception was thrown during execution in test generation
        try {
            deleteCandidateServlet10.log("MutablePreference{userID=10000, itemID=-1, value=-1.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(servletConfig4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(servletConfig12);
        org.junit.Assert.assertNull(servletConfig15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test04359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04359");
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler0 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener3 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler0, "MutablePreference{userID=10, itemID=-1, value=0.0}", (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            inMemoryPreferenceChangeListener3.notifyOfPreferenceChange();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04360");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 0);
        boolean boolean8 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        java.lang.String str9 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        factorizationbasedRecommenderConfig0.setRetrainCronExpression("MutablePreference{userID=0, itemID=0, value=1.0}");
        double double12 = factorizationbasedRecommenderConfig0.getAlpha();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test04361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04361");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig0.setSimilarityClass("");
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer3 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        itembasedRecommenderConfig0.setRetrainCronExpression("");
        itembasedRecommenderConfig0.setSimilarityClass("label");
        itembasedRecommenderConfig0.setSimilarItemsPerItem(52);
        itembasedRecommenderConfig0.setRetrainCronExpression("recommender");
        itembasedRecommenderConfig0.setSimilarItemsPerItem((int) (short) 100);
        java.lang.String str14 = itembasedRecommenderConfig0.getName();
        int int15 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test04362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04362");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        double double6 = factorizationbasedRecommenderConfig0.getAlpha();
        factorizationbasedRecommenderConfig0.setLambda((double) (-1));
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        factorizationbasedRecommenderConfig0.setName("MutablePreference{userID=-1, itemID=0, value=100.0}");
        int int13 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test04363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04363");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList2 = null; // flaky: configuration1.getFactorizationbasedRecommenders();
// flaky:         configuration1.setNumProcessorsForTraining(0);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration5 = null; // flaky: configuration1.getStorageConfiguration();
// flaky:         storageConfiguration5.setPassword("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: itemIDs");
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList2);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration5);
    }

    @Test
    public void test04364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04364");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        int int2 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        boolean boolean3 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        int int4 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        boolean boolean7 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        factorizationbasedRecommenderConfig0.setName("org.plista.kornakapi.web.InvalidParameterException: howMany");
        factorizationbasedRecommenderConfig0.setRetrainCronExpression("MutablePreference{userID=0, itemID=10000, value=-1.0}");
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges((int) (byte) 100);
        factorizationbasedRecommenderConfig0.setAlpha((double) 0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test04365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04365");
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.core.config.Configuration configuration1 = org.plista.kornakapi.core.config.Configuration.fromXML("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.InvalidParameterException: MutablePreference{userID=0, itemID=0, value=100.0}");
            org.junit.Assert.fail("Expected exception of type com.thoughtworks.xstream.io.StreamException; message:  : only whitespace content allowed before start tag and not o (position: START_DOCUMENT seen o... @1:1) ");
        } catch (com.thoughtworks.xstream.io.StreamException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04366");
        org.plista.kornakapi.core.MutableCandidate mutableCandidate0 = new org.plista.kornakapi.core.MutableCandidate();
        long long1 = mutableCandidate0.getItemID();
        java.lang.String str2 = mutableCandidate0.getLabel();
        mutableCandidate0.set("file", (long) (short) 1);
        long long6 = mutableCandidate0.getItemID();
        long long7 = mutableCandidate0.getItemID();
        long long8 = mutableCandidate0.getItemID();
        java.lang.String str9 = mutableCandidate0.getLabel();
        mutableCandidate0.set("", (long) 32);
        long long13 = mutableCandidate0.getItemID();
        mutableCandidate0.set("MutablePreference{userID=97, itemID=1, value=97.0}", (long) 1);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "file" + "'", str9, "file");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
    }

    @Test
    public void test04367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04367");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = components0.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage3 = components0.storage();
        org.plista.kornakapi.core.storage.Storage storage4 = components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration5 = components0.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList6 = null; // flaky: configuration5.getItembasedRecommenders();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig7 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig7.setSimilarityClass("");
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer10 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig7);
        itembasedRecommenderConfig7.setRetrainCronExpression("");
        itembasedRecommenderConfig7.setSimilarItemsPerItem(10);
        itembasedRecommenderConfig7.setRetrainCronExpression("");
// flaky:         configuration5.addItembasedRecommender(itembasedRecommenderConfig7);
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer18 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig7);
        java.lang.String str19 = itembasedRecommenderConfig7.getRetrainCronExpression();
        itembasedRecommenderConfig7.setSimilarityClass("itemID");
        itembasedRecommenderConfig7.setSimilarItemsPerItem((int) ' ');
        itembasedRecommenderConfig7.setName("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.InvalidParameterException: recommender");
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(storage3);
        org.junit.Assert.assertNull(storage4);
// flaky:         org.junit.Assert.assertNotNull(configuration5);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList6);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test04368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04368");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList1 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration2 = configuration0.getStorageConfiguration();
        configuration0.setNumProcessorsForTraining((int) (short) 0);
        java.lang.String str5 = configuration0.getModelDirectory();
        org.plista.kornakapi.core.config.Configuration configuration6 = new org.plista.kornakapi.core.config.Configuration();
        configuration6.setNumProcessorsForTraining((int) (short) 100);
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig9 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double10 = factorizationbasedRecommenderConfig9.getAlpha();
        double double11 = factorizationbasedRecommenderConfig9.getLambda();
        configuration6.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig9);
        java.lang.String str13 = configuration6.getModelDirectory();
        int int14 = configuration6.getNumProcessorsForTraining();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList15 = configuration6.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration16 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str17 = storageConfiguration16.getJdbcDriverClass();
        storageConfiguration16.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str20 = storageConfiguration16.getJdbcUrl();
        java.lang.String str21 = storageConfiguration16.getJdbcUrl();
        storageConfiguration16.setJdbcUrl("label");
        configuration6.setStorageConfiguration(storageConfiguration16);
        java.lang.String str25 = storageConfiguration16.getPassword();
        storageConfiguration16.setJdbcDriverClass("org.plista.kornakapi.web.InvalidParameterException: ");
        configuration0.setStorageConfiguration(storageConfiguration16);
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig29 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double30 = factorizationbasedRecommenderConfig29.getAlpha();
        double double31 = factorizationbasedRecommenderConfig29.getLambda();
        int int32 = factorizationbasedRecommenderConfig29.getNumberOfFeatures();
        java.lang.String str33 = factorizationbasedRecommenderConfig29.getRetrainCronExpression();
        int int34 = factorizationbasedRecommenderConfig29.getNumberOfFeatures();
        factorizationbasedRecommenderConfig29.setNumberOfIterations((int) (short) 0);
        boolean boolean37 = factorizationbasedRecommenderConfig29.isUsesImplicitFeedback();
        java.lang.String str38 = factorizationbasedRecommenderConfig29.getRetrainCronExpression();
        double double39 = factorizationbasedRecommenderConfig29.getLambda();
        factorizationbasedRecommenderConfig29.setLambda((double) (byte) -1);
        factorizationbasedRecommenderConfig29.setNumberOfIterations((int) (byte) 100);
        factorizationbasedRecommenderConfig29.setLambda((double) 100L);
        int int46 = factorizationbasedRecommenderConfig29.getRetrainAfterPreferenceChanges();
        configuration0.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig29);
        factorizationbasedRecommenderConfig29.setName("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        factorizationbasedRecommenderConfig29.setNumberOfFeatures((int) (short) 100);
        factorizationbasedRecommenderConfig29.setNumberOfFeatures((int) '#');
        int int54 = factorizationbasedRecommenderConfig29.getRetrainAfterPreferenceChanges();
        factorizationbasedRecommenderConfig29.setUsesImplicitFeedback(false);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList1);
        org.junit.Assert.assertNull(storageConfiguration2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test04369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04369");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setNumProcessorsForTraining((int) (short) 100);
        java.lang.String str3 = configuration0.getModelDirectory();
        configuration0.setNumProcessorsForTraining((int) (byte) 100);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration6 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str7 = storageConfiguration6.getJdbcDriverClass();
        storageConfiguration6.setPassword("itemIDs");
        configuration0.setStorageConfiguration(storageConfiguration6);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration11 = configuration0.getStorageConfiguration();
        storageConfiguration11.setJdbcUrl("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str14 = storageConfiguration11.getPassword();
        storageConfiguration11.setUsername("howMany");
        storageConfiguration11.setPassword("hi!");
        storageConfiguration11.setJdbcDriverClass("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: file");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(storageConfiguration11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "itemIDs" + "'", str14, "itemIDs");
    }

    @Test
    public void test04370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04370");
        org.plista.kornakapi.web.MissingParameterException missingParameterException2 = new org.plista.kornakapi.web.MissingParameterException("MutablePreference{userID=10, itemID=10000, value=100.0}");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException3 = new org.plista.kornakapi.web.InvalidParameterException("MutablePreference{userID=100, itemID=-1, value=100.0}", (java.lang.Throwable) missingParameterException2);
        java.lang.String str4 = invalidParameterException3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.plista.kornakapi.web.InvalidParameterException: MutablePreference{userID=100, itemID=-1, value=100.0}" + "'", str4, "org.plista.kornakapi.web.InvalidParameterException: MutablePreference{userID=100, itemID=-1, value=100.0}");
    }

    @Test
    public void test04371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04371");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        int int1 = configuration0.getNumProcessorsForTraining();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration2 = configuration0.getStorageConfiguration();
        configuration0.setNumProcessorsForTraining((int) '4');
        org.plista.kornakapi.core.config.Configuration configuration5 = new org.plista.kornakapi.core.config.Configuration();
        configuration5.setNumProcessorsForTraining((int) (short) 100);
        configuration5.setModelDirectory("userID");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig10 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str11 = itembasedRecommenderConfig10.getRetrainCronExpression();
        int int12 = itembasedRecommenderConfig10.getRetrainAfterPreferenceChanges();
        java.lang.String str13 = itembasedRecommenderConfig10.getSimilarityClass();
        itembasedRecommenderConfig10.setSimilarItemsPerItem(0);
        itembasedRecommenderConfig10.setRetrainCronExpression("value");
        int int18 = itembasedRecommenderConfig10.getRetrainAfterPreferenceChanges();
        configuration5.addItembasedRecommender(itembasedRecommenderConfig10);
        configuration0.addItembasedRecommender(itembasedRecommenderConfig10);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration21 = configuration0.getStorageConfiguration();
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList22 = configuration0.getFactorizationbasedRecommenders();
        org.plista.kornakapi.core.storage.Storage storage23 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.KornakapiRecommender> strMap24 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.core.training.Trainer> strMap25 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler26 = null;
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener27 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener27.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener27.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener30 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener30.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener32 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener32.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener30.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener32);
        delegatingPreferenceChangeListener27.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener30);
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler36 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener39 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler36, "label", (int) ' ');
        inMemoryPreferenceChangeListener39.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener27.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener39);
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener42 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener42.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener44 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener44.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener42.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener44);
        delegatingPreferenceChangeListener44.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener44.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener27.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener44);
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.web.Components.init(configuration0, storage23, strMap24, strMap25, trainingScheduler26, (org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(storageConfiguration2);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(storageConfiguration21);
        org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList22);
    }

    @Test
    public void test04372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04372");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler2 = components0.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration4 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration5 = components0.getConfiguration();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig6 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig6.setSimilarityClass("");
        java.lang.String str9 = itembasedRecommenderConfig6.getName();
        java.lang.String str10 = itembasedRecommenderConfig6.getSimilarityClass();
        itembasedRecommenderConfig6.setName("");
        java.lang.String str13 = itembasedRecommenderConfig6.getSimilarityClass();
// flaky:         configuration5.addItembasedRecommender(itembasedRecommenderConfig6);
        org.plista.kornakapi.web.Components components15 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration16 = components15.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler17 = components15.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler18 = components15.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration19 = components15.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration20 = components15.getConfiguration();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig21 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig21.setSimilarityClass("");
        java.lang.String str24 = itembasedRecommenderConfig21.getName();
        java.lang.String str25 = itembasedRecommenderConfig21.getSimilarityClass();
        itembasedRecommenderConfig21.setName("");
        java.lang.String str28 = itembasedRecommenderConfig21.getSimilarityClass();
// flaky:         configuration20.addItembasedRecommender(itembasedRecommenderConfig21);
        itembasedRecommenderConfig21.setSimilarItemsPerItem((int) (byte) 1);
// flaky:         configuration5.addItembasedRecommender(itembasedRecommenderConfig21);
        itembasedRecommenderConfig21.setRetrainAfterPreferenceChanges(0);
        itembasedRecommenderConfig21.setSimilarityClass("MutablePreference{userID=100, itemID=-1, value=100.0}");
        java.lang.String str37 = itembasedRecommenderConfig21.getName();
        itembasedRecommenderConfig21.setSimilarItemsPerItem(10000);
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
        org.junit.Assert.assertNull(trainingScheduler2);
        org.junit.Assert.assertNull(trainingScheduler3);
// flaky:         org.junit.Assert.assertNotNull(configuration4);
// flaky:         org.junit.Assert.assertNotNull(configuration5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(components15);
// flaky:         org.junit.Assert.assertNotNull(configuration16);
        org.junit.Assert.assertNull(trainingScheduler17);
        org.junit.Assert.assertNull(trainingScheduler18);
// flaky:         org.junit.Assert.assertNotNull(configuration19);
// flaky:         org.junit.Assert.assertNotNull(configuration20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test04373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04373");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        double double6 = factorizationbasedRecommenderConfig0.getAlpha();
        java.lang.String str7 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer8 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        double double9 = factorizationbasedRecommenderConfig0.getLambda();
        double double10 = factorizationbasedRecommenderConfig0.getAlpha();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(false);
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges((int) '4');
        boolean boolean15 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04374");
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet0 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet1 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet2 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet1.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet2);
        setPreferenceServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet2);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet5 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet0.init((javax.servlet.ServletConfig) recommendServlet5);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet7 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str8 = batchDeleteCandidatesServlet7.getServletInfo();
        java.lang.String str9 = batchDeleteCandidatesServlet7.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet10 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet11 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet12 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet11.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet12);
        setPreferenceServlet10.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet12);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet15 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet10.init((javax.servlet.ServletConfig) recommendServlet15);
        batchDeleteCandidatesServlet7.init((javax.servlet.ServletConfig) setPreferenceServlet10);
        setPreferenceServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet10);
        javax.servlet.ServletConfig servletConfig19 = setPreferenceServlet0.getServletConfig();
        setPreferenceServlet0.init();
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet21 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet22 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet23 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet22.init((javax.servlet.ServletConfig) batchSetPreferencesServlet23);
        javax.servlet.ServletConfig servletConfig25 = batchSetPreferencesServlet22.getServletConfig();
        addCandidateServlet21.init((javax.servlet.ServletConfig) batchSetPreferencesServlet22);
        batchSetPreferencesServlet22.destroy();
        java.lang.String str28 = batchSetPreferencesServlet22.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet29 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet29.init();
        setPreferenceServlet29.init();
        setPreferenceServlet29.destroy();
        javax.servlet.ServletConfig servletConfig33 = setPreferenceServlet29.getServletConfig();
        java.lang.String str34 = setPreferenceServlet29.getServletInfo();
        batchSetPreferencesServlet22.init((javax.servlet.ServletConfig) setPreferenceServlet29);
        batchSetPreferencesServlet22.destroy();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet37 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet38 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str39 = batchDeleteCandidatesServlet38.getServletInfo();
        java.lang.String str40 = batchDeleteCandidatesServlet38.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet41 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet42 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet43 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet42.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet43);
        setPreferenceServlet41.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet43);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet46 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet41.init((javax.servlet.ServletConfig) recommendServlet46);
        batchDeleteCandidatesServlet38.init((javax.servlet.ServletConfig) setPreferenceServlet41);
        batchDeleteCandidatesServlet38.destroy();
        batchDeleteCandidatesServlet37.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet38);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet51 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet52 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet53 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet52.init((javax.servlet.ServletConfig) batchSetPreferencesServlet53);
        batchDeleteCandidatesServlet51.init((javax.servlet.ServletConfig) batchSetPreferencesServlet53);
        javax.servlet.ServletConfig servletConfig56 = batchSetPreferencesServlet53.getServletConfig();
        batchSetPreferencesServlet53.init();
        batchDeleteCandidatesServlet38.init((javax.servlet.ServletConfig) batchSetPreferencesServlet53);
        javax.servlet.ServletConfig servletConfig59 = batchDeleteCandidatesServlet38.getServletConfig();
        batchSetPreferencesServlet22.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet38);
        setPreferenceServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet22);
        // The following exception was thrown during execution in test generation
        try {
            setPreferenceServlet0.log("MutablePreference{userID=97, itemID=1, value=97.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(servletConfig19);
        org.junit.Assert.assertNotNull(servletConfig25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(servletConfig33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(servletConfig56);
        org.junit.Assert.assertNotNull(servletConfig59);
    }

    @Test
    public void test04375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04375");
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet0 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet0.init();
        setPreferenceServlet0.init();
        setPreferenceServlet0.destroy();
        javax.servlet.ServletConfig servletConfig4 = setPreferenceServlet0.getServletConfig();
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet5 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str6 = trainServlet5.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet7 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet7.destroy();
        javax.servlet.ServletConfig servletConfig9 = deleteCandidateServlet7.getServletConfig();
        deleteCandidateServlet7.destroy();
        trainServlet5.init((javax.servlet.ServletConfig) deleteCandidateServlet7);
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet12 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet12.init();
        java.lang.String str14 = batchAddCandidatesServlet12.getServletInfo();
        javax.servlet.ServletConfig servletConfig15 = batchAddCandidatesServlet12.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet16 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str17 = batchDeleteCandidatesServlet16.getServletInfo();
        java.lang.String str18 = batchDeleteCandidatesServlet16.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet19 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet20 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet21 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet20.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet21);
        setPreferenceServlet19.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet21);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet24 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet19.init((javax.servlet.ServletConfig) recommendServlet24);
        batchDeleteCandidatesServlet16.init((javax.servlet.ServletConfig) setPreferenceServlet19);
        batchAddCandidatesServlet12.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet16);
        batchDeleteCandidatesServlet16.init();
        java.lang.String str29 = batchDeleteCandidatesServlet16.getServletInfo();
        java.lang.String str30 = batchDeleteCandidatesServlet16.getServletInfo();
        trainServlet5.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet16);
        setPreferenceServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet16);
        java.lang.String str33 = batchDeleteCandidatesServlet16.getServletInfo();
        javax.servlet.ServletConfig servletConfig34 = batchDeleteCandidatesServlet16.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet35 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet36 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet35.init((javax.servlet.ServletConfig) batchSetPreferencesServlet36);
        java.lang.String str38 = batchSetPreferencesServlet36.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet39 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str40 = batchDeleteCandidatesServlet39.getServletInfo();
        java.lang.String str41 = batchDeleteCandidatesServlet39.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet42 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet43 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet44 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet43.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet44);
        setPreferenceServlet42.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet44);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet47 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet42.init((javax.servlet.ServletConfig) recommendServlet47);
        batchDeleteCandidatesServlet39.init((javax.servlet.ServletConfig) setPreferenceServlet42);
        batchDeleteCandidatesServlet39.destroy();
        batchDeleteCandidatesServlet39.init();
        batchDeleteCandidatesServlet39.destroy();
        javax.servlet.ServletConfig servletConfig53 = batchDeleteCandidatesServlet39.getServletConfig();
        batchSetPreferencesServlet36.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet39);
        batchDeleteCandidatesServlet39.init();
        batchDeleteCandidatesServlet16.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet39);
        javax.servlet.ServletRequest servletRequest57 = null;
        javax.servlet.ServletResponse servletResponse58 = null;
        // The following exception was thrown during execution in test generation
        try {
            batchDeleteCandidatesServlet16.service(servletRequest57, servletResponse58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(servletConfig9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(servletConfig15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(servletConfig34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(servletConfig53);
    }

    @Test
    public void test04376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04376");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 100);
        double double7 = factorizationbasedRecommenderConfig0.getLambda();
        double double8 = factorizationbasedRecommenderConfig0.getLambda();
        int int9 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        factorizationbasedRecommenderConfig0.setNumberOfFeatures(1);
        boolean boolean12 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        double double13 = factorizationbasedRecommenderConfig0.getAlpha();
        int int14 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test04377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04377");
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet0 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet1 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet2 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet1.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet2);
        setPreferenceServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet2);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet5 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet0.init((javax.servlet.ServletConfig) recommendServlet5);
        recommendServlet5.init();
        // The following exception was thrown during execution in test generation
        try {
            javax.servlet.ServletContext servletContext8 = recommendServlet5.getServletContext();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04378");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.storage.Storage storage1 = components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration2 = components0.getConfiguration();
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig3 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double4 = factorizationbasedRecommenderConfig3.getAlpha();
        double double5 = factorizationbasedRecommenderConfig3.getLambda();
        boolean boolean6 = factorizationbasedRecommenderConfig3.isUsesImplicitFeedback();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer7 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig3);
        double double8 = factorizationbasedRecommenderConfig3.getAlpha();
// flaky:         configuration2.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig3);
        double double10 = factorizationbasedRecommenderConfig3.getAlpha();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer11 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig3);
        factorizationbasedRecommenderConfig3.setAlpha((double) 1);
        factorizationbasedRecommenderConfig3.setNumberOfIterations(1);
        org.junit.Assert.assertNotNull(components0);
        org.junit.Assert.assertNull(storage1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test04379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04379");
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet0 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        javax.servlet.ServletConfig servletConfig1 = recommendServlet0.getServletConfig();
        // The following exception was thrown during execution in test generation
        try {
            recommendServlet0.log("org.plista.kornakapi.web.InvalidParameterException: file");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig1);
    }

    @Test
    public void test04380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04380");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer2 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double5 = fixedCandidatesIDRescorer1.rescore((long) (short) 1, (double) (byte) 100);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer6 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double9 = fixedCandidatesIDRescorer1.rescore((long) 97, (double) 32);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer10 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer11 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double14 = fixedCandidatesIDRescorer1.rescore((long) (byte) 0, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = fixedCandidatesIDRescorer1.isFiltered((long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 32.0d + "'", double9 == 32.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
    }

    @Test
    public void test04381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04381");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = components0.getConfiguration();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener3 = components0.preferenceChangeListener();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener4 = components0.preferenceChangeListener();
        org.plista.kornakapi.core.config.Configuration configuration5 = components0.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList6 = null; // flaky: configuration5.getItembasedRecommenders();
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList7 = null; // flaky: configuration5.getFactorizationbasedRecommenders();
// flaky:         configuration5.setNumProcessorsForTraining(10);
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNotNull(preferenceChangeListener3);
        org.junit.Assert.assertNotNull(preferenceChangeListener4);
// flaky:         org.junit.Assert.assertNotNull(configuration5);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList6);
// flaky:         org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList7);
    }

    @Test
    public void test04382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04382");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str1 = batchDeleteCandidatesServlet0.getServletInfo();
        batchDeleteCandidatesServlet0.init();
        javax.servlet.ServletConfig servletConfig3 = null;
        batchDeleteCandidatesServlet0.init(servletConfig3);
        batchDeleteCandidatesServlet0.destroy();
        java.lang.String str6 = batchDeleteCandidatesServlet0.getServletInfo();
        javax.servlet.ServletConfig servletConfig7 = batchDeleteCandidatesServlet0.getServletConfig();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet8 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet9 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet10 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet9.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet10);
        setPreferenceServlet8.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet10);
        java.lang.String str13 = setPreferenceServlet8.getServletInfo();
        setPreferenceServlet8.destroy();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet8);
        batchDeleteCandidatesServlet0.destroy();
        // The following exception was thrown during execution in test generation
        try {
            batchDeleteCandidatesServlet0.log("MutablePreference{userID=0, itemID=10000, value=0.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(servletConfig7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test04383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04383");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations(0);
        factorizationbasedRecommenderConfig0.setNumberOfFeatures((int) (short) 100);
        factorizationbasedRecommenderConfig0.setNumberOfIterations(10);
        int int10 = factorizationbasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        int int11 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer12 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        java.io.File file13 = null;
        org.plista.kornakapi.core.storage.Storage storage14 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender15 = null;
        // The following exception was thrown during execution in test generation
        try {
            factorizationbasedInMemoryTrainer12.train(file13, storage14, recommender15, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test04384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04384");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList1 = configuration0.getItembasedRecommenders();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList2 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration3 = configuration0.getStorageConfiguration();
        int int4 = configuration0.getNumProcessorsForTraining();
        configuration0.setNumProcessorsForTraining((int) (short) 10);
        java.lang.String str7 = configuration0.getModelDirectory();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList8 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig9 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double10 = factorizationbasedRecommenderConfig9.getAlpha();
        double double11 = factorizationbasedRecommenderConfig9.getLambda();
        int int12 = factorizationbasedRecommenderConfig9.getNumberOfFeatures();
        factorizationbasedRecommenderConfig9.setUsesImplicitFeedback(false);
        int int15 = factorizationbasedRecommenderConfig9.getNumberOfFeatures();
        factorizationbasedRecommenderConfig9.setLambda((double) 0);
        factorizationbasedRecommenderConfig9.setName("userID");
        factorizationbasedRecommenderConfig9.setRetrainCronExpression("org.plista.kornakapi.web.MissingParameterException: itemID");
        factorizationbasedRecommenderConfig9.setAlpha((double) 0L);
        configuration0.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig9);
        java.lang.String str25 = configuration0.getModelDirectory();
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList1);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList2);
        org.junit.Assert.assertNull(storageConfiguration3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test04385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04385");
        org.plista.kornakapi.core.MutableCandidate mutableCandidate0 = new org.plista.kornakapi.core.MutableCandidate();
        java.lang.String str1 = mutableCandidate0.getLabel();
        long long2 = mutableCandidate0.getItemID();
        mutableCandidate0.set("recommender", 100L);
        long long6 = mutableCandidate0.getItemID();
        long long7 = mutableCandidate0.getItemID();
        mutableCandidate0.set("howMany", 10000L);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
    }

    @Test
    public void test04386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04386");
        org.plista.kornakapi.core.MutablePreference mutablePreference0 = new org.plista.kornakapi.core.MutablePreference();
        java.lang.String str1 = mutablePreference0.toString();
        long long2 = mutablePreference0.getItemID();
        java.lang.String str3 = mutablePreference0.toString();
        mutablePreference0.set((long) (byte) 100, (long) (byte) 0, (float) (short) 0);
        float float8 = mutablePreference0.getValue();
        long long9 = mutablePreference0.getItemID();
        float float10 = mutablePreference0.getValue();
        mutablePreference0.set((long) 52, 10000L, (float) 35);
        mutablePreference0.setValue((float) 1);
        long long17 = mutablePreference0.getUserID();
        long long18 = mutablePreference0.getUserID();
        float float19 = mutablePreference0.getValue();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str1, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str3, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 1.0f + "'", float19 == 1.0f);
    }

    @Test
    public void test04387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04387");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet1 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str2 = batchDeleteCandidatesServlet1.getServletInfo();
        java.lang.String str3 = batchDeleteCandidatesServlet1.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet4 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet5 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet6 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet5.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        setPreferenceServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet9 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet4.init((javax.servlet.ServletConfig) recommendServlet9);
        batchDeleteCandidatesServlet1.init((javax.servlet.ServletConfig) setPreferenceServlet4);
        batchDeleteCandidatesServlet1.destroy();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet1);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet14 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet15 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet16 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet15.init((javax.servlet.ServletConfig) batchSetPreferencesServlet16);
        javax.servlet.ServletConfig servletConfig18 = batchSetPreferencesServlet15.getServletConfig();
        addCandidateServlet14.init((javax.servlet.ServletConfig) batchSetPreferencesServlet15);
        batchSetPreferencesServlet15.init();
        java.lang.String str21 = batchSetPreferencesServlet15.getServletInfo();
        batchSetPreferencesServlet15.init();
        batchSetPreferencesServlet15.init();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet15);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet25 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet26 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet27 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet26.init((javax.servlet.ServletConfig) batchSetPreferencesServlet27);
        javax.servlet.ServletConfig servletConfig29 = batchSetPreferencesServlet26.getServletConfig();
        addCandidateServlet25.init((javax.servlet.ServletConfig) batchSetPreferencesServlet26);
        javax.servlet.ServletConfig servletConfig31 = addCandidateServlet25.getServletConfig();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet32 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet33 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet34 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet33.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet34);
        setPreferenceServlet32.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet34);
        javax.servlet.ServletConfig servletConfig37 = setPreferenceServlet32.getServletConfig();
        addCandidateServlet25.init((javax.servlet.ServletConfig) setPreferenceServlet32);
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet39 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet39.init();
        java.lang.String str41 = batchAddCandidatesServlet39.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet42 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str43 = batchDeleteCandidatesServlet42.getServletInfo();
        batchDeleteCandidatesServlet42.destroy();
        javax.servlet.ServletConfig servletConfig45 = batchDeleteCandidatesServlet42.getServletConfig();
        batchAddCandidatesServlet39.init(servletConfig45);
        batchAddCandidatesServlet39.init();
        addCandidateServlet25.init((javax.servlet.ServletConfig) batchAddCandidatesServlet39);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) addCandidateServlet25);
        org.plista.kornakapi.web.MissingParameterException missingParameterException55 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException56 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException55);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException57 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException55);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException58 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.InvalidParameterException: itemIDs", (java.lang.Throwable) invalidParameterException57);
        // The following exception was thrown during execution in test generation
        try {
            addCandidateServlet25.log("org.plista.kornakapi.web.MissingParameterException: label", (java.lang.Throwable) invalidParameterException57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(servletConfig18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(servletConfig29);
        org.junit.Assert.assertNotNull(servletConfig31);
        org.junit.Assert.assertNotNull(servletConfig37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(servletConfig45);
    }

    @Test
    public void test04388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04388");
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet0 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet0.init();
        setPreferenceServlet0.init();
        setPreferenceServlet0.destroy();
        javax.servlet.ServletConfig servletConfig4 = setPreferenceServlet0.getServletConfig();
        java.lang.String str5 = setPreferenceServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet6 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet7 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str8 = batchDeleteCandidatesServlet7.getServletInfo();
        java.lang.String str9 = batchDeleteCandidatesServlet7.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet10 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet11 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet12 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet11.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet12);
        setPreferenceServlet10.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet12);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet15 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet10.init((javax.servlet.ServletConfig) recommendServlet15);
        batchDeleteCandidatesServlet7.init((javax.servlet.ServletConfig) setPreferenceServlet10);
        batchDeleteCandidatesServlet7.destroy();
        batchDeleteCandidatesServlet6.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet7);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet20 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet21 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet22 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet21.init((javax.servlet.ServletConfig) batchSetPreferencesServlet22);
        batchDeleteCandidatesServlet20.init((javax.servlet.ServletConfig) batchSetPreferencesServlet22);
        javax.servlet.ServletConfig servletConfig25 = batchSetPreferencesServlet22.getServletConfig();
        batchSetPreferencesServlet22.init();
        batchDeleteCandidatesServlet7.init((javax.servlet.ServletConfig) batchSetPreferencesServlet22);
        javax.servlet.ServletConfig servletConfig28 = batchDeleteCandidatesServlet7.getServletConfig();
        setPreferenceServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet7);
        javax.servlet.ServletRequest servletRequest30 = null;
        javax.servlet.ServletResponse servletResponse31 = null;
        // The following exception was thrown during execution in test generation
        try {
            setPreferenceServlet0.service(servletRequest30, servletResponse31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(servletConfig25);
        org.junit.Assert.assertNotNull(servletConfig28);
    }

    @Test
    public void test04389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04389");
        org.plista.kornakapi.web.MissingParameterException missingParameterException2 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException4 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException2.addSuppressed((java.lang.Throwable) missingParameterException4);
        java.lang.Throwable[] throwableArray6 = missingParameterException4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = missingParameterException4.getSuppressed();
        org.plista.kornakapi.web.MissingParameterException missingParameterException10 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        java.lang.Throwable[] throwableArray11 = missingParameterException10.getSuppressed();
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException12 = new org.plista.kornakapi.web.InvalidParameterException("itemIDs", (java.lang.Throwable) missingParameterException10);
        org.plista.kornakapi.web.MissingParameterException missingParameterException15 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        java.lang.Throwable[] throwableArray16 = missingParameterException15.getSuppressed();
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException17 = new org.plista.kornakapi.web.InvalidParameterException("itemIDs", (java.lang.Throwable) missingParameterException15);
        org.plista.kornakapi.web.MissingParameterException missingParameterException22 = new org.plista.kornakapi.web.MissingParameterException("MutablePreference{userID=100, itemID=0, value=0.0}");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException23 = new org.plista.kornakapi.web.InvalidParameterException("label", (java.lang.Throwable) missingParameterException22);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException24 = new org.plista.kornakapi.web.InvalidParameterException("MutablePreference{userID=100, itemID=0, value=0.0}", (java.lang.Throwable) invalidParameterException23);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException25 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.InvalidParameterException: howMany", (java.lang.Throwable) invalidParameterException23);
        invalidParameterException17.addSuppressed((java.lang.Throwable) invalidParameterException25);
        missingParameterException10.addSuppressed((java.lang.Throwable) invalidParameterException17);
        java.lang.Throwable[] throwableArray28 = missingParameterException10.getSuppressed();
        missingParameterException4.addSuppressed((java.lang.Throwable) missingParameterException10);
        org.plista.kornakapi.web.MissingParameterException missingParameterException34 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException35 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException34);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException36 = new org.plista.kornakapi.web.InvalidParameterException("itemID", (java.lang.Throwable) missingParameterException34);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException37 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.InvalidParameterException: label", (java.lang.Throwable) invalidParameterException36);
        java.lang.Throwable throwable39 = null;
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException40 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: itemIDs", throwable39);
        org.plista.kornakapi.web.MissingParameterException missingParameterException44 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException45 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException44);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException46 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException44);
        org.plista.kornakapi.web.MissingParameterException missingParameterException48 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException50 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException48.addSuppressed((java.lang.Throwable) missingParameterException50);
        invalidParameterException46.addSuppressed((java.lang.Throwable) missingParameterException50);
        java.lang.Throwable[] throwableArray53 = missingParameterException50.getSuppressed();
        org.plista.kornakapi.web.MissingParameterException missingParameterException56 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException57 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException56);
        org.plista.kornakapi.web.MissingParameterException missingParameterException61 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException62 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException61);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException63 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException61);
        org.plista.kornakapi.web.MissingParameterException missingParameterException65 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException67 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException65.addSuppressed((java.lang.Throwable) missingParameterException67);
        invalidParameterException63.addSuppressed((java.lang.Throwable) missingParameterException67);
        java.lang.Throwable[] throwableArray70 = missingParameterException67.getSuppressed();
        invalidParameterException57.addSuppressed((java.lang.Throwable) missingParameterException67);
        missingParameterException50.addSuppressed((java.lang.Throwable) invalidParameterException57);
        invalidParameterException40.addSuppressed((java.lang.Throwable) invalidParameterException57);
        invalidParameterException37.addSuppressed((java.lang.Throwable) invalidParameterException40);
        missingParameterException4.addSuppressed((java.lang.Throwable) invalidParameterException37);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException76 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.MissingParameterException: itemIDs", (java.lang.Throwable) invalidParameterException37);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray70);
    }

    @Test
    public void test04390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04390");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = components0.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage3 = components0.storage();
        org.plista.kornakapi.core.storage.Storage storage4 = components0.storage();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener5 = components0.preferenceChangeListener();
        org.plista.kornakapi.core.config.Configuration configuration6 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration7 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration8 = components0.getConfiguration();
        int int9 = 0; // flaky: configuration8.getNumProcessorsForTraining();
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(storage3);
        org.junit.Assert.assertNull(storage4);
        org.junit.Assert.assertNotNull(preferenceChangeListener5);
// flaky:         org.junit.Assert.assertNotNull(configuration6);
// flaky:         org.junit.Assert.assertNotNull(configuration7);
// flaky:         org.junit.Assert.assertNotNull(configuration8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test04391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04391");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((-1L), (double) 0L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer5 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double8 = fixedCandidatesIDRescorer1.rescore(10L, (double) 10L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer9 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double12 = fixedCandidatesIDRescorer1.rescore((long) (short) 10, (double) 10);
        double double15 = fixedCandidatesIDRescorer1.rescore((long) 1, (double) (-1));
        double double18 = fixedCandidatesIDRescorer1.rescore((long) 0, (double) 32);
        double double21 = fixedCandidatesIDRescorer1.rescore((long) 35, (double) 1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer22 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.apache.mahout.common.LongPair longPair23 = null;
        double double25 = filteringLongPairRescorer22.rescore(longPair23, 0.0d);
        org.apache.mahout.common.LongPair longPair26 = null;
        double double28 = filteringLongPairRescorer22.rescore(longPair26, (double) 52.0f);
        org.apache.mahout.common.LongPair longPair29 = null;
        double double31 = filteringLongPairRescorer22.rescore(longPair29, 97.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 32.0d + "'", double18 == 32.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 52.0d + "'", double28 == 52.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 97.0d + "'", double31 == 97.0d);
    }

    @Test
    public void test04392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04392");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        double double6 = factorizationbasedRecommenderConfig0.getAlpha();
        java.lang.String str7 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        java.lang.String str8 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(false);
        factorizationbasedRecommenderConfig0.setLambda((double) (byte) 100);
        boolean boolean13 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        factorizationbasedRecommenderConfig0.setNumberOfIterations(1);
        factorizationbasedRecommenderConfig0.setNumberOfIterations(10000);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04393");
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener0 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener0.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener2 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener0.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener2);
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener8 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener8.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener10 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener10.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener8.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener10);
        delegatingPreferenceChangeListener10.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener10.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener15 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener15.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener17 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener17.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener17.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener15.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener17);
        delegatingPreferenceChangeListener17.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener10.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener17);
        delegatingPreferenceChangeListener10.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener10.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener10.notifyOfPreferenceChange();
        org.plista.kornakapi.web.Components components26 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.storage.Storage storage27 = components26.storage();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener28 = components26.preferenceChangeListener();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener29 = components26.preferenceChangeListener();
        preferenceChangeListener29.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener10.addDelegate(preferenceChangeListener29);
        delegatingPreferenceChangeListener2.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener10);
        delegatingPreferenceChangeListener10.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener10.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener10.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener10.notifyOfPreferenceChange();
        org.plista.kornakapi.web.Components components37 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration38 = components37.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration39 = components37.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler40 = components37.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler41 = components37.scheduler();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener42 = components37.preferenceChangeListener();
        org.plista.kornakapi.core.config.Configuration configuration43 = components37.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage44 = components37.storage();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener45 = components37.preferenceChangeListener();
        preferenceChangeListener45.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener10.addDelegate(preferenceChangeListener45);
        org.junit.Assert.assertNotNull(components26);
        org.junit.Assert.assertNull(storage27);
        org.junit.Assert.assertNotNull(preferenceChangeListener28);
        org.junit.Assert.assertNotNull(preferenceChangeListener29);
        org.junit.Assert.assertNotNull(components37);
// flaky:         org.junit.Assert.assertNotNull(configuration38);
// flaky:         org.junit.Assert.assertNotNull(configuration39);
        org.junit.Assert.assertNull(trainingScheduler40);
        org.junit.Assert.assertNull(trainingScheduler41);
        org.junit.Assert.assertNotNull(preferenceChangeListener42);
// flaky:         org.junit.Assert.assertNotNull(configuration43);
        org.junit.Assert.assertNull(storage44);
        org.junit.Assert.assertNotNull(preferenceChangeListener45);
    }

    @Test
    public void test04394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04394");
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet0 = new org.plista.kornakapi.web.servlets.TrainServlet();
        trainServlet0.destroy();
        trainServlet0.destroy();
        java.lang.String str3 = trainServlet0.getServletInfo();
        java.lang.String str4 = trainServlet0.getServletInfo();
        javax.servlet.ServletConfig servletConfig5 = trainServlet0.getServletConfig();
        javax.servlet.ServletConfig servletConfig6 = trainServlet0.getServletConfig();
        trainServlet0.destroy();
        // The following exception was thrown during execution in test generation
        try {
            trainServlet0.log("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(servletConfig5);
        org.junit.Assert.assertNull(servletConfig6);
    }

    @Test
    public void test04395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04395");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        batchDeleteCandidatesServlet0.destroy();
        javax.servlet.ServletConfig servletConfig6 = batchDeleteCandidatesServlet0.getServletConfig();
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet7 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet8 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet9 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet8.init((javax.servlet.ServletConfig) batchSetPreferencesServlet9);
        javax.servlet.ServletConfig servletConfig11 = batchSetPreferencesServlet8.getServletConfig();
        addCandidateServlet7.init((javax.servlet.ServletConfig) batchSetPreferencesServlet8);
        batchSetPreferencesServlet8.destroy();
        java.lang.String str14 = batchSetPreferencesServlet8.getServletInfo();
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet15 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str16 = trainServlet15.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet17 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet17.destroy();
        javax.servlet.ServletConfig servletConfig19 = deleteCandidateServlet17.getServletConfig();
        deleteCandidateServlet17.destroy();
        trainServlet15.init((javax.servlet.ServletConfig) deleteCandidateServlet17);
        javax.servlet.ServletConfig servletConfig22 = deleteCandidateServlet17.getServletConfig();
        batchSetPreferencesServlet8.init((javax.servlet.ServletConfig) deleteCandidateServlet17);
        deleteCandidateServlet17.init();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) deleteCandidateServlet17);
        javax.servlet.ServletConfig servletConfig26 = batchDeleteCandidatesServlet0.getServletConfig();
        javax.servlet.ServletConfig servletConfig27 = batchDeleteCandidatesServlet0.getServletConfig();
        // The following exception was thrown during execution in test generation
        try {
            javax.servlet.ServletContext servletContext28 = batchDeleteCandidatesServlet0.getServletContext();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(servletConfig6);
        org.junit.Assert.assertNotNull(servletConfig11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(servletConfig19);
        org.junit.Assert.assertNull(servletConfig22);
        org.junit.Assert.assertNotNull(servletConfig26);
        org.junit.Assert.assertNotNull(servletConfig27);
    }

    @Test
    public void test04396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04396");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet1 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str2 = batchDeleteCandidatesServlet1.getServletInfo();
        java.lang.String str3 = batchDeleteCandidatesServlet1.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet4 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet5 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet6 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet5.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        setPreferenceServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet9 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet4.init((javax.servlet.ServletConfig) recommendServlet9);
        batchDeleteCandidatesServlet1.init((javax.servlet.ServletConfig) setPreferenceServlet4);
        batchDeleteCandidatesServlet1.destroy();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet1);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet14 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str15 = batchDeleteCandidatesServlet14.getServletInfo();
        batchDeleteCandidatesServlet14.destroy();
        javax.servlet.ServletConfig servletConfig17 = batchDeleteCandidatesServlet14.getServletConfig();
        batchDeleteCandidatesServlet0.init(servletConfig17);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet19 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str20 = batchDeleteCandidatesServlet19.getServletInfo();
        batchDeleteCandidatesServlet19.init();
        java.lang.String str22 = batchDeleteCandidatesServlet19.getServletInfo();
        batchDeleteCandidatesServlet19.destroy();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet19);
        batchDeleteCandidatesServlet0.init();
        batchDeleteCandidatesServlet0.destroy();
        javax.servlet.ServletConfig servletConfig27 = batchDeleteCandidatesServlet0.getServletConfig();
        batchDeleteCandidatesServlet0.init();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = batchDeleteCandidatesServlet0.getServletName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(servletConfig17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(servletConfig27);
    }

    @Test
    public void test04397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04397");
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration0 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str1 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str4 = storageConfiguration0.getJdbcUrl();
        java.lang.String str5 = storageConfiguration0.getJdbcDriverClass();
        java.lang.String str6 = storageConfiguration0.getPassword();
        storageConfiguration0.setUsername("");
        storageConfiguration0.setJdbcUrl("org.plista.kornakapi.web.InvalidParameterException: label");
        storageConfiguration0.setJdbcUrl("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemIDs");
        java.lang.String str13 = storageConfiguration0.getPassword();
        storageConfiguration0.setPassword("userID");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test04398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04398");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        javax.servlet.ServletConfig servletConfig4 = batchSetPreferencesServlet1.getServletConfig();
        addCandidateServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet1);
        batchSetPreferencesServlet1.init();
        javax.servlet.ServletRequest servletRequest7 = null;
        javax.servlet.ServletResponse servletResponse8 = null;
        // The following exception was thrown during execution in test generation
        try {
            batchSetPreferencesServlet1.service(servletRequest7, servletResponse8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(servletConfig4);
    }

    @Test
    public void test04399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04399");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        java.lang.String str4 = batchSetPreferencesServlet2.getServletInfo();
        batchSetPreferencesServlet2.destroy();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet6 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str7 = batchDeleteCandidatesServlet6.getServletInfo();
        java.lang.String str8 = batchDeleteCandidatesServlet6.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet9 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet10 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet11 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet10.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet11);
        setPreferenceServlet9.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet11);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet14 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet9.init((javax.servlet.ServletConfig) recommendServlet14);
        batchDeleteCandidatesServlet6.init((javax.servlet.ServletConfig) setPreferenceServlet9);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet17 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet18 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet19 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet18.init((javax.servlet.ServletConfig) batchSetPreferencesServlet19);
        javax.servlet.ServletConfig servletConfig21 = batchSetPreferencesServlet18.getServletConfig();
        addCandidateServlet17.init((javax.servlet.ServletConfig) batchSetPreferencesServlet18);
        javax.servlet.ServletConfig servletConfig23 = addCandidateServlet17.getServletConfig();
        batchDeleteCandidatesServlet6.init((javax.servlet.ServletConfig) addCandidateServlet17);
        addCandidateServlet17.destroy();
        batchSetPreferencesServlet2.init((javax.servlet.ServletConfig) addCandidateServlet17);
        batchSetPreferencesServlet2.init();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet29 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet29.init();
        java.lang.String str31 = batchAddCandidatesServlet29.getServletInfo();
        javax.servlet.ServletConfig servletConfig32 = batchAddCandidatesServlet29.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet33 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str34 = batchDeleteCandidatesServlet33.getServletInfo();
        java.lang.String str35 = batchDeleteCandidatesServlet33.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet36 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet37 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet38 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet37.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet38);
        setPreferenceServlet36.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet38);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet41 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet36.init((javax.servlet.ServletConfig) recommendServlet41);
        batchDeleteCandidatesServlet33.init((javax.servlet.ServletConfig) setPreferenceServlet36);
        batchAddCandidatesServlet29.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet33);
        batchSetPreferencesServlet2.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet33);
        java.lang.String str46 = batchDeleteCandidatesServlet33.getServletInfo();
        java.lang.String str47 = batchDeleteCandidatesServlet33.getServletInfo();
        org.plista.kornakapi.web.MissingParameterException missingParameterException53 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException54 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException53);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException55 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException53);
        java.lang.Throwable[] throwableArray56 = missingParameterException53.getSuppressed();
        java.lang.Throwable[] throwableArray57 = missingParameterException53.getSuppressed();
        org.plista.kornakapi.web.MissingParameterException missingParameterException62 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException63 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException62);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException64 = new org.plista.kornakapi.web.InvalidParameterException("itemIDs", (java.lang.Throwable) invalidParameterException63);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException65 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.MissingParameterException: itemIDs", (java.lang.Throwable) invalidParameterException63);
        missingParameterException53.addSuppressed((java.lang.Throwable) invalidParameterException65);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException67 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemIDs", (java.lang.Throwable) invalidParameterException65);
        java.lang.Throwable[] throwableArray68 = invalidParameterException67.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            batchDeleteCandidatesServlet33.log("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName", (java.lang.Throwable) invalidParameterException67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(servletConfig21);
        org.junit.Assert.assertNotNull(servletConfig23);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(servletConfig32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray68);
    }

    @Test
    public void test04400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04400");
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet0 = new org.plista.kornakapi.web.servlets.TrainServlet();
        trainServlet0.destroy();
        trainServlet0.destroy();
        java.lang.String str3 = trainServlet0.getServletInfo();
        java.lang.String str4 = trainServlet0.getServletInfo();
        javax.servlet.ServletConfig servletConfig5 = trainServlet0.getServletConfig();
        // The following exception was thrown during execution in test generation
        try {
            trainServlet0.log("org.plista.kornakapi.web.InvalidParameterException: batchSize");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(servletConfig5);
    }

    @Test
    public void test04401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04401");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList1 = configuration0.getItembasedRecommenders();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList2 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration3 = configuration0.getStorageConfiguration();
        int int4 = configuration0.getNumProcessorsForTraining();
        configuration0.setNumProcessorsForTraining((int) (short) 10);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration7 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str8 = storageConfiguration7.getJdbcDriverClass();
        storageConfiguration7.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str11 = storageConfiguration7.getJdbcUrl();
        java.lang.String str12 = storageConfiguration7.getJdbcDriverClass();
        java.lang.String str13 = storageConfiguration7.getJdbcDriverClass();
        java.lang.String str14 = storageConfiguration7.getPassword();
        java.lang.String str15 = storageConfiguration7.getJdbcDriverClass();
        java.lang.String str16 = storageConfiguration7.getPassword();
        configuration0.setStorageConfiguration(storageConfiguration7);
        java.lang.String str18 = configuration0.getModelDirectory();
        configuration0.setNumProcessorsForTraining((int) (short) 0);
        configuration0.setModelDirectory("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig23 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str24 = itembasedRecommenderConfig23.getRetrainCronExpression();
        int int25 = itembasedRecommenderConfig23.getRetrainAfterPreferenceChanges();
        itembasedRecommenderConfig23.setRetrainAfterPreferenceChanges((int) (short) 100);
        configuration0.addItembasedRecommender(itembasedRecommenderConfig23);
        itembasedRecommenderConfig23.setSimilarityClass("userID");
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList1);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList2);
        org.junit.Assert.assertNull(storageConfiguration3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test04402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04402");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setNumProcessorsForTraining((int) (short) 100);
        configuration0.setModelDirectory("userID");
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList5 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration6 = configuration0.getStorageConfiguration();
        configuration0.setNumProcessorsForTraining(0);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList5);
        org.junit.Assert.assertNull(storageConfiguration6);
    }

    @Test
    public void test04403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04403");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((-1L), (double) 0L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer5 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double8 = fixedCandidatesIDRescorer1.rescore(10L, (double) 10L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer9 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double12 = fixedCandidatesIDRescorer1.rescore((long) (short) 10, (double) 10);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer13 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double16 = fixedCandidatesIDRescorer1.rescore((long) (byte) 0, (double) (byte) 1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer17 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer18 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer19 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.apache.mahout.common.LongPair longPair20 = null;
        double double22 = filteringLongPairRescorer19.rescore(longPair20, (double) (short) 100);
        org.apache.mahout.common.LongPair longPair23 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = filteringLongPairRescorer19.isFiltered(longPair23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
    }

    @Test
    public void test04404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04404");
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener0 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener0.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener0.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener3 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener3.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener5 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener5.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener3.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener5);
        delegatingPreferenceChangeListener0.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener3);
        delegatingPreferenceChangeListener3.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler10 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener13 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler10, "", (int) (short) 100);
        delegatingPreferenceChangeListener3.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener13);
        delegatingPreferenceChangeListener3.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener3.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener3.notifyOfPreferenceChange();
    }

    @Test
    public void test04405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04405");
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener0 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener0.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener0.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener3 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener3.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener5 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener5.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener3.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener5);
        delegatingPreferenceChangeListener0.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener3);
        delegatingPreferenceChangeListener3.notifyOfPreferenceChange();
        org.plista.kornakapi.web.Components components10 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration11 = components10.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration12 = components10.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler13 = components10.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler14 = components10.scheduler();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener15 = components10.preferenceChangeListener();
        org.plista.kornakapi.core.config.Configuration configuration16 = components10.getConfiguration();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener17 = components10.preferenceChangeListener();
        delegatingPreferenceChangeListener3.addDelegate(preferenceChangeListener17);
        delegatingPreferenceChangeListener3.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener20 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener20.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener22 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener22.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener20.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener22);
        delegatingPreferenceChangeListener20.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener26 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener26.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener28 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener28.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener26.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener28);
        delegatingPreferenceChangeListener28.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener20.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener28);
        delegatingPreferenceChangeListener3.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener20);
        delegatingPreferenceChangeListener20.notifyOfPreferenceChange();
        org.plista.kornakapi.web.Components components35 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener36 = components35.preferenceChangeListener();
        org.plista.kornakapi.core.storage.Storage storage37 = components35.storage();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler38 = components35.scheduler();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener39 = components35.preferenceChangeListener();
        delegatingPreferenceChangeListener20.addDelegate(preferenceChangeListener39);
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener41 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener41.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener43 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener43.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener41.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener43);
        delegatingPreferenceChangeListener43.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener43.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener48 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener48.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener50 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener50.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener50.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener48.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener50);
        delegatingPreferenceChangeListener50.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener43.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener50);
        delegatingPreferenceChangeListener43.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener43.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener43.notifyOfPreferenceChange();
        org.plista.kornakapi.web.Components components59 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.storage.Storage storage60 = components59.storage();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener61 = components59.preferenceChangeListener();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener62 = components59.preferenceChangeListener();
        preferenceChangeListener62.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener43.addDelegate(preferenceChangeListener62);
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener65 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener65.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener65.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener68 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener68.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener70 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener70.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener68.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener70);
        delegatingPreferenceChangeListener65.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener68);
        delegatingPreferenceChangeListener68.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener68.notifyOfPreferenceChange();
        org.plista.kornakapi.web.Components components76 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.storage.Storage storage77 = components76.storage();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener78 = components76.preferenceChangeListener();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener79 = components76.preferenceChangeListener();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener80 = components76.preferenceChangeListener();
        delegatingPreferenceChangeListener68.addDelegate(preferenceChangeListener80);
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener82 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener82.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener82.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener82.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler86 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener89 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler86, "label", (int) '#');
        delegatingPreferenceChangeListener82.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener89);
        delegatingPreferenceChangeListener68.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener82);
        delegatingPreferenceChangeListener43.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener82);
        delegatingPreferenceChangeListener20.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener82);
        delegatingPreferenceChangeListener82.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener82.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener82.notifyOfPreferenceChange();
        org.junit.Assert.assertNotNull(components10);
// flaky:         org.junit.Assert.assertNotNull(configuration11);
// flaky:         org.junit.Assert.assertNotNull(configuration12);
        org.junit.Assert.assertNull(trainingScheduler13);
        org.junit.Assert.assertNull(trainingScheduler14);
        org.junit.Assert.assertNotNull(preferenceChangeListener15);
// flaky:         org.junit.Assert.assertNotNull(configuration16);
        org.junit.Assert.assertNotNull(preferenceChangeListener17);
        org.junit.Assert.assertNotNull(components35);
        org.junit.Assert.assertNotNull(preferenceChangeListener36);
        org.junit.Assert.assertNull(storage37);
        org.junit.Assert.assertNull(trainingScheduler38);
        org.junit.Assert.assertNotNull(preferenceChangeListener39);
        org.junit.Assert.assertNotNull(components59);
        org.junit.Assert.assertNull(storage60);
        org.junit.Assert.assertNotNull(preferenceChangeListener61);
        org.junit.Assert.assertNotNull(preferenceChangeListener62);
        org.junit.Assert.assertNotNull(components76);
        org.junit.Assert.assertNull(storage77);
        org.junit.Assert.assertNotNull(preferenceChangeListener78);
        org.junit.Assert.assertNotNull(preferenceChangeListener79);
        org.junit.Assert.assertNotNull(preferenceChangeListener80);
    }

    @Test
    public void test04406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04406");
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.core.config.Configuration configuration1 = org.plista.kornakapi.core.config.Configuration.fromXML("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: MutablePreference{userID=0, itemID=0, value=100.0}");
            org.junit.Assert.fail("Expected exception of type com.thoughtworks.xstream.io.StreamException; message:  : only whitespace content allowed before start tag and not o (position: START_DOCUMENT seen o... @1:1) ");
        } catch (com.thoughtworks.xstream.io.StreamException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04407");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = components0.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler4 = components0.scheduler();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener5 = components0.preferenceChangeListener();
        org.plista.kornakapi.core.config.Configuration configuration6 = components0.getConfiguration();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig7 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str8 = itembasedRecommenderConfig7.getRetrainCronExpression();
        int int9 = itembasedRecommenderConfig7.getRetrainAfterPreferenceChanges();
        java.lang.String str10 = itembasedRecommenderConfig7.getSimilarityClass();
        itembasedRecommenderConfig7.setSimilarItemsPerItem(0);
        itembasedRecommenderConfig7.setSimilarityClass("");
        itembasedRecommenderConfig7.setSimilarItemsPerItem((int) '#');
        java.lang.String str17 = itembasedRecommenderConfig7.getName();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer18 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig7);
// flaky:         configuration6.addItembasedRecommender(itembasedRecommenderConfig7);
        itembasedRecommenderConfig7.setRetrainCronExpression("org.plista.kornakapi.web.InvalidParameterException: itemIDs");
        itembasedRecommenderConfig7.setSimilarItemsPerItem(52);
        itembasedRecommenderConfig7.setSimilarItemsPerItem((int) (short) 0);
        int int26 = itembasedRecommenderConfig7.getSimilarItemsPerItem();
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(trainingScheduler3);
        org.junit.Assert.assertNull(trainingScheduler4);
        org.junit.Assert.assertNotNull(preferenceChangeListener5);
// flaky:         org.junit.Assert.assertNotNull(configuration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test04408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04408");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 0);
        boolean boolean8 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        java.lang.String str9 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        java.lang.String str10 = factorizationbasedRecommenderConfig0.getName();
        int int11 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test04409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04409");
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet0 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet0.init();
        setPreferenceServlet0.init();
        setPreferenceServlet0.destroy();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet4 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet5 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet6 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet5.init((javax.servlet.ServletConfig) batchSetPreferencesServlet6);
        batchDeleteCandidatesServlet4.init((javax.servlet.ServletConfig) batchSetPreferencesServlet6);
        batchDeleteCandidatesServlet4.destroy();
        javax.servlet.ServletConfig servletConfig10 = batchDeleteCandidatesServlet4.getServletConfig();
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet11 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet12 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet13 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet12.init((javax.servlet.ServletConfig) batchSetPreferencesServlet13);
        javax.servlet.ServletConfig servletConfig15 = batchSetPreferencesServlet12.getServletConfig();
        addCandidateServlet11.init((javax.servlet.ServletConfig) batchSetPreferencesServlet12);
        batchSetPreferencesServlet12.destroy();
        java.lang.String str18 = batchSetPreferencesServlet12.getServletInfo();
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet19 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str20 = trainServlet19.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet21 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet21.destroy();
        javax.servlet.ServletConfig servletConfig23 = deleteCandidateServlet21.getServletConfig();
        deleteCandidateServlet21.destroy();
        trainServlet19.init((javax.servlet.ServletConfig) deleteCandidateServlet21);
        javax.servlet.ServletConfig servletConfig26 = deleteCandidateServlet21.getServletConfig();
        batchSetPreferencesServlet12.init((javax.servlet.ServletConfig) deleteCandidateServlet21);
        deleteCandidateServlet21.init();
        batchDeleteCandidatesServlet4.init((javax.servlet.ServletConfig) deleteCandidateServlet21);
        setPreferenceServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet4);
        setPreferenceServlet0.destroy();
        setPreferenceServlet0.init();
        org.junit.Assert.assertNotNull(servletConfig10);
        org.junit.Assert.assertNotNull(servletConfig15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(servletConfig23);
        org.junit.Assert.assertNull(servletConfig26);
    }

    @Test
    public void test04410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04410");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setAlpha((double) 10L);
        double double8 = factorizationbasedRecommenderConfig0.getLambda();
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges(97);
        double double11 = factorizationbasedRecommenderConfig0.getAlpha();
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges(32);
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        factorizationbasedRecommenderConfig0.setNumberOfFeatures(32);
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 100);
        factorizationbasedRecommenderConfig0.setLambda(52.0d);
        double double22 = factorizationbasedRecommenderConfig0.getAlpha();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
    }

    @Test
    public void test04411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04411");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = components0.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage3 = components0.storage();
        org.plista.kornakapi.core.storage.Storage storage4 = components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration5 = components0.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList6 = null; // flaky: configuration5.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration7 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str8 = storageConfiguration7.getJdbcDriverClass();
        storageConfiguration7.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str11 = storageConfiguration7.getJdbcUrl();
        java.lang.String str12 = storageConfiguration7.getJdbcDriverClass();
        java.lang.String str13 = storageConfiguration7.getJdbcDriverClass();
        java.lang.String str14 = storageConfiguration7.getPassword();
// flaky:         configuration5.setStorageConfiguration(storageConfiguration7);
        java.lang.String str16 = null; // flaky: configuration5.getModelDirectory();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList17 = null; // flaky: configuration5.getItembasedRecommenders();
        org.plista.kornakapi.core.storage.Storage storage18 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.KornakapiRecommender> strMap19 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.core.training.Trainer> strMap20 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler21 = null;
        org.plista.kornakapi.web.Components components22 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration23 = components22.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration24 = components22.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage25 = components22.storage();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener26 = components22.preferenceChangeListener();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler27 = components22.scheduler();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener28 = components22.preferenceChangeListener();
        org.plista.kornakapi.core.storage.Storage storage29 = components22.storage();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler30 = components22.scheduler();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener31 = components22.preferenceChangeListener();
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.web.Components.init(configuration5, storage18, strMap19, strMap20, trainingScheduler21, preferenceChangeListener31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(storage3);
        org.junit.Assert.assertNull(storage4);
// flaky:         org.junit.Assert.assertNotNull(configuration5);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "label" + "'", str16, "label");
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList17);
        org.junit.Assert.assertNotNull(components22);
// flaky:         org.junit.Assert.assertNotNull(configuration23);
// flaky:         org.junit.Assert.assertNotNull(configuration24);
        org.junit.Assert.assertNull(storage25);
        org.junit.Assert.assertNotNull(preferenceChangeListener26);
        org.junit.Assert.assertNull(trainingScheduler27);
        org.junit.Assert.assertNotNull(preferenceChangeListener28);
        org.junit.Assert.assertNull(storage29);
        org.junit.Assert.assertNull(trainingScheduler30);
        org.junit.Assert.assertNotNull(preferenceChangeListener31);
    }

    @Test
    public void test04412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04412");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 0);
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges((int) (byte) 100);
        double double10 = factorizationbasedRecommenderConfig0.getLambda();
        factorizationbasedRecommenderConfig0.setAlpha((double) (short) 10);
        int int13 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str14 = factorizationbasedRecommenderConfig0.getName();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) -1);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test04413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04413");
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener3 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler0, "org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName", (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04414");
        org.plista.kornakapi.core.MutablePreference mutablePreference0 = new org.plista.kornakapi.core.MutablePreference();
        java.lang.String str1 = mutablePreference0.toString();
        long long2 = mutablePreference0.getItemID();
        java.lang.String str3 = mutablePreference0.toString();
        float float4 = mutablePreference0.getValue();
        java.lang.String str5 = mutablePreference0.toString();
        long long6 = mutablePreference0.getUserID();
        mutablePreference0.set(32L, (long) 1, 1.0f);
        mutablePreference0.setValue((float) 1);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str1, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str3, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str5, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test04415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04415");
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration0 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str1 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str4 = storageConfiguration0.getJdbcUrl();
        java.lang.String str5 = storageConfiguration0.getJdbcUrl();
        java.lang.String str6 = storageConfiguration0.getJdbcUrl();
        storageConfiguration0.setUsername("recommender");
        java.lang.String str9 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setJdbcUrl("value");
        storageConfiguration0.setUsername("org.plista.kornakapi.web.MissingParameterException: itemIDs");
        java.lang.String str14 = storageConfiguration0.getJdbcDriverClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test04416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04416");
        org.plista.kornakapi.core.MutableCandidate mutableCandidate0 = new org.plista.kornakapi.core.MutableCandidate();
        long long1 = mutableCandidate0.getItemID();
        mutableCandidate0.set("itemIDs", (long) 0);
        mutableCandidate0.set("itemID", (long) 10000);
        java.lang.String str8 = mutableCandidate0.getLabel();
        mutableCandidate0.set("org.plista.kornakapi.web.MissingParameterException: itemID", (long) '#');
        java.lang.String str12 = mutableCandidate0.getLabel();
        java.lang.String str13 = mutableCandidate0.getLabel();
        long long14 = mutableCandidate0.getItemID();
        long long15 = mutableCandidate0.getItemID();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "itemID" + "'", str8, "itemID");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.plista.kornakapi.web.MissingParameterException: itemID" + "'", str12, "org.plista.kornakapi.web.MissingParameterException: itemID");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.plista.kornakapi.web.MissingParameterException: itemID" + "'", str13, "org.plista.kornakapi.web.MissingParameterException: itemID");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 35L + "'", long14 == 35L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 35L + "'", long15 == 35L);
    }

    @Test
    public void test04417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04417");
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet0 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet0.init();
        setPreferenceServlet0.init();
        setPreferenceServlet0.destroy();
        javax.servlet.ServletConfig servletConfig4 = setPreferenceServlet0.getServletConfig();
        java.lang.String str5 = setPreferenceServlet0.getServletInfo();
        java.lang.String str6 = setPreferenceServlet0.getServletInfo();
        setPreferenceServlet0.init();
        javax.servlet.ServletRequest servletRequest8 = null;
        javax.servlet.ServletResponse servletResponse9 = null;
        // The following exception was thrown during execution in test generation
        try {
            setPreferenceServlet0.service(servletRequest8, servletResponse9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test04418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04418");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str1 = batchDeleteCandidatesServlet0.getServletInfo();
        batchDeleteCandidatesServlet0.init();
        javax.servlet.ServletConfig servletConfig3 = null;
        batchDeleteCandidatesServlet0.init(servletConfig3);
        javax.servlet.ServletConfig servletConfig5 = batchDeleteCandidatesServlet0.getServletConfig();
        javax.servlet.ServletConfig servletConfig6 = batchDeleteCandidatesServlet0.getServletConfig();
        java.lang.String str7 = batchDeleteCandidatesServlet0.getServletInfo();
        javax.servlet.ServletConfig servletConfig8 = batchDeleteCandidatesServlet0.getServletConfig();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration9 = batchDeleteCandidatesServlet0.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNull(servletConfig5);
        org.junit.Assert.assertNull(servletConfig6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(servletConfig8);
    }

    @Test
    public void test04419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04419");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setLambda((double) 1);
        int int6 = factorizationbasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        java.lang.String str7 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int8 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        factorizationbasedRecommenderConfig0.setName("org.plista.kornakapi.web.InvalidParameterException: MutablePreference{userID=0, itemID=0, value=32.0}");
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test04420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04420");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setNumProcessorsForTraining((int) (short) 100);
        configuration0.setModelDirectory("userID");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig5 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str6 = itembasedRecommenderConfig5.getRetrainCronExpression();
        int int7 = itembasedRecommenderConfig5.getRetrainAfterPreferenceChanges();
        java.lang.String str8 = itembasedRecommenderConfig5.getSimilarityClass();
        itembasedRecommenderConfig5.setSimilarItemsPerItem(0);
        itembasedRecommenderConfig5.setRetrainCronExpression("value");
        int int13 = itembasedRecommenderConfig5.getRetrainAfterPreferenceChanges();
        configuration0.addItembasedRecommender(itembasedRecommenderConfig5);
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList15 = configuration0.getFactorizationbasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration16 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str17 = storageConfiguration16.getJdbcDriverClass();
        storageConfiguration16.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str20 = storageConfiguration16.getPassword();
        java.lang.String str21 = storageConfiguration16.getJdbcDriverClass();
        storageConfiguration16.setPassword("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        storageConfiguration16.setUsername("");
        configuration0.setStorageConfiguration(storageConfiguration16);
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig27 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double28 = factorizationbasedRecommenderConfig27.getAlpha();
        double double29 = factorizationbasedRecommenderConfig27.getLambda();
        int int30 = factorizationbasedRecommenderConfig27.getNumberOfFeatures();
        factorizationbasedRecommenderConfig27.setUsesImplicitFeedback(true);
        double double33 = factorizationbasedRecommenderConfig27.getAlpha();
        java.lang.String str34 = factorizationbasedRecommenderConfig27.getRetrainCronExpression();
        int int35 = factorizationbasedRecommenderConfig27.getRetrainAfterPreferenceChanges();
        boolean boolean36 = factorizationbasedRecommenderConfig27.isUsesImplicitFeedback();
        factorizationbasedRecommenderConfig27.setLambda((double) 1);
        int int39 = factorizationbasedRecommenderConfig27.getNumberOfFeatures();
        factorizationbasedRecommenderConfig27.setAlpha((double) (-1L));
        boolean boolean42 = factorizationbasedRecommenderConfig27.isUsesImplicitFeedback();
        configuration0.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig27);
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig44 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig44.setSimilarityClass("");
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer47 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig44);
        itembasedRecommenderConfig44.setRetrainCronExpression("");
        itembasedRecommenderConfig44.setName("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        configuration0.addItembasedRecommender(itembasedRecommenderConfig44);
        java.lang.String str53 = itembasedRecommenderConfig44.getSimilarityClass();
        int int54 = itembasedRecommenderConfig44.getSimilarItemsPerItem();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer55 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig44);
        java.io.File file56 = null;
        org.plista.kornakapi.core.storage.Storage storage57 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender58 = null;
        // The following exception was thrown during execution in test generation
        try {
            multithreadedItembasedInMemoryTrainer55.train(file56, storage57, recommender58, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test04421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04421");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(false);
        int int6 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setLambda((double) 0);
        factorizationbasedRecommenderConfig0.setName("userID");
        factorizationbasedRecommenderConfig0.setRetrainCronExpression("org.plista.kornakapi.web.MissingParameterException: itemID");
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer13 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        java.io.File file14 = null;
        org.plista.kornakapi.core.storage.Storage storage15 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender16 = null;
        // The following exception was thrown during execution in test generation
        try {
            factorizationbasedInMemoryTrainer13.train(file14, storage15, recommender16, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test04422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04422");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        javax.servlet.ServletConfig servletConfig4 = batchSetPreferencesServlet1.getServletConfig();
        addCandidateServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet1);
        batchSetPreferencesServlet1.init();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet7 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        java.lang.String str8 = recommendServlet7.getServletInfo();
        javax.servlet.ServletConfig servletConfig9 = recommendServlet7.getServletConfig();
        java.lang.String str10 = recommendServlet7.getServletInfo();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) recommendServlet7);
        javax.servlet.ServletConfig servletConfig12 = null;
        recommendServlet7.init(servletConfig12);
        java.lang.String str14 = recommendServlet7.getServletInfo();
        recommendServlet7.destroy();
        javax.servlet.ServletRequest servletRequest16 = null;
        javax.servlet.ServletResponse servletResponse17 = null;
        // The following exception was thrown during execution in test generation
        try {
            recommendServlet7.service(servletRequest16, servletResponse17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(servletConfig4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(servletConfig9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test04423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04423");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((-1L), (double) 0L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer5 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double8 = fixedCandidatesIDRescorer1.rescore(10000L, 0.0d);
        double double11 = fixedCandidatesIDRescorer1.rescore((long) 10, (double) (-1.0f));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
    }

    @Test
    public void test04424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04424");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        javax.servlet.ServletConfig servletConfig5 = batchSetPreferencesServlet2.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet6 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str7 = batchDeleteCandidatesServlet6.getServletInfo();
        java.lang.String str8 = batchDeleteCandidatesServlet6.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet9 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet10 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet11 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet10.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet11);
        setPreferenceServlet9.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet11);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet14 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet9.init((javax.servlet.ServletConfig) recommendServlet14);
        batchDeleteCandidatesServlet6.init((javax.servlet.ServletConfig) setPreferenceServlet9);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet17 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet18 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet19 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet18.init((javax.servlet.ServletConfig) batchSetPreferencesServlet19);
        javax.servlet.ServletConfig servletConfig21 = batchSetPreferencesServlet18.getServletConfig();
        addCandidateServlet17.init((javax.servlet.ServletConfig) batchSetPreferencesServlet18);
        javax.servlet.ServletConfig servletConfig23 = addCandidateServlet17.getServletConfig();
        batchDeleteCandidatesServlet6.init((javax.servlet.ServletConfig) addCandidateServlet17);
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet25 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str26 = trainServlet25.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet27 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet27.destroy();
        javax.servlet.ServletConfig servletConfig29 = deleteCandidateServlet27.getServletConfig();
        deleteCandidateServlet27.destroy();
        trainServlet25.init((javax.servlet.ServletConfig) deleteCandidateServlet27);
        addCandidateServlet17.init((javax.servlet.ServletConfig) trainServlet25);
        batchSetPreferencesServlet2.init((javax.servlet.ServletConfig) addCandidateServlet17);
        // The following exception was thrown during execution in test generation
        try {
            batchSetPreferencesServlet2.log("MutablePreference{userID=-1, itemID=97, value=52.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(servletConfig21);
        org.junit.Assert.assertNotNull(servletConfig23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(servletConfig29);
    }

    @Test
    public void test04425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04425");
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet0.init();
        java.lang.String str2 = batchAddCandidatesServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet3 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str4 = batchDeleteCandidatesServlet3.getServletInfo();
        java.lang.String str5 = batchDeleteCandidatesServlet3.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet6 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet7 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet8 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet7.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet8);
        setPreferenceServlet6.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet8);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet11 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet6.init((javax.servlet.ServletConfig) recommendServlet11);
        batchDeleteCandidatesServlet3.init((javax.servlet.ServletConfig) setPreferenceServlet6);
        batchDeleteCandidatesServlet3.destroy();
        batchAddCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet3);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet16 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str17 = batchDeleteCandidatesServlet16.getServletInfo();
        java.lang.String str18 = batchDeleteCandidatesServlet16.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet19 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet20 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet21 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet20.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet21);
        setPreferenceServlet19.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet21);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet24 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet19.init((javax.servlet.ServletConfig) recommendServlet24);
        batchDeleteCandidatesServlet16.init((javax.servlet.ServletConfig) setPreferenceServlet19);
        batchDeleteCandidatesServlet16.destroy();
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet28 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str29 = trainServlet28.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet30 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet30.destroy();
        javax.servlet.ServletConfig servletConfig32 = deleteCandidateServlet30.getServletConfig();
        deleteCandidateServlet30.destroy();
        trainServlet28.init((javax.servlet.ServletConfig) deleteCandidateServlet30);
        javax.servlet.ServletConfig servletConfig35 = deleteCandidateServlet30.getServletConfig();
        batchDeleteCandidatesServlet16.init((javax.servlet.ServletConfig) deleteCandidateServlet30);
        java.lang.String str37 = deleteCandidateServlet30.getServletInfo();
        deleteCandidateServlet30.destroy();
        batchDeleteCandidatesServlet3.init((javax.servlet.ServletConfig) deleteCandidateServlet30);
        javax.servlet.ServletConfig servletConfig40 = deleteCandidateServlet30.getServletConfig();
        deleteCandidateServlet30.destroy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = deleteCandidateServlet30.getServletName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(servletConfig32);
        org.junit.Assert.assertNull(servletConfig35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(servletConfig40);
    }

    @Test
    public void test04426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04426");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        addCandidateServlet0.destroy();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet2 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet3 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet4 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet3.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet4);
        setPreferenceServlet2.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet4);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet7 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet2.init((javax.servlet.ServletConfig) recommendServlet7);
        recommendServlet7.init();
        addCandidateServlet0.init((javax.servlet.ServletConfig) recommendServlet7);
        recommendServlet7.init();
        javax.servlet.ServletConfig servletConfig12 = recommendServlet7.getServletConfig();
        // The following exception was thrown during execution in test generation
        try {
            recommendServlet7.log("recommender");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig12);
    }

    @Test
    public void test04427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04427");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler2 = components0.scheduler();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener3 = components0.preferenceChangeListener();
        org.plista.kornakapi.core.config.Configuration configuration4 = components0.getConfiguration();
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig5 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double6 = factorizationbasedRecommenderConfig5.getAlpha();
        double double7 = factorizationbasedRecommenderConfig5.getLambda();
        int int8 = factorizationbasedRecommenderConfig5.getNumberOfFeatures();
        java.lang.String str9 = factorizationbasedRecommenderConfig5.getRetrainCronExpression();
        int int10 = factorizationbasedRecommenderConfig5.getNumberOfFeatures();
        factorizationbasedRecommenderConfig5.setNumberOfIterations((int) (short) 0);
        factorizationbasedRecommenderConfig5.setName("");
        factorizationbasedRecommenderConfig5.setNumberOfIterations(0);
// flaky:         configuration4.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig5);
        java.lang.String str18 = null; // flaky: configuration4.getModelDirectory();
        int int19 = 0; // flaky: configuration4.getNumProcessorsForTraining();
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList20 = null; // flaky: configuration4.getFactorizationbasedRecommenders();
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
        org.junit.Assert.assertNull(trainingScheduler2);
        org.junit.Assert.assertNotNull(preferenceChangeListener3);
// flaky:         org.junit.Assert.assertNotNull(configuration4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "userID" + "'", str18, "userID");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
// flaky:         org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList20);
    }

    @Test
    public void test04428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04428");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setNumProcessorsForTraining((int) (short) 100);
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig3 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double4 = factorizationbasedRecommenderConfig3.getAlpha();
        double double5 = factorizationbasedRecommenderConfig3.getLambda();
        configuration0.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig3);
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList7 = configuration0.getFactorizationbasedRecommenders();
        int int8 = configuration0.getNumProcessorsForTraining();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList9 = configuration0.getItembasedRecommenders();
        configuration0.setNumProcessorsForTraining(97);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList9);
    }

    @Test
    public void test04429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04429");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        batchDeleteCandidatesServlet0.destroy();
        javax.servlet.ServletConfig servletConfig6 = batchDeleteCandidatesServlet0.getServletConfig();
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet7 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet8 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet9 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet8.init((javax.servlet.ServletConfig) batchSetPreferencesServlet9);
        javax.servlet.ServletConfig servletConfig11 = batchSetPreferencesServlet8.getServletConfig();
        addCandidateServlet7.init((javax.servlet.ServletConfig) batchSetPreferencesServlet8);
        batchSetPreferencesServlet8.destroy();
        java.lang.String str14 = batchSetPreferencesServlet8.getServletInfo();
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet15 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str16 = trainServlet15.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet17 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet17.destroy();
        javax.servlet.ServletConfig servletConfig19 = deleteCandidateServlet17.getServletConfig();
        deleteCandidateServlet17.destroy();
        trainServlet15.init((javax.servlet.ServletConfig) deleteCandidateServlet17);
        javax.servlet.ServletConfig servletConfig22 = deleteCandidateServlet17.getServletConfig();
        batchSetPreferencesServlet8.init((javax.servlet.ServletConfig) deleteCandidateServlet17);
        deleteCandidateServlet17.init();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) deleteCandidateServlet17);
        org.plista.kornakapi.web.MissingParameterException missingParameterException32 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException33 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException32);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException34 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException32);
        org.plista.kornakapi.web.MissingParameterException missingParameterException36 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException38 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException36.addSuppressed((java.lang.Throwable) missingParameterException38);
        invalidParameterException34.addSuppressed((java.lang.Throwable) missingParameterException38);
        org.plista.kornakapi.web.MissingParameterException missingParameterException44 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException45 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException44);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException46 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException44);
        org.plista.kornakapi.web.MissingParameterException missingParameterException48 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException50 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException48.addSuppressed((java.lang.Throwable) missingParameterException50);
        invalidParameterException46.addSuppressed((java.lang.Throwable) missingParameterException50);
        missingParameterException38.addSuppressed((java.lang.Throwable) missingParameterException50);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException54 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.MissingParameterException: itemID", (java.lang.Throwable) missingParameterException38);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException55 = new org.plista.kornakapi.web.InvalidParameterException("label", (java.lang.Throwable) invalidParameterException54);
        // The following exception was thrown during execution in test generation
        try {
            deleteCandidateServlet17.log("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.InvalidParameterException: recommender", (java.lang.Throwable) invalidParameterException55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(servletConfig6);
        org.junit.Assert.assertNotNull(servletConfig11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(servletConfig19);
        org.junit.Assert.assertNull(servletConfig22);
    }

    @Test
    public void test04430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04430");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations(0);
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer6 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        java.io.File file7 = null;
        org.plista.kornakapi.core.storage.Storage storage8 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender9 = null;
        // The following exception was thrown during execution in test generation
        try {
            factorizationbasedInMemoryTrainer6.train(file7, storage8, recommender9, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test04431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04431");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList2 = null; // flaky: configuration1.getItembasedRecommenders();
        java.lang.String str3 = null; // flaky: configuration1.getModelDirectory();
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig4 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double5 = factorizationbasedRecommenderConfig4.getAlpha();
        double double6 = factorizationbasedRecommenderConfig4.getLambda();
        int int7 = factorizationbasedRecommenderConfig4.getNumberOfFeatures();
        factorizationbasedRecommenderConfig4.setNumberOfIterations(0);
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer10 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig4);
// flaky:         configuration1.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig4);
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList12 = null; // flaky: configuration1.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration13 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str14 = storageConfiguration13.getJdbcDriverClass();
        storageConfiguration13.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str17 = storageConfiguration13.getJdbcUrl();
        java.lang.String str18 = storageConfiguration13.getJdbcDriverClass();
        java.lang.String str19 = storageConfiguration13.getJdbcDriverClass();
        java.lang.String str20 = storageConfiguration13.getPassword();
        java.lang.String str21 = storageConfiguration13.getJdbcDriverClass();
// flaky:         configuration1.setStorageConfiguration(storageConfiguration13);
// flaky:         configuration1.setModelDirectory("value");
        org.plista.kornakapi.web.Components components25 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration26 = components25.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration27 = components25.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage28 = components25.storage();
        org.plista.kornakapi.core.storage.Storage storage29 = components25.storage();
        org.plista.kornakapi.core.config.Configuration configuration30 = components25.getConfiguration();
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig31 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double32 = factorizationbasedRecommenderConfig31.getAlpha();
        double double33 = factorizationbasedRecommenderConfig31.getLambda();
        int int34 = factorizationbasedRecommenderConfig31.getNumberOfFeatures();
        factorizationbasedRecommenderConfig31.setNumberOfIterations(0);
        factorizationbasedRecommenderConfig31.setNumberOfFeatures((int) (short) 100);
        boolean boolean39 = factorizationbasedRecommenderConfig31.isUsesImplicitFeedback();
// flaky:         configuration30.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig31);
        org.plista.kornakapi.web.Components components41 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration42 = components41.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler43 = components41.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler44 = components41.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration45 = components41.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration46 = components41.getConfiguration();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig47 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig47.setSimilarityClass("");
        java.lang.String str50 = itembasedRecommenderConfig47.getName();
        java.lang.String str51 = itembasedRecommenderConfig47.getSimilarityClass();
        itembasedRecommenderConfig47.setName("");
        java.lang.String str54 = itembasedRecommenderConfig47.getSimilarityClass();
// flaky:         configuration46.addItembasedRecommender(itembasedRecommenderConfig47);
        itembasedRecommenderConfig47.setSimilarItemsPerItem((int) (byte) 1);
// flaky:         configuration30.addItembasedRecommender(itembasedRecommenderConfig47);
        java.lang.String str59 = null; // flaky: configuration30.getModelDirectory();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig60 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str61 = itembasedRecommenderConfig60.getRetrainCronExpression();
        int int62 = itembasedRecommenderConfig60.getRetrainAfterPreferenceChanges();
        java.lang.String str63 = itembasedRecommenderConfig60.getSimilarityClass();
        itembasedRecommenderConfig60.setSimilarItemsPerItem(0);
        itembasedRecommenderConfig60.setSimilarityClass("");
        int int68 = itembasedRecommenderConfig60.getSimilarItemsPerItem();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer69 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig60);
// flaky:         configuration30.addItembasedRecommender(itembasedRecommenderConfig60);
// flaky:         configuration1.addItembasedRecommender(itembasedRecommenderConfig60);
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList72 = null; // flaky: configuration1.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration73 = null; // flaky: configuration1.getStorageConfiguration();
// flaky:         storageConfiguration73.setJdbcUrl("MutablePreference{userID=1, itemID=10, value=10000.0}");
// flaky:         storageConfiguration73.setUsername("MutablePreference{userID=-1, itemID=10, value=1.0}");
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "MutablePreference{userID=0, itemID=32, value=-1.0}" + "'", str3, "MutablePreference{userID=0, itemID=32, value=-1.0}");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(components25);
// flaky:         org.junit.Assert.assertNotNull(configuration26);
// flaky:         org.junit.Assert.assertNotNull(configuration27);
        org.junit.Assert.assertNull(storage28);
        org.junit.Assert.assertNull(storage29);
// flaky:         org.junit.Assert.assertNotNull(configuration30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(components41);
// flaky:         org.junit.Assert.assertNotNull(configuration42);
        org.junit.Assert.assertNull(trainingScheduler43);
        org.junit.Assert.assertNull(trainingScheduler44);
// flaky:         org.junit.Assert.assertNotNull(configuration45);
// flaky:         org.junit.Assert.assertNotNull(configuration46);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "value" + "'", str59, "value");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList72);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration73);
    }

    @Test
    public void test04432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04432");
        org.plista.kornakapi.core.MutablePreference mutablePreference0 = new org.plista.kornakapi.core.MutablePreference();
        java.lang.String str1 = mutablePreference0.toString();
        long long2 = mutablePreference0.getItemID();
        long long3 = mutablePreference0.getItemID();
        long long4 = mutablePreference0.getUserID();
        mutablePreference0.set((long) (short) 0, 10000L, (float) (byte) 10);
        float float9 = mutablePreference0.getValue();
        long long10 = mutablePreference0.getItemID();
        long long11 = mutablePreference0.getItemID();
        mutablePreference0.setValue((float) (byte) 1);
        mutablePreference0.set((long) 52, 97L, (float) (-1L));
        mutablePreference0.set((long) (short) 1, (long) 0, (float) (short) 10);
        java.lang.String str22 = mutablePreference0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str1, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 10.0f + "'", float9 == 10.0f);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MutablePreference{userID=1, itemID=0, value=10.0}" + "'", str22, "MutablePreference{userID=1, itemID=0, value=10.0}");
    }

    @Test
    public void test04433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04433");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        javax.servlet.ServletConfig servletConfig4 = batchSetPreferencesServlet1.getServletConfig();
        addCandidateServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet1);
        batchSetPreferencesServlet1.init();
        java.lang.String str7 = batchSetPreferencesServlet1.getServletInfo();
        javax.servlet.ServletConfig servletConfig8 = batchSetPreferencesServlet1.getServletConfig();
        // The following exception was thrown during execution in test generation
        try {
            batchSetPreferencesServlet1.log("howMany");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(servletConfig4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(servletConfig8);
    }

    @Test
    public void test04434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04434");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 100);
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer7 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        factorizationbasedRecommenderConfig0.setName("MutablePreference{userID=0, itemID=0, value=1.0}");
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(false);
        factorizationbasedRecommenderConfig0.setNumberOfIterations(0);
        factorizationbasedRecommenderConfig0.setAlpha(97.0d);
        int int16 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        int int17 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setAlpha((double) 1);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test04435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04435");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer2 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer3 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer4 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double7 = fixedCandidatesIDRescorer1.rescore((long) (byte) 100, (double) 'a');
        double double10 = fixedCandidatesIDRescorer1.rescore((long) (byte) 10, (double) 1L);
        double double13 = fixedCandidatesIDRescorer1.rescore(97L, 100.0d);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = fixedCandidatesIDRescorer1.isFiltered((long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 97.0d + "'", double7 == 97.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
    }

    @Test
    public void test04436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04436");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setNumProcessorsForTraining((int) (short) 100);
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig3 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double4 = factorizationbasedRecommenderConfig3.getAlpha();
        double double5 = factorizationbasedRecommenderConfig3.getLambda();
        configuration0.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig3);
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList7 = configuration0.getFactorizationbasedRecommenders();
        org.plista.kornakapi.web.Components components8 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration9 = components8.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler10 = components8.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler11 = components8.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration12 = components8.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration13 = components8.getConfiguration();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig14 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig14.setSimilarityClass("");
        java.lang.String str17 = itembasedRecommenderConfig14.getName();
        java.lang.String str18 = itembasedRecommenderConfig14.getSimilarityClass();
        itembasedRecommenderConfig14.setName("");
        java.lang.String str21 = itembasedRecommenderConfig14.getSimilarityClass();
// flaky:         configuration13.addItembasedRecommender(itembasedRecommenderConfig14);
        itembasedRecommenderConfig14.setSimilarItemsPerItem((int) '#');
        int int25 = itembasedRecommenderConfig14.getSimilarItemsPerItem();
        configuration0.addItembasedRecommender(itembasedRecommenderConfig14);
        configuration0.setNumProcessorsForTraining((int) (byte) 1);
        configuration0.setModelDirectory("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.InvalidParameterException: file");
        org.plista.kornakapi.core.storage.Storage storage31 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.KornakapiRecommender> strMap32 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.core.training.Trainer> strMap33 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler34 = null;
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener35 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener35.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener37 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener37.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener35.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener37);
        delegatingPreferenceChangeListener37.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener37.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener42 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener42.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener44 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener44.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener44.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener42.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener44);
        delegatingPreferenceChangeListener44.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener37.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener44);
        delegatingPreferenceChangeListener37.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener51 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener51.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener53 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener53.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener53.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener51.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener53);
        delegatingPreferenceChangeListener37.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener53);
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler58 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener61 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler58, "", (int) (short) 100);
        inMemoryPreferenceChangeListener61.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener53.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener61);
        inMemoryPreferenceChangeListener61.notifyOfPreferenceChange();
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.web.Components.init(configuration0, storage31, strMap32, strMap33, trainingScheduler34, (org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList7);
        org.junit.Assert.assertNotNull(components8);
// flaky:         org.junit.Assert.assertNotNull(configuration9);
        org.junit.Assert.assertNull(trainingScheduler10);
        org.junit.Assert.assertNull(trainingScheduler11);
// flaky:         org.junit.Assert.assertNotNull(configuration12);
// flaky:         org.junit.Assert.assertNotNull(configuration13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
    }

    @Test
    public void test04437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04437");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = components0.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler4 = components0.scheduler();
        org.plista.kornakapi.core.storage.Storage storage5 = components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration6 = components0.getConfiguration();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig7 = null;
// flaky:         configuration6.addItembasedRecommender(itembasedRecommenderConfig7);
// flaky:         configuration6.setNumProcessorsForTraining((int) (short) 10);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration11 = null; // flaky: configuration6.getStorageConfiguration();
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig12 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double13 = factorizationbasedRecommenderConfig12.getAlpha();
        double double14 = factorizationbasedRecommenderConfig12.getLambda();
        boolean boolean15 = factorizationbasedRecommenderConfig12.isUsesImplicitFeedback();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer16 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig12);
        double double17 = factorizationbasedRecommenderConfig12.getAlpha();
        boolean boolean18 = factorizationbasedRecommenderConfig12.isUsesImplicitFeedback();
        factorizationbasedRecommenderConfig12.setUsesImplicitFeedback(true);
        int int21 = factorizationbasedRecommenderConfig12.getRetrainAfterPreferenceChanges();
        factorizationbasedRecommenderConfig12.setNumberOfIterations((int) 'a');
        factorizationbasedRecommenderConfig12.setAlpha((-1.0d));
// flaky:         configuration6.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig12);
        java.lang.String str27 = null; // flaky: configuration6.getModelDirectory();
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList28 = null; // flaky: configuration6.getFactorizationbasedRecommenders();
        org.plista.kornakapi.core.storage.Storage storage29 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.KornakapiRecommender> strMap30 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.core.training.Trainer> strMap31 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler32 = null;
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener33 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener33.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener35 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener35.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener33.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener35);
        delegatingPreferenceChangeListener35.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener35.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener40 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener40.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener42 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener42.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener42.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener40.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener42);
        delegatingPreferenceChangeListener42.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener35.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener42);
        delegatingPreferenceChangeListener35.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener35.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener50 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener50.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener52 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener52.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener50.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener52);
        delegatingPreferenceChangeListener52.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener52.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener57 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener57.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener59 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener59.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener59.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener57.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener59);
        delegatingPreferenceChangeListener59.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener52.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener59);
        delegatingPreferenceChangeListener35.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener52);
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener66 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener66.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener68 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener68.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener66.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener68);
        delegatingPreferenceChangeListener68.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener68.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener73 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener73.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener75 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener75.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener75.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener73.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener75);
        delegatingPreferenceChangeListener75.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener68.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener75);
        delegatingPreferenceChangeListener68.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener82 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener82.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener84 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener84.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener84.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener82.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener84);
        delegatingPreferenceChangeListener68.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener84);
        delegatingPreferenceChangeListener68.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener52.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener68);
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.web.Components.init(configuration6, storage29, strMap30, strMap31, trainingScheduler32, (org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(trainingScheduler3);
        org.junit.Assert.assertNull(trainingScheduler4);
        org.junit.Assert.assertNull(storage5);
// flaky:         org.junit.Assert.assertNotNull(configuration6);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: MutablePreference{userID=0, itemID=0, value=100.0}" + "'", str27, "org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: MutablePreference{userID=0, itemID=0, value=100.0}");
// flaky:         org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList28);
    }

    @Test
    public void test04438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04438");
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration0 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str1 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str4 = storageConfiguration0.getJdbcUrl();
        java.lang.String str5 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setJdbcDriverClass("batchSize");
        java.lang.String str8 = storageConfiguration0.getPassword();
        storageConfiguration0.setUsername("batchSize");
        java.lang.String str11 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setJdbcUrl("hi!");
        java.lang.String str14 = storageConfiguration0.getPassword();
        storageConfiguration0.setJdbcUrl("MutablePreference{userID=-1, itemID=10, value=10.0}");
        java.lang.String str17 = storageConfiguration0.getPassword();
        java.lang.String str18 = storageConfiguration0.getUsername();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "batchSize" + "'", str11, "batchSize");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "batchSize" + "'", str18, "batchSize");
    }

    @Test
    public void test04439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04439");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations(0);
        factorizationbasedRecommenderConfig0.setNumberOfFeatures((int) (short) 100);
        factorizationbasedRecommenderConfig0.setLambda((double) (short) 1);
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        java.lang.Class<?> wildcardClass12 = factorizationbasedRecommenderConfig0.getClass();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test04440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04440");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        int int1 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        java.lang.String str2 = itembasedRecommenderConfig0.getName();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer3 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        java.lang.String str4 = itembasedRecommenderConfig0.getRetrainCronExpression();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer5 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        java.io.File file6 = null;
        org.plista.kornakapi.core.storage.Storage storage7 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender8 = null;
        // The following exception was thrown during execution in test generation
        try {
            multithreadedItembasedInMemoryTrainer5.train(file6, storage7, recommender8, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test04441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04441");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((-1L), (double) 0L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer5 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double8 = fixedCandidatesIDRescorer1.rescore(10L, (double) 10L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer9 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double12 = fixedCandidatesIDRescorer1.rescore((long) (short) 10, (double) 10);
        double double15 = fixedCandidatesIDRescorer1.rescore((long) 1, (double) (-1));
        double double18 = fixedCandidatesIDRescorer1.rescore((long) 0, (double) 32);
        double double21 = fixedCandidatesIDRescorer1.rescore((long) 35, (double) 1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer22 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.apache.mahout.common.LongPair longPair23 = null;
        double double25 = filteringLongPairRescorer22.rescore(longPair23, 0.0d);
        org.apache.mahout.common.LongPair longPair26 = null;
        double double28 = filteringLongPairRescorer22.rescore(longPair26, (double) 52.0f);
        org.apache.mahout.common.LongPair longPair29 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = filteringLongPairRescorer22.isFiltered(longPair29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 32.0d + "'", double18 == 32.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 52.0d + "'", double28 == 52.0d);
    }

    @Test
    public void test04442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04442");
        org.plista.kornakapi.core.MutablePreference mutablePreference0 = new org.plista.kornakapi.core.MutablePreference();
        java.lang.String str1 = mutablePreference0.toString();
        long long2 = mutablePreference0.getItemID();
        long long3 = mutablePreference0.getItemID();
        mutablePreference0.setValue((float) (-1));
        long long6 = mutablePreference0.getUserID();
        long long7 = mutablePreference0.getItemID();
        float float8 = mutablePreference0.getValue();
        long long9 = mutablePreference0.getItemID();
        mutablePreference0.setValue((float) 32);
        java.lang.String str12 = mutablePreference0.toString();
        java.lang.String str13 = mutablePreference0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str1, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + (-1.0f) + "'", float8 == (-1.0f));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MutablePreference{userID=0, itemID=0, value=32.0}" + "'", str12, "MutablePreference{userID=0, itemID=0, value=32.0}");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MutablePreference{userID=0, itemID=0, value=32.0}" + "'", str13, "MutablePreference{userID=0, itemID=0, value=32.0}");
    }

    @Test
    public void test04443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04443");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = components0.getConfiguration();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener3 = components0.preferenceChangeListener();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener4 = components0.preferenceChangeListener();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener5 = components0.preferenceChangeListener();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler6 = components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration7 = components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler8 = components0.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler9 = components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration10 = components0.getConfiguration();
// flaky:         configuration10.setModelDirectory("MutablePreference{userID=100, itemID=0, value=1.0}");
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNotNull(preferenceChangeListener3);
        org.junit.Assert.assertNotNull(preferenceChangeListener4);
        org.junit.Assert.assertNotNull(preferenceChangeListener5);
        org.junit.Assert.assertNull(trainingScheduler6);
// flaky:         org.junit.Assert.assertNotNull(configuration7);
        org.junit.Assert.assertNull(trainingScheduler8);
        org.junit.Assert.assertNull(trainingScheduler9);
// flaky:         org.junit.Assert.assertNotNull(configuration10);
    }

    @Test
    public void test04444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04444");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 100);
        int int7 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        boolean boolean8 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        factorizationbasedRecommenderConfig0.setName("MutablePreference{userID=10000, itemID=35, value=0.0}");
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04445");
        org.plista.kornakapi.web.MissingParameterException missingParameterException2 = new org.plista.kornakapi.web.MissingParameterException("MutablePreference{userID=100, itemID=0, value=0.0}");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException3 = new org.plista.kornakapi.web.InvalidParameterException("label", (java.lang.Throwable) missingParameterException2);
        java.lang.Throwable[] throwableArray4 = invalidParameterException3.getSuppressed();
        java.lang.String str5 = invalidParameterException3.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.plista.kornakapi.web.InvalidParameterException: label" + "'", str5, "org.plista.kornakapi.web.InvalidParameterException: label");
    }

    @Test
    public void test04446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04446");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setName("");
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(false);
        factorizationbasedRecommenderConfig0.setNumberOfIterations((-1));
        int int10 = factorizationbasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        java.lang.String str11 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        factorizationbasedRecommenderConfig0.setAlpha((double) (short) 100);
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (byte) 0);
        factorizationbasedRecommenderConfig0.setAlpha((double) 1.0f);
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer18 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        java.io.File file19 = null;
        org.plista.kornakapi.core.storage.Storage storage20 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender21 = null;
        // The following exception was thrown during execution in test generation
        try {
            factorizationbasedInMemoryTrainer18.train(file19, storage20, recommender21, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test04447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04447");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str1 = batchDeleteCandidatesServlet0.getServletInfo();
        java.lang.String str2 = batchDeleteCandidatesServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet3 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet4 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet5 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        setPreferenceServlet3.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet8 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet3.init((javax.servlet.ServletConfig) recommendServlet8);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet3);
        batchDeleteCandidatesServlet0.destroy();
        batchDeleteCandidatesServlet0.init();
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet13 = new org.plista.kornakapi.web.servlets.TrainServlet();
        java.lang.String str14 = trainServlet13.getServletInfo();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet15 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet15.destroy();
        javax.servlet.ServletConfig servletConfig17 = deleteCandidateServlet15.getServletConfig();
        deleteCandidateServlet15.destroy();
        trainServlet13.init((javax.servlet.ServletConfig) deleteCandidateServlet15);
        java.lang.String str20 = trainServlet13.getServletInfo();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) trainServlet13);
        batchDeleteCandidatesServlet0.destroy();
        batchDeleteCandidatesServlet0.init();
        batchDeleteCandidatesServlet0.init();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = batchDeleteCandidatesServlet0.getServletName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(servletConfig17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test04448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04448");
        java.lang.Throwable throwable1 = null;
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException2 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemID", throwable1);
        org.plista.kornakapi.web.MissingParameterException missingParameterException4 = new org.plista.kornakapi.web.MissingParameterException("MutablePreference{userID=10000, itemID=-1, value=10.0}");
        invalidParameterException2.addSuppressed((java.lang.Throwable) missingParameterException4);
        java.lang.Throwable[] throwableArray6 = missingParameterException4.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray6);
    }

    @Test
    public void test04449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04449");
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler0 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener3 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler0, "org.plista.kornakapi.web.InvalidParameterException: howMany", (int) '#');
        inMemoryPreferenceChangeListener3.notifyOfPreferenceChange();
    }

    @Test
    public void test04450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04450");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((-1L), (double) 0L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer5 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double8 = fixedCandidatesIDRescorer1.rescore((long) 1, (double) 10);
        double double11 = fixedCandidatesIDRescorer1.rescore((long) ' ', (double) 35);
        double double14 = fixedCandidatesIDRescorer1.rescore((long) (byte) 0, (double) 100L);
        double double17 = fixedCandidatesIDRescorer1.rescore((long) 0, (double) (-1));
        double double20 = fixedCandidatesIDRescorer1.rescore((-1L), (double) (byte) 100);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
    }

    @Test
    public void test04451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04451");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig0.setSimilarityClass("");
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer3 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        itembasedRecommenderConfig0.setRetrainCronExpression("");
        itembasedRecommenderConfig0.setSimilarItemsPerItem(10);
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer8 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        java.lang.String str9 = itembasedRecommenderConfig0.getSimilarityClass();
        java.lang.String str10 = itembasedRecommenderConfig0.getSimilarityClass();
        java.lang.String str11 = itembasedRecommenderConfig0.getSimilarityClass();
        itembasedRecommenderConfig0.setRetrainAfterPreferenceChanges((int) (short) 1);
        java.lang.String str14 = itembasedRecommenderConfig0.getSimilarityClass();
        java.lang.String str15 = itembasedRecommenderConfig0.getSimilarityClass();
        itembasedRecommenderConfig0.setSimilarItemsPerItem((int) (short) 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test04452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04452");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList1 = configuration0.getItembasedRecommenders();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList2 = configuration0.getItembasedRecommenders();
        configuration0.setNumProcessorsForTraining((int) (byte) 1);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration5 = configuration0.getStorageConfiguration();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration6 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str7 = storageConfiguration6.getJdbcDriverClass();
        storageConfiguration6.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str10 = storageConfiguration6.getJdbcUrl();
        java.lang.String str11 = storageConfiguration6.getJdbcDriverClass();
        storageConfiguration6.setJdbcDriverClass("batchSize");
        storageConfiguration6.setPassword("org.plista.kornakapi.web.MissingParameterException: itemID");
        storageConfiguration6.setJdbcDriverClass("itemIDs");
        configuration0.setStorageConfiguration(storageConfiguration6);
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig19 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str20 = itembasedRecommenderConfig19.getSimilarityClass();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer21 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig19);
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer22 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig19);
        itembasedRecommenderConfig19.setRetrainCronExpression("batchSize");
        java.lang.String str25 = itembasedRecommenderConfig19.getSimilarityClass();
        configuration0.addItembasedRecommender(itembasedRecommenderConfig19);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList1);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList2);
        org.junit.Assert.assertNull(storageConfiguration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test04453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04453");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = components0.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage3 = components0.storage();
        org.plista.kornakapi.core.storage.Storage storage4 = components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration5 = components0.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage6 = components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration7 = components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler8 = components0.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler9 = components0.scheduler();
        org.plista.kornakapi.core.storage.Storage storage10 = components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration11 = components0.getConfiguration();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener12 = components0.preferenceChangeListener();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler13 = components0.scheduler();
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(storage3);
        org.junit.Assert.assertNull(storage4);
// flaky:         org.junit.Assert.assertNotNull(configuration5);
        org.junit.Assert.assertNull(storage6);
// flaky:         org.junit.Assert.assertNotNull(configuration7);
        org.junit.Assert.assertNull(trainingScheduler8);
        org.junit.Assert.assertNull(trainingScheduler9);
        org.junit.Assert.assertNull(storage10);
// flaky:         org.junit.Assert.assertNotNull(configuration11);
        org.junit.Assert.assertNotNull(preferenceChangeListener12);
        org.junit.Assert.assertNull(trainingScheduler13);
    }

    @Test
    public void test04454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04454");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        javax.servlet.ServletConfig servletConfig4 = batchSetPreferencesServlet1.getServletConfig();
        addCandidateServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet1);
        batchSetPreferencesServlet1.init();
        java.lang.String str7 = batchSetPreferencesServlet1.getServletInfo();
        batchSetPreferencesServlet1.init();
        // The following exception was thrown during execution in test generation
        try {
            batchSetPreferencesServlet1.log("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(servletConfig4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test04455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04455");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        boolean boolean3 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer4 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        double double5 = factorizationbasedRecommenderConfig0.getAlpha();
        boolean boolean6 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges((int) (short) 10);
        int int11 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test04456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04456");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.storage.Storage storage1 = components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration2 = components0.getConfiguration();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration3 = null; // flaky: configuration2.getStorageConfiguration();
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig4 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double5 = factorizationbasedRecommenderConfig4.getAlpha();
        double double6 = factorizationbasedRecommenderConfig4.getLambda();
        boolean boolean7 = factorizationbasedRecommenderConfig4.isUsesImplicitFeedback();
        factorizationbasedRecommenderConfig4.setNumberOfIterations((int) (byte) 100);
// flaky:         configuration2.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig4);
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList11 = null; // flaky: configuration2.getItembasedRecommenders();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig12 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str13 = itembasedRecommenderConfig12.getSimilarityClass();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer14 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig12);
        int int15 = itembasedRecommenderConfig12.getSimilarItemsPerItem();
        java.lang.String str16 = itembasedRecommenderConfig12.getSimilarityClass();
        java.lang.String str17 = itembasedRecommenderConfig12.getSimilarityClass();
// flaky:         configuration2.addItembasedRecommender(itembasedRecommenderConfig12);
        org.plista.kornakapi.core.storage.Storage storage19 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.KornakapiRecommender> strMap20 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.core.training.Trainer> strMap21 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler22 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler23 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener26 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler23, "org.plista.kornakapi.web.MissingParameterException: itemIDs", 10000);
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.web.Components.init(configuration2, storage19, strMap20, strMap21, trainingScheduler22, (org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(components0);
        org.junit.Assert.assertNull(storage1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertNotNull(itembasedRecommenderConfigList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test04457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04457");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((-1L), (double) 0L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer5 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double8 = fixedCandidatesIDRescorer1.rescore((long) (short) 0, (double) ' ');
        double double11 = fixedCandidatesIDRescorer1.rescore((long) (byte) -1, (double) 1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer12 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.apache.mahout.common.LongPair longPair13 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = filteringLongPairRescorer12.isFiltered(longPair13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 32.0d + "'", double8 == 32.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test04458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04458");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer2 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer3 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double6 = fixedCandidatesIDRescorer1.rescore((long) (short) 0, (double) (short) 0);
        double double9 = fixedCandidatesIDRescorer1.rescore((long) ' ', (double) (short) 10);
        double double12 = fixedCandidatesIDRescorer1.rescore(10000L, (double) (byte) 0);
        double double15 = fixedCandidatesIDRescorer1.rescore(1L, 10000.0d);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer16 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer17 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double20 = fixedCandidatesIDRescorer1.rescore((long) (-1), (double) (byte) 100);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer21 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        org.apache.mahout.common.LongPair longPair22 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = filteringLongPairRescorer21.isFiltered(longPair22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10000.0d + "'", double15 == 10000.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
    }

    @Test
    public void test04459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04459");
        org.apache.mahout.cf.taste.impl.common.FastIDSet fastIDSet0 = null;
        org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer fixedCandidatesIDRescorer1 = new org.plista.kornakapi.core.recommender.FixedCandidatesIDRescorer(fastIDSet0);
        double double4 = fixedCandidatesIDRescorer1.rescore((-1L), (double) 0L);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer5 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double8 = fixedCandidatesIDRescorer1.rescore((long) 1, (double) 10);
        double double11 = fixedCandidatesIDRescorer1.rescore((long) ' ', (double) 35);
        org.plista.kornakapi.core.recommender.FilteringLongPairRescorer filteringLongPairRescorer12 = new org.plista.kornakapi.core.recommender.FilteringLongPairRescorer((org.apache.mahout.cf.taste.recommender.IDRescorer) fixedCandidatesIDRescorer1);
        double double15 = fixedCandidatesIDRescorer1.rescore((long) (short) 0, (double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = fixedCandidatesIDRescorer1.isFiltered(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
    }

    @Test
    public void test04460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04460");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = components0.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler4 = components0.scheduler();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener5 = components0.preferenceChangeListener();
        org.plista.kornakapi.core.config.Configuration configuration6 = components0.getConfiguration();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig7 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str8 = itembasedRecommenderConfig7.getRetrainCronExpression();
        int int9 = itembasedRecommenderConfig7.getRetrainAfterPreferenceChanges();
        java.lang.String str10 = itembasedRecommenderConfig7.getSimilarityClass();
        itembasedRecommenderConfig7.setSimilarItemsPerItem(0);
        itembasedRecommenderConfig7.setSimilarityClass("");
        itembasedRecommenderConfig7.setSimilarItemsPerItem((int) '#');
        java.lang.String str17 = itembasedRecommenderConfig7.getName();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer18 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig7);
// flaky:         configuration6.addItembasedRecommender(itembasedRecommenderConfig7);
        itembasedRecommenderConfig7.setRetrainCronExpression("org.plista.kornakapi.web.InvalidParameterException: itemIDs");
        itembasedRecommenderConfig7.setSimilarItemsPerItem(52);
        itembasedRecommenderConfig7.setSimilarItemsPerItem((int) (short) 0);
        itembasedRecommenderConfig7.setSimilarItemsPerItem(52);
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer28 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig7);
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(trainingScheduler3);
        org.junit.Assert.assertNull(trainingScheduler4);
        org.junit.Assert.assertNotNull(preferenceChangeListener5);
// flaky:         org.junit.Assert.assertNotNull(configuration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test04461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04461");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(false);
        java.lang.String str3 = factorizationbasedRecommenderConfig0.getName();
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test04462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04462");
        org.plista.kornakapi.core.MutableCandidate mutableCandidate0 = new org.plista.kornakapi.core.MutableCandidate();
        java.lang.String str1 = mutableCandidate0.getLabel();
        mutableCandidate0.set("", (long) 97);
        java.lang.String str5 = mutableCandidate0.getLabel();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test04463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04463");
        org.plista.kornakapi.web.MissingParameterException missingParameterException2 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException4 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException2.addSuppressed((java.lang.Throwable) missingParameterException4);
        java.lang.Throwable[] throwableArray6 = missingParameterException2.getSuppressed();
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException7 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.InvalidParameterException: MutablePreference{userID=0, itemID=0, value=0.0}", (java.lang.Throwable) missingParameterException2);
        org.plista.kornakapi.web.MissingParameterException missingParameterException10 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException12 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException10.addSuppressed((java.lang.Throwable) missingParameterException12);
        java.lang.Throwable[] throwableArray14 = missingParameterException10.getSuppressed();
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException15 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.InvalidParameterException: batchSize", (java.lang.Throwable) missingParameterException10);
        invalidParameterException7.addSuppressed((java.lang.Throwable) invalidParameterException15);
        java.lang.String str17 = invalidParameterException7.toString();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.InvalidParameterException: MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str17, "org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.InvalidParameterException: MutablePreference{userID=0, itemID=0, value=0.0}");
    }

    @Test
    public void test04464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04464");
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener0 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener0.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener2 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener0.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener2);
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener7 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener7.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener9 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener9.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener9.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener7.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener9);
        delegatingPreferenceChangeListener9.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener2.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener9);
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
        org.plista.kornakapi.web.Components components18 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.storage.Storage storage19 = components18.storage();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener20 = components18.preferenceChangeListener();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener21 = components18.preferenceChangeListener();
        preferenceChangeListener21.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener2.addDelegate(preferenceChangeListener21);
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener24 = null;
        delegatingPreferenceChangeListener2.addDelegate(preferenceChangeListener24);
        // The following exception was thrown during execution in test generation
        try {
            delegatingPreferenceChangeListener2.notifyOfPreferenceChange();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(components18);
        org.junit.Assert.assertNull(storage19);
        org.junit.Assert.assertNotNull(preferenceChangeListener20);
        org.junit.Assert.assertNotNull(preferenceChangeListener21);
    }

    @Test
    public void test04465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04465");
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet0 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet1);
        javax.servlet.ServletConfig servletConfig3 = batchSetPreferencesServlet0.getServletConfig();
        batchSetPreferencesServlet0.destroy();
        javax.servlet.ServletConfig servletConfig5 = batchSetPreferencesServlet0.getServletConfig();
        batchSetPreferencesServlet0.init();
        org.plista.kornakapi.web.MissingParameterException missingParameterException10 = new org.plista.kornakapi.web.MissingParameterException("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemIDs");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException11 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.InvalidParameterException: file", (java.lang.Throwable) missingParameterException10);
        // The following exception was thrown during execution in test generation
        try {
            batchSetPreferencesServlet0.log("recommender", (java.lang.Throwable) missingParameterException10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(servletConfig3);
        org.junit.Assert.assertNotNull(servletConfig5);
    }

    @Test
    public void test04466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04466");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        java.lang.String str4 = batchSetPreferencesServlet2.getServletInfo();
        batchSetPreferencesServlet2.destroy();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet6 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str7 = batchDeleteCandidatesServlet6.getServletInfo();
        java.lang.String str8 = batchDeleteCandidatesServlet6.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet9 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet10 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet11 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet10.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet11);
        setPreferenceServlet9.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet11);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet14 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet9.init((javax.servlet.ServletConfig) recommendServlet14);
        batchDeleteCandidatesServlet6.init((javax.servlet.ServletConfig) setPreferenceServlet9);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet17 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet18 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet19 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet18.init((javax.servlet.ServletConfig) batchSetPreferencesServlet19);
        javax.servlet.ServletConfig servletConfig21 = batchSetPreferencesServlet18.getServletConfig();
        addCandidateServlet17.init((javax.servlet.ServletConfig) batchSetPreferencesServlet18);
        javax.servlet.ServletConfig servletConfig23 = addCandidateServlet17.getServletConfig();
        batchDeleteCandidatesServlet6.init((javax.servlet.ServletConfig) addCandidateServlet17);
        addCandidateServlet17.destroy();
        batchSetPreferencesServlet2.init((javax.servlet.ServletConfig) addCandidateServlet17);
        batchSetPreferencesServlet2.init();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        java.lang.String str29 = batchSetPreferencesServlet2.getServletInfo();
        javax.servlet.ServletRequest servletRequest30 = null;
        javax.servlet.ServletResponse servletResponse31 = null;
        // The following exception was thrown during execution in test generation
        try {
            batchSetPreferencesServlet2.service(servletRequest30, servletResponse31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(servletConfig21);
        org.junit.Assert.assertNotNull(servletConfig23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test04467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04467");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setLambda((double) 1);
        double double6 = factorizationbasedRecommenderConfig0.getLambda();
        int int7 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        double double8 = factorizationbasedRecommenderConfig0.getLambda();
        java.lang.String str9 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test04468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04468");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        java.lang.String str4 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int5 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setNumberOfIterations((int) (short) 0);
        factorizationbasedRecommenderConfig0.setRetrainAfterPreferenceChanges(10000);
        double double10 = factorizationbasedRecommenderConfig0.getLambda();
        int int11 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        factorizationbasedRecommenderConfig0.setNumberOfFeatures(52);
        factorizationbasedRecommenderConfig0.setAlpha((double) 35);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test04469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04469");
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet0 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet1 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet1);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet3 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str4 = batchDeleteCandidatesServlet3.getServletInfo();
        batchDeleteCandidatesServlet3.init();
        javax.servlet.ServletConfig servletConfig6 = null;
        batchDeleteCandidatesServlet3.init(servletConfig6);
        recommendServlet0.init(servletConfig6);
        java.lang.String str9 = recommendServlet0.getServletInfo();
        recommendServlet0.init();
        // The following exception was thrown during execution in test generation
        try {
            recommendServlet0.log("org.plista.kornakapi.web.InvalidParameterException: MutablePreference{userID=0, itemID=0, value=32.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test04470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04470");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration2 = components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler3 = components0.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler4 = components0.scheduler();
        org.plista.kornakapi.core.storage.Storage storage5 = components0.storage();
        org.plista.kornakapi.core.config.Configuration configuration6 = components0.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler7 = components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration8 = components0.getConfiguration();
        java.lang.String str9 = null; // flaky: configuration8.getModelDirectory();
// flaky:         configuration8.setModelDirectory("MutablePreference{userID=1, itemID=97, value=35.0}");
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertNotNull(configuration2);
        org.junit.Assert.assertNull(trainingScheduler3);
        org.junit.Assert.assertNull(trainingScheduler4);
        org.junit.Assert.assertNull(storage5);
// flaky:         org.junit.Assert.assertNotNull(configuration6);
        org.junit.Assert.assertNull(trainingScheduler7);
// flaky:         org.junit.Assert.assertNotNull(configuration8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "itemID" + "'", str9, "itemID");
    }

    @Test
    public void test04471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04471");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList1 = configuration0.getItembasedRecommenders();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration2 = configuration0.getStorageConfiguration();
        configuration0.setNumProcessorsForTraining((int) (short) 0);
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList5 = configuration0.getFactorizationbasedRecommenders();
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig6 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        java.lang.String str7 = itembasedRecommenderConfig6.getRetrainCronExpression();
        int int8 = itembasedRecommenderConfig6.getRetrainAfterPreferenceChanges();
        java.lang.String str9 = itembasedRecommenderConfig6.getSimilarityClass();
        itembasedRecommenderConfig6.setSimilarItemsPerItem(0);
        itembasedRecommenderConfig6.setSimilarityClass("");
        int int14 = itembasedRecommenderConfig6.getSimilarItemsPerItem();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer15 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig6);
        configuration0.addItembasedRecommender(itembasedRecommenderConfig6);
        int int17 = configuration0.getNumProcessorsForTraining();
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList1);
        org.junit.Assert.assertNull(storageConfiguration2);
        org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test04472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04472");
        org.plista.kornakapi.web.MissingParameterException missingParameterException2 = new org.plista.kornakapi.web.MissingParameterException("userID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException3 = new org.plista.kornakapi.web.InvalidParameterException("", (java.lang.Throwable) missingParameterException2);
        java.lang.String str4 = invalidParameterException3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.plista.kornakapi.web.InvalidParameterException: " + "'", str4, "org.plista.kornakapi.web.InvalidParameterException: ");
    }

    @Test
    public void test04473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04473");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        addCandidateServlet0.destroy();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet2 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet3 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet4 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet3.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet4);
        setPreferenceServlet2.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet4);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet7 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet2.init((javax.servlet.ServletConfig) recommendServlet7);
        recommendServlet7.init();
        addCandidateServlet0.init((javax.servlet.ServletConfig) recommendServlet7);
        java.lang.String str11 = addCandidateServlet0.getServletInfo();
        addCandidateServlet0.init();
        javax.servlet.ServletConfig servletConfig13 = addCandidateServlet0.getServletConfig();
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet14 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet15 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet16 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet15.init((javax.servlet.ServletConfig) batchSetPreferencesServlet16);
        javax.servlet.ServletConfig servletConfig18 = batchSetPreferencesServlet15.getServletConfig();
        addCandidateServlet14.init((javax.servlet.ServletConfig) batchSetPreferencesServlet15);
        batchSetPreferencesServlet15.init();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet21 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        java.lang.String str22 = recommendServlet21.getServletInfo();
        javax.servlet.ServletConfig servletConfig23 = recommendServlet21.getServletConfig();
        java.lang.String str24 = recommendServlet21.getServletInfo();
        batchSetPreferencesServlet15.init((javax.servlet.ServletConfig) recommendServlet21);
        addCandidateServlet0.init((javax.servlet.ServletConfig) recommendServlet21);
        org.plista.kornakapi.web.servlets.TrainServlet trainServlet27 = new org.plista.kornakapi.web.servlets.TrainServlet();
        trainServlet27.destroy();
        trainServlet27.destroy();
        java.lang.String str30 = trainServlet27.getServletInfo();
        java.lang.String str31 = trainServlet27.getServletInfo();
        javax.servlet.ServletConfig servletConfig32 = trainServlet27.getServletConfig();
        javax.servlet.ServletConfig servletConfig33 = trainServlet27.getServletConfig();
        trainServlet27.destroy();
        trainServlet27.init();
        addCandidateServlet0.init((javax.servlet.ServletConfig) trainServlet27);
        javax.servlet.ServletConfig servletConfig37 = trainServlet27.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet38 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet39 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet38.init((javax.servlet.ServletConfig) batchSetPreferencesServlet39);
        java.lang.String str41 = batchSetPreferencesServlet39.getServletInfo();
        batchSetPreferencesServlet39.destroy();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet43 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str44 = batchDeleteCandidatesServlet43.getServletInfo();
        java.lang.String str45 = batchDeleteCandidatesServlet43.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet46 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet47 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet48 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet47.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet48);
        setPreferenceServlet46.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet48);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet51 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet46.init((javax.servlet.ServletConfig) recommendServlet51);
        batchDeleteCandidatesServlet43.init((javax.servlet.ServletConfig) setPreferenceServlet46);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet54 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet55 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet56 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet55.init((javax.servlet.ServletConfig) batchSetPreferencesServlet56);
        javax.servlet.ServletConfig servletConfig58 = batchSetPreferencesServlet55.getServletConfig();
        addCandidateServlet54.init((javax.servlet.ServletConfig) batchSetPreferencesServlet55);
        javax.servlet.ServletConfig servletConfig60 = addCandidateServlet54.getServletConfig();
        batchDeleteCandidatesServlet43.init((javax.servlet.ServletConfig) addCandidateServlet54);
        addCandidateServlet54.destroy();
        batchSetPreferencesServlet39.init((javax.servlet.ServletConfig) addCandidateServlet54);
        batchSetPreferencesServlet39.init();
        trainServlet27.init((javax.servlet.ServletConfig) batchSetPreferencesServlet39);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration66 = batchSetPreferencesServlet39.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(servletConfig13);
        org.junit.Assert.assertNotNull(servletConfig18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(servletConfig23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(servletConfig32);
        org.junit.Assert.assertNull(servletConfig33);
        org.junit.Assert.assertNull(servletConfig37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(servletConfig58);
        org.junit.Assert.assertNotNull(servletConfig60);
    }

    @Test
    public void test04474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04474");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet1 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        addCandidateServlet1.destroy();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet3 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet4 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet3.init((javax.servlet.ServletConfig) batchSetPreferencesServlet4);
        addCandidateServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet3);
        addCandidateServlet0.init((javax.servlet.ServletConfig) addCandidateServlet1);
        addCandidateServlet0.init();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = addCandidateServlet0.getInitParameter("MutablePreference{userID=-1, itemID=100, value=10000.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04475");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet1 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str2 = batchDeleteCandidatesServlet1.getServletInfo();
        java.lang.String str3 = batchDeleteCandidatesServlet1.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet4 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet5 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet6 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet5.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        setPreferenceServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet9 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet4.init((javax.servlet.ServletConfig) recommendServlet9);
        batchDeleteCandidatesServlet1.init((javax.servlet.ServletConfig) setPreferenceServlet4);
        batchDeleteCandidatesServlet1.destroy();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet1);
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet14 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet15 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet16 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet15.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet16);
        setPreferenceServlet14.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet16);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet19 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet14.init((javax.servlet.ServletConfig) recommendServlet19);
        java.lang.String str21 = setPreferenceServlet14.getServletInfo();
        javax.servlet.ServletConfig servletConfig22 = setPreferenceServlet14.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet23 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet24 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet25 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet24.init((javax.servlet.ServletConfig) batchSetPreferencesServlet25);
        batchDeleteCandidatesServlet23.init((javax.servlet.ServletConfig) batchSetPreferencesServlet25);
        setPreferenceServlet14.init((javax.servlet.ServletConfig) batchSetPreferencesServlet25);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet25);
        javax.servlet.ServletConfig servletConfig30 = batchSetPreferencesServlet25.getServletConfig();
        // The following exception was thrown during execution in test generation
        try {
            batchSetPreferencesServlet25.log("MutablePreference{userID=0, itemID=97, value=10.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(servletConfig22);
        org.junit.Assert.assertNull(servletConfig30);
    }

    @Test
    public void test04476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04476");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig0.setSimilarityClass("");
        java.lang.String str3 = itembasedRecommenderConfig0.getSimilarityClass();
        itembasedRecommenderConfig0.setRetrainCronExpression("userID");
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer6 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        itembasedRecommenderConfig0.setRetrainAfterPreferenceChanges((int) '#');
        itembasedRecommenderConfig0.setSimilarityClass("MutablePreference{userID=100, itemID=-1, value=100.0}");
        java.lang.String str11 = itembasedRecommenderConfig0.getSimilarityClass();
        int int12 = itembasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        int int13 = itembasedRecommenderConfig0.getSimilarItemsPerItem();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MutablePreference{userID=100, itemID=-1, value=100.0}" + "'", str11, "MutablePreference{userID=100, itemID=-1, value=100.0}");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test04477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04477");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.storage.Storage storage1 = components0.storage();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener2 = components0.preferenceChangeListener();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener3 = components0.preferenceChangeListener();
        org.plista.kornakapi.core.storage.Storage storage4 = components0.storage();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler5 = components0.scheduler();
        org.plista.kornakapi.core.config.Configuration configuration6 = components0.getConfiguration();
        org.plista.kornakapi.core.storage.Storage storage7 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.KornakapiRecommender> strMap8 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.core.training.Trainer> strMap9 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler10 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler11 = null;
        org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener inMemoryPreferenceChangeListener14 = new org.plista.kornakapi.core.training.preferencechanges.InMemoryPreferenceChangeListener(trainingScheduler11, "MutablePreference{userID=0, itemID=0, value=0.0}", (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.web.Components.init(configuration6, storage7, strMap8, strMap9, trainingScheduler10, (org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) inMemoryPreferenceChangeListener14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(components0);
        org.junit.Assert.assertNull(storage1);
        org.junit.Assert.assertNotNull(preferenceChangeListener2);
        org.junit.Assert.assertNotNull(preferenceChangeListener3);
        org.junit.Assert.assertNull(storage4);
        org.junit.Assert.assertNull(trainingScheduler5);
// flaky:         org.junit.Assert.assertNotNull(configuration6);
    }

    @Test
    public void test04478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04478");
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet0 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet0.destroy();
        javax.servlet.ServletConfig servletConfig2 = setPreferenceServlet0.getServletConfig();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = setPreferenceServlet0.getServletName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(servletConfig2);
    }

    @Test
    public void test04479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04479");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setNumProcessorsForTraining((int) (short) 100);
        java.lang.String str3 = configuration0.getModelDirectory();
        java.util.List<org.plista.kornakapi.core.config.ItembasedRecommenderConfig> itembasedRecommenderConfigList4 = configuration0.getItembasedRecommenders();
        configuration0.setNumProcessorsForTraining(100);
        org.plista.kornakapi.web.Components components7 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration8 = components7.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration9 = components7.getConfiguration();
        java.lang.String str10 = null; // flaky: configuration9.getModelDirectory();
        int int11 = 0; // flaky: configuration9.getNumProcessorsForTraining();
        int int12 = 0; // flaky: configuration9.getNumProcessorsForTraining();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration13 = null; // flaky: configuration9.getStorageConfiguration();
        configuration0.setStorageConfiguration(storageConfiguration13);
        configuration0.setModelDirectory("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemID");
        java.lang.String str17 = configuration0.getModelDirectory();
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration18 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str19 = storageConfiguration18.getJdbcDriverClass();
        storageConfiguration18.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str22 = storageConfiguration18.getJdbcUrl();
        java.lang.String str23 = storageConfiguration18.getJdbcDriverClass();
        storageConfiguration18.setJdbcDriverClass("batchSize");
        storageConfiguration18.setPassword("howMany");
        storageConfiguration18.setJdbcUrl("hi!");
        java.lang.String str30 = storageConfiguration18.getPassword();
        java.lang.String str31 = storageConfiguration18.getUsername();
        java.lang.String str32 = storageConfiguration18.getUsername();
        storageConfiguration18.setJdbcDriverClass("batchSize");
        java.lang.String str35 = storageConfiguration18.getPassword();
        configuration0.setStorageConfiguration(storageConfiguration18);
        java.lang.String str37 = storageConfiguration18.getJdbcDriverClass();
        java.lang.String str38 = storageConfiguration18.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(itembasedRecommenderConfigList4);
        org.junit.Assert.assertNotNull(components7);
// flaky:         org.junit.Assert.assertNotNull(configuration8);
// flaky:         org.junit.Assert.assertNotNull(configuration9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "label" + "'", str10, "label");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemID" + "'", str17, "org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemID");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "howMany" + "'", str30, "howMany");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str31, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str32, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "howMany" + "'", str35, "howMany");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "batchSize" + "'", str37, "batchSize");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "howMany" + "'", str38, "howMany");
    }

    @Test
    public void test04480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04480");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setNumProcessorsForTraining((int) (short) 100);
        java.lang.String str3 = configuration0.getModelDirectory();
        configuration0.setNumProcessorsForTraining((int) (byte) 100);
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig6 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double7 = factorizationbasedRecommenderConfig6.getAlpha();
        double double8 = factorizationbasedRecommenderConfig6.getLambda();
        boolean boolean9 = factorizationbasedRecommenderConfig6.isUsesImplicitFeedback();
        factorizationbasedRecommenderConfig6.setUsesImplicitFeedback(true);
        double double12 = factorizationbasedRecommenderConfig6.getLambda();
        configuration0.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig6);
        factorizationbasedRecommenderConfig6.setRetrainCronExpression("value");
        factorizationbasedRecommenderConfig6.setRetrainAfterPreferenceChanges((int) ' ');
        factorizationbasedRecommenderConfig6.setNumberOfFeatures(1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test04481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04481");
        org.plista.kornakapi.core.MutablePreference mutablePreference0 = new org.plista.kornakapi.core.MutablePreference();
        java.lang.String str1 = mutablePreference0.toString();
        long long2 = mutablePreference0.getItemID();
        java.lang.String str3 = mutablePreference0.toString();
        mutablePreference0.set((long) (byte) 100, (long) (byte) 0, (float) (short) 0);
        java.lang.String str8 = mutablePreference0.toString();
        float float9 = mutablePreference0.getValue();
        long long10 = mutablePreference0.getUserID();
        mutablePreference0.set((long) (short) -1, 100L, (float) 10000);
        long long15 = mutablePreference0.getItemID();
        java.lang.String str16 = mutablePreference0.toString();
        float float17 = mutablePreference0.getValue();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str1, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "MutablePreference{userID=0, itemID=0, value=0.0}" + "'", str3, "MutablePreference{userID=0, itemID=0, value=0.0}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MutablePreference{userID=100, itemID=0, value=0.0}" + "'", str8, "MutablePreference{userID=100, itemID=0, value=0.0}");
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 0.0f + "'", float9 == 0.0f);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MutablePreference{userID=-1, itemID=100, value=10000.0}" + "'", str16, "MutablePreference{userID=-1, itemID=100, value=10000.0}");
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 10000.0f + "'", float17 == 10000.0f);
    }

    @Test
    public void test04482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04482");
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet0 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet1 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet2 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet1.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet2);
        setPreferenceServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet2);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet5 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet0.init((javax.servlet.ServletConfig) recommendServlet5);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet7 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str8 = batchDeleteCandidatesServlet7.getServletInfo();
        java.lang.String str9 = batchDeleteCandidatesServlet7.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet10 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet11 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet12 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet11.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet12);
        setPreferenceServlet10.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet12);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet15 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet10.init((javax.servlet.ServletConfig) recommendServlet15);
        batchDeleteCandidatesServlet7.init((javax.servlet.ServletConfig) setPreferenceServlet10);
        setPreferenceServlet10.destroy();
        setPreferenceServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration20 = setPreferenceServlet10.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test04483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04483");
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet0.init();
        java.lang.String str2 = batchAddCandidatesServlet0.getServletInfo();
        batchAddCandidatesServlet0.init();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet4 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet5 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet4.init((javax.servlet.ServletConfig) batchSetPreferencesServlet5);
        javax.servlet.ServletConfig servletConfig7 = batchSetPreferencesServlet5.getServletConfig();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet8 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet8.init();
        setPreferenceServlet8.init();
        setPreferenceServlet8.destroy();
        setPreferenceServlet8.destroy();
        batchSetPreferencesServlet5.init((javax.servlet.ServletConfig) setPreferenceServlet8);
        java.lang.String str14 = setPreferenceServlet8.getServletInfo();
        batchAddCandidatesServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet8);
        java.lang.String str16 = setPreferenceServlet8.getServletInfo();
        java.lang.String str17 = setPreferenceServlet8.getServletInfo();
        // The following exception was thrown during execution in test generation
        try {
            javax.servlet.ServletContext servletContext18 = setPreferenceServlet8.getServletContext();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(servletConfig7);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test04484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04484");
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig0 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double1 = factorizationbasedRecommenderConfig0.getAlpha();
        double double2 = factorizationbasedRecommenderConfig0.getLambda();
        int int3 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        factorizationbasedRecommenderConfig0.setUsesImplicitFeedback(true);
        double double6 = factorizationbasedRecommenderConfig0.getAlpha();
        java.lang.String str7 = factorizationbasedRecommenderConfig0.getRetrainCronExpression();
        int int8 = factorizationbasedRecommenderConfig0.getRetrainAfterPreferenceChanges();
        boolean boolean9 = factorizationbasedRecommenderConfig0.isUsesImplicitFeedback();
        int int10 = factorizationbasedRecommenderConfig0.getNumberOfIterations();
        double double11 = factorizationbasedRecommenderConfig0.getLambda();
        int int12 = factorizationbasedRecommenderConfig0.getNumberOfFeatures();
        org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer factorizationbasedInMemoryTrainer13 = new org.plista.kornakapi.core.training.FactorizationbasedInMemoryTrainer(factorizationbasedRecommenderConfig0);
        java.io.File file14 = null;
        org.plista.kornakapi.core.storage.Storage storage15 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender16 = null;
        // The following exception was thrown during execution in test generation
        try {
            factorizationbasedInMemoryTrainer13.train(file14, storage15, recommender16, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test04485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04485");
        org.plista.kornakapi.web.MissingParameterException missingParameterException4 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException5 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException4);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException6 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException4);
        org.plista.kornakapi.web.MissingParameterException missingParameterException8 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException10 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException8.addSuppressed((java.lang.Throwable) missingParameterException10);
        invalidParameterException6.addSuppressed((java.lang.Throwable) missingParameterException10);
        java.lang.Throwable[] throwableArray13 = missingParameterException10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = missingParameterException10.getSuppressed();
        org.plista.kornakapi.web.MissingParameterException missingParameterException20 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException21 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException20);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException22 = new org.plista.kornakapi.web.InvalidParameterException("itemIDs", (java.lang.Throwable) invalidParameterException21);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException23 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.MissingParameterException: itemIDs", (java.lang.Throwable) invalidParameterException21);
        org.plista.kornakapi.web.MissingParameterException missingParameterException28 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException29 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException28);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException30 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException28);
        org.plista.kornakapi.web.MissingParameterException missingParameterException32 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException34 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException32.addSuppressed((java.lang.Throwable) missingParameterException34);
        invalidParameterException30.addSuppressed((java.lang.Throwable) missingParameterException34);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException37 = new org.plista.kornakapi.web.InvalidParameterException("file", (java.lang.Throwable) invalidParameterException30);
        org.plista.kornakapi.web.MissingParameterException missingParameterException41 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException42 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException41);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException43 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException41);
        invalidParameterException37.addSuppressed((java.lang.Throwable) missingParameterException41);
        org.plista.kornakapi.web.MissingParameterException missingParameterException49 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException50 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException49);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException51 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException49);
        java.lang.Throwable[] throwableArray52 = missingParameterException49.getSuppressed();
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException53 = new org.plista.kornakapi.web.InvalidParameterException("recommender", (java.lang.Throwable) missingParameterException49);
        missingParameterException41.addSuppressed((java.lang.Throwable) missingParameterException49);
        invalidParameterException23.addSuppressed((java.lang.Throwable) missingParameterException41);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException56 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.InvalidParameterException: file", (java.lang.Throwable) invalidParameterException23);
        java.lang.Throwable[] throwableArray57 = invalidParameterException23.getSuppressed();
        java.lang.Throwable[] throwableArray58 = invalidParameterException23.getSuppressed();
        missingParameterException10.addSuppressed((java.lang.Throwable) invalidParameterException23);
        org.plista.kornakapi.web.MissingParameterException missingParameterException64 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException65 = new org.plista.kornakapi.web.InvalidParameterException("howMany", (java.lang.Throwable) missingParameterException64);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException66 = new org.plista.kornakapi.web.InvalidParameterException("hi!", (java.lang.Throwable) missingParameterException64);
        org.plista.kornakapi.web.MissingParameterException missingParameterException68 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        org.plista.kornakapi.web.MissingParameterException missingParameterException70 = new org.plista.kornakapi.web.MissingParameterException("itemID");
        missingParameterException68.addSuppressed((java.lang.Throwable) missingParameterException70);
        invalidParameterException66.addSuppressed((java.lang.Throwable) missingParameterException70);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException73 = new org.plista.kornakapi.web.InvalidParameterException("file", (java.lang.Throwable) invalidParameterException66);
        missingParameterException10.addSuppressed((java.lang.Throwable) invalidParameterException73);
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException75 = new org.plista.kornakapi.web.InvalidParameterException("org.plista.kornakapi.web.InvalidParameterException: itemIDs", (java.lang.Throwable) missingParameterException10);
        java.lang.String str76 = missingParameterException10.toString();
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "org.plista.kornakapi.web.MissingParameterException: itemID" + "'", str76, "org.plista.kornakapi.web.MissingParameterException: itemID");
    }

    @Test
    public void test04486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04486");
        org.plista.kornakapi.web.Components components0 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration1 = components0.getConfiguration();
        int int2 = 0; // flaky: configuration1.getNumProcessorsForTraining();
        int int3 = 0; // flaky: configuration1.getNumProcessorsForTraining();
        org.plista.kornakapi.web.Components components4 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration5 = components4.getConfiguration();
        java.util.List<org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig> factorizationbasedRecommenderConfigList6 = null; // flaky: configuration5.getFactorizationbasedRecommenders();
        java.lang.String str7 = null; // flaky: configuration5.getModelDirectory();
        org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig factorizationbasedRecommenderConfig8 = new org.plista.kornakapi.core.config.FactorizationbasedRecommenderConfig();
        double double9 = factorizationbasedRecommenderConfig8.getAlpha();
        double double10 = factorizationbasedRecommenderConfig8.getLambda();
        int int11 = factorizationbasedRecommenderConfig8.getNumberOfFeatures();
        factorizationbasedRecommenderConfig8.setUsesImplicitFeedback(true);
        factorizationbasedRecommenderConfig8.setNumberOfFeatures((int) (byte) 1);
// flaky:         configuration5.addFactorizationbasedRecommender(factorizationbasedRecommenderConfig8);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration17 = null; // flaky: configuration5.getStorageConfiguration();
// flaky:         storageConfiguration17.setPassword("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemIDs");
// flaky:         configuration1.setStorageConfiguration(storageConfiguration17);
        java.lang.String str21 = null; // flaky: storageConfiguration17.getPassword();
        org.junit.Assert.assertNotNull(components0);
// flaky:         org.junit.Assert.assertNotNull(configuration1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(components4);
// flaky:         org.junit.Assert.assertNotNull(configuration5);
// flaky:         org.junit.Assert.assertNotNull(factorizationbasedRecommenderConfigList6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "label" + "'", str7, "label");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
// flaky:         org.junit.Assert.assertNotNull(storageConfiguration17);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemIDs" + "'", str21, "org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: itemIDs");
    }

    @Test
    public void test04487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04487");
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration0 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str1 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setUsername("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str4 = storageConfiguration0.getJdbcUrl();
        java.lang.String str5 = storageConfiguration0.getJdbcDriverClass();
        storageConfiguration0.setJdbcDriverClass("batchSize");
        storageConfiguration0.setPassword("howMany");
        storageConfiguration0.setJdbcUrl("hi!");
        java.lang.String str12 = storageConfiguration0.getPassword();
        java.lang.String str13 = storageConfiguration0.getUsername();
        java.lang.String str14 = storageConfiguration0.getUsername();
        storageConfiguration0.setJdbcDriverClass("batchSize");
        storageConfiguration0.setPassword("MutablePreference{userID=1, itemID=52, value=52.0}");
        java.lang.String str19 = storageConfiguration0.getJdbcUrl();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "howMany" + "'", str12, "howMany");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str13, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName" + "'", str14, "org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test04488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04488");
        org.plista.kornakapi.web.MissingParameterException missingParameterException1 = new org.plista.kornakapi.web.MissingParameterException("MutablePreference{userID=32, itemID=1, value=-1.0}");
        java.lang.String str2 = missingParameterException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.plista.kornakapi.web.MissingParameterException: MutablePreference{userID=32, itemID=1, value=-1.0}" + "'", str2, "org.plista.kornakapi.web.MissingParameterException: MutablePreference{userID=32, itemID=1, value=-1.0}");
    }

    @Test
    public void test04489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04489");
        org.plista.kornakapi.core.config.ItembasedRecommenderConfig itembasedRecommenderConfig0 = new org.plista.kornakapi.core.config.ItembasedRecommenderConfig();
        itembasedRecommenderConfig0.setSimilarityClass("");
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer3 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        itembasedRecommenderConfig0.setRetrainCronExpression("");
        itembasedRecommenderConfig0.setName("org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        java.lang.String str8 = itembasedRecommenderConfig0.getSimilarityClass();
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer9 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer multithreadedItembasedInMemoryTrainer10 = new org.plista.kornakapi.core.training.MultithreadedItembasedInMemoryTrainer(itembasedRecommenderConfig0);
        java.io.File file11 = null;
        org.plista.kornakapi.core.storage.Storage storage12 = null;
        org.apache.mahout.cf.taste.recommender.Recommender recommender13 = null;
        // The following exception was thrown during execution in test generation
        try {
            multithreadedItembasedInMemoryTrainer10.train(file11, storage12, recommender13, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test04490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04490");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        javax.servlet.ServletConfig servletConfig4 = batchSetPreferencesServlet1.getServletConfig();
        addCandidateServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet1);
        batchSetPreferencesServlet1.destroy();
        java.lang.String str7 = batchSetPreferencesServlet1.getServletInfo();
        batchSetPreferencesServlet1.destroy();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration9 = batchSetPreferencesServlet1.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(servletConfig4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test04491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04491");
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet0 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        java.lang.String str1 = deleteCandidateServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet3 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet2.init((javax.servlet.ServletConfig) batchSetPreferencesServlet3);
        javax.servlet.ServletConfig servletConfig5 = batchSetPreferencesServlet3.getServletConfig();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet6 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet6.init();
        setPreferenceServlet6.init();
        setPreferenceServlet6.destroy();
        setPreferenceServlet6.destroy();
        batchSetPreferencesServlet3.init((javax.servlet.ServletConfig) setPreferenceServlet6);
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet12 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet13 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet14 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet13.init((javax.servlet.ServletConfig) batchSetPreferencesServlet14);
        javax.servlet.ServletConfig servletConfig16 = batchSetPreferencesServlet13.getServletConfig();
        addCandidateServlet12.init((javax.servlet.ServletConfig) batchSetPreferencesServlet13);
        javax.servlet.ServletConfig servletConfig18 = batchSetPreferencesServlet13.getServletConfig();
        batchSetPreferencesServlet3.init((javax.servlet.ServletConfig) batchSetPreferencesServlet13);
        batchSetPreferencesServlet3.destroy();
        deleteCandidateServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet3);
        java.lang.String str22 = batchSetPreferencesServlet3.getServletInfo();
        javax.servlet.ServletConfig servletConfig23 = batchSetPreferencesServlet3.getServletConfig();
        batchSetPreferencesServlet3.init();
        // The following exception was thrown during execution in test generation
        try {
            javax.servlet.ServletContext servletContext25 = batchSetPreferencesServlet3.getServletContext();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNull(servletConfig5);
        org.junit.Assert.assertNotNull(servletConfig16);
        org.junit.Assert.assertNotNull(servletConfig18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(servletConfig23);
    }

    @Test
    public void test04492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04492");
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet0 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet0.destroy();
        // The following exception was thrown during execution in test generation
        try {
            javax.servlet.ServletContext servletContext2 = deleteCandidateServlet0.getServletContext();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04493");
        org.plista.kornakapi.core.config.Configuration configuration0 = new org.plista.kornakapi.core.config.Configuration();
        configuration0.setNumProcessorsForTraining((int) (short) 100);
        java.lang.String str3 = configuration0.getModelDirectory();
        configuration0.setNumProcessorsForTraining((int) (byte) 100);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration6 = new org.plista.kornakapi.core.config.StorageConfiguration();
        java.lang.String str7 = storageConfiguration6.getJdbcDriverClass();
        storageConfiguration6.setPassword("itemIDs");
        configuration0.setStorageConfiguration(storageConfiguration6);
        org.plista.kornakapi.core.config.StorageConfiguration storageConfiguration11 = configuration0.getStorageConfiguration();
        storageConfiguration11.setJdbcUrl("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.core.training.TrainRecommenderJob.recommenderName");
        storageConfiguration11.setUsername("MutablePreference{userID=-1, itemID=10, value=10.0}");
        java.lang.String str16 = storageConfiguration11.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(storageConfiguration11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "itemIDs" + "'", str16, "itemIDs");
    }

    @Test
    public void test04494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04494");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet1 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str2 = batchDeleteCandidatesServlet1.getServletInfo();
        java.lang.String str3 = batchDeleteCandidatesServlet1.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet4 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet5 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet6 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet5.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        setPreferenceServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet6);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet9 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet4.init((javax.servlet.ServletConfig) recommendServlet9);
        batchDeleteCandidatesServlet1.init((javax.servlet.ServletConfig) setPreferenceServlet4);
        batchDeleteCandidatesServlet1.destroy();
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet1);
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet14 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet15 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet16 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet15.init((javax.servlet.ServletConfig) batchSetPreferencesServlet16);
        batchDeleteCandidatesServlet14.init((javax.servlet.ServletConfig) batchSetPreferencesServlet16);
        javax.servlet.ServletConfig servletConfig19 = batchSetPreferencesServlet16.getServletConfig();
        batchSetPreferencesServlet16.init();
        batchDeleteCandidatesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet16);
        batchSetPreferencesServlet16.init();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet23 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str24 = batchDeleteCandidatesServlet23.getServletInfo();
        batchDeleteCandidatesServlet23.init();
        java.lang.String str26 = batchDeleteCandidatesServlet23.getServletInfo();
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet27 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet27.init();
        batchDeleteCandidatesServlet23.init((javax.servlet.ServletConfig) batchAddCandidatesServlet27);
        batchDeleteCandidatesServlet23.destroy();
        batchDeleteCandidatesServlet23.init();
        javax.servlet.ServletConfig servletConfig32 = batchDeleteCandidatesServlet23.getServletConfig();
        batchSetPreferencesServlet16.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet23);
        javax.servlet.ServletConfig servletConfig34 = batchSetPreferencesServlet16.getServletConfig();
        batchSetPreferencesServlet16.init();
        javax.servlet.ServletRequest servletRequest36 = null;
        javax.servlet.ServletResponse servletResponse37 = null;
        // The following exception was thrown during execution in test generation
        try {
            batchSetPreferencesServlet16.service(servletRequest36, servletResponse37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(servletConfig19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(servletConfig32);
        org.junit.Assert.assertNotNull(servletConfig34);
    }

    @Test
    public void test04495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04495");
        org.plista.kornakapi.core.config.Configuration configuration0 = null;
        org.plista.kornakapi.core.storage.Storage storage1 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.KornakapiRecommender> strMap2 = null;
        java.util.Map<java.lang.String, org.plista.kornakapi.core.training.Trainer> strMap3 = null;
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler4 = null;
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener5 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener5.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener5.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener8 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener8.notifyOfPreferenceChange();
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener10 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener10.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener8.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener10);
        delegatingPreferenceChangeListener5.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener8);
        delegatingPreferenceChangeListener8.notifyOfPreferenceChange();
        org.plista.kornakapi.web.Components components15 = org.plista.kornakapi.web.Components.instance();
        org.plista.kornakapi.core.config.Configuration configuration16 = components15.getConfiguration();
        org.plista.kornakapi.core.config.Configuration configuration17 = components15.getConfiguration();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler18 = components15.scheduler();
        org.plista.kornakapi.core.training.TrainingScheduler trainingScheduler19 = components15.scheduler();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener20 = components15.preferenceChangeListener();
        org.plista.kornakapi.core.config.Configuration configuration21 = components15.getConfiguration();
        org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener preferenceChangeListener22 = components15.preferenceChangeListener();
        delegatingPreferenceChangeListener8.addDelegate(preferenceChangeListener22);
        org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener delegatingPreferenceChangeListener24 = new org.plista.kornakapi.core.training.preferencechanges.DelegatingPreferenceChangeListener();
        delegatingPreferenceChangeListener24.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener24.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener24.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener24.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener24.notifyOfPreferenceChange();
        delegatingPreferenceChangeListener8.addDelegate((org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener24);
        // The following exception was thrown during execution in test generation
        try {
            org.plista.kornakapi.web.Components.init(configuration0, storage1, strMap2, strMap3, trainingScheduler4, (org.plista.kornakapi.core.training.preferencechanges.PreferenceChangeListener) delegatingPreferenceChangeListener24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(components15);
// flaky:         org.junit.Assert.assertNotNull(configuration16);
// flaky:         org.junit.Assert.assertNotNull(configuration17);
        org.junit.Assert.assertNull(trainingScheduler18);
        org.junit.Assert.assertNull(trainingScheduler19);
        org.junit.Assert.assertNotNull(preferenceChangeListener20);
// flaky:         org.junit.Assert.assertNotNull(configuration21);
        org.junit.Assert.assertNotNull(preferenceChangeListener22);
    }

    @Test
    public void test04496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04496");
        org.plista.kornakapi.web.servlets.AddCandidateServlet addCandidateServlet0 = new org.plista.kornakapi.web.servlets.AddCandidateServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet1 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet batchSetPreferencesServlet2 = new org.plista.kornakapi.web.servlets.BatchSetPreferencesServlet();
        batchSetPreferencesServlet1.init((javax.servlet.ServletConfig) batchSetPreferencesServlet2);
        javax.servlet.ServletConfig servletConfig4 = batchSetPreferencesServlet1.getServletConfig();
        addCandidateServlet0.init((javax.servlet.ServletConfig) batchSetPreferencesServlet1);
        batchSetPreferencesServlet1.init();
        java.lang.String str7 = batchSetPreferencesServlet1.getServletInfo();
        javax.servlet.ServletConfig servletConfig8 = batchSetPreferencesServlet1.getServletConfig();
        javax.servlet.ServletConfig servletConfig9 = batchSetPreferencesServlet1.getServletConfig();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = batchSetPreferencesServlet1.getInitParameter("MutablePreference{userID=100, itemID=-1, value=100.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(servletConfig4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(servletConfig8);
        org.junit.Assert.assertNotNull(servletConfig9);
    }

    @Test
    public void test04497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04497");
        org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet batchAddCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchAddCandidatesServlet();
        batchAddCandidatesServlet0.init();
        java.lang.String str2 = batchAddCandidatesServlet0.getServletInfo();
        javax.servlet.ServletConfig servletConfig3 = batchAddCandidatesServlet0.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet4 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str5 = batchDeleteCandidatesServlet4.getServletInfo();
        java.lang.String str6 = batchDeleteCandidatesServlet4.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet7 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet8 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet9 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet8.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet9);
        setPreferenceServlet7.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet9);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet12 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet7.init((javax.servlet.ServletConfig) recommendServlet12);
        batchDeleteCandidatesServlet4.init((javax.servlet.ServletConfig) setPreferenceServlet7);
        batchAddCandidatesServlet0.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet4);
        batchDeleteCandidatesServlet4.init();
        java.lang.String str17 = batchDeleteCandidatesServlet4.getServletInfo();
        java.lang.String str18 = batchDeleteCandidatesServlet4.getServletInfo();
        batchDeleteCandidatesServlet4.destroy();
        // The following exception was thrown during execution in test generation
        try {
            javax.servlet.ServletContext servletContext20 = batchDeleteCandidatesServlet4.getServletContext();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(servletConfig3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test04498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04498");
        org.plista.kornakapi.web.MissingParameterException missingParameterException2 = new org.plista.kornakapi.web.MissingParameterException("org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: file");
        org.plista.kornakapi.web.InvalidParameterException invalidParameterException3 = new org.plista.kornakapi.web.InvalidParameterException("MutablePreference{userID=1, itemID=97, value=35.0}", (java.lang.Throwable) missingParameterException2);
        java.lang.String str4 = missingParameterException2.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: file" + "'", str4, "org.plista.kornakapi.web.MissingParameterException: org.plista.kornakapi.web.InvalidParameterException: org.plista.kornakapi.web.MissingParameterException: file");
    }

    @Test
    public void test04499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04499");
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet0 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        setPreferenceServlet0.init();
        setPreferenceServlet0.init();
        java.lang.String str3 = setPreferenceServlet0.getServletInfo();
        setPreferenceServlet0.init();
        javax.servlet.ServletConfig servletConfig5 = setPreferenceServlet0.getServletConfig();
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet6 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet6.destroy();
        deleteCandidateServlet6.destroy();
        setPreferenceServlet0.init((javax.servlet.ServletConfig) deleteCandidateServlet6);
        org.plista.kornakapi.web.servlets.DeleteCandidateServlet deleteCandidateServlet10 = new org.plista.kornakapi.web.servlets.DeleteCandidateServlet();
        deleteCandidateServlet10.destroy();
        javax.servlet.ServletConfig servletConfig12 = deleteCandidateServlet10.getServletConfig();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet13 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str14 = batchDeleteCandidatesServlet13.getServletInfo();
        java.lang.String str15 = batchDeleteCandidatesServlet13.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet16 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet17 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet18 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet17.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet18);
        setPreferenceServlet16.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet18);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet21 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet16.init((javax.servlet.ServletConfig) recommendServlet21);
        batchDeleteCandidatesServlet13.init((javax.servlet.ServletConfig) setPreferenceServlet16);
        setPreferenceServlet16.destroy();
        deleteCandidateServlet10.init((javax.servlet.ServletConfig) setPreferenceServlet16);
        deleteCandidateServlet6.init((javax.servlet.ServletConfig) deleteCandidateServlet10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration27 = deleteCandidateServlet6.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(servletConfig5);
        org.junit.Assert.assertNull(servletConfig12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test04500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04500");
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet0 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        java.lang.String str1 = batchDeleteCandidatesServlet0.getServletInfo();
        java.lang.String str2 = batchDeleteCandidatesServlet0.getServletInfo();
        org.plista.kornakapi.web.servlets.SetPreferenceServlet setPreferenceServlet3 = new org.plista.kornakapi.web.servlets.SetPreferenceServlet();
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet4 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet batchDeleteCandidatesServlet5 = new org.plista.kornakapi.web.servlets.BatchDeleteCandidatesServlet();
        recommendServlet4.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        setPreferenceServlet3.init((javax.servlet.ServletConfig) batchDeleteCandidatesServlet5);
        org.plista.kornakapi.web.servlets.RecommendServlet recommendServlet8 = new org.plista.kornakapi.web.servlets.RecommendServlet();
        setPreferenceServlet3.init((javax.servlet.ServletConfig) recommendServlet8);
        batchDeleteCandidatesServlet0.init((javax.servlet.ServletConfig) setPreferenceServlet3);
        setPreferenceServlet3.destroy();
        setPreferenceServlet3.init();
        javax.servlet.ServletConfig servletConfig13 = setPreferenceServlet3.getServletConfig();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration enumeration14 = setPreferenceServlet3.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(servletConfig13);
    }
}
